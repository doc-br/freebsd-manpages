# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/mbuf.9:27
#, no-wrap
msgid "September 27, 2017"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/mbuf.9:28
#, no-wrap
msgid "MBUF 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:33
msgid "E<.Nm mbuf>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/mbuf.9:33
#, no-wrap
msgid "memory management in the kernel IPC subsystem"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:35
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mbuf.9:36
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mbuf.9:37
#, no-wrap
msgid "sys/systm.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mbuf.9:38
#, no-wrap
msgid "sys/mbuf.h"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mbuf.9:40
#, no-wrap
msgid "Mbuf allocation macros"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:56
msgid ""
"E<.Fn MGET \"struct mbuf *mbuf\" \"int how\" \"short type\"> E<.Fn MGETHDR "
"\"struct mbuf *mbuf\" \"int how\" \"short type\"> E<.Ft int> E<.Fn MCLGET "
"\"struct mbuf *mbuf\" \"int how\"> E<.Fo MEXTADD> E<.Fa \"struct mbuf "
"*mbuf\"> E<.Fa \"char *buf\"> E<.Fa \"u_int size\"> E<.Fa \"void "
"(*free)(struct mbuf *)\"> E<.Fa \"void *opt_arg1\"> E<.Fa \"void "
"*opt_arg2\"> E<.Fa \"int flags\"> E<.Fa \"int type\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mbuf.9:56
#, no-wrap
msgid "Mbuf utility macros"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:70
msgid ""
"E<.Fn mtod \"struct mbuf *mbuf\" \"type\"> E<.Fn M_ALIGN \"struct mbuf "
"*mbuf\" \"u_int len\"> E<.Fn MH_ALIGN \"struct mbuf *mbuf\" \"u_int len\"> "
"E<.Ft int> E<.Fn M_LEADINGSPACE \"struct mbuf *mbuf\"> E<.Ft int> E<.Fn "
"M_TRAILINGSPACE \"struct mbuf *mbuf\"> E<.Fn M_MOVE_PKTHDR \"struct mbuf "
"*to\" \"struct mbuf *from\"> E<.Fn M_PREPEND \"struct mbuf *mbuf\" \"int "
"len\" \"int how\"> E<.Fn MCHTYPE \"struct mbuf *mbuf\" \"short type\"> E<.Ft "
"int> E<.Fn M_WRITABLE \"struct mbuf *mbuf\">"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mbuf.9:70
#, no-wrap
msgid "Mbuf allocation functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:88
msgid ""
"E<.Ft struct mbuf *> E<.Fn m_get \"int how\" \"short type\"> E<.Ft struct "
"mbuf *> E<.Fn m_get2 \"int size\" \"int how\" \"short type\" \"int flags\"> "
"E<.Ft struct mbuf *> E<.Fn m_getm \"struct mbuf *orig\" \"int len\" \"int "
"how\" \"short type\"> E<.Ft struct mbuf *> E<.Fn m_getjcl \"int how\" "
"\"short type\" \"int flags\" \"int size\"> E<.Ft struct mbuf *> E<.Fn "
"m_getcl \"int how\" \"short type\" \"int flags\"> E<.Ft struct mbuf *> E<.Fn "
"m_gethdr \"int how\" \"short type\"> E<.Ft struct mbuf *> E<.Fn m_free "
"\"struct mbuf *mbuf\"> E<.Ft void> E<.Fn m_freem \"struct mbuf *mbuf\">"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mbuf.9:88
#, no-wrap
msgid "Mbuf utility functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:146
msgid ""
"E<.Ft void> E<.Fn m_adj \"struct mbuf *mbuf\" \"int len\"> E<.Ft void> E<.Fn "
"m_align \"struct mbuf *mbuf\" \"int len\"> E<.Ft int> E<.Fn m_append "
"\"struct mbuf *mbuf\" \"int len\" \"c_caddr_t cp\"> E<.Ft struct mbuf *> "
"E<.Fn m_prepend \"struct mbuf *mbuf\" \"int len\" \"int how\"> E<.Ft struct "
"mbuf *> E<.Fn m_copyup \"struct mbuf *mbuf\" \"int len\" \"int dstoff\"> "
"E<.Ft struct mbuf *> E<.Fn m_pullup \"struct mbuf *mbuf\" \"int len\"> E<.Ft "
"struct mbuf *> E<.Fn m_pulldown \"struct mbuf *mbuf\" \"int offset\" \"int "
"len\" \"int *offsetp\"> E<.Ft struct mbuf *> E<.Fn m_copym \"struct mbuf "
"*mbuf\" \"int offset\" \"int len\" \"int how\"> E<.Ft struct mbuf *> E<.Fn "
"m_copypacket \"struct mbuf *mbuf\" \"int how\"> E<.Ft struct mbuf *> E<.Fn "
"m_dup \"const struct mbuf *mbuf\" \"int how\"> E<.Ft void> E<.Fn m_copydata "
"\"const struct mbuf *mbuf\" \"int offset\" \"int len\" \"caddr_t buf\"> "
"E<.Ft void> E<.Fn m_copyback \"struct mbuf *mbuf\" \"int offset\" \"int "
"len\" \"caddr_t buf\"> E<.Ft struct mbuf *> E<.Fo m_devget> E<.Fa \"char "
"*buf\"> E<.Fa \"int len\"> E<.Fa \"int offset\"> E<.Fa \"struct ifnet "
"*ifp\"> E<.Fa \"void (*copy)(char *from, caddr_t to, u_int len)\"> E<.Fc> "
"E<.Ft void> E<.Fn m_cat \"struct mbuf *m\" \"struct mbuf *n\"> E<.Ft void> "
"E<.Fn m_catpkt \"struct mbuf *m\" \"struct mbuf *n\"> E<.Ft u_int> E<.Fn "
"m_fixhdr \"struct mbuf *mbuf\"> E<.Ft int> E<.Fn m_dup_pkthdr \"struct mbuf "
"*to\" \"const struct mbuf *from\" \"int how\"> E<.Ft void> E<.Fn "
"m_move_pkthdr \"struct mbuf *to\" \"struct mbuf *from\"> E<.Ft u_int> E<.Fn "
"m_length \"struct mbuf *mbuf\" \"struct mbuf **last\"> E<.Ft struct mbuf *> "
"E<.Fn m_split \"struct mbuf *mbuf\" \"int len\" \"int how\"> E<.Ft int> "
"E<.Fn m_apply \"struct mbuf *mbuf\" \"int off\" \"int len\" \"int (*f)(void "
"*arg, void *data, u_int len)\" \"void *arg\"> E<.Ft struct mbuf *> E<.Fn "
"m_getptr \"struct mbuf *mbuf\" \"int loc\" \"int *off\"> E<.Ft struct mbuf "
"*> E<.Fn m_defrag \"struct mbuf *m0\" \"int how\"> E<.Ft struct mbuf *> "
"E<.Fn m_collapse \"struct mbuf *m0\" \"int how\" \"int maxfrags\"> E<.Ft "
"struct mbuf *> E<.Fn m_unshare \"struct mbuf *m0\" \"int how\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:146
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:159
msgid ""
"An E<.Vt mbuf> is a basic unit of memory management in the kernel IPC "
"subsystem.  Network packets and socket buffers are stored in E<.Vt mbufs>.  "
"A network packet may span multiple E<.Vt mbufs> arranged into a E<.Vt mbuf "
"chain> (linked list), which allows adding or trimming network headers with "
"little overhead."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:166
msgid ""
"While a developer should not bother with E<.Vt mbuf> internals without "
"serious reason in order to avoid incompatibilities with future changes, it "
"is useful to understand the general structure of an E<.Vt mbuf>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:175
msgid ""
"An E<.Vt mbuf> consists of a variable-sized header and a small internal "
"buffer for data.  The total size of an E<.Vt mbuf>, E<.Dv MSIZE>, is a "
"constant defined in"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mbuf.9:175
#, no-wrap
msgid "sys/param.h ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:179
msgid "The E<.Vt mbuf> header includes:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:180
#, no-wrap
msgid "Va m_next"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:186
msgid ""
"E<.Pq Vt struct mbuf *> A pointer to the next E<.Vt mbuf> in the E<.Vt mbuf "
"chain>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:186
#, no-wrap
msgid "Va m_nextpkt"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:191
msgid ""
"E<.Pq Vt struct mbuf *> A pointer to the next E<.Vt mbuf chain> in the "
"queue."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:191
#, no-wrap
msgid "Va m_data"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:195
msgid "E<.Pq Vt caddr_t> A pointer to data attached to this E<.Vt mbuf>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:195
#, no-wrap
msgid "Va m_len"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:198
msgid "E<.Pq Vt int> The length of the data."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:198
#, no-wrap
msgid "Va m_type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:201
msgid "E<.Pq Vt short> The type of the data."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:201
#, no-wrap
msgid "Va m_flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:206
msgid "E<.Pq Vt int> The E<.Vt mbuf> flags."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:211
msgid "The E<.Vt mbuf> flag bits are defined as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:229
#, no-wrap
msgid ""
"/* mbuf flags */\n"
"#define\tM_EXT\t\t0x00000001 /* has associated external storage */\n"
"#define\tM_PKTHDR\t0x00000002 /* start of record */\n"
"#define\tM_EOR\t\t0x00000004 /* end of record */\n"
"#define\tM_RDONLY\t0x00000008 /* associated data marked read-only */\n"
"#define\tM_PROTO1\t0x00001000 /* protocol-specific */\n"
"#define\tM_PROTO2\t0x00002000 /* protocol-specific */\n"
"#define\tM_PROTO3\t0x00004000 /* protocol-specific */\n"
"#define\tM_PROTO4\t0x00008000 /* protocol-specific */\n"
"#define\tM_PROTO5\t0x00010000 /* protocol-specific */\n"
"#define\tM_PROTO6\t0x00020000 /* protocol-specific */\n"
"#define\tM_PROTO7\t0x00040000 /* protocol-specific */\n"
"#define\tM_PROTO8\t0x00080000 /* protocol-specific */\n"
"#define\tM_PROTO9\t0x00100000 /* protocol-specific */\n"
"#define\tM_PROTO10\t0x00200000 /* protocol-specific */\n"
"#define\tM_PROTO11\t0x00400000 /* protocol-specific */\n"
"#define\tM_PROTO12\t0x00800000 /* protocol-specific */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:233
#, no-wrap
msgid ""
"/* mbuf pkthdr flags (also stored in m_flags) */\n"
"#define\tM_BCAST\t\t0x00000010 /* send/received as link-level broadcast */\n"
"#define\tM_MCAST\t\t0x00000020 /* send/received as link-level multicast */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:238
msgid "The available E<.Vt mbuf> types are defined as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:245
#, no-wrap
msgid ""
"/* mbuf types */\n"
"#define\tMT_DATA\t\t1\t/* dynamic (data) allocation */\n"
"#define\tMT_HEADER\tMT_DATA\t/* packet header */\n"
"#define\tMT_SONAME\t8\t/* socket name */\n"
"#define\tMT_CONTROL\t14\t/* extra-data protocol message */\n"
"#define\tMT_OOBDATA\t15\t/* expedited data */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:248
msgid "The available external buffer types are defined as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:261
#, no-wrap
msgid ""
"/* external buffer types */\n"
"#define EXT_CLUSTER\t1\t/* mbuf cluster */\n"
"#define EXT_SFBUF\t2\t/* sendfile(2)'s sf_bufs */\n"
"#define EXT_JUMBOP\t3\t/* jumbo cluster 4096 bytes */\n"
"#define EXT_JUMBO9\t4\t/* jumbo cluster 9216 bytes */\n"
"#define EXT_JUMBO16\t5\t/* jumbo cluster 16184 bytes */\n"
"#define EXT_PACKET\t6\t/* mbuf+cluster from packet zone */\n"
"#define EXT_MBUF\t7\t/* external mbuf reference */\n"
"#define EXT_NET_DRV\t252\t/* custom ext_buf provided by net driver(s) */\n"
"#define EXT_MOD_TYPE\t253\t/* custom module's ext_buf type */\n"
"#define EXT_DISPOSABLE\t254\t/* can throw this buffer away w/page flipping "
"*/\n"
"#define EXT_EXTREF\t255\t/* has externally maintained ref_cnt ptr */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:286
msgid ""
"If the E<.Dv M_PKTHDR> flag is set, a E<.Vt struct pkthdr Va m_pkthdr> is "
"added to the E<.Vt mbuf> header.  It contains a pointer to the interface the "
"packet has been received from E<.Pq Vt struct ifnet Va *rcvif>, and the "
"total packet length E<.Pq Vt int Va len>.  Optionally, it may also contain "
"an attached list of packet tags E<.Pq Vt \"struct m_tag\">.  See E<.Xr "
"mbuf_tags 9> for details.  Fields used in offloading checksum calculation to "
"the hardware are kept in E<.Va m_pkthdr> as well.  See E<.Sx "
"HARDWARE-ASSISTED CHECKSUM CALCULATION> for details."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:303
msgid ""
"If small enough, data is stored in the internal data buffer of an E<.Vt "
"mbuf>.  If the data is sufficiently large, another E<.Vt mbuf> may be added "
"to the E<.Vt mbuf chain>, or external storage may be associated with the "
"E<.Vt mbuf>.  E<.Dv MHLEN> bytes of data can fit into an E<.Vt mbuf> with "
"the E<.Dv M_PKTHDR> flag set, E<.Dv MLEN> bytes can otherwise."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:318
msgid ""
"If external storage is being associated with an E<.Vt mbuf>, the E<.Va "
"m_ext> header is added at the cost of losing the internal data buffer.  It "
"includes a pointer to external storage, the size of the storage, a pointer "
"to a function used for freeing the storage, a pointer to an optional "
"argument that can be passed to the function, and a pointer to a reference "
"counter.  An E<.Vt mbuf> using external storage has the E<.Dv M_EXT> flag "
"set."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:322
msgid ""
"The system supplies a macro for allocating the desired external storage "
"buffer, E<.Dv MEXTADD>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:325
msgid ""
"The allocation and management of the reference counter is handled by the "
"subsystem."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:350
msgid ""
"The system also supplies a default type of external storage buffer called an "
"E<.Vt mbuf cluster>.  E<.Vt Mbuf clusters> can be allocated and configured "
"with the use of the E<.Dv MCLGET> macro.  Each E<.Vt mbuf cluster> is E<.Dv "
"MCLBYTES> in size, where MCLBYTES is a machine-dependent constant.  The "
"system defines an advisory macro E<.Dv MINCLSIZE>, which is the smallest "
"amount of data to put into an E<.Vt mbuf cluster>.  It is equal to E<.Dv "
"MHLEN> plus one.  It is typically preferable to store data into the data "
"region of an E<.Vt mbuf>, if size permits, as opposed to allocating a "
"separate E<.Vt mbuf cluster> to hold the same data."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mbuf.9:350
#, no-wrap
msgid "Macros and Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:354
msgid ""
"There are numerous predefined macros and functions that provide the "
"developer with common utilities."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:355
#, no-wrap
msgid "Fn mtod mbuf type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:367
msgid ""
"Convert an E<.Fa mbuf> pointer to a data pointer.  The macro expands to the "
"data pointer cast to the specified E<.Fa type>.  E<.Sy Note>: It is "
"advisable to ensure that there is enough contiguous data in E<.Fa mbuf>.  "
"See E<.Fn m_pullup> for details."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:367
#, no-wrap
msgid "Fn MGET mbuf how type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:389
msgid ""
"Allocate an E<.Vt mbuf> and initialize it to contain internal data.  E<.Fa "
"mbuf> will point to the allocated E<.Vt mbuf> on success, or be set to E<.Dv "
"NULL> on failure.  The E<.Fa how> argument is to be set to E<.Dv M_WAITOK> "
"or E<.Dv M_NOWAIT>.  It specifies whether the caller is willing to block if "
"necessary.  A number of other functions and macros related to E<.Vt mbufs> "
"have the same argument because they may at some point need to allocate new "
"E<.Vt mbufs>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:389
#, no-wrap
msgid "Fn MGETHDR mbuf how type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:397
msgid ""
"Allocate an E<.Vt mbuf> and initialize it to contain a packet header and "
"internal data.  See E<.Fn MGET> for details."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:397
#, no-wrap
msgid "Fn MEXTADD mbuf buf size free opt_arg1 opt_arg2 flags type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:440
msgid ""
"Associate externally managed data with E<.Fa mbuf>.  Any internal data "
"contained in the mbuf will be discarded, and the E<.Dv M_EXT> flag will be "
"set.  The E<.Fa buf> and E<.Fa size> arguments are the address and length, "
"respectively, of the data.  The E<.Fa free> argument points to a function "
"which will be called to free the data when the mbuf is freed; it is only "
"used if E<.Fa type> is E<.Dv EXT_EXTREF>.  The E<.Fa opt_arg1> and E<.Fa "
"opt_arg2> arguments will be saved in E<.Va ext_arg1> and E<.Va ext_arg2> "
"fields of the E<.Va struct m_ext> of the mbuf.  The E<.Fa flags> argument "
"specifies additional E<.Vt mbuf> flags; it is not necessary to specify E<.Dv "
"M_EXT>.  Finally, the E<.Fa type> argument specifies the type of external "
"data, which controls how it will be disposed of when the E<.Vt mbuf> is "
"freed.  In most cases, the correct value is E<.Dv EXT_EXTREF>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:440
#, no-wrap
msgid "Fn MCLGET mbuf how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:451
msgid ""
"Allocate and attach an E<.Vt mbuf cluster> to E<.Fa mbuf>.  On success, a "
"non-zero value returned; otherwise, 0.  Historically, consumers would check "
"for success by testing the E<.Dv M_EXT> flag on the mbuf, but this is now "
"discouraged to avoid unnecessary awareness of the implementation of external "
"storage in protocol stacks and device drivers."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:451
#, no-wrap
msgid "Fn M_ALIGN mbuf len"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:465
msgid ""
"Set the pointer E<.Fa mbuf-E<gt>m_data> to place an object of the size E<.Fa "
"len> at the end of the internal data area of E<.Fa mbuf>, long word "
"aligned.  Applicable only if E<.Fa mbuf> is newly allocated with E<.Fn MGET> "
"or E<.Fn m_get>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:465
#, no-wrap
msgid "Fn MH_ALIGN mbuf len"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:478
msgid ""
"Serves the same purpose as E<.Fn M_ALIGN> does, but only for E<.Fa mbuf> "
"newly allocated with E<.Fn MGETHDR> or E<.Fn m_gethdr>, or initialized by "
"E<.Fn m_dup_pkthdr> or E<.Fn m_move_pkthdr>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:478
#, no-wrap
msgid "Fn m_align mbuf len"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:482
msgid "Services the same purpose as E<.Fn M_ALIGN> but handles any type of mbuf."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:482
#, no-wrap
msgid "Fn M_LEADINGSPACE mbuf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:486
msgid ""
"Returns the number of bytes available before the beginning of data in E<.Fa "
"mbuf>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:486
#, no-wrap
msgid "Fn M_TRAILINGSPACE mbuf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:489
msgid "Returns the number of bytes available after the end of data in E<.Fa mbuf>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:489
#, no-wrap
msgid "Fn M_PREPEND mbuf len how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:503
msgid ""
"This macro operates on an E<.Vt mbuf chain>.  It is an optimized wrapper for "
"E<.Fn m_prepend> that can make use of possible empty space before data "
"(e.g.\\& left after trimming of a link-layer header).  The new E<.Vt mbuf "
"chain> pointer or E<.Dv NULL> is in E<.Fa mbuf> after the call."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:503
#, no-wrap
msgid "Fn M_MOVE_PKTHDR to from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:506
msgid "Using this macro is equivalent to calling E<.Fn m_move_pkthdr to from>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:506
#, no-wrap
msgid "Fn M_WRITABLE mbuf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:529
msgid ""
"This macro will evaluate true if E<.Fa mbuf> is not marked E<.Dv M_RDONLY> "
"and if either E<.Fa mbuf> does not contain external storage or, if it does, "
"then if the reference count of the storage is not greater than 1.  The E<.Dv "
"M_RDONLY> flag can be set in E<.Fa mbuf-E<gt>m_flags>.  This can be achieved "
"during setup of the external storage, by passing the E<.Dv M_RDONLY> bit as "
"a E<.Fa flags> argument to the E<.Fn MEXTADD> macro, or can be directly set "
"in individual E<.Vt mbufs>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:529
#, no-wrap
msgid "Fn MCHTYPE mbuf type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:535
msgid ""
"Change the type of E<.Fa mbuf> to E<.Fa type>.  This is a relatively "
"expensive operation and should be avoided."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:538
msgid "The functions are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:539
#, no-wrap
msgid "Fn m_get how type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:543
msgid "A function version of E<.Fn MGET> for non-critical paths."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:543
#, no-wrap
msgid "Fn m_get2 size how type flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:547
msgid "Allocate an E<.Vt mbuf> with enough space to hold specified amount of data."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:547
#, no-wrap
msgid "Fn m_getm orig len how type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:583
msgid ""
"Allocate E<.Fa len> bytes worth of E<.Vt mbufs> and E<.Vt mbuf clusters> if "
"necessary and append the resulting allocated E<.Vt mbuf chain> to the E<.Vt "
"mbuf chain> E<.Fa orig>, if it is E<.No non- Ns Dv NULL>.  If the allocation "
"fails at any point, free whatever was allocated and return E<.Dv NULL>.  If "
"E<.Fa orig> is E<.No non- Ns Dv NULL>, it will not be freed.  It is possible "
"to use E<.Fn m_getm> to either append E<.Fa len> bytes to an existing E<.Vt "
"mbuf> or E<.Vt mbuf chain> (for example, one which may be sitting in a "
"pre-allocated ring)  or to simply perform an all-or-nothing E<.Vt mbuf> and "
"E<.Vt mbuf cluster> allocation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:583
#, no-wrap
msgid "Fn m_gethdr how type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:587
msgid "A function version of E<.Fn MGETHDR> for non-critical paths."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:587
#, no-wrap
msgid "Fn m_getcl how type flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:602
msgid ""
"Fetch an E<.Vt mbuf> with a E<.Vt mbuf cluster> attached to it.  If one of "
"the allocations fails, the entire allocation fails.  This routine is the "
"preferred way of fetching both the E<.Vt mbuf> and E<.Vt mbuf cluster> "
"together, as it avoids having to unlock/relock between allocations.  Returns "
"E<.Dv NULL> on failure."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:602
#, no-wrap
msgid "Fn m_getjcl how type flags size"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:608
msgid ""
"This is like E<.Fn m_getcl> but it the size of the cluster allocated will be "
"large enough for E<.Fa size> bytes."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:608
#, no-wrap
msgid "Fn m_free mbuf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:615
msgid "Frees E<.Vt mbuf>.  Returns E<.Va m_next> of the freed E<.Vt mbuf>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:619
msgid "The functions below operate on E<.Vt mbuf chains>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:620
#, no-wrap
msgid "Fn m_freem mbuf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:625
msgid "Free an entire E<.Vt mbuf chain>, including any external storage."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:625
#, no-wrap
msgid "Fn m_adj mbuf len"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:634
msgid ""
"Trim E<.Fa len> bytes from the head of an E<.Vt mbuf chain> if E<.Fa len> is "
"positive, from the tail otherwise."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:634
#, no-wrap
msgid "Fn m_append mbuf len cp"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:644
msgid ""
"Append E<.Vt len> bytes of data E<.Vt cp> to the E<.Vt mbuf chain>.  Extend "
"the mbuf chain if the new data does not fit in existing space."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:644
#, no-wrap
msgid "Fn m_prepend mbuf len how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:665
msgid ""
"Allocate a new E<.Vt mbuf> and prepend it to the E<.Vt mbuf chain>, handle "
"E<.Dv M_PKTHDR> properly.  E<.Sy Note>: It does not allocate any E<.Vt mbuf "
"clusters>, so E<.Fa len> must be less than E<.Dv MLEN> or E<.Dv MHLEN>, "
"depending on the E<.Dv M_PKTHDR> flag setting."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:665
#, no-wrap
msgid "Fn m_copyup mbuf len dstoff"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:692
msgid ""
"Similar to E<.Fn m_pullup> but copies E<.Fa len> bytes of data into a new "
"mbuf at E<.Fa dstoff> bytes into the mbuf.  The E<.Fa dstoff> argument "
"aligns the data and leaves room for a link layer header.  Returns the new "
"E<.Vt mbuf chain> on success, and frees the E<.Vt mbuf chain> and returns "
"E<.Dv NULL> on failure.  E<.Sy Note>: The function does not allocate E<.Vt "
"mbuf clusters>, so E<.Fa len + dstoff> must be less than E<.Dv MHLEN>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:692
#, no-wrap
msgid "Fn m_pullup mbuf len"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:721
msgid ""
"Arrange that the first E<.Fa len> bytes of an E<.Vt mbuf chain> are "
"contiguous and lay in the data area of E<.Fa mbuf>, so they are accessible "
"with E<.Fn mtod mbuf type>.  It is important to remember that this may "
"involve reallocating some mbufs and moving data so all pointers referencing "
"data within the old mbuf chain must be recalculated or made invalid.  Return "
"the new E<.Vt mbuf chain> on success, E<.Dv NULL> on failure (the E<.Vt mbuf "
"chain> is freed in this case).  E<.Sy Note>: It does not allocate any E<.Vt "
"mbuf clusters>, so E<.Fa len> must be less than or equal to E<.Dv MHLEN>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:721
#, no-wrap
msgid "Fn m_pulldown mbuf offset len offsetp"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:759
msgid ""
"Arrange that E<.Fa len> bytes between E<.Fa offset> and E<.Fa offset + len> "
"in the E<.Vt mbuf chain> are contiguous and lay in the data area of E<.Fa "
"mbuf>, so they are accessible with E<.Fn mtod mbuf type>.  E<.Fa len> must "
"be smaller than, or equal to, the size of an E<.Vt mbuf cluster>.  Return a "
"pointer to an intermediate E<.Vt mbuf> in the chain containing the requested "
"region; the offset in the data region of the E<.Vt mbuf chain> to the data "
"contained in the returned mbuf is stored in E<.Fa *offsetp>.  If E<.Fa "
"offsetp> is NULL, the region may be accessed using E<.Fn mtod mbuf type>.  "
"If E<.Fa offsetp> is non-NULL, the region may be accessed using E<.Fn mtod "
"mbuf uint8_t> + *offsetp.  The region of the mbuf chain between its "
"beginning and E<.Fa offset> is not modified, therefore it is safe to hold "
"pointers to data within this region before calling E<.Fn m_pulldown>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:759
#, no-wrap
msgid "Fn m_copym mbuf offset len how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:778
msgid ""
"Make a copy of an E<.Vt mbuf chain> starting E<.Fa offset> bytes from the "
"beginning, continuing for E<.Fa len> bytes.  If E<.Fa len> is E<.Dv "
"M_COPYALL>, copy to the end of the E<.Vt mbuf chain>.  E<.Sy Note>: The copy "
"is read-only, because the E<.Vt mbuf clusters> are not copied, only their "
"reference counts are incremented."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:778
#, no-wrap
msgid "Fn m_copypacket mbuf how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:787
msgid ""
"Copy an entire packet including header, which must be present.  This is an "
"optimized version of the common case E<.Fn m_copym mbuf 0 M_COPYALL how>.  "
"E<.Sy Note>: the copy is read-only, because the E<.Vt mbuf clusters> are not "
"copied, only their reference counts are incremented."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:787
#, no-wrap
msgid "Fn m_dup mbuf how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:799
msgid ""
"Copy a packet header E<.Vt mbuf chain> into a completely new E<.Vt mbuf "
"chain>, including copying any E<.Vt mbuf clusters>.  Use this instead of "
"E<.Fn m_copypacket> when you need a writable copy of an E<.Vt mbuf chain>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:799
#, no-wrap
msgid "Fn m_copydata mbuf offset len buf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:809
msgid ""
"Copy data from an E<.Vt mbuf chain> starting E<.Fa off> bytes from the "
"beginning, continuing for E<.Fa len> bytes, into the indicated buffer E<.Fa "
"buf>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:809
#, no-wrap
msgid "Fn m_copyback mbuf offset len buf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:838
msgid ""
"Copy E<.Fa len> bytes from the buffer E<.Fa buf> back into the indicated "
"E<.Vt mbuf chain>, starting at E<.Fa offset> bytes from the beginning of the "
"E<.Vt mbuf chain>, extending the E<.Vt mbuf chain> if necessary.  E<.Sy "
"Note>: It does not allocate any E<.Vt mbuf clusters>, just adds E<.Vt mbufs> "
"to the E<.Vt mbuf chain>.  It is safe to set E<.Fa offset> beyond the "
"current E<.Vt mbuf chain> end: zeroed E<.Vt mbufs> will be allocated to fill "
"the space."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:838
#, no-wrap
msgid "Fn m_length mbuf last"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:844
msgid ""
"Return the length of the E<.Vt mbuf chain>, and optionally a pointer to the "
"last E<.Vt mbuf>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:844
#, no-wrap
msgid "Fn m_dup_pkthdr to from how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:862
msgid ""
"Upon the function's completion, the E<.Vt mbuf> E<.Fa to> will contain an "
"identical copy of E<.Fa from-E<gt>m_pkthdr> and the per-packet attributes "
"found in the E<.Vt mbuf chain> E<.Fa from>.  The E<.Vt mbuf> E<.Fa from> "
"must have the flag E<.Dv M_PKTHDR> initially set, and E<.Fa to> must be "
"empty on entry."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:862
#, no-wrap
msgid "Fn m_move_pkthdr to from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:885
msgid ""
"Move E<.Va m_pkthdr> and the per-packet attributes from the E<.Vt mbuf "
"chain> E<.Fa from> to the E<.Vt mbuf> E<.Fa to>.  The E<.Vt mbuf> E<.Fa "
"from> must have the flag E<.Dv M_PKTHDR> initially set, and E<.Fa to> must "
"be empty on entry.  Upon the function's completion, E<.Fa from> will have "
"the flag E<.Dv M_PKTHDR> and the per-packet attributes cleared."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:885
#, no-wrap
msgid "Fn m_fixhdr mbuf"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:889
msgid "Set the packet-header length to the length of the E<.Vt mbuf chain>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:889
#, no-wrap
msgid "Fn m_devget buf len offset ifp copy"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:903
msgid ""
"Copy data from a device local memory pointed to by E<.Fa buf> to an E<.Vt "
"mbuf chain>.  The copy is done using a specified copy routine E<.Fa copy>, "
"or E<.Fn bcopy> if E<.Fa copy> is E<.Dv NULL>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:903
#, no-wrap
msgid "Fn m_cat m n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:918
msgid ""
"Concatenate E<.Fa n> to E<.Fa m>.  Both E<.Vt mbuf chains> must be of the "
"same type.  E<.Fa n> is not guaranteed to be valid after E<.Fn m_cat> "
"returns.  E<.Fn m_cat> does not update any packet header fields or free mbuf "
"tags."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:918
#, no-wrap
msgid "Fn m_catpkt m n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:932
msgid ""
"A variant of E<.Fn m_cat> that operates on packets.  Both E<.Fa m> and E<.Fa "
"n> must contain packet headers.  E<.Fa n> is not guaranteed to be valid "
"after E<.Fn m_catpkt> returns."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:932
#, no-wrap
msgid "Fn m_split mbuf len how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:945
msgid ""
"Partition an E<.Vt mbuf chain> in two pieces, returning the tail: all but "
"the first E<.Fa len> bytes.  In case of failure, it returns E<.Dv NULL> and "
"attempts to restore the E<.Vt mbuf chain> to its original state."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:945
#, no-wrap
msgid "Fn m_apply mbuf off len f arg"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:959
msgid ""
"Apply a function to an E<.Vt mbuf chain>, at offset E<.Fa off>, for length "
"E<.Fa len> bytes.  Typically used to avoid calls to E<.Fn m_pullup> which "
"would otherwise be unnecessary or undesirable.  E<.Fa arg> is a convenience "
"argument which is passed to the callback function E<.Fa f>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:969
msgid ""
"Each time E<.Fn f> is called, it will be passed E<.Fa arg>, a pointer to the "
"E<.Fa data> in the current mbuf, and the length E<.Fa len> of the data in "
"this mbuf to which the function should be applied."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:976
msgid ""
"The function should return zero to indicate success; otherwise, if an error "
"is indicated, then E<.Fn m_apply> will return the error and stop iterating "
"through the E<.Vt mbuf chain>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:976
#, no-wrap
msgid "Fn m_getptr mbuf loc off"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:983
msgid ""
"Return a pointer to the mbuf containing the data located at E<.Fa loc> bytes "
"from the beginning of the E<.Vt mbuf chain>.  The corresponding offset into "
"the mbuf will be stored in E<.Fa *off>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:983
#, no-wrap
msgid "Fn m_defrag m0 how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:997
msgid ""
"Defragment an mbuf chain, returning the shortest possible chain of mbufs and "
"clusters.  If allocation fails and this can not be completed, E<.Dv NULL> "
"will be returned and the original chain will be unchanged.  Upon success, "
"the original chain will be freed and the new chain will be returned.  E<.Fa "
"how> should be either E<.Dv M_WAITOK> or E<.Dv M_NOWAIT>, depending on the "
"caller's preference."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1001
msgid ""
"This function is especially useful in network drivers, where certain long "
"mbuf chains must be shortened before being added to TX descriptor lists."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1001
#, no-wrap
msgid "Fn m_collapse m0 how maxfrags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1015
msgid ""
"Defragment an mbuf chain, returning a chain of at most E<.Fa maxfrags> mbufs "
"and clusters.  If allocation fails or the chain cannot be collapsed as "
"requested, E<.Dv NULL> will be returned, with the original chain possibly "
"modified.  As with E<.Fn m_defrag>, E<.Fa how> should be one of E<.Dv "
"M_WAITOK> or E<.Dv M_NOWAIT>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1015
#, no-wrap
msgid "Fn m_unshare m0 how"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1031
msgid ""
"Create a version of the specified mbuf chain whose contents can be safely "
"modified without affecting other users.  If allocation fails and this "
"operation can not be completed, E<.Dv NULL> will be returned.  The original "
"mbuf chain is always reclaimed and the reference count of any shared mbuf "
"clusters is decremented.  E<.Fa how> should be either E<.Dv M_WAITOK> or "
"E<.Dv M_NOWAIT>, depending on the caller's preference.  As a side-effect of "
"this process the returned mbuf chain may be compacted."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1035
msgid ""
"This function is especially useful in the transmit path of network code, "
"when data must be encrypted or otherwise altered prior to transmission."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:1036
#, no-wrap
msgid "HARDWARE-ASSISTED CHECKSUM CALCULATION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1062
msgid ""
"This section currently applies to TCP/IP only.  In order to save the host "
"CPU resources, computing checksums is offloaded to the network interface "
"hardware if possible.  The E<.Va m_pkthdr> member of the leading E<.Vt mbuf> "
"of a packet contains two fields used for that purpose, E<.Vt int Va "
"csum_flags> and E<.Vt int Va csum_data>.  The meaning of those fields "
"depends on the direction a packet flows in, and on whether the packet is "
"fragmented.  Henceforth, E<.Va csum_flags> or E<.Va csum_data> of a packet "
"will denote the corresponding field of the E<.Va m_pkthdr> member of the "
"leading E<.Vt mbuf> in the E<.Vt mbuf chain> containing the packet."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1079
msgid ""
"On output, checksum offloading is attempted after the outgoing interface has "
"been determined for a packet.  The interface-specific field E<.Va "
"ifnet.if_data.ifi_hwassist> (see E<.Xr ifnet 9>)  is consulted for the "
"capabilities of the interface to assist in computing checksums.  The E<.Va "
"csum_flags> field of the packet header is set to indicate which actions the "
"interface is supposed to perform on it.  The actions unsupported by the "
"network interface are done in the software prior to passing the packet down "
"to the interface driver; such actions will never be requested through E<.Va "
"csum_flags>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1081
msgid "The flags demanding a particular action from an interface are as follows:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1082
#, no-wrap
msgid "Dv CSUM_IP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1087
msgid ""
"The IP header checksum is to be computed and stored in the corresponding "
"field of the packet.  The hardware is expected to know the format of an IP "
"header to determine the offset of the IP checksum field."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1087
#, no-wrap
msgid "Dv CSUM_TCP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1090
msgid "The TCP checksum is to be computed.  (See below.)"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1090
#, no-wrap
msgid "Dv CSUM_UDP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1093
msgid "The UDP checksum is to be computed.  (See below.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1103
msgid ""
"Should a TCP or UDP checksum be offloaded to the hardware, the field E<.Va "
"csum_data> will contain the byte offset of the checksum field relative to "
"the end of the IP header.  In this case, the checksum field will be "
"initially set by the TCP/IP module to the checksum of the pseudo header "
"defined by the TCP and UDP specifications."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1108
msgid ""
"On input, an interface indicates the actions it has performed on a packet by "
"setting one or more of the following flags in E<.Va csum_flags> associated "
"with the packet:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1109
#, no-wrap
msgid "Dv CSUM_IP_CHECKED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1111
msgid "The IP header checksum has been computed."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1111
#, no-wrap
msgid "Dv CSUM_IP_VALID"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1115
msgid ""
"The IP header has a valid checksum.  This flag can appear only in "
"combination with E<.Dv CSUM_IP_CHECKED>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1115
#, no-wrap
msgid "Dv CSUM_DATA_VALID"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1120
msgid ""
"The checksum of the data portion of the IP packet has been computed and "
"stored in the field E<.Va csum_data> in network byte order."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1120
#, no-wrap
msgid "Dv CSUM_PSEUDO_HDR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1130
msgid ""
"Can be set only along with E<.Dv CSUM_DATA_VALID> to indicate that the IP "
"data checksum found in E<.Va csum_data> allows for the pseudo header defined "
"by the TCP and UDP specifications.  Otherwise the checksum of the pseudo "
"header must be calculated by the host CPU and added to E<.Va csum_data> to "
"obtain the final checksum to be used for TCP or UDP validation purposes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1149
msgid ""
"If a particular network interface just indicates success or failure of TCP "
"or UDP checksum validation without returning the exact value of the checksum "
"to the host CPU, its driver can mark E<.Dv CSUM_DATA_VALID> and E<.Dv "
"CSUM_PSEUDO_HDR> in E<.Va csum_flags>, and set E<.Va csum_data> to E<.Li "
"0xFFFF> hexadecimal to indicate a valid checksum.  It is a peculiarity of "
"the algorithm used that the Internet checksum calculated over any valid "
"packet will be E<.Li 0xFFFF> as long as the original checksum field is "
"included."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:1149
#, no-wrap
msgid "STRESS TESTING"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1158
msgid ""
"When running a kernel compiled with the option E<.Dv MBUF_STRESS_TEST>, the "
"following E<.Xr sysctl 8 Ns> -controlled options may be used to create "
"various failure/extreme cases for testing of network drivers and other parts "
"of the kernel that rely on E<.Vt mbufs>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1159
#, no-wrap
msgid "Va net.inet.ip.mbuf_frag_size"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1169
msgid ""
"Causes E<.Fn ip_output> to fragment outgoing E<.Vt mbuf chains> into "
"fragments of the specified size.  Setting this variable to 1 is an excellent "
"way to test the long E<.Vt mbuf chain> handling ability of network drivers."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mbuf.9:1169
#, no-wrap
msgid "Va kern.ipc.m_defragrandomfailures"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1177
msgid ""
"Causes the function E<.Fn m_defrag> to randomly fail, returning E<.Dv "
"NULL>.  Any piece of code which uses E<.Fn m_defrag> should be tested with "
"this feature."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:1178
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1180
msgid "See above."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:1180
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1183
msgid "E<.Xr ifnet 9>, E<.Xr mbuf_tags 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:1183
#, no-wrap
msgid "HISTORY"
msgstr ""

#.  Please correct me if I'm wrong
#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1198
msgid ""
"E<.Vt Mbufs> appeared in an early version of E<.Bx>.  Besides being used for "
"network packets, they were used to store various dynamic structures, such as "
"routing table entries, interface addresses, protocol control blocks, etc.  "
"In more recent E<.Fx> use of E<.Vt mbufs> is almost entirely limited to "
"packet storage, with E<.Xr uma 9> zones being used directly to store other "
"network-related memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1215
msgid ""
"Historically, the E<.Vt mbuf> allocator has been a special-purpose memory "
"allocator able to run in interrupt contexts and allocating from a special "
"kernel address space map.  As of E<.Fx 5.3>, the E<.Vt mbuf> allocator is a "
"wrapper around E<.Xr uma 9>, allowing caching of E<.Vt mbufs>, clusters, and "
"E<.Vt mbuf> + cluster pairs in per-CPU caches, as well as bringing other "
"benefits of slab allocation."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mbuf.9:1215
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mbuf.9:1224
msgid ""
"The original E<.Nm> manual page was written by E<.An Yar Tikhiy>.  The E<.Xr "
"uma 9> E<.Vt mbuf> allocator was written by E<.An Bosko Milekic>."
msgstr ""
