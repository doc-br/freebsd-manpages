# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/vfsconf.9:29
#, no-wrap
msgid "June 16, 2013"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/vfsconf.9:30
#, no-wrap
msgid "VFSCONF 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vfsconf.9:32
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:34
msgid "E<.Nm vfsconf>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/vfsconf.9:34
#, no-wrap
msgid "vfs configuration information"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vfsconf.9:35
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vfsconf.9:36
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vfsconf.9:37
#, no-wrap
msgid "sys/mount.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:44
msgid ""
"E<.Ft int> E<.Fn vfs_register \"struct vfsconf *vfc\"> E<.Ft int> E<.Fn "
"vfs_unregister \"struct vfsconf *vfc\"> E<.Ft int> E<.Fn vfs_modevent "
"\"module_t mod\" \"int type\" \"void *data\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vfsconf.9:44
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:49
msgid ""
"Each file system type known to the kernel has a E<.Vt vfsconf> structure "
"that contains the information required to create a new mount of that file "
"systems type."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:58
#, no-wrap
msgid ""
"struct vfsconf {\n"
"\tstruct\tvfsops *vfc_vfsops;\t/* file system operations vector */\n"
"\tchar\tvfc_name[MFSNAMELEN];\t/* file system type name */\n"
"\tint\tvfc_typenum;\t\t/* historic file system type number */\n"
"\tint\tvfc_refcount;\t\t/* number mounted of this type */\n"
"\tint\tvfc_flags;\t\t/* permanent flags */\n"
"\tstruct\tvfsconf *vfc_next;\t/* next in list */\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:85
msgid ""
"When a new file system is mounted, E<.Xr mount 2> does a lookup of the E<.Vt "
"vfsconf> structure by its name, and if it is not already registered, "
"attempts to load a kernel module for it.  The file system operations for the "
"new mount point are taken from E<.Va vfc_vfsops>, and E<.Va mnt_vfc> in the "
"E<.Vt mount> structure is made to point directly at the E<.Vt vfsconf> "
"structure for the file system type.  The file system type number is taken "
"from E<.Va vfc_typenum> which was assigned in E<.Fn vfs_register>, and the "
"mount flags are taken from a mask of E<.Va vfc_flags>.  Each time a file "
"system of a given type is mounted, E<.Va vfc_refcount> is incremented."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:96
msgid ""
"E<.Fn vfs_register> takes a new E<.Vt vfsconf> structure and adds it to the "
"list of existing file systems.  If the type has not already been registered, "
"it is initialized by calling the E<.Fn vfs_init> function in the file system "
"operations vector.  E<.Fn vfs_register> also updates the oid's of any sysctl "
"nodes for this file system type to be the same as the newly assigned type "
"number."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:104
msgid ""
"E<.Fn vfs_unregister> unlinks E<.Fa vfc> from the list of registered file "
"system types if there are currently no mounted instances.  If the E<.Fn "
"vfs_uninit> function in the file systems initialization vector is defined, "
"it is called."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:117
msgid ""
"E<.Fn vfs_modevent> is registered by E<.Fn VFS_SET> to handle the loading "
"and unloading of file system kernel modules.  In the case of E<.Dv "
"MOD_LOAD>, E<.Fn vfs_register> is called.  In the case of E<.Dv MOD_UNLOAD>, "
"E<.Fn vfs_unregister> is called."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vfsconf.9:117
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:122
msgid ""
"E<.Fn vfs_register> returns 0 if successful; otherwise, E<.Er EEXIST> is "
"returned indicating that the file system type has already been registered."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:138
msgid ""
"E<.Fn vfs_unregister> returns 0 if successful.  If no E<.Vt vfsconf> entry "
"can be found matching the name in E<.Fa vfc>, E<.Er EINVAL> is returned.  If "
"the reference count of mounted instances of the file system type is not "
"zero, E<.Er EBUSY> is returned.  If E<.Fn vfs_uninit> is called, any errors "
"it returns will be returned by E<.Fn vfs_unregister>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:145
msgid ""
"E<.Fn vfs_modevent> returns the result of the call to E<.Fn vfs_register> or "
"E<.Fn vfs_unregister>, whatever the case."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vfsconf.9:145
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:149
msgid "E<.Xr mount 2>, E<.Xr vfs_rootmountalloc 9>, E<.Xr VFS_SET 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vfsconf.9:149
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vfsconf.9:151
msgid "This manual page was written by E<.An Chad David Aq Mt davidc@acns.ab.ca>."
msgstr ""
