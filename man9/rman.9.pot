# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/rman.9:28
#, no-wrap
msgid "May 20, 2016"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/rman.9:29
#, no-wrap
msgid "RMAN 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/rman.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:62
msgid ""
"E<.Nm rman>, E<.Nm rman_activate_resource>, E<.Nm rman_adjust_resource>, "
"E<.Nm rman_deactivate_resource>, E<.Nm rman_fini>, E<.Nm rman_init>, E<.Nm "
"rman_init_from_resource>, E<.Nm rman_is_region_manager>, E<.Nm "
"rman_manage_region>, E<.Nm rman_first_free_region>, E<.Nm "
"rman_last_free_region>, E<.Nm rman_release_resource>, E<.Nm "
"rman_reserve_resource>, E<.Nm rman_reserve_resource_bound>, E<.Nm "
"rman_make_alignment_flags>, E<.Nm rman_get_start>, E<.Nm rman_get_end>, "
"E<.Nm rman_get_device>, E<.Nm rman_get_size>, E<.Nm rman_get_flags>, E<.Nm "
"rman_set_mapping>, E<.Nm rman_get_mapping>, E<.Nm rman_set_virtual>, E<.Nm "
"rman_get_virtual>, E<.Nm rman_set_bustag>, E<.Nm rman_get_bustag>, E<.Nm "
"rman_set_bushandle>, E<.Nm rman_get_bushandle>, E<.Nm rman_set_rid>, E<.Nm "
"rman_get_rid>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/rman.9:62
#, no-wrap
msgid "resource management functions"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/rman.9:63
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/rman.9:64
#, no-wrap
msgid "sys/types.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/rman.9:65
#, no-wrap
msgid "sys/rman.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:130
msgid ""
"E<.Ft int> E<.Fn rman_activate_resource \"struct resource *r\"> E<.Ft int> "
"E<.Fn rman_adjust_resource \"struct resource *r\" \"rman_res_t start\" "
"\"rman_res_t end\"> E<.Ft int> E<.Fn rman_deactivate_resource \"struct "
"resource *r\"> E<.Ft int> E<.Fn rman_fini \"struct rman *rm\"> E<.Ft int> "
"E<.Fn rman_init \"struct rman *rm\"> E<.Ft int> E<.Fn "
"rman_init_from_resource \"struct rman *rm\" \"struct resource *r\"> E<.Ft "
"int> E<.Fn rman_is_region_manager \"struct resource *r\" \"struct rman "
"*rm\"> E<.Ft int> E<.Fn rman_manage_region \"struct rman *rm\" \"rman_res_t "
"start\" \"rman_res_t end\"> E<.Ft int> E<.Fn rman_first_free_region \"struct "
"rman *rm\" \"rman_res_t *start\" \"rman_res_t *end\"> E<.Ft int> E<.Fn "
"rman_last_free_region \"struct rman *rm\" \"rman_res_t *start\" \"rman_res_t "
"*end\"> E<.Ft int> E<.Fn rman_release_resource \"struct resource *r\"> E<.Ft "
"\"struct resource *\"> E<.Fo rman_reserve_resource> E<.Fa \"struct rman "
"*rm\" \"rman_res_t start\" \"rman_res_t end\" \"rman_res_t count\"> E<.Fa "
"\"u_int flags\" \"struct device *dev\"> E<.Fc> E<.Ft \"struct resource *\"> "
"E<.Fo rman_reserve_resource_bound> E<.Fa \"struct rman *rm\" \"rman_res_t "
"start\" \"rman_res_t end\" \"rman_res_t count\"> E<.Fa \"rman_res_t bound\" "
"\"u_int flags\" \"struct device *dev\"> E<.Fc> E<.Ft uint32_t> E<.Fn "
"rman_make_alignment_flags \"uint32_t size\"> E<.Ft rman_res_t> E<.Fn "
"rman_get_start \"struct resource *r\"> E<.Ft rman_res_t> E<.Fn rman_get_end "
"\"struct resource *r\"> E<.Ft \"struct device *\"> E<.Fn rman_get_device "
"\"struct resource *r\"> E<.Ft rman_res_t> E<.Fn rman_get_size \"struct "
"resource *r\"> E<.Ft u_int> E<.Fn rman_get_flags \"struct resource *r\"> "
"E<.Ft void> E<.Fn rman_set_mapping \"struct resource *r\" \"struct "
"resource_map *map\"> E<.Ft void> E<.Fn rman_get_mapping \"struct resource "
"*r\" \"struct resource_map *map\"> E<.Ft void> E<.Fn rman_set_virtual "
"\"struct resource *r\" \"void *v\"> E<.Ft \"void *\"> E<.Fn rman_get_virtual "
"\"struct resource *r\"> E<.Ft void> E<.Fn rman_set_bustag \"struct resource "
"*r\" \"bus_space_tag_t t\"> E<.Ft bus_space_tag_t> E<.Fn rman_get_bustag "
"\"struct resource *r\"> E<.Ft void> E<.Fn rman_set_bushandle \"struct "
"resource *r\" \"bus_space_handle_t h\"> E<.Ft bus_space_handle_t> E<.Fn "
"rman_get_bushandle \"struct resource *r\"> E<.Ft void> E<.Fn rman_set_rid "
"\"struct resource *r\" \"int rid\"> E<.Ft int> E<.Fn rman_get_rid \"struct "
"resource *r\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/rman.9:130
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:138
msgid ""
"The E<.Nm> set of functions provides a flexible resource management "
"abstraction.  It is used extensively by the bus management code.  It "
"implements the abstractions of region and resource.  A region descriptor is "
"used to manage a region; this could be memory or some other form of bus "
"space."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:143
msgid ""
"Each region has a set of bounds.  Within these bounds, allocated segments "
"may reside.  Each segment, termed a resource, has several properties which "
"are represented by a 16-bit flag register, as follows."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:150
#, no-wrap
msgid ""
"#define RF_ALLOCATED    0x0001 /* resource has been reserved */\n"
"#define RF_ACTIVE       0x0002 /* resource allocation has been activated "
"*/\n"
"#define RF_SHAREABLE    0x0004 /* resource permits contemporaneous sharing "
"*/\n"
"#define RF_FIRSTSHARE   0x0020 /* first in sharing list */\n"
"#define RF_PREFETCHABLE 0x0040 /* resource is prefetchable */\n"
"#define RF_UNMAPPED     0x0100 /* don't map resource when activating */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:154
msgid ""
"Bits 15:10 of the flag register are used to represent the desired alignment "
"of the resource within the region."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:190
msgid ""
"The E<.Fn rman_init> function initializes the region descriptor, pointed to "
"by the E<.Fa rm> argument, for use with the resource management functions.  "
"It is required that the fields E<.Va rm_type> and E<.Va rm_descr> of E<.Vt "
"\"struct rman\"> be set before calling E<.Fn rman_init>.  The field E<.Va "
"rm_type> shall be set to E<.Dv RMAN_ARRAY>.  The field E<.Va rm_descr> shall "
"be set to a string that describes the resource to be managed.  The E<.Va "
"rm_start> and E<.Va rm_end> fields may be set to limit the range of "
"acceptable resource addresses.  If these fields are not set, E<.Fn "
"rman_init> will initialize them to allow the entire range of resource "
"addresses.  It also initializes any mutexes associated with the structure.  "
"If E<.Fn rman_init> fails to initialize the mutex, it will return E<.Er "
"ENOMEM ; otherwise it will return 0 and> E<.Fa rm> will be initialized."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:203
msgid ""
"The E<.Fn rman_fini> function frees any structures associated with the "
"structure pointed to by the E<.Fa rm> argument.  If any of the resources "
"within the managed region have the E<.Dv RF_ALLOCATED> flag set, it will "
"return E<.Er EBUSY>; otherwise, any mutexes associated with the structure "
"will be released and destroyed, and the function will return 0."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:230
msgid ""
"The E<.Fn rman_manage_region> function establishes the concept of a region "
"which is under E<.Nm> control.  The E<.Fa rman> argument points to the "
"region descriptor.  The E<.Fa start> and E<.Fa end> arguments specify the "
"bounds of the region.  If successful, E<.Fn rman_manage_region> will return "
"0.  If the region overlaps with an existing region, it will return E<.Er "
"EBUSY>.  If any part of the region falls outside of the valid address range "
"for E<.Fa rm>, it will return E<.Er EINVAL>.  E<.Er ENOMEM> will be returned "
"when E<.Fn rman_manage_region> failed to allocate memory for the region."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:245
msgid ""
"The E<.Fn rman_init_from_resource> function is a wrapper routine to create a "
"resource manager backed by an existing resource.  It initializes E<.Fa rm> "
"using E<.Fn rman_init> and then adds a region to E<.Fa rm> corresponding to "
"the address range allocated to E<.Fa r> via E<.Fn rman_manage_region>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:263
msgid ""
"The E<.Fn rman_first_free_region> and E<.Fn rman_last_free_region> functions "
"can be used to query a resource manager for its first E<.Pq or last> "
"unallocated region.  If E<.Fa rm> contains no free region, these functions "
"will return E<.Er ENOENT>.  Otherwise, E<.Fa *start> and E<.Fa *end> are set "
"to the bounds of the free region and zero is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:309
msgid ""
"The E<.Fn rman_reserve_resource_bound> function is where the bulk of the "
"E<.Nm> logic is located.  It attempts to reserve a contiguous range in the "
"specified region E<.Fa rm> for the use of the device E<.Fa dev>.  The caller "
"can specify the E<.Fa start> and E<.Fa end> of an acceptable range, as well "
"as a boundary restriction and required aligment, and the code will attempt "
"to find a free segment which fits.  The E<.Fa start> argument is the lowest "
"acceptable starting value of the resource.  The E<.Fa end> argument is the "
"highest acceptable ending value of the resource.  Therefore, E<.Fa start No "
"+ Fa count No \\- 1> must be \\[E<lt>=] E<.Fa end> for any allocation to "
"happen.  The aligment requirement E<.Pq if any> is specified in E<.Fa "
"flags>.  The E<.Fa bound> argument may be set to specify a boundary "
"restriction such that an allocated region may cross an address that is a "
"multiple of the boundary.  The E<.Fa bound> argument must be a power of "
"two.  It may be set to zero to specify no boundary restriction.  A shared "
"segment will be allocated if the E<.Dv RF_SHAREABLE> flag is set, otherwise "
"an exclusive segment will be allocated.  If this shared segment already "
"exists, the caller has its device added to the list of consumers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:318
msgid ""
"The E<.Fn rman_reserve_resource> function is used to reserve resources "
"within a previously established region.  It is a simplified interface to "
"E<.Fn rman_reserve_resource_bound> which passes 0 for the E<.Fa bound> "
"argument."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:325
msgid ""
"The E<.Fn rman_make_alignment_flags> function returns the flag mask "
"corresponding to the desired alignment E<.Fa size>.  This should be used "
"when calling E<.Fn rman_reserve_resource_bound>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:334
msgid ""
"The E<.Fn rman_is_region_manager> function returns true if the allocated "
"resource E<.Fa r> was allocated from E<.Fa rm>.  Otherwise, it returns "
"false."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:368
msgid ""
"The E<.Fn rman_adjust_resource> function is used to adjust the reserved "
"address range of an allocated resource to reserve E<.Fa start> through E<.Fa "
"end>.  It can be used to grow or shrink one or both ends of the resource "
"range.  The current implementation does not support entirely relocating the "
"resource and will fail with E<.Er EINVAL> if the new resource range does not "
"overlap the old resource range.  If either end of the resource range grows "
"and the new resource range would conflict with another allocated resource, "
"the function will fail with E<.Er EBUSY>.  The E<.Fn rman_adjust_resource> "
"function does not support adjusting the resource range for shared resources "
"and will fail such attempts with E<.Er EINVAL>.  Upon success, the resource "
"E<.Fa r> will have a start address of E<.Fa start> and an end address of "
"E<.Fa end> and the function will return zero.  Note that none of the "
"constraints of the original allocation request such as alignment or boundary "
"restrictions are checked by E<.Fn rman_adjust_resource>.  It is the caller's "
"responsibility to enforce any such requirements."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:374
msgid ""
"The E<.Fn rman_release_resource> function releases the reserved resource "
"E<.Fa r>.  It may attempt to merge adjacent free resources."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:383
msgid ""
"The E<.Fn rman_activate_resource> function marks a resource as active, by "
"setting the E<.Dv RF_ACTIVE> flag.  If this is a time shared resource, and "
"the caller has not yet acquired the resource, the function returns E<.Er "
"EBUSY>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:392
msgid ""
"The E<.Fn rman_deactivate_resource> function marks a resource E<.Fa r> as "
"inactive, by clearing the E<.Dv RF_ACTIVE> flag.  If other consumers are "
"waiting for this range, it will wakeup their threads."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:402
msgid ""
"The E<.Fn rman_get_start>, E<.Fn rman_get_end>, E<.Fn rman_get_size>, and "
"E<.Fn rman_get_flags> functions return the bounds, size and flags of the "
"previously reserved resource E<.Fa r>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:413
msgid ""
"The E<.Fn rman_set_bustag> function associates a E<.Vt bus_space_tag_t> "
"E<.Fa t> with the resource E<.Fa r>.  The E<.Fn rman_get_bustag> function is "
"used to retrieve this tag once set."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:424
msgid ""
"The E<.Fn rman_set_bushandle> function associates a E<.Vt "
"bus_space_handle_t> E<.Fa h> with the resource E<.Fa r>.  The E<.Fn "
"rman_get_bushandle> function is used to retrieve this handle once set."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:432
msgid ""
"The E<.Fn rman_set_virtual> function is used to associate a kernel virtual "
"address with a resource E<.Fa r>.  The E<.Fn rman_get_virtual> function can "
"be used to retrieve the KVA once set."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:448
msgid ""
"The E<.Fn rman_set_mapping> function is used to associate a resource mapping "
"with a resource E<.Fa r>.  The mapping must cover the entire resource.  "
"Setting a mapping sets the associated E<.Xr bus_space 9> handle and tag for "
"E<.Fa r> as well as the kernel virtual address if the mapping contains one.  "
"These individual values can be retrieved via E<.Fn rman_get_bushandle>, "
"E<.Fn rman_get_bustag>, and E<.Fn rman_get_virtual>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:452
msgid ""
"The E<.Fn rman_get_mapping> function can be used to retrieve the associated "
"resource mapping once set."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:460
msgid ""
"The E<.Fn rman_set_rid> function associates a resource identifier with a "
"resource E<.Fa r>.  The E<.Fn rman_get_rid> function retrieves this RID."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:465
msgid ""
"The E<.Fn rman_get_device> function returns a pointer to the device which "
"reserved the resource E<.Fa r>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/rman.9:465
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:474
msgid ""
"E<.Xr bus_activate_resource 9>, E<.Xr bus_adjust_resource 9>, E<.Xr "
"bus_alloc_resource 9>, E<.Xr bus_map_resource 9>, E<.Xr bus_release_resource "
"9>, E<.Xr bus_set_resource 9>, E<.Xr bus_space 9>, E<.Xr mutex 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/rman.9:474
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/rman.9:476
msgid "This manual page was written by E<.An Bruce M Simpson Aq Mt bms@spc.org>."
msgstr ""
