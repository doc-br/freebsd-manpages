# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/vmem.9:30
#, no-wrap
msgid "May 17, 2019"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/vmem.9:31
#, no-wrap
msgid "VMEM 9"
msgstr ""

#.  ------------------------------------------------------------
#. type: Sh
#: /usr/src/share/man/man9/vmem.9:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:36
msgid "E<.Nm vmem>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/vmem.9:36
#, no-wrap
msgid "general purpose resource allocator"
msgstr ""

#.  ------------------------------------------------------------
#. type: Sh
#: /usr/src/share/man/man9/vmem.9:38
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vmem.9:39
#, no-wrap
msgid "sys/vmem.h"
msgstr ""

#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:69
msgid ""
"E<.Ft vmem_t *> E<.Fn vmem_create \"const char *name\" \"vmem_addr_t base\" "
"\"vmem_size_t size\" \"vmem_size_t quantum\" \"vmem_size_t qcache_max\" "
"\"int flags\"> E<.Ft int> E<.Fn vmem_add \"vmem_t *vm\" \"vmem_addr_t addr\" "
"\"vmem_size_t size\" \"int flags\"> E<.Ft int> E<.Fn vmem_xalloc \"vmem_t "
"*vm\" \"const vmem_size_t size\" \"vmem_size_t align\" \"const vmem_size_t "
"phase\" \"const vmem_size_t nocross\" \"const vmem_addr_t minaddr\" \"const "
"vmem_addr_t maxaddr\" \"int flags\" \"vmem_addr_t *addrp\"> E<.Ft void> "
"E<.Fn vmem_xfree \"vmem_t *vm\" \"vmem_addr_t addr\" \"vmem_size_t size\"> "
"E<.Ft int> E<.Fn vmem_alloc \"vmem_t *vm\" \"vmem_size_t size\" \"int "
"flags\" \"vmem_addr_t *addrp\"> E<.Ft void> E<.Fn vmem_free \"vmem_t *vm\" "
"\"vmem_addr_t addr\" \"vmem_size_t size\"> E<.Ft void> E<.Fn vmem_destroy "
"\"vmem_t *vm\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vmem.9:69
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:75
msgid ""
"The E<.Nm> is a general purpose resource allocator.  Despite its name, it "
"can be used for arbitrary resources other than virtual memory."
msgstr ""

#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:79
msgid "E<.Fn vmem_create> creates a new vmem arena."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:80
#, no-wrap
msgid "Fa name"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:82
msgid "The string to describe the vmem."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:82
#, no-wrap
msgid "Fa base"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:87
msgid ""
"The start address of the initial span.  Pass E<.Dv 0> if no initial span is "
"required."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:87 /usr/src/share/man/man9/vmem.9:125 /usr/src/share/man/man9/vmem.9:197 /usr/src/share/man/man9/vmem.9:211 /usr/src/share/man/man9/vmem.9:243
#, no-wrap
msgid "Fa size"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:92
msgid "The size of the initial span.  Pass E<.Dv 0> if no initial span is required."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:92
#, no-wrap
msgid "Fa quantum"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:94
msgid "The smallest unit of allocation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:94
#, no-wrap
msgid "Fa qcache_max"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:97
msgid ""
"The largest size of allocations which can be served by quantum cache.  It is "
"merely a hint and can be ignored."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:97 /usr/src/share/man/man9/vmem.9:159 /usr/src/share/man/man9/vmem.9:213
#, no-wrap
msgid "Fa flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:100
msgid "E<.Xr malloc 9> wait flag."
msgstr ""

#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:118
msgid ""
"E<.Fn vmem_add> adds a span of size E<.Fa size> starting at E<.Fa addr> to "
"the arena.  Returns 0 on success, E<.Dv ENOMEM> on failure.  E<.Fa flags> is "
"E<.Xr malloc 9> wait flag."
msgstr ""

#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:122
msgid "E<.Fn vmem_xalloc> allocates a resource from the arena."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:123 /usr/src/share/man/man9/vmem.9:188 /usr/src/share/man/man9/vmem.9:209 /usr/src/share/man/man9/vmem.9:234 /usr/src/share/man/man9/vmem.9:255
#, no-wrap
msgid "Fa vm"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:125 /usr/src/share/man/man9/vmem.9:211
msgid "The arena which we allocate from."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:127 /usr/src/share/man/man9/vmem.9:213
msgid "Specify the size of the allocation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:127
#, no-wrap
msgid "Fa align"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:135
msgid ""
"If zero, don't care about the alignment of the allocation.  Otherwise, "
"request a resource segment starting at offset E<.Fa phase> from an E<.Fa "
"align> aligned boundary."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:135
#, no-wrap
msgid "Fa phase"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:147
msgid ""
"See the above description of E<.Fa align>.  If E<.Fa align> is zero, E<.Fa "
"phase> should be zero.  Otherwise, E<.Fa phase> should be smaller than E<.Fa "
"align>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:147
#, no-wrap
msgid "Fa nocross"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:151
msgid "Request a resource which doesn't cross E<.Fa nocross> aligned boundary."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:151
#, no-wrap
msgid "Fa minaddr"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:155
msgid ""
"Specify the minimum address which can be allocated, or E<.Dv VMEM_ADDR_MIN> "
"if the caller does not care."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:155
#, no-wrap
msgid "Fa maxaddr"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:159
msgid ""
"Specify the maximum address which can be allocated, or E<.Dv VMEM_ADDR_MAX> "
"if the caller does not care."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:164
msgid ""
"A bitwise OR of an allocation strategy and a E<.Xr malloc 9> wait flag.  The "
"allocation strategy is one of:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:165
#, no-wrap
msgid "Dv M_FIRSTFIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:167
msgid "Prefer allocation performance."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:167
#, no-wrap
msgid "Dv M_BESTFIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:169
msgid "Prefer space efficiency."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:169
#, no-wrap
msgid "Dv M_NEXTFIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:172
msgid ""
"Perform an address-ordered search for free addresses, beginning where the "
"previous search ended."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:173 /usr/src/share/man/man9/vmem.9:219
#, no-wrap
msgid "Fa addrp"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:180
msgid ""
"On success, if E<.Fa addrp> is not E<.Dv NULL>, E<.Fn vmem_xalloc> "
"overwrites it with the start address of the allocated span."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:187
msgid ""
"E<.Fn vmem_xfree> frees resource allocated by E<.Fn vmem_xalloc> to the "
"arena."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:190 /usr/src/share/man/man9/vmem.9:236
msgid "The arena which we free to."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vmem.9:190 /usr/src/share/man/man9/vmem.9:236
#, no-wrap
msgid "Fa addr"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:197
msgid ""
"The resource being freed.  It must be the one returned by E<.Fn "
"vmem_xalloc>.  Notably, it must not be the one from E<.Fn vmem_alloc>.  "
"Otherwise, the behaviour is undefined."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:203
msgid ""
"The size of the resource being freed.  It must be the same as the E<.Fa "
"size> argument used for E<.Fn vmem_xalloc>."
msgstr ""

#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:208
msgid "E<.Fn vmem_alloc> allocates a resource from the arena."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:219
msgid ""
"A bitwise OR of an E<.Nm> allocation strategy flag (see above) and a E<.Xr "
"malloc 9> sleep flag."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:226
msgid ""
"On success, if E<.Fa addrp> is not E<.Dv NULL>, E<.Fn vmem_alloc> overwrites "
"it with the start address of the allocated span."
msgstr ""

#.  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:233
msgid "E<.Fn vmem_free> frees resource allocated by E<.Fn vmem_alloc> to the arena."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:243
msgid ""
"The resource being freed.  It must be the one returned by E<.Fn "
"vmem_alloc>.  Notably, it must not be the one from E<.Fn vmem_xalloc>.  "
"Otherwise, the behaviour is undefined."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:249
msgid ""
"The size of the resource being freed.  It must be the same as the E<.Fa "
"size> argument used for E<.Fn vmem_alloc>."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:254
msgid "E<.Fn vmem_destroy> destroys a vmem arena."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:258
msgid ""
"The vmem arena being destroyed.  The caller should ensure that no one will "
"use it anymore."
msgstr ""

#.  ------------------------------------------------------------
#. type: Sh
#: /usr/src/share/man/man9/vmem.9:260
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:265
msgid ""
"E<.Fn vmem_create> returns a pointer to the newly allocated vmem_t.  "
"Otherwise, it returns E<.Dv NULL>."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:275
msgid ""
"On success, E<.Fn vmem_xalloc> and E<.Fn vmem_alloc> return 0.  Otherwise, "
"E<.Dv ENOMEM> is returned."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vmem.9:275
#, no-wrap
msgid "CODE REFERENCES"
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:281
msgid ""
"The E<.Nm> subsystem is implemented within the file E<.Pa "
"sys/kern/subr_vmem.c>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vmem.9:281
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:291
msgid ""
"E<.Xr malloc 9> E<.Rs> E<.%A Jeff Bonwick> E<.%A Jonathan Adams> E<.%T "
"\"Magazines and Vmem: Extending the Slab Allocator to Many CPUs and "
"Arbitrary Resources\"> E<.%J \"2001 USENIX Annual Technical Conference\"> "
"E<.%D 2001> E<.Re>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vmem.9:291
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:298
msgid ""
"The E<.Nm> allocator was originally implemented in E<.Nx>.  It was "
"introduced in E<.Fx 10.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vmem.9:298
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:308
msgid ""
"E<.An -nosplit> Original implementation of E<.Nm> was written by E<.An "
"\"YAMAMOTO Takashi\">.  The E<.Fx> port was made by E<.An \"Jeff "
"Roberson\">."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vmem.9:308
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vmem.9:312
msgid ""
"E<.Nm> relies on E<.Xr malloc 9>, so it cannot be used as early during "
"system bootstrap."
msgstr ""
