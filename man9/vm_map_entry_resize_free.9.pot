# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:28
#, no-wrap
msgid "August 17, 2004"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:29
#, no-wrap
msgid "VM_MAP_ENTRY_RESIZE_FREE 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:33
msgid "E<.Nm vm_map_entry_resize_free>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:33
#, no-wrap
msgid "vm map free space algorithm"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:34
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:35
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:36
#, no-wrap
msgid "vm/vm.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:37
#, no-wrap
msgid "vm/vm_map.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:40
msgid ""
"E<.Ft void> E<.Fn vm_map_entry_resize_free \"vm_map_t map\" \"vm_map_entry_t "
"entry\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:40
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:47
msgid ""
"This manual page describes the E<.Vt vm_map_entry> fields used in the VM map "
"free space algorithm, how to maintain consistency of these variables, and "
"the E<.Fn vm_map_entry_resize_free> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:60
msgid ""
"VM map entries are organized as both a doubly-linked list E<.Va ( prev> and "
"E<.Va next> pointers) and as a binary search tree E<.Va ( left> and E<.Va "
"right> pointers).  The search tree is organized as a Sleator and Tarjan "
"splay tree, also known as a E<.Dq \"self-adjusting tree\">."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:73
#, no-wrap
msgid ""
"struct vm_map_entry {\n"
"        struct vm_map_entry *prev;\n"
"        struct vm_map_entry *next;\n"
"        struct vm_map_entry *left;\n"
"        struct vm_map_entry *right;\n"
"        vm_offset_t start;\n"
"        vm_offset_t end;\n"
"        vm_offset_t avail_ssize;\n"
"        vm_size_t adj_free;\n"
"        vm_size_t max_free;\n"
"        ...\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:91
msgid ""
"The free space algorithm adds two fields to E<.Vt \"struct vm_map_entry\">: "
"E<.Va adj_free> and E<.Va max_free>.  The E<.Va adj_free> field is the "
"amount of free address space adjacent to and immediately following (higher "
"address) the map entry.  This field is unused in the map header.  Note that "
"E<.Va adj_free> depends on the linked list, not the splay tree and that "
"E<.Va adj_free> can be computed as:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:94
#, no-wrap
msgid ""
"entry-E<gt>adj_free = (entry-E<gt>next == &map-E<gt>header ?\n"
"    map-E<gt>max_offset : entry-E<gt>next-E<gt>start) - entry-E<gt>end;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:112
msgid ""
"The E<.Va max_free> field is the maximum amount of contiguous free space in "
"the entry's subtree.  Note that E<.Va max_free> depends on the splay tree, "
"not the linked list and that E<.Va max_free> is computed by taking the "
"maximum of its own E<.Va adj_free> and the E<.Va max_free> of its left and "
"right subtrees.  Again, E<.Va max_free> is unused in the map header."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:125
msgid ""
"These fields allow for an E<.Fn O \"log n\"> implementation of E<.Fn "
"vm_map_findspace>.  Using E<.Va max_free>, we can immediately test for a "
"sufficiently large free region in an entire subtree.  This makes it possible "
"to find a first-fit free region of a given size in one pass down the tree, "
"so E<.Fn O \"log n\"> amortized using splay trees."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:150
msgid ""
"When a free region changes size, we must update E<.Va adj_free> and E<.Va "
"max_free> in the preceding map entry and propagate E<.Va max_free> up the "
"tree.  This is handled in E<.Fn vm_map_entry_link> and E<.Fn "
"vm_map_entry_unlink> for the cases of inserting and deleting an entry.  Note "
"that E<.Fn vm_map_entry_link> updates both the new entry and the previous "
"entry, and that E<.Fn vm_map_entry_unlink> updates the previous entry.  Also "
"note that E<.Va max_free> is not actually propagated up the tree.  Instead, "
"that entry is first splayed to the root and then the change is made there.  "
"This is a common technique in splay trees and is also how map entries are "
"linked and unlinked into the tree."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:171
msgid ""
"The E<.Fn vm_map_entry_resize_free> function updates the free space "
"variables in the given E<.Fa entry> and propagates those values up the "
"tree.  This function should be called whenever a map entry is resized "
"in-place, that is, by modifying its E<.Va start> or E<.Va end> values.  Note "
"that if you change E<.Va end>, then you should resize that entry, but if you "
"change E<.Va start>, then you should resize the previous entry.  The map "
"must be locked before calling this function, and again, propagating E<.Va "
"max_free> is performed by splaying that entry to the root."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:171
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:174
msgid "Consider adding a map entry with E<.Fn vm_map_insert>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:177
#, no-wrap
msgid ""
"ret = vm_map_insert(map, object, offset, start, end, prot,\n"
"    max_prot, cow);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:193
msgid ""
"In this case, no further action is required to maintain consistency of the "
"free space variables.  The E<.Fn vm_map_insert> function calls E<.Fn "
"vm_map_entry_link> which updates both the new entry and the previous entry.  "
"The same would be true for E<.Fn vm_map_delete> and for calling E<.Fn "
"vm_map_entry_link> or E<.Fn vm_map_entry_unlink> directly."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:198
msgid ""
"Now consider resizing an entry in-place without a call to E<.Fn "
"vm_map_entry_link> or E<.Fn vm_map_entry_unlink>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:202
#, no-wrap
msgid ""
"entry-E<gt>start = new_start;\n"
"if (entry-E<gt>prev != &map-E<gt>header)\n"
"        vm_map_entry_resize_free(map, entry-E<gt>prev);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:210
msgid ""
"In this case, resetting E<.Va start> changes the amount of free space "
"following the previous entry, so we use E<.Fn vm_map_entry_resize_free> to "
"update the previous entry."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:214
msgid "Finally, suppose we change an entry's E<.Va end> address."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:217
#, no-wrap
msgid ""
"entry-E<gt>end = new_end;\n"
"vm_map_entry_resize_free(map, entry);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:222
msgid "Here, we call E<.Fn vm_map_entry_resize_free> on the entry itself."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:222
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:234
msgid ""
"E<.Xr vm_map 9>, E<.Xr vm_map_findspace 9> E<.Rs> E<.%A Daniel D. Sleator> "
"E<.%A Robert E. Tarjan> E<.%T Self-Adjusting Binary Search Trees> E<.%J "
"JACM> E<.%V vol. 32(3)> E<.%P pp. 652-686> E<.%D July 1985> E<.Re>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:234
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:241
msgid ""
"Splay trees were added to the VM map in E<.Fx 5.0>, and the E<.Fn O \"log "
"n\"> tree-based free space algorithm was added in E<.Fx 5.3>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:241
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_entry_resize_free.9:243
msgid ""
"The tree-based free space algorithm and this manual page were written by "
"E<.An Mark W. Krentel Aq Mt krentel@dreamscape.com>."
msgstr ""
