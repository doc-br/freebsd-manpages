# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/ieee80211_vap.9:28
#, no-wrap
msgid "August 4, 2009"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/ieee80211_vap.9:29
#, no-wrap
msgid "IEEE8021_VAP 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_vap.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:33
msgid "E<.Nm net80211_vap>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/ieee80211_vap.9:33
#, no-wrap
msgid "802.11 network layer virtual radio support"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_vap.9:34
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/ieee80211_vap.9:35
#, no-wrap
msgid "net80211/ieee80211_var.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:57
msgid ""
"E<.Ft int> E<.Fo ieee80211_vap_setup> E<.Fa \"struct ieee80211com *\"> E<.Fa "
"\"struct ieee80211vap *\"> E<.Fa \"const char name[IFNAMSIZ]\"> E<.Fa \"int "
"unit\"> E<.Fa \"int opmode\"> E<.Fa \"int flags\"> E<.Fa \"const uint8_t "
"bssid[IEEE80211_ADDR_LEN]\"> E<.Fa \"const uint8_t "
"macaddr[IEEE80211_ADDR_LEN]\"> E<.Fc> E<.Ft int> E<.Fo ieee80211_vap_attach> "
"E<.Fa \"struct ieee80211vap *\"> E<.Fa \"ifm_change_cb_t media_change\"> "
"E<.Fa \"ifm_stat_cb_t media_stat\"> E<.Fc> E<.Ft void> E<.Fn "
"ieee80211_vap_detach \"struct ieee80211vap *\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_vap.9:57
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:69
msgid ""
"The E<.Nm net80211> software layer provides a support framework for drivers "
"that includes a virtual radio API that is exported to users through network "
"interfaces (aka vaps) that are cloned from the underlying device.  These "
"interfaces have an operating mode (station, adhoc, hostap, wds, monitor, "
"etc.\\&)  that is fixed for the lifetime of the interface.  Devices that can "
"support multiple concurrent interfaces allow multiple vaps to be cloned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:75
msgid ""
"The virtual radio interface defined by the E<.Nm net80211> layer means that "
"drivers must be structured to follow specific rules.  Drivers that support "
"only a single interface at any time must still follow these rules."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:87
msgid ""
"The virtual radio architecture splits state between a single per-device "
"E<.Vt ieee80211com> structure and one or more E<.Vt ieee80211vap> "
"structures.  Vaps are created with the E<.Dv SIOCIFCREATE2> request.  This "
"results in a call into the driver's E<.Vt ic_vap_create> method where the "
"driver can decide if the request should be accepted."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:106
msgid ""
"The vap creation process is done in three steps.  First the driver allocates "
"the data structure with E<.Xr malloc 9>.  This data structure must have an "
"E<.Vt ieee80211vap> structure at the front but is usually extended with "
"driver-private state.  Next the vap is setup with a call to E<.Fn "
"ieee80211_vap_setup>.  This request initializes E<.Nm net80211> state but "
"does not activate the interface.  The driver can then override methods setup "
"by E<.Nm net80211> and setup driver resources before finally calling E<.Fn "
"ieee80211_vap_attach> to complete the process.  Both these calls must be "
"done without holding any driver locks as work may require the process "
"block/sleep."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:123
msgid ""
"A vap is deleted when an E<.Dv SIOCIFDESTROY> ioctl request is made or when "
"the device detaches (causing all associated vaps to automatically be "
"deleted).  Delete requests cause the E<.Vt ic_vap_delete> method to be "
"called.  Drivers must quiesce the device before calling E<.Fn "
"ieee80211_vap_detach> to deactivate the vap and isolate it from activities "
"such as requests from user applications.  The driver can then reclaim "
"resources held by the vap and re-enable device operation.  The exact "
"procedure for quiescing a device is unspecified but typically it involves "
"blocking interrupts and stopping transmit and receive processing."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_vap.9:123
#, no-wrap
msgid "MULTI-VAP OPERATION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:142
msgid ""
"Drivers are responsible for deciding if multiple vaps can be created and how "
"to manage them.  Whether or not multiple concurrent vaps can be supported "
"depends on a device's capabilities.  For example, multiple hostap vaps can "
"usually be supported but many devices do not support assigning each vap a "
"unique BSSID.  If a device supports hostap operation it can usually support "
"concurrent station mode vaps but possibly with limitations such as losing "
"support for hardware beacon miss support.  Devices that are capable of "
"hostap operation and can send and receive 4-address frames should be able to "
"support WDS vaps together with an ap vap.  But in contrast some devices "
"cannot support WDS vaps without at least one ap vap (this however can be "
"finessed by forcing the ap vap to not transmit beacon frames).  All devices "
"should support the creation of any number of monitor mode vaps concurrent "
"with other vaps but it is the responsibility of the driver to allow this."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:151
msgid ""
"An important consequence of supporting multiple concurrent vaps is that a "
"driver's E<.Vt iv_newstate> method must be written to handle being called "
"for each vap.  Where necessary, drivers must track private state for all "
"vaps and not just the one whose state is being changed (e.g. for handling "
"beacon timers the driver may need to know if all vaps that beacon are "
"stopped before stopping the hardware timers)."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_vap.9:151
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_vap.9:154
msgid "E<.Xr ieee80211 9>, E<.Xr ifnet 9>, E<.Xr malloc 9>"
msgstr ""
