# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/mutex.9:31
#, no-wrap
msgid "May 24, 2017"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/mutex.9:32
#, no-wrap
msgid "MUTEX 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mutex.9:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:56
msgid ""
"E<.Nm mutex>, E<.Nm mtx_init>, E<.Nm mtx_destroy>, E<.Nm mtx_lock>, E<.Nm "
"mtx_lock_spin>, E<.Nm mtx_lock_flags>, E<.Nm mtx_lock_spin_flags>, E<.Nm "
"mtx_trylock>, E<.Nm mtx_trylock_flags>, E<.Nm mtx_trylock_spin>, E<.Nm "
"mtx_trylock_spin_flags>, E<.Nm mtx_unlock>, E<.Nm mtx_unlock_spin>, E<.Nm "
"mtx_unlock_flags>, E<.Nm mtx_unlock_spin_flags>, E<.Nm mtx_sleep>, E<.Nm "
"mtx_initialized>, E<.Nm mtx_owned>, E<.Nm mtx_recursed>, E<.Nm mtx_assert>, "
"E<.Nm MTX_SYSINIT>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/mutex.9:56
#, no-wrap
msgid "kernel synchronization primitives"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mutex.9:57
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mutex.9:58
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mutex.9:59
#, no-wrap
msgid "sys/lock.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mutex.9:60
#, no-wrap
msgid "sys/mutex.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:97
msgid ""
"E<.Ft void> E<.Fn mtx_init \"struct mtx *mutex\" \"const char *name\" "
"\"const char *type\" \"int opts\"> E<.Ft void> E<.Fn mtx_destroy \"struct "
"mtx *mutex\"> E<.Ft void> E<.Fn mtx_lock \"struct mtx *mutex\"> E<.Ft void> "
"E<.Fn mtx_lock_spin \"struct mtx *mutex\"> E<.Ft void> E<.Fn mtx_lock_flags "
"\"struct mtx *mutex\" \"int flags\"> E<.Ft void> E<.Fn mtx_lock_spin_flags "
"\"struct mtx *mutex\" \"int flags\"> E<.Ft int> E<.Fn mtx_trylock \"struct "
"mtx *mutex\"> E<.Ft int> E<.Fn mtx_trylock_flags \"struct mtx *mutex\" \"int "
"flags\"> E<.Ft void> E<.Fn mtx_trylock_spin \"struct mtx *mutex\"> E<.Ft "
"int> E<.Fn mtx_trylock_spin_flags \"struct mtx *mutex\" \"int flags\"> E<.Ft "
"void> E<.Fn mtx_unlock \"struct mtx *mutex\"> E<.Ft void> E<.Fn "
"mtx_unlock_spin \"struct mtx *mutex\"> E<.Ft void> E<.Fn mtx_unlock_flags "
"\"struct mtx *mutex\" \"int flags\"> E<.Ft void> E<.Fn mtx_unlock_spin_flags "
"\"struct mtx *mutex\" \"int flags\"> E<.Ft int> E<.Fn mtx_sleep \"void "
"*chan\" \"struct mtx *mtx\" \"int priority\" \"const char *wmesg\" \"int "
"timo\"> E<.Ft int> E<.Fn mtx_initialized \"const struct mtx *mutex\"> E<.Ft "
"int> E<.Fn mtx_owned \"const struct mtx *mutex\"> E<.Ft int> E<.Fn "
"mtx_recursed \"const struct mtx *mutex\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:102
msgid ""
"E<.Cd \"options INVARIANTS\"> E<.Cd \"options INVARIANT_SUPPORT\"> E<.Ft "
"void> E<.Fn mtx_assert \"const struct mtx *mutex\" \"int what\">"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mutex.9:102
#, no-wrap
msgid "sys/kernel.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:104
msgid ""
"E<.Fn MTX_SYSINIT \"name\" \"struct mtx *mtx\" \"const char *description\" "
"\"int opts\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mutex.9:104
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:107
msgid ""
"Mutexes are the most basic and primary method of thread synchronization.  "
"The major design considerations for mutexes are:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:111
msgid "Acquiring and releasing uncontested mutexes should be as cheap as possible."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:114
msgid ""
"They must have the information and storage space to support priority "
"propagation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:117
msgid ""
"A thread must be able to recursively acquire a mutex, provided that the "
"mutex is initialized to support recursion."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:121
msgid ""
"There are currently two flavors of mutexes, those that context switch when "
"they block and those that do not."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:131
msgid ""
"By default, E<.Dv MTX_DEF> mutexes will context switch when they are already "
"held.  As an optimization, they may spin for some amount of time before "
"context switching.  It is important to remember that since a thread may be "
"preempted at any time, the possible context switch introduced by acquiring a "
"mutex is guaranteed to not break anything that is not already broken."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:145
msgid ""
"Mutexes which do not context switch are E<.Dv MTX_SPIN> mutexes.  These "
"should only be used to protect data shared with primary interrupt code.  "
"This includes interrupt filters and low level scheduling code.  In all "
"architectures both acquiring and releasing of a uncontested spin mutex is "
"more expensive than the same operation on a non-spin mutex.  In order to "
"protect an interrupt service routine from blocking against itself all "
"interrupts are either blocked or deferred on a processor while holding a "
"spin lock.  It is permissible to hold multiple spin mutexes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:148
msgid ""
"Once a spin mutex has been acquired it is not permissible to acquire a "
"blocking mutex."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:153
msgid ""
"The storage needed to implement a mutex is provided by a E<.Vt struct mtx>.  "
"In general this should be treated as an opaque object and referenced only "
"with the mutex primitives."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:197
msgid ""
"The E<.Fn mtx_init> function must be used to initialize a mutex before it "
"can be passed to any of the other mutex functions.  The E<.Fa name> option "
"is used to identify the lock in debugging output etc.  The E<.Fa type> "
"option is used by the witness code to classify a mutex when doing checks of "
"lock ordering.  If E<.Fa type> is E<.Dv NULL>, E<.Fa name> is used in its "
"place.  The pointer passed in as E<.Fa name> and E<.Fa type> is saved rather "
"than the data it points to.  The data pointed to must remain stable until "
"the mutex is destroyed.  The E<.Fa opts> argument is used to set the type of "
"mutex.  It may contain either E<.Dv MTX_DEF> or E<.Dv MTX_SPIN> but not "
"both.  If the kernel has been compiled with E<.Cd \"option INVARIANTS\">, "
"E<.Fn mtx_init> will assert that the E<.Fa mutex> has not been initialized "
"multiple times without intervening calls to E<.Fn mtx_destroy> unless the "
"E<.Dv MTX_NEW> option is specified.  See below for additional initialization "
"options."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:208
msgid ""
"The E<.Fn mtx_lock> function acquires a E<.Dv MTX_DEF> mutual exclusion lock "
"on behalf of the currently running kernel thread.  If another kernel thread "
"is holding the mutex, the caller will be disconnected from the CPU until the "
"mutex is available (i.e., it will block)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:219
msgid ""
"The E<.Fn mtx_lock_spin> function acquires a E<.Dv MTX_SPIN> mutual "
"exclusion lock on behalf of the currently running kernel thread.  If another "
"kernel thread is holding the mutex, the caller will spin until the mutex "
"becomes available.  Interrupts are disabled during the spin and remain "
"disabled following the acquiring of the lock."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:226
msgid ""
"It is possible for the same thread to recursively acquire a mutex with no "
"ill effects, provided that the E<.Dv MTX_RECURSE> bit was passed to E<.Fn "
"mtx_init> during the initialization of the mutex."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:255
msgid ""
"The E<.Fn mtx_lock_flags> and E<.Fn mtx_lock_spin_flags> functions acquire a "
"E<.Dv MTX_DEF> or E<.Dv MTX_SPIN> lock, respectively, and also accept a "
"E<.Fa flags> argument.  In both cases, the only flags presently available "
"for lock acquires are E<.Dv MTX_QUIET> and E<.Dv MTX_RECURSE>.  If the E<.Dv "
"MTX_QUIET> bit is turned on in the E<.Fa flags> argument, then if E<.Dv "
"KTR_LOCK> tracing is being done, it will be silenced during the lock "
"acquire.  If the E<.Dv MTX_RECURSE> bit is turned on in the E<.Fa flags> "
"argument, then the mutex can be acquired recursively."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:268
msgid ""
"The E<.Fn mtx_trylock> and E<.Fn mtx_trylock_spin> functions attempt to "
"acquire a E<.Dv MTX_DEF> or E<.Dv MTX_SPIN> mutex, respectively, pointed to "
"by E<.Fa mutex>.  If the mutex cannot be immediately acquired, the functions "
"will return 0, otherwise the mutex will be acquired and a non-zero value "
"will be returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:289
msgid ""
"The E<.Fn mtx_trylock_flags> and E<.Fn mtx_trylock_spin_flags> functions "
"have the same behavior as E<.Fn mtx_trylock> and E<.Fn mtx_trylock_spin> "
"respectively, but should be used when the caller desires to pass in a E<.Fa "
"flags> value.  Presently, the only valid value in the E<.Fn mtx_trylock> and "
"E<.Fn mtx_trylock_spin> cases is E<.Dv MTX_QUIET>, and its effects are "
"identical to those described for E<.Fn mtx_lock> above."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:297
msgid ""
"The E<.Fn mtx_unlock> function releases a E<.Dv MTX_DEF> mutual exclusion "
"lock.  The current thread may be preempted if a higher priority thread is "
"waiting for the mutex."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:303
msgid ""
"The E<.Fn mtx_unlock_spin> function releases a E<.Dv MTX_SPIN> mutual "
"exclusion lock."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:316
msgid ""
"The E<.Fn mtx_unlock_flags> and E<.Fn mtx_unlock_spin_flags> functions "
"behave in exactly the same way as do the standard mutex unlock routines "
"above, while also allowing a E<.Fa flags> argument which may specify E<.Dv "
"MTX_QUIET>.  The behavior of E<.Dv MTX_QUIET> is identical to its behavior "
"in the mutex lock routines."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:331
msgid ""
"The E<.Fn mtx_destroy> function is used to destroy E<.Fa mutex> so the data "
"associated with it may be freed or otherwise overwritten.  Any mutex which "
"is destroyed must previously have been initialized with E<.Fn mtx_init>.  It "
"is permissible to have a single hold count on a mutex when it is destroyed.  "
"It is not permissible to hold the mutex recursively, or have another thread "
"blocked on the mutex when it is destroyed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:340
msgid ""
"The E<.Fn mtx_sleep> function is used to atomically release E<.Fa mtx> while "
"waiting for an event.  For more details on the parameters to this function, "
"see E<.Xr sleep 9>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:346
msgid ""
"The E<.Fn mtx_initialized> function returns non-zero if E<.Fa mutex> has "
"been initialized and zero otherwise."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:355
msgid ""
"The E<.Fn mtx_owned> function returns non-zero if the current thread holds "
"E<.Fa mutex>.  If the current thread does not hold E<.Fa mutex> zero is "
"returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:363
msgid ""
"The E<.Fn mtx_recursed> function returns non-zero if the E<.Fa mutex> is "
"recursed.  This check should only be made if the running thread already owns "
"E<.Fa mutex>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:376
msgid ""
"The E<.Fn mtx_assert> function allows assertions specified in E<.Fa what> to "
"be made about E<.Fa mutex>.  If the assertions are not true and the kernel "
"is compiled with E<.Cd \"options INVARIANTS\"> and E<.Cd \"options "
"INVARIANT_SUPPORT\">, the kernel will panic.  Currently the following "
"assertions are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:377
#, no-wrap
msgid "Dv MA_OWNED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:381
msgid ""
"Assert that the current thread holds the mutex pointed to by the first "
"argument."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:381
#, no-wrap
msgid "Dv MA_NOTOWNED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:385
msgid ""
"Assert that the current thread does not hold the mutex pointed to by the "
"first argument."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:385
#, no-wrap
msgid "Dv MA_RECURSED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:390
msgid ""
"Assert that the current thread has recursed on the mutex pointed to by the "
"first argument.  This assertion is only valid in conjunction with E<.Dv "
"MA_OWNED>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:390
#, no-wrap
msgid "Dv MA_NOTRECURSED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:395
msgid ""
"Assert that the current thread has not recursed on the mutex pointed to by "
"the first argument.  This assertion is only valid in conjunction with E<.Dv "
"MA_OWNED>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:407
msgid ""
"The E<.Fn MTX_SYSINIT> macro is used to generate a call to the E<.Fn "
"mtx_sysinit> routine at system startup in order to initialize a given mutex "
"lock.  The parameters are the same as E<.Fn mtx_init> but with an additional "
"argument, E<.Fa name>, that is used in generating unique variable names for "
"the related structures associated with the lock and the sysinit routine."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:407
#, no-wrap
msgid "The Default Mutex Type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:420
msgid ""
"Most kernel code should use the default lock type, E<.Dv MTX_DEF>.  The "
"default lock type will allow the thread to be disconnected from the CPU if "
"the lock is already held by another thread.  The implementation may treat "
"the lock as a short term spin lock under some circumstances.  However, it is "
"always safe to use these forms of locks in an interrupt thread without fear "
"of deadlock against an interrupted thread on the same CPU."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:420
#, no-wrap
msgid "The Spin Mutex Type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:430
msgid ""
"A E<.Dv MTX_SPIN> mutex will not relinquish the CPU when it cannot "
"immediately get the requested lock, but will loop, waiting for the mutex to "
"be released by another CPU.  This could result in deadlock if another thread "
"interrupted the thread which held a mutex and then tried to acquire the "
"mutex.  For this reason spin locks disable all interrupts on the local CPU."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:436
msgid ""
"Spin locks are fairly specialized locks that are intended to be held for "
"very short periods of time.  Their primary purpose is to protect portions of "
"the code that implement other synchronization primitives such as default "
"mutexes, thread scheduling, and interrupt threads."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:436
#, no-wrap
msgid "Initialization Options"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:448
msgid ""
"The options passed in the E<.Fa opts> argument of E<.Fn mtx_init> specify "
"the mutex type.  One of the E<.Dv MTX_DEF> or E<.Dv MTX_SPIN> options is "
"required and only one of those two options may be specified.  The "
"possibilities are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:449
#, no-wrap
msgid "Dv MTX_DEF"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:455
msgid ""
"Default mutexes will always allow the current thread to be suspended to "
"avoid deadlock conditions against interrupt threads.  The implementation of "
"this lock type may spin for a while before suspending the current thread."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:455
#, no-wrap
msgid "Dv MTX_SPIN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:460
msgid ""
"Spin mutexes will never relinquish the CPU.  All interrupts are disabled on "
"the local CPU while any spin lock is held."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:460
#, no-wrap
msgid "Dv MTX_RECURSE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:463
msgid ""
"Specifies that the initialized mutex is allowed to recurse.  This bit must "
"be present if the mutex is permitted to recurse."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:470
msgid ""
"Note that neither E<.Fn mtx_trylock> nor E<.Fn mtx_trylock_spin> support "
"recursion; that is, attempting to acquire an already-owned mutex fails."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:470 /usr/src/share/man/man9/mutex.9:505
#, no-wrap
msgid "Dv MTX_QUIET"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:472
msgid "Do not log any mutex operations for this lock."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:472
#, no-wrap
msgid "Dv MTX_NOWITNESS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:476
msgid "Instruct E<.Xr witness 4> to ignore this lock."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:476
#, no-wrap
msgid "Dv MTX_DUPOK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:478
msgid "Witness should not log messages about duplicate locks being acquired."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:478
#, no-wrap
msgid "Dv MTX_NOPROFILE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:480
msgid "Do not profile this lock."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/mutex.9:480
#, no-wrap
msgid "Dv MTX_NEW"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:482
msgid "Do not check for double-init."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:483
#, no-wrap
msgid "Lock and Unlock Flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:502
msgid ""
"The flags passed to the E<.Fn mtx_lock_flags>, E<.Fn mtx_lock_spin_flags>, "
"E<.Fn mtx_unlock_flags>, and E<.Fn mtx_unlock_spin_flags> functions provide "
"some basic options to the caller, and are often used only under special "
"circumstances to modify lock or unlock behavior.  Standard locking and "
"unlocking should be performed with the E<.Fn mtx_lock>, E<.Fn "
"mtx_lock_spin>, E<.Fn mtx_unlock>, and E<.Fn mtx_unlock_spin> functions.  "
"Only if a flag is required should the corresponding flags-accepting routines "
"be used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:504
msgid "Options that modify mutex behavior:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:509
msgid ""
"This option is used to quiet logging messages during individual mutex "
"operations.  This can be used to trim superfluous logging messages for "
"debugging purposes."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:510
#, no-wrap
msgid "Giant"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:524
msgid ""
"If E<.Va Giant> must be acquired, it must be acquired prior to acquiring "
"other mutexes.  Put another way: it is impossible to acquire E<.Va Giant> "
"non-recursively while holding another mutex.  It is possible to acquire "
"other mutexes while holding E<.Va Giant>, and it is possible to acquire "
"E<.Va Giant> recursively while holding other mutexes."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:524
#, no-wrap
msgid "Sleeping"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:530
msgid ""
"Sleeping while holding a mutex (except for E<.Va Giant>)  is never safe and "
"should be avoided.  There are numerous assertions which will fail if this is "
"attempted."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/mutex.9:530
#, no-wrap
msgid "Functions Which Access Memory in Userspace"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:541
msgid ""
"No mutexes should be held (except for E<.Va Giant>)  across functions which "
"access memory in userspace, such as E<.Xr copyin 9>, E<.Xr copyout 9>, E<.Xr "
"uiomove 9>, E<.Xr fuword 9>, etc.  No locks are needed when calling these "
"functions."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mutex.9:541
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:551
msgid ""
"E<.Xr condvar 9>, E<.Xr LOCK_PROFILING 9>, E<.Xr locking 9>, E<.Xr mtx_pool "
"9>, E<.Xr panic 9>, E<.Xr rwlock 9>, E<.Xr sema 9>, E<.Xr sleep 9>, E<.Xr sx "
"9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mutex.9:551
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mutex.9:560
msgid ""
"These functions appeared in E<.Bsx 4.1> and E<.Fx 5.0>.  The E<.Fn "
"mtx_trylock_spin> function was added in E<.Fx 11.1>."
msgstr ""
