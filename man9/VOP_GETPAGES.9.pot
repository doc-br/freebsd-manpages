# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/VOP_GETPAGES.9:32
#, no-wrap
msgid "May 7, 2017"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/VOP_GETPAGES.9:33
#, no-wrap
msgid "VOP_GETPAGES 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/VOP_GETPAGES.9:35
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:38
msgid "E<.Nm VOP_GETPAGES>, E<.Nm VOP_PUTPAGES>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/VOP_GETPAGES.9:38
#, no-wrap
msgid "read or write VM pages from a file"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/VOP_GETPAGES.9:39
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/VOP_GETPAGES.9:40
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/VOP_GETPAGES.9:41
#, no-wrap
msgid "sys/vnode.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/VOP_GETPAGES.9:42
#, no-wrap
msgid "vm/vm.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:59
msgid ""
"E<.Ft int> E<.Fo VOP_GETPAGES> E<.Fa \"struct vnode *vp\"> E<.Fa \"vm_page_t "
"*ma\"> E<.Fa \"int count\"> E<.Fa \"int *rbehind\"> E<.Fa \"int *rahead\"> "
"E<.Fc> E<.Ft int> E<.Fo VOP_PUTPAGES> E<.Fa \"struct vnode *vp\"> E<.Fa "
"\"vm_page_t *ma\"> E<.Fa \"int bytecount\"> E<.Fa \"int flags\"> E<.Fa \"int "
"*rtvals\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/VOP_GETPAGES.9:59
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:72
msgid ""
"The E<.Fn VOP_GETPAGES> method is called to read in pages of virtual memory "
"which are backed by ordinary files.  If other adjacent pages are backed by "
"adjacent regions of the same file, E<.Fn VOP_GETPAGES> is requested to read "
"those pages as well, although it is not required to do so.  The E<.Fn "
"VOP_PUTPAGES> method does the converse; that is to say, it writes out "
"adjacent dirty pages of virtual memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:76
msgid ""
"On entry, the vnode lock is held but neither the page queue nor VM object "
"locks are held.  Both methods return in the same state on both success and "
"error returns."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:78
msgid "The arguments are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:79
#, no-wrap
msgid "Fa vp"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:81
msgid "The file to access."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:81
#, no-wrap
msgid "Fa ma"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:84
msgid ""
"Pointer to the first element of an array of pages representing a contiguous "
"region of the file to be read or written."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:84
#, no-wrap
msgid "Fa count"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:88
msgid "The length of the E<.Fa ma> array."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:88
#, no-wrap
msgid "Fa bytecount"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:90
msgid "The number of bytes that should be written from the pages of the array."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:90
#, no-wrap
msgid "Fa flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:111
msgid ""
"A bitfield of flags affecting the function operation.  If E<.Dv "
"VM_PAGER_PUT_SYNC> is set, the write should be synchronous; control must not "
"be returned to the caller until after the write is finished.  If E<.Dv "
"VM_PAGER_PUT_INVAL> is set, the pages are to be invalidated after being "
"written.  If E<.Dv VM_PAGER_PUT_NOREUSE> is set, the I/O performed should "
"set the IO_NOREUSE flag, to indicate to the filesystem that pages should be "
"marked for fast reuse if needed.  This could occur via a call to E<.Xr "
"vm_page_deactivate_noreuse 9>, which puts such pages onto the head of the "
"inactive queue.  If E<.Dv VM_PAGER_CLUSTER_OK> is set, writes may be "
"performed asynchronously, so that related writes can be coalesced for "
"efficiency, e.g., using the clustering mechanism of the buffer cache."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:111
#, no-wrap
msgid "Fa rtvals"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:115
msgid ""
"An array of VM system result codes indicating the status of each page "
"written by E<.Fn VOP_PUTPAGES>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:115
#, no-wrap
msgid "Fa rbehind"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:120
msgid ""
"Optional pointer to integer specifying number of pages to be read behind, if "
"possible.  If the filesystem supports that feature, number of actually read "
"pages is reported back, otherwise zero is returned."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:120
#, no-wrap
msgid "Fa rahead"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:125
msgid ""
"Optional pointer to integer specifying number of pages to be read ahead, if "
"possible.  If the filesystem supports that feature, number of actually read "
"pages is reported back, otherwise zero is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:132
msgid ""
"The status of the E<.Fn VOP_PUTPAGES> method is returned on a page-by-page "
"basis in the array E<.Fa rtvals[]>.  The possible status values are as "
"follows:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:133
#, no-wrap
msgid "Dv VM_PAGER_OK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:138
msgid ""
"The page was successfully written.  The implementation must call E<.Xr "
"vm_page_undirty 9> to mark the page as clean."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:138
#, no-wrap
msgid "Dv VM_PAGER_PEND"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:148
msgid ""
"The page was scheduled to be written asynchronously.  When the write "
"completes, the completion callback should call E<.Xr vm_object_pip_wakeup 9> "
"and E<.Xr vm_page_sunbusy 9> to clear the busy flag and awaken any other "
"threads waiting for this page, in addition to calling E<.Xr vm_page_undirty "
"9>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:148
#, no-wrap
msgid "Dv VM_PAGER_BAD"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:152
msgid ""
"The page was entirely beyond the end of the backing file.  This condition "
"should not be possible if the vnode's file system is correctly implemented."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:152
#, no-wrap
msgid "Dv VM_PAGER_ERROR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:155
msgid ""
"The page could not be written because of an error on the underlying storage "
"medium or protocol."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:155
#, no-wrap
msgid "Dv VM_PAGER_FAIL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:158
msgid "Treated identically to E<.Dv VM_PAGER_ERROR>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/VOP_GETPAGES.9:158
#, no-wrap
msgid "Dv VM_PAGER_AGAIN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:160
msgid "The page was not handled by this request."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:184
msgid ""
"The E<.Fn VOP_GETPAGES> method must populate and validate all requested "
"pages in order to return success.  It is expected to release any pages in "
"E<.Fa ma> that it does not successfully handle, by calling E<.Xr "
"vm_page_free 9>.  When it succeeds, E<.Fn VOP_GETPAGES> must set the valid "
"bits appropriately.  Upon entry to E<.Fn VOP_GETPAGES>, all pages in E<.Fa "
"ma> are busied exclusively.  Upon successful return, the pages must all be "
"busied exclusively as well, but pages may be unbusied during processing.  "
"The filesystem is responsible for activating paged-out pages, but this does "
"not necessarily need to be done within E<.Fn VOP_GETPAGES> depending on the "
"architecture of the particular filesystem."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/VOP_GETPAGES.9:184
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:196
msgid ""
"If it successfully reads all pages in E<.Fa ma>, E<.Fn VOP_GETPAGES> returns "
"E<.Dv VM_PAGER_OK>; otherwise, it returns E<.Dv VM_PAGER_ERROR>.  By "
"convention, the return value of E<.Fn VOP_PUTPAGES> is E<.Fa rtvals[0]>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/VOP_GETPAGES.9:196
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:203
msgid ""
"E<.Xr vm_object_pip_wakeup 9>, E<.Xr vm_page_free 9>, E<.Xr vm_page_sunbusy "
"9>, E<.Xr vm_page_undirty 9>, E<.Xr vm_page_xunbusy 9>, E<.Xr vnode 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/VOP_GETPAGES.9:203
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/VOP_GETPAGES.9:207
msgid ""
"This manual page was written by E<.An Doug Rabson> and then substantially "
"rewritten by E<.An Garrett Wollman>."
msgstr ""
