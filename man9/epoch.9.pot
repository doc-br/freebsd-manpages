# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/epoch.9:29
#, no-wrap
msgid "June 25, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/epoch.9:30
#, no-wrap
msgid "EPOCH 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:32
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:42
msgid ""
"E<.Nm epoch>, E<.Nm epoch_context>, E<.Nm epoch_alloc>, E<.Nm epoch_free>, "
"E<.Nm epoch_enter>, E<.Nm epoch_exit>, E<.Nm epoch_wait>, E<.Nm epoch_call>, "
"E<.Nm in_epoch>,"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/epoch.9:42
#, no-wrap
msgid "kernel epoch based reclamation"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:43
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/epoch.9:44
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/epoch.9:45
#, no-wrap
msgid "sys/proc.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/epoch.9:46
#, no-wrap
msgid "sys/epoch.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:65
msgid ""
"E<.Ft epoch_t> E<.Fn epoch_alloc \"int flags\"> E<.Ft void> E<.Fn "
"epoch_enter \"epoch_t epoch\"> E<.Ft void> E<.Fn epoch_enter_preempt "
"\"epoch_t epoch\" \"epoch_tracker_t et\"> E<.Ft void> E<.Fn epoch_exit "
"\"epoch_t epoch\"> E<.Ft void> E<.Fn epoch_exit_preempt \"epoch_t epoch\" "
"\"epoch_tracker_t et\"> E<.Ft void> E<.Fn epoch_wait \"epoch_t epoch\"> "
"E<.Ft void> E<.Fn epoch_wait_preempt \"epoch_t epoch\"> E<.Ft void> E<.Fn "
"epoch_call \"epoch_t epoch\" \"epoch_context_t ctx\" \"void (*callback) "
"(epoch_context_t)\"> E<.Ft int> E<.Fn in_epoch \"epoch_t epoch\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:65
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:70
msgid ""
"Epochs are used to guarantee liveness and immutability of data by deferring "
"reclamation and mutation until a grace period has elapsed.  Epochs do not "
"have any lock ordering issues.  Entering and leaving an epoch section will "
"never block."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:105
msgid ""
"Epochs are allocated with E<.Fn epoch_alloc> and freed with E<.Fn "
"epoch_free>.  The flags passed to epoch_alloc determine whether preemption "
"is allowed during a section or not (the default), as specified by "
"EPOCH_PREEMPT.  Threads indicate the start of an epoch critical section by "
"calling E<.Fn epoch_enter>.  The end of a critical section is indicated by "
"calling E<.Fn epoch_exit>.  The _preempt variants can be used around code "
"which requires preemption.  A thread can wait until a grace period has "
"elapsed since any threads have entered the epoch by calling E<.Fn "
"epoch_wait> or E<.Fn epoch_wait_preempt>, depending on the epoch_type.  The "
"use of a default epoch type allows one to use E<.Fn epoch_wait> which is "
"guaranteed to have much shorter completion times since we know that none of "
"the threads in an epoch section will be preempted before completing its "
"section.  If the thread can't sleep or is otherwise in a performance "
"sensitive path it can ensure that a grace period has elapsed by calling "
"E<.Fn epoch_call> with a callback with any work that needs to wait for an "
"epoch to elapse.  Only non-sleepable locks can be acquired during a section "
"protected by E<.Fn epoch_enter_preempt> and E<.Fn epoch_exit_preempt>.  "
"INVARIANTS can assert that a thread is in an epoch by using E<.Fn in_epoch>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:110
msgid ""
"The epoch API currently does not support sleeping in epoch_preempt "
"sections.  A caller should never call E<.Fn epoch_wait> in the middle of an "
"epoch section for the same epoch as this will lead to a deadlock."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:123
msgid ""
"By default mutexes cannot be held across E<.Fn epoch_wait_preempt>.  To "
"permit this the epoch must be allocated with EPOCH_LOCKED.  When doing this "
"one must be cautious of creating a situation where a deadlock is "
"possible. Note that epochs are not a straight replacement for read locks.  "
"Callers must use safe list and tailq traversal routines in an epoch (see "
"ck_queue).  When modifying a list referenced from an epoch section safe "
"removal routines must be used and the caller can no longer modify a list "
"entry in place.  An item to be modified must be handled with copy on write "
"and frees must be deferred until after a grace period has elapsed."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:123
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:126
msgid ""
"E<.Fn in_epoch curepoch> will return 1 if curthread is in curepoch, 0 "
"otherwise."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:126
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:134
msgid ""
"One must be cautious when using E<.Fn epoch_wait_preempt> threads are pinned "
"during epoch sections so if a thread in a section is then preempted by a "
"higher priority compute bound thread on that CPU it can be prevented from "
"leaving the section.  Thus the wait time for the waiter is potentially "
"unbounded."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:134
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:137
msgid "Async free example: Thread 1:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:157
#, no-wrap
msgid ""
"int\n"
"in_pcbladdr(struct inpcb *inp, struct in_addr *faddr, struct in_laddr "
"*laddr,\n"
"    struct ucred *cred)\n"
"{\n"
"   /* ... */\n"
"   epoch_enter(net_epoch);\n"
"    CK_STAILQ_FOREACH(ifa, &ifp-E<gt>if_addrhead, ifa_link) {\n"
"        sa = ifa-E<gt>ifa_addr;\n"
"\tif (sa-E<gt>sa_family != AF_INET)\n"
"\t    continue;\n"
"\tsin = (struct sockaddr_in *)sa;\n"
"\tif (prison_check_ip4(cred, &sin-E<gt>sin_addr) == 0) {\n"
"\t     ia = (struct in_ifaddr *)ifa;\n"
"\t     break;\n"
"\t}\n"
"    }\n"
"    epoch_exit(net_epoch);\n"
"   /* ... */\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:159
msgid "Thread 2:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:163
#, no-wrap
msgid ""
"void\n"
"ifa_free(struct ifaddr *ifa)\n"
"{\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:167
#, no-wrap
msgid ""
"    if (refcount_release(&ifa-E<gt>ifa_refcnt))\n"
"        epoch_call(net_epoch, &ifa-E<gt>ifa_epoch_ctx, ifa_destroy);\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:171
#, no-wrap
msgid ""
"void\n"
"if_purgeaddrs(struct ifnet *ifp)\n"
"{\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:178
#, no-wrap
msgid ""
"    /* .... *\n"
"    IF_ADDR_WLOCK(ifp);\n"
"    CK_STAILQ_REMOVE(&ifp-E<gt>if_addrhead, ifa, ifaddr, ifa_link);\n"
"    IF_ADDR_WUNLOCK(ifp);\n"
"    ifa_free(ifa);\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:186
msgid ""
"Thread 1 traverses the ifaddr list in an epoch.  Thread 2 unlinks with the "
"corresponding epoch safe macro, marks as logically free, and then defers "
"deletion.  More general mutation or a synchronous free would have to follow "
"a call to E<.Fn epoch_wait>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:186
#, no-wrap
msgid "ERRORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:188
msgid "None."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:188
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:192
msgid ""
"The E<.Nm> kernel programming interface is under development and is subject "
"to change."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/epoch.9:193
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/epoch.9:201
msgid ""
"E<.Xr locking 9>, E<.Xr mtx_pool 9>, E<.Xr mutex 9>, E<.Xr rwlock 9>, E<.Xr "
"sema 9>, E<.Xr sleep 9>, E<.Xr sx 9>, E<.Xr timeout 9>"
msgstr ""
