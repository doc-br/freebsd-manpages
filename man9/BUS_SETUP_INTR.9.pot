# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:27
#, no-wrap
msgid "November 3, 2010"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:28
#, no-wrap
msgid "BUS_SETUP_INTR 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:35
msgid ""
"E<.Nm BUS_SETUP_INTR>, E<.Nm bus_setup_intr>, E<.Nm BUS_TEARDOWN_INTR>, "
"E<.Nm bus_teardown_intr>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:35
#, no-wrap
msgid "create, attach and teardown an interrupt handler"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:36
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:37
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:38
#, no-wrap
msgid "sys/bus.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:57
msgid ""
"E<.Ft int> E<.Fo BUS_SETUP_INTR> E<.Fa \"device_t dev\" \"device_t child\" "
"\"struct resource *irq\" \"int flags\"> E<.Fa \"driver_filter_t *filter\" "
"\"driver_intr_t *ithread\" \"void *arg\"> E<.Fa \"void **cookiep\"> E<.Fc> "
"E<.Ft int> E<.Fo bus_setup_intr> E<.Fa \"device_t dev\" \"struct resource "
"*r\" \"int flags\"> E<.Fa \"driver_filter_t filter\" \"driver_intr_t "
"ithread\" \"void *arg\"> E<.Fa \"void **cookiep\"> E<.Fc> E<.Ft int> E<.Fo "
"BUS_TEARDOWN_INTR> E<.Fa \"device_t dev\" \"device_t child\" \"struct "
"resource *irq\" \"void *cookiep\"> E<.Fc> E<.Ft int> E<.Fn bus_teardown_intr "
"\"device_t dev\" \"struct resource *r\" \"void *cookiep\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:57
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:68
msgid ""
"The E<.Fn BUS_SETUP_INTR> method will create and attach an interrupt handler "
"to an interrupt previously allocated by the resource manager's E<.Xr "
"BUS_ALLOC_RESOURCE 9> method.  The E<.Fa flags> are found in"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:68
#, no-wrap
msgid "sys/bus.h ,"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:87
msgid ""
"and give the broad category of interrupt.  The E<.Fa flags> also tell the "
"interrupt handlers about certain device driver characteristics.  E<.Dv "
"INTR_EXCL> marks the handler as being an exclusive handler for this "
"interrupt.  E<.Dv INTR_MPSAFE> tells the scheduler that the interrupt "
"handler is well behaved in a preemptive environment (``SMP safe''), and does "
"not need to be protected by the ``Giant Lock'' mutex.  E<.Dv INTR_ENTROPY> "
"marks the interrupt as being a good source of entropy - this may be used by "
"the entropy device E<.Pa /dev/random>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:105
msgid ""
"To define a time-critical handler that will not execute any potentially "
"blocking operation, use the E<.Fa filter> argument.  See the E<.Sx \"Filter "
"Routines\"> section below for information on writing a filter.  Otherwise, "
"use the E<.Fa ithread> argument.  The defined handler will be called with "
"the value E<.Fa arg> as its only argument.  See the E<.Sx \"ithread "
"Routines\"> section below for more information on writing an interrupt "
"handler."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:117
msgid ""
"The E<.Fa cookiep> argument is a pointer to a E<.Vt \"void *\"> that E<.Fn "
"BUS_SETUP_INTR> will write a cookie for the parent bus' use to if it is "
"successful in establishing an interrupt.  Driver writers may assume that "
"this cookie will be non-zero.  The nexus driver will write 0 on failure to "
"E<.Fa cookiep>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:127
msgid ""
"The interrupt handler will be detached by E<.Fn BUS_TEARDOWN_INTR>.  The "
"cookie needs to be passed to E<.Fn BUS_TEARDOWN_INTR> in order to tear down "
"the correct interrupt handler.  Once E<.Fn BUS_TEARDOWN_INTR> returns, it is "
"guaranteed that the interrupt function is not active and will no longer be "
"called."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:129
msgid "Mutexes are not allowed to be held across calls to these functions."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:129
#, no-wrap
msgid "Filter Routines"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:147
msgid ""
"A filter runs in primary interrupt context.  In this context, normal mutexes "
"cannot be used.  Only the spin lock version of these can be used (specified "
"by passing E<.Dv MTX_SPIN> to E<.Fn mtx_init> when initializing the mutex).  "
"E<.Xr wakeup 9> and similar routines can be called.  Atomic operations from "
"E<.Pa machine/atomic> may be used.  Reads and writes to hardware through "
"E<.Xr bus_space 9> may be used.  PCI configuration registers may be read and "
"written.  All other kernel interfaces cannot be used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:155
msgid ""
"In this restricted environment, care must be taken to account for all "
"races.  A careful analysis of races should be done as well.  It is generally "
"cheaper to take an extra interrupt, for example, than to protect variables "
"with spinlocks.  Read, modify, write cycles of hardware registers need to be "
"carefully analyzed if other threads are accessing the same registers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:167
msgid ""
"Generally, a filter routine will use one of two strategies.  The first "
"strategy is to simply mask the interrupt in hardware and allow the E<.Dv "
"ithread> routine to read the state from the hardware and then reenable "
"interrupts.  The E<.Dv ithread> also acknowledges the interrupt before "
"re-enabling the interrupt source in hardware.  Most PCI hardware can mask "
"its interrupt source."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:176
msgid ""
"The second common approach is to use a filter with multiple E<.Xr taskqueue "
"9> tasks.  In this case, the filter acknowledges the interrupts and queues "
"the work to the appropriate taskqueue.  Where one has to multiplex different "
"kinds of interrupt sources, like a network card's transmit and receive "
"paths, this can reduce lock contention and increase performance."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:182
msgid ""
"You should not E<.Xr malloc 9> from inside a filter.  You may not call "
"anything that uses a normal mutex.  Witness may complain about these."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:182
#, no-wrap
msgid "ithread Routines"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:188
msgid ""
"You can do whatever you want in an ithread routine, except sleep.  Care must "
"be taken not to sleep in an ithread.  In addition, one should minimize lock "
"contention in an ithread routine because contested locks ripple over to all "
"other ithread routines on that interrupt."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:188
#, no-wrap
msgid "Sleeping"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:197
msgid ""
"Sleeping is voluntarily giving up control of your thread.  All the sleep "
"routine found in E<.Xr msleep 9> sleep.  Waiting for a condition variable "
"described in E<.Xr condvar 9> is sleeping.  Calling any function that does "
"any of these things is sleeping."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:197
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:200
msgid "Zero is returned on success, otherwise an appropriate error is returned."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:200
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:205
msgid "E<.Xr random 4>, E<.Xr device 9>, E<.Xr driver 9>, E<.Xr locking 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:205
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/BUS_SETUP_INTR.9:214
msgid ""
"E<.An -nosplit> This manual page was written by E<.An Jeroen Ruigrok van der "
"Werven Aq Mt asmodai@FreeBSD.org> based on the manual pages for E<.Fn "
"BUS_CREATE_INTR> and E<.Fn BUS_CONNECT_INTR> written by E<.An Doug Rabson Aq "
"Mt dfr@FreeBSD.org>."
msgstr ""
