# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/osd.9:28
#, no-wrap
msgid "April 26, 2016"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/osd.9:29
#, no-wrap
msgid "OSD 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:43
msgid ""
"E<.Nm osd>, E<.Nm osd_register>, E<.Nm osd_deregister>, E<.Nm osd_set>, "
"E<.Nm osd_reserve>, E<.Nm osd_set_reserved>, E<.Nm osd_free_reserved>, E<.Nm "
"osd_get>, E<.Nm osd_del>, E<.Nm osd_call>, E<.Nm osd_exit>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/osd.9:43
#, no-wrap
msgid "Object Specific Data"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:44
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/osd.9:45 /usr/src/share/man/man9/osd.9:137 /usr/src/share/man/man9/osd.9:155 /usr/src/share/man/man9/osd.9:183 /usr/src/share/man/man9/osd.9:200 /usr/src/share/man/man9/osd.9:236 /usr/src/share/man/man9/osd.9:255 /usr/src/share/man/man9/osd.9:282 /usr/src/share/man/man9/osd.9:303
#, no-wrap
msgid "sys/osd.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:108
msgid ""
"E<.Ft typedef void> E<.Fn \"\\*(lp*osd_destructor_t\\*(rp\" \"void *value\"> "
"E<.Ft typedef int> E<.Fn \"\\*(lp*osd_method_t\\*(rp\" \"void *obj\" \"void "
"*data\"> E<.Ft int> E<.Fo osd_register> E<.Fa \"u_int type\"> E<.Fa "
"\"osd_destructor_t destructor\"> E<.Fa \"osd_method_t *methods\"> E<.Fc> "
"E<.Ft void> E<.Fo osd_deregister> E<.Fa \"u_int type\"> E<.Fa \"u_int "
"slot\"> E<.Fc> E<.Ft int> E<.Fo osd_set> E<.Fa \"u_int type\"> E<.Fa "
"\"struct osd *osd\"> E<.Fa \"u_int slot\"> E<.Fa \"void *value\"> E<.Fc> "
"E<.Ft void **> E<.Fo osd_reserve> E<.Fa \"u_int slot\"> E<.Fc> E<.Ft int> "
"E<.Fo osd_set_reserved> E<.Fa \"u_int type\"> E<.Fa \"struct osd *osd\"> "
"E<.Fa \"u_int slot\"> E<.Fa \"void **rsv\"> E<.Fa \"void *value\"> E<.Fc> "
"E<.Ft void> E<.Fo osd_free_reserved> E<.Fa \"void **rsv\"> E<.Fc> E<.Ft void "
"*> E<.Fo osd_get> E<.Fa \"u_int type\"> E<.Fa \"struct osd *osd\"> E<.Fa "
"\"u_int slot\"> E<.Fc> E<.Ft void> E<.Fo osd_del> E<.Fa \"u_int type\"> "
"E<.Fa \"struct osd *osd\"> E<.Fa \"u_int slot\"> E<.Fc> E<.Ft int> E<.Fo "
"osd_call> E<.Fa \"u_int type\"> E<.Fa \"u_int method\"> E<.Fa \"void *obj\"> "
"E<.Fa \"void *data\"> E<.Fc> E<.Ft void> E<.Fo osd_exit> E<.Fa \"u_int "
"type\"> E<.Fa \"struct osd *osd\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:108
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:118
msgid ""
"The E<.Nm> framework provides a mechanism to dynamically associate arbitrary "
"data at run-time with any kernel data structure which has been suitably "
"modified for use with E<.Nm>.  The one-off modification required involves "
"embedding a E<.Vt \"struct osd\"> inside the kernel data structure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:126
msgid ""
"An additional benefit is that after the initial change to a structure is "
"made, all subsequent use of E<.Nm> with the structure involves no changes to "
"the structure's layout.  By extension, if the data structure is part of the "
"ABI, E<.Nm> provides a way of extending the structure in an ABI preserving "
"manner."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:132
msgid ""
"The details of the embedded E<.Vt \"struct osd\"> are not relevant to "
"consumers of the E<.Nm> framework and should not be manipulated directly."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:137
msgid ""
"Data associated with a structure is referenced by the E<.Nm> framework using "
"a type/slot identifier pair.  Types are statically defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:144
msgid ""
"and provide a high-level grouping for slots to be registered under.  Slot "
"identifiers are dynamically assigned by the framework when a data type is "
"registered using E<.Fn osd_register> and remains valid until a corresponding "
"call to E<.Fn osd_deregister>."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/osd.9:144
#, no-wrap
msgid "Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:155
msgid ""
"The E<.Fn osd_register> function registers a type/slot identifier pair with "
"the E<.Nm> framework for use with a new data type.  The function may sleep "
"and therefore cannot be called from a non-sleepable context.  The E<.Fa "
"type> argument specifies which high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:174
msgid ""
"the slot identifier should be allocated under.  The E<.Fa destructor> "
"argument specifies an optional osd_destructor_t function pointer that will "
"be called for objects of the type being registered which are later destroyed "
"by the E<.Fn osd_del> function.  NULL may be passed if no destructor is "
"required.  The E<.Fa methods> argument specifies an optional array of "
"osd_method_t function pointers which can be later invoked by the E<.Fn "
"osd_call> function.  NULL may be passed if no methods are required.  The "
"E<.Fa methods> argument is currently only useful with the OSD_JAIL type "
"identifier."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:183
msgid ""
"The E<.Fn osd_deregister> function deregisters a previously registered "
"type/slot identifier pair.  The function may sleep and therefore cannot be "
"called from a non-sleepable context.  The E<.Fa type> argument specifies "
"which high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:191
msgid ""
"the slot identifier is allocated under.  The E<.Fa slot> argument specifies "
"the slot identifier which is being deregistered and should be the value that "
"was returned by E<.Fn osd_register> when the data type was registered."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:200
msgid ""
"The E<.Fn osd_set> function associates a data object pointer with a kernel "
"data structure's E<.Vt struct osd> member.  The E<.Fa type> argument "
"specifies which high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:218
msgid ""
"the slot identifier is allocated under.  The E<.Fa osd> argument is a "
"pointer to the kernel data structure's E<.Vt struct osd> which will have the "
"E<.Fa value> pointer associated with it.  The E<.Fa slot> argument specifies "
"the slot identifier to assign the E<.Fa value> pointer to.  The E<.Fa value> "
"argument points to a data object to associate with E<.Fa osd>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:227
msgid ""
"The E<.Fn osd_set_reserved> function does the same as E<.Fn osd_set>, but "
"with an extra argument E<.Fa rsv> that is internal-use memory previously "
"allocated via E<.Fn osd_reserve>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:236
msgid ""
"The E<.Fn osd_get> function returns the data pointer associated with a "
"kernel data structure's E<.Vt struct osd> member from the specified "
"type/slot identifier pair.  The E<.Fa type> argument specifies which "
"high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:246
msgid ""
"the slot identifier is allocated under.  The E<.Fa osd> argument is a "
"pointer to the kernel data structure's E<.Vt struct osd> to retrieve the "
"data pointer from.  The E<.Fa slot> argument specifies the slot identifier "
"to retrieve the data pointer from."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:255
msgid ""
"The E<.Fn osd_del> function removes the data pointer associated with a "
"kernel data structure's E<.Vt struct osd> member from the specified "
"type/slot identifier pair.  The E<.Fa type> argument specifies which "
"high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:268
msgid ""
"the slot identifier is allocated under.  The E<.Fa osd> argument is a "
"pointer to the kernel data structure's E<.Vt struct osd> to remove the data "
"pointer from.  The E<.Fa slot> argument specifies the slot identifier to "
"remove the data pointer from.  If an osd_destructor_t function pointer was "
"specified at registration time, the destructor function will be called and "
"passed the data pointer for the type/slot identifier pair which is being "
"deleted."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:282
msgid ""
"The E<.Fn osd_call> function calls the specified osd_method_t function "
"pointer for all currently registered slots of a given type on the specified "
"E<.Fa obj> and E<.Fa data> pointers.  The function may sleep and therefore "
"cannot be called from a non-sleepable context.  The E<.Fa type> argument "
"specifies which high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:293
msgid ""
"to call the method for.  The E<.Fa method> argument specifies the index into "
"the osd_method_t array that was passed to E<.Fn osd_register>.  The E<.Fa "
"obj> and E<.Fa data> arguments are passed to the method function pointer of "
"each slot."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:303
msgid ""
"The E<.Fn osd_exit> function removes all data object pointers from all "
"currently registered slots for a given type for the specified kernel data "
"structure's E<.Vt struct osd> member.  The E<.Fa type> argument specifies "
"which high-level type grouping from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:310
msgid ""
"to remove data pointers from.  The E<.Fa osd> argument is a pointer to the "
"kernel data structure's E<.Vt struct osd> to remove all data object pointers "
"for all currently registered slots from."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:310
#, no-wrap
msgid "IMPLEMENTATION NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:324
msgid ""
"E<.Nm> uses a two dimensional matrix (array of arrays) as the data structure "
"to manage the external data associated with a kernel data structure's E<.Vt "
"struct osd> member.  The type identifier is used as the index into the outer "
"array, and the slot identifier is used as the index into the inner array.  "
"To set or retrieve a data pointer for a given type/slot identifier pair, "
"E<.Fn osd_set> and E<.Fn osd_get> perform the equivalent of "
"array[type][slot], which is both constant time and fast."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:354
msgid ""
"If E<.Fn osd_set> is called on a E<.Vt struct osd> for the first time, the "
"array for storing data pointers is dynamically allocated using E<.Xr malloc "
"9> with M_NOWAIT to a size appropriate for the slot identifier being set.  "
"If a subsequent call to E<.Fn osd_set> attempts to set a slot identifier "
"which is numerically larger than the slot used in the previous E<.Fn "
"osd_set> call, E<.Xr realloc 9> is used to grow the array to the appropriate "
"size such that the slot identifier can be used.  To maximise the efficiency "
"of any code which calls E<.Fn osd_set> sequentially on a number of different "
"slot identifiers (e.g., during an initialisation phase) one should loop "
"through the slot identifiers in descending order from highest to lowest.  "
"This will result in only a single E<.Xr malloc 9> call to create an array of "
"the largest slot size and all subsequent calls to E<.Fn osd_set> will "
"proceed without any E<.Xr realloc 9> calls."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:373
msgid ""
"It is possible for E<.Fn osd_set> to fail to allocate this array.  To ensure "
"that such allocation succeeds, E<.Fn osd_reserve> may be called (in a "
"non-blocking context), and it will pre-allocate the memory via E<.Xr malloc "
"9> with M_WAITOK.  Then this pre-allocated memory is passed to E<.Fn "
"osd_set_reserved>, which will use it if necessary or otherwise discard it.  "
"The memory may also be explicitly discarded by calling E<.Fn "
"osd_free_reserved>.  As this method always allocates memory whether or not "
"it is ultimately needed, it should be used only rarely, such as in the "
"unlikely event that E<.Fn osd_set> fails."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:384
msgid ""
"The E<.Nm> API is geared towards slot identifiers storing pointers to the "
"same underlying data structure type for a given E<.Nm> type identifier.  "
"This is not a requirement, and E<.Xr khelp 9> for example stores completely "
"different data types in slots under the OSD_KHELP type identifier."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/osd.9:384
#, no-wrap
msgid "Locking"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:392
msgid ""
"E<.Nm> internally uses a mix of E<.Xr mutex 9>, E<.Xr rmlock 9> and E<.Xr sx "
"9> locks to protect its internal data structures and state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:398
msgid ""
"Responsibility for synchronising access to a kernel data structure's E<.Vt "
"struct osd> member is left to the subsystem that uses the data structure and "
"calls the E<.Nm> API."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:404
msgid ""
"E<.Fn osd_get> only acquires an E<.Xr rmlock> in read mode, therefore making "
"it safe to use in the majority of contexts within the kernel including most "
"fast paths."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:404
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:407
msgid ""
"E<.Fn osd_register> returns the slot identifier for the newly registered "
"data type."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:420
msgid ""
"E<.Fn osd_set> and E<.Fn osd_set_reserved> return zero on success or ENOMEM "
"if the specified type/slot identifier pair triggered an internal E<.Xr "
"realloc 9> which failed E<.Ns (> E<.Fn osd_set_reserved> will always succeed "
"when E<.Fa rsv> is non-NULL)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:424
msgid ""
"E<.Fn osd_get> returns the data pointer for the specified type/slot "
"identifier pair, or NULL if the slot has not been initialised yet."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:430
msgid ""
"E<.Fn osd_reserve> returns a pointer suitable for passing to E<.Fn "
"osd_set_reserved> or E<.Fn osd_free_reserved>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:436
msgid ""
"E<.Fn osd_call> returns zero if no method is run or the method for each slot "
"runs successfully.  If a method for a slot returns non-zero, E<.Fn osd_call> "
"terminates prematurely and returns the method's error to the caller."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:436
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:438
msgid "E<.Xr khelp 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:438
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:442
msgid "The Object Specific Data (OSD) facility first appeared in E<.Fx 8.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/osd.9:442
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:448
msgid ""
"E<.An -nosplit> The E<.Nm> facility was written by E<.An Pawel Jakub Dawidek "
"Aq Mt pjd@FreeBSD.org>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/osd.9:450
msgid ""
"This manual page was written by E<.An Lawrence Stewart Aq Mt "
"lstewart@FreeBSD.org>."
msgstr ""
