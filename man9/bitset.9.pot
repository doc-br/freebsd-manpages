# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/bitset.9:27
#, no-wrap
msgid "July 7, 2017"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/bitset.9:28
#, no-wrap
msgid "BITSET 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:65
msgid ""
"E<.Nm bitset(9)> \\(em E<.Nm BITSET_DEFINE>, E<.Nm BITSET_T_INITIALIZER>, "
"E<.Nm BITSET_FSET>, E<.Nm BIT_CLR>, E<.Nm BIT_COPY>, E<.Nm BIT_ISSET>, E<.Nm "
"BIT_SET>, E<.Nm BIT_ZERO>, E<.Nm BIT_FILL>, E<.Nm BIT_SETOF>, E<.Nm "
"BIT_EMPTY>, E<.Nm BIT_ISFULLSET>, E<.Nm BIT_FFS>, E<.Nm BIT_FLS>, E<.Nm "
"BIT_COUNT>, E<.Nm BIT_SUBSET>, E<.Nm BIT_OVERLAP>, E<.Nm BIT_CMP>, E<.Nm "
"BIT_OR>, E<.Nm BIT_OR2>, E<.Nm BIT_AND>, E<.Nm BIT_AND2>, E<.Nm BIT_NAND>, "
"E<.Nm BIT_NAND2>, E<.Nm BIT_XOR>, E<.Nm BIT_XOR2>, E<.Nm BIT_CLR_ATOMIC>, "
"E<.Nm BIT_SET_ATOMIC>, E<.Nm BIT_SET_ATOMIC_ACQ>, E<.Nm BIT_AND_ATOMIC>, "
"E<.Nm BIT_OR_ATOMIC>, E<.Nm BIT_COPY_STORE_REL>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/bitset.9:65
#, no-wrap
msgid "bitset manipulation macros"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:66
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/bitset.9:67 /usr/src/share/man/man9/bitset.9:507
#, no-wrap
msgid "sys/_bitset.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/bitset.9:68 /usr/src/share/man/man9/bitset.9:158 /usr/src/share/man/man9/bitset.9:509
#, no-wrap
msgid "sys/bitset.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:147
msgid ""
"E<.Fn BITSET_DEFINE \"STRUCTNAME\" \"const SETSIZE\"> E<.Fn "
"BITSET_T_INITIALIZER \"ARRAY_CONTENTS\"> E<.Fn BITSET_FSET \"N_WORDS\"> "
"E<.Fn BIT_CLR \"const SETSIZE\" \"size_t bit\" \"struct STRUCTNAME "
"*bitset\"> E<.Fn BIT_COPY \"const SETSIZE\" \"struct STRUCTNAME *from\" "
"\"struct STRUCTNAME *to\"> E<.Ft bool> E<.Fn BIT_ISSET \"const SETSIZE\" "
"\"size_t bit\" \"struct STRUCTNAME *bitset\"> E<.Fn BIT_SET \"const "
"SETSIZE\" \"size_t bit\" \"struct STRUCTNAME *bitset\"> E<.Fn BIT_ZERO "
"\"const SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Fn BIT_FILL \"const "
"SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Fn BIT_SETOF \"const SETSIZE\" "
"\"size_t bit\" \"struct STRUCTNAME *bitset\"> E<.Ft bool> E<.Fn BIT_EMPTY "
"\"const SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Ft bool> E<.Fn "
"BIT_ISFULLSET \"const SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Ft int> "
"E<.Fn BIT_FFS \"const SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Ft int> "
"E<.Fn BIT_FLS \"const SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Ft int> "
"E<.Fn BIT_COUNT \"const SETSIZE\" \"struct STRUCTNAME *bitset\"> E<.Ft bool> "
"E<.Fo BIT_SUBSET> E<.Fa \"const SETSIZE\" \"struct STRUCTNAME *haystack\" "
"\"struct STRUCTNAME *needle\"> E<.Fc> E<.Ft bool> E<.Fo BIT_OVERLAP> E<.Fa "
"\"const SETSIZE\" \"struct STRUCTNAME *bitset1\" \"struct STRUCTNAME "
"*bitset2\"> E<.Fc> E<.Ft bool> E<.Fo BIT_CMP> E<.Fa \"const SETSIZE\" "
"\"struct STRUCTNAME *bitset1\" \"struct STRUCTNAME *bitset2\"> E<.Fc> E<.Fn "
"BIT_OR \"const SETSIZE\" \"struct STRUCTNAME *dst\" \"struct STRUCTNAME "
"*src\"> E<.Fo BIT_OR2> E<.Fa \"const SETSIZE\"> E<.Fa \"struct STRUCTNAME "
"*dst\"> E<.Fa \"struct STRUCTNAME *src1\"> E<.Fa \"struct STRUCTNAME "
"*src2\"> E<.Fc> E<.Fn BIT_AND \"const SETSIZE\" \"struct STRUCTNAME *dst\" "
"\"struct STRUCTNAME *src\"> E<.Fo BIT_AND2> E<.Fa \"const SETSIZE\"> E<.Fa "
"\"struct STRUCTNAME *dst\"> E<.Fa \"struct STRUCTNAME *src1\"> E<.Fa "
"\"struct STRUCTNAME *src2\"> E<.Fc> E<.Fn BIT_NAND \"const SETSIZE\" "
"\"struct STRUCTNAME *dst\" \"struct STRUCTNAME *src\"> E<.Fo BIT_NAND2> "
"E<.Fa \"const SETSIZE\"> E<.Fa \"struct STRUCTNAME *dst\"> E<.Fa \"struct "
"STRUCTNAME *src1\"> E<.Fa \"struct STRUCTNAME *src2\"> E<.Fc> E<.Fn BIT_XOR "
"\"const SETSIZE\" \"struct STRUCTNAME *dst\" \"struct STRUCTNAME *src\"> "
"E<.Fo BIT_XOR2> E<.Fa \"const SETSIZE\"> E<.Fa \"struct STRUCTNAME *dst\"> "
"E<.Fa \"struct STRUCTNAME *src1\"> E<.Fa \"struct STRUCTNAME *src2\"> E<.Fc> "
"E<.Fn BIT_CLR_ATOMIC \"const SETSIZE\" \"size_t bit\" \"struct STRUCTNAME "
"*bitset\"> E<.Fn BIT_SET_ATOMIC \"const SETSIZE\" \"size_t bit\" \"struct "
"STRUCTNAME *bitset\"> E<.Fn BIT_SET_ATOMIC_ACQ \"const SETSIZE\" \"size_t "
"bit\" \"struct STRUCTNAME *bitset\"> E<.Fo BIT_AND_ATOMIC> E<.Fa \"const "
"SETSIZE\" \"struct STRUCTNAME *dst\" \"struct STRUCTNAME *src\"> E<.Fc> "
"E<.Fo BIT_OR_ATOMIC> E<.Fa \"const SETSIZE\" \"struct STRUCTNAME *dst\" "
"\"struct STRUCTNAME *src\"> E<.Fc> E<.Fo BIT_COPY_STORE_REL> E<.Fa \"const "
"SETSIZE\" \"struct STRUCTNAME *from\" \"struct STRUCTNAME *to\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:147
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:158
msgid ""
"The E<.Nm> family of macros provide a flexible and efficient bitset "
"implementation if the maximum size of the set is known at compilation.  "
"Throughout this manual page, the name E<.Fa SETSIZE> refers to the size of "
"the bitset in bits.  Individual bits in bitsets are referenced with indices "
"zero through E<.Fa SETSIZE - 1>.  One example use of"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:160
msgid "is"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/bitset.9:160
#, no-wrap
msgid "sys/cpuset.h ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:169
msgid ""
"The E<.Fn BITSET_DEFINE> macro defines a bitset struct E<.Fa STRUCTNAME> "
"with room to represent E<.Fa SETSIZE> bits."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:174
msgid ""
"The E<.Fn BITSET_T_INITIALIZER> macro allows one to initialize a bitset "
"struct with a compile time literal value."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:192
msgid ""
"The E<.Fn BITSET_FSET> macro generates a compile time literal, usable by "
"E<.Fn BITSET_T_INITIALIZER>, representing a full bitset (all bits set).  For "
"examples of E<.Fn BITSET_T_INITIALIZER> and E<.Fn BITSET_FSET> usage, see "
"the E<.Sx BITSET_T_INITIALIZER EXAMPLE> section.  The E<.Fa N_WORDS> "
"parameter to E<.Fn BITSET_FSET> should be:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:194
#, no-wrap
msgid "__bitset_words(SETSIZE)\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:205
msgid ""
"The E<.Fn BIT_CLR> macro clears bit E<.Fa bit> in the bitset pointed to by "
"E<.Fa bitset>.  The E<.Fn BIT_CLR_ATOMIC> macro is identical, but the bit is "
"cleared atomically."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:223
msgid ""
"The E<.Fn BIT_COPY> macro copies the contents of the bitset E<.Fa from> to "
"the bitset E<.Fa to>.  E<.Fn BIT_COPY_STORE_REL> is similar, but copies "
"component machine words from E<.Fa from> and writes them to E<.Fa to> with "
"atomic store with release semantics.  (That is, if E<.Fa to> is composed of "
"multiple machine words, E<.Fn BIT_COPY_STORE_REL> performs multiple "
"individually atomic operations.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:236
msgid ""
"The E<.Fn BIT_SET> macro sets bit E<.Fa bit> in the bitset pointed to by "
"E<.Fa bitset>.  The E<.Fn BIT_SET_ATOMIC> macro is identical, but the bit is "
"set atomically.  The E<.Fn BIT_SET_ATOMIC_ACQ> macro sets the bit with "
"acquire semantics."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:241
msgid "The E<.Fn BIT_ZERO> macro clears all bits in E<.Fa bitset>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:246
msgid "The E<.Fn BIT_FILL> macro sets all bits in E<.Fa bitset>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:253
msgid ""
"The E<.Fn BIT_SETOF> macro clears all bits in E<.Fa bitset> before setting "
"only bit E<.Fa bit>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:261
msgid "The E<.Fn BIT_EMPTY> macro returns E<.Dv true> if E<.Fa bitset> is empty."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:269
msgid ""
"The E<.Fn BIT_ISFULLSET> macro returns E<.Dv true> if E<.Fa bitset> is full "
"(all bits set)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:286
msgid ""
"The E<.Fn BIT_FFS> macro returns the 1-index of the first (lowest) set bit "
"in E<.Fa bitset>, or zero if E<.Fa bitset> is empty.  Like with E<.Xr ffs "
"3>, to use the non-zero result of E<.Fn BIT_FFS> as a E<.Fa bit> index "
"parameter to any other E<.Nm> macro, you must subtract one from the result."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:303
msgid ""
"The E<.Fn BIT_FLS> macro returns the 1-index of the last (highest) set bit "
"in E<.Fa bitset>, or zero if E<.Fa bitset> is empty.  Like with E<.Xr fls "
"3>, to use the non-zero result of E<.Fn BIT_FLS> as a E<.Fa bit> index "
"parameter to any other E<.Nm> macro, you must subtract one from the result."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:308
msgid ""
"The E<.Fn BIT_COUNT> macro returns the total number of set bits in E<.Fa "
"bitset>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:317
msgid ""
"The E<.Fn BIT_SUBSET> macro returns E<.Dv true> if E<.Fa needle> is a subset "
"of E<.Fa haystack>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:332
msgid ""
"The E<.Fn BIT_OVERLAP> macro returns E<.Dv true> if E<.Fa bitset1> and E<.Fa "
"bitset2> have any common bits.  (That is, if E<.Fa bitset1> AND E<.Fa "
"bitset2> is not the empty set.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:341
msgid ""
"The E<.Fn BIT_CMP> macro returns E<.Dv true> if E<.Fa bitset1> is NOT equal "
"to E<.Fa bitset2>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:363
msgid ""
"The E<.Fn BIT_OR> macro sets bits present in E<.Fa src> in E<.Fa dst>.  (It "
"is the E<.Nm> equivalent of the scalar: E<.Fa dst> |= E<.Fa src>.)  E<.Fn "
"BIT_OR_ATOMIC> is similar, but sets bits in the component machine words in "
"E<.Fa dst> atomically.  (That is, if E<.Fa dst> is composed of multiple "
"machine words, E<.Fn BIT_OR_ATOMIC> performs multiple individually atomic "
"operations.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:380
msgid ""
"The E<.Fn BIT_OR2> macro computes E<.Fa src1> bitwise or E<.Fa src2> and "
"assigns the result to E<.Fa dst>.  (It is the E<.Nm> equivalent of the "
"scalar: E<.Fa dst> = E<.Fa src1> | E<.Fa src2>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:396
msgid ""
"The E<.Fn BIT_AND> macro clears bits absent from E<.Fa src> from E<.Fa "
"dst>.  (It is the E<.Nm> equivalent of the scalar: E<.Fa dst> &= E<.Fa "
"src>.)  E<.Fn BIT_AND_ATOMIC> is similar, with the same atomic semantics as "
"E<.Fn BIT_OR_ATOMIC>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:413
msgid ""
"The E<.Fn BIT_AND2> macro computes E<.Fa src1> bitwise and E<.Fa src2> and "
"assigns the result to E<.Fa dst>.  (It is the E<.Nm> equivalent of the "
"scalar: E<.Fa dst> = E<.Fa src1> & E<.Fa src2>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:426
msgid ""
"The E<.Fn BIT_NAND> macro clears bits set in E<.Fa src> from E<.Fa dst>.  "
"(It is the E<.Nm> equivalent of the scalar: E<.Fa dst> &= E<.Fa ~ src>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:443
msgid ""
"The E<.Fn BIT_NAND2> macro computes E<.Fa src1> bitwise and not E<.Fa src2> "
"and assigns the result to E<.Fa dst>.  (It is the E<.Nm> equivalent of the "
"scalar: E<.Fa dst> = E<.Fa src1> & ~ E<.Fa src2>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:456
msgid ""
"The E<.Fn BIT_XOR> macro toggles bits set in E<.Fa src> in E<.Fa dst>.  (It "
"is the E<.Nm> equivalent of the scalar: E<.Fa dst> ^= E<.Fa src>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:473
msgid ""
"The E<.Fn BIT_XOR2> macro computes E<.Fa src1> bitwise exclusive or E<.Fa "
"src2> and assigns the result to E<.Fa dst>.  (It is the E<.Nm> equivalent of "
"the scalar: E<.Fa dst> = E<.Fa src1> ^ E<.Fa src2>.)"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:473
#, no-wrap
msgid "BITSET_T_INITIALIZER EXAMPLE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:476
#, no-wrap
msgid "BITSET_DEFINE(_myset, MYSETSIZE);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:478
#, no-wrap
msgid "struct _myset myset;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:481
#, no-wrap
msgid ""
"/* Initialize myset to filled (all bits set) */\n"
"myset = BITSET_T_INITIALIZER(BITSET_FSET(__bitset_words(MYSETSIZE)));\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:484
#, no-wrap
msgid ""
"/* Initialize myset to only the lowest bit set */\n"
"myset = BITSET_T_INITIALIZER(0x1);\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:485
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:488
msgid "E<.Xr bitstring 3>, E<.Xr cpuset 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:488
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:497
msgid ""
"The E<.Nm> macros first appeared in E<.Fx 10.0> in January 2014.  They were "
"MFCed to E<.Fx 9.3>, released in July 2014."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:500
msgid "This manual page first appeared in E<.Fx 11.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:500
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:505
msgid "E<.An -nosplit> The E<.Nm> macros were generalized and pulled out of"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/bitset.9:505
#, no-wrap
msgid "sys/cpuset.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:507
msgid "as"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:509
msgid "and"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:514
msgid ""
"by E<.An Attilio Rao Aq Mt attilio@FreeBSD.org>.  This manual page was "
"written by E<.An Conrad Meyer Aq Mt cem@FreeBSD.org>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bitset.9:514
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:519
msgid ""
"The E<.Fa SETSIZE> argument to all of these macros must match the value "
"given to E<.Fn BITSET_DEFINE>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bitset.9:524
msgid ""
"Unlike every other reference to individual set members, which are "
"zero-indexed, E<.Fn BIT_FFS> and E<.Fn BIT_FLS> return a one-indexed result "
"(or zero if the set is empty)."
msgstr ""
