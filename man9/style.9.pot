# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/style.9:29
#, no-wrap
msgid "November 1, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/style.9:30
#, no-wrap
msgid "STYLE 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/style.9:32
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:34
msgid "E<.Nm style>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/style.9:34
#, no-wrap
msgid "kernel source file style guide"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/style.9:35
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:44
msgid ""
"This file specifies the preferred style for kernel source files in the "
"E<.Fx> source tree.  It is also a guide for the preferred userland code "
"style.  Many of the style rules are implicit in the examples.  Be careful to "
"check the examples before assuming that E<.Nm> is silent on an issue."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:51
#, no-wrap
msgid ""
"/*\n"
" * Style guide for FreeBSD.  Based on the CSRG's KNF (Kernel Normal Form).\n"
" *\n"
" *\t@(#)style\t1.14 (Berkeley) 4/28/95\n"
" * $FreeBSD: head/share/man/man9/style.9 340033 2018-11-01 23:01:24Z emaste "
"$\n"
" */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:55
#, no-wrap
msgid ""
"/*\n"
" * VERY important single-line comments look like this.\n"
" */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:57
#, no-wrap
msgid "/* Most single-line comments look like this. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:62
#, no-wrap
msgid ""
"/*\n"
" * Multi-line comments look like this.  Make them real sentences.  Fill\n"
" * them so they look like real paragraphs.\n"
" */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:66
msgid ""
"The copyright header should be a multi-line comment, with the first line of "
"the comment having a dash after the star like so:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:74
#, no-wrap
msgid ""
"/*-\n"
" * SPDX-License-Identifier: BSD-2-Clause-FreeBSD\n"
" *\n"
" * Copyright (c) 1984-2025 John Q. Public\n"
" *\n"
" * Long, boring license goes here, but trimmed for brevity\n"
" */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:87
msgid ""
"An automatic script collects license information from the tree for all "
"comments that start in the first column with E<.Dq Li \"/*-\">.  If you "
"desire to flag E<.Xr indent 1> to not reformat a comment that starts in the "
"first column which is not a license or copyright notice, change the dash to "
"a star for those comments.  Comments starting in columns other than the "
"first are never considered license statements.  Use the appropriate "
"SPDX-License-Identifier line before the copyright."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:108
msgid ""
"After any copyright header, there is a blank line, and the E<.Li "
"$\\&FreeBSD$> for non C/C++ language source files.  Version control system "
"ID tags should only exist once in a file (unlike in this one).  Non-C/C++ "
"source files follow the example above, while C/C++ source files follow the "
"one below.  All VCS (version control system) revision identification in "
"files obtained from elsewhere should be maintained, including, where "
"applicable, multiple IDs showing a file's history.  In general, do not edit "
"foreign IDs or their infrastructure.  Unless otherwise wrapped (such as "
"E<.Dq Li \"#if defined(LIBC_SCCS)\">), enclose both in E<.Dq Li \"#if 0 "
"... #endif\"> to hide any uncompilable bits and to keep the IDs out of "
"object files.  Only add E<.Dq Li \"From: \"> in front of foreign VCS IDs if "
"the file is renamed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:110
#, no-wrap
msgid "/* From: @(#)style\t1.14 (Berkeley) 4/28/95 */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:113
#, no-wrap
msgid ""
"#include E<lt>sys/cdefs.hE<gt>\n"
"__FBSDID(\"$FreeBSD: head/share/man/man9/style.9 340033 2018-11-01 23:01:24Z "
"emaste $\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:116
msgid "Leave one blank line before the header files."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:121
msgid "Kernel include files E<.Pa ( sys/*.h>)  come first.  If"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:121
#, no-wrap
msgid "sys/cdefs.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:126
msgid "is needed for E<.Fn __FBSDID>, include it first.  If either"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:126
#, no-wrap
msgid "sys/types.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:128
msgid "or"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:128 /usr/src/share/man/man9/style.9:131
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:131
msgid "is needed, include it before other include files.  E<.Po>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:133
msgid "includes"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:133
#, no-wrap
msgid "sys/types.h ;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:137
msgid ""
"do not include both.  E<.Pc> The remaining kernel headers should be sorted "
"alphabetically."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:142
#, no-wrap
msgid ""
"#include E<lt>sys/types.hE<gt>\t/* Non-local includes in angle "
"brackets. */\n"
"#include E<lt>sys/endian.hE<gt>\n"
"#include E<lt>sys/lock.hE<gt>\n"
"#include E<lt>sys/queue.hE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:145
msgid "For a network program, put the network include files next."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:151
#, no-wrap
msgid ""
"#include E<lt>net/if.hE<gt>\n"
"#include E<lt>net/if_dl.hE<gt>\n"
"#include E<lt>net/route.hE<gt>\n"
"#include E<lt>netinet/in.hE<gt>\n"
"#include E<lt>protocols/rwhod.hE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:156
msgid "Do not include files from E<.Pa /usr/include> in the kernel."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:161
msgid ""
"Leave a blank line before the next group, the E<.Pa /usr/include> files, "
"which should be sorted alphabetically by name."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:163
#, no-wrap
msgid "#include E<lt>stdio.hE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:166
msgid "Global pathnames are defined in"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:166
#, no-wrap
msgid "paths.h ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:171
msgid ""
"Pathnames local to the program go in E<.Qq Pa pathnames.h> in the local "
"directory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:173
#, no-wrap
msgid "#include E<lt>paths.hE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:176
msgid "Leave another blank line before the local include files."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:178
#, no-wrap
msgid "#include \"pathnames.h\"\t\t/* Local includes in double quotes. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:184
msgid ""
"Do not E<.Ic #define> or declare names in the implementation namespace "
"except for implementing application interfaces."
msgstr ""

#.  XXX the above conflicts with ANSI style where the names are the
#.  same and you #undef the macro (if any) to get the function.
#.  It is not followed for MALLOC(), and not very common if inline
#.  functions are used.
#. type: Plain text
#: /usr/src/share/man/man9/style.9:211
msgid ""
"The names of E<.Dq unsafe> macros (ones that have side effects), and the "
"names of macros for manifest constants, are all in uppercase.  The "
"expansions of expression-like macros are either a single token or have outer "
"parentheses.  Put a single tab character between the E<.Ic #define> and the "
"macro name.  If a macro is an inline expansion of a function, the function "
"name is all in lowercase and the macro has the same name all in uppercase.  "
"Right-justify the backslashes; it makes it easier to read.  If the macro "
"encapsulates a compound statement, enclose it in a E<.Ic do> loop, so that "
"it can safely be used in E<.Ic if> statements.  Any final "
"statement-terminating semicolon should be supplied by the macro invocation "
"rather than the macro, to make parsing easier for pretty-printers and "
"editors."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:216
#, no-wrap
msgid ""
"#define\tMACRO(x, y) do {\t\t\t\t\t\t\\e\n"
"\tvariable = (x) + (y);\t\t\t\t\t\t\\e\n"
"\t(y) += 2;\t\t\t\t\t\t\t\\e\n"
"} while (0)\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:239
msgid ""
"When code is conditionally compiled using E<.Ic #ifdef> or E<.Ic #if>, a "
"comment may be added following the matching E<.Ic #endif> or E<.Ic #else> to "
"permit the reader to easily discern where conditionally compiled code "
"regions end.  This comment should be used only for (subjectively) long "
"regions, regions greater than 20 lines, or where a series of nested E<.Ic "
"#ifdef 's> may be confusing to the reader.  The comment should be separated "
"from the E<.Ic #endif> or E<.Ic #else> by a single space.  For short "
"conditionally compiled regions, a closing comment should not be used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:263
msgid ""
"The comment for E<.Ic #endif> should match the expression used in the "
"corresponding E<.Ic #if> or E<.Ic #ifdef>.  The comment for E<.Ic #else> and "
"E<.Ic #elif> should match the inverse of the expression(s) used in the "
"preceding E<.Ic #if> and/or E<.Ic #elif> statements.  In the comments, the "
"subexpression E<.Dq Li defined(FOO)> is abbreviated as E<.Dq Li FOO>.  For "
"the purposes of comments, E<.Dq Ic #ifndef Li FOO> is treated as E<.Dq Ic "
"#if Li !defined(FOO)>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:267
#, no-wrap
msgid ""
"#ifdef KTRACE\n"
"#include E<lt>sys/ktrace.hE<gt>\n"
"#endif\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:273
#, no-wrap
msgid ""
"#ifdef COMPAT_43\n"
"/* A large region here, or other conditional code. */\n"
"#else /* !COMPAT_43 */\n"
"/* Or here. */\n"
"#endif /* COMPAT_43 */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:279
#, no-wrap
msgid ""
"#ifndef COMPAT_43\n"
"/* Yet another large region here, or other conditional code. */\n"
"#else /* COMPAT_43 */\n"
"/* Or here. */\n"
"#endif /* !COMPAT_43 */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:296
msgid ""
"The project is slowly moving to use the E<.St -isoC-99> unsigned integer "
"identifiers of the form E<.Vt uintXX_t> in preference to the older E<.Bx Ns "
"-style> integer identifiers of the form E<.Vt u_intXX_t>.  New code should "
"use the former, and old code should be converted to the new form if other "
"major work is being done in that area and there is no overriding reason to "
"prefer the older E<.Bx Ns -style>.  Like white-space commits, care should be "
"taken in making E<.Vt uintXX_t> only commits."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:317
msgid ""
"Similarly, the project is slowly moving to use the E<.St -isoC-99> E<.Vt "
"bool> in preference to the older E<.Vt int> or E<.Vt boolean_t>.  New code "
"should use E<.Vt bool>, and old code may be converted if it is reasonable to "
"do so.  Literal values are named E<.Dv true> and E<.Dv false>.  These are "
"preferred to the old spellings E<.Dv TRUE> and E<.Dv FALSE>.  Userspace code "
"should include"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:317
#, no-wrap
msgid "stdbool.h ,"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:319
msgid "while kernel code should include"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/style.9:319
#, no-wrap
msgid "sys/types.h ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:324
msgid ""
"Likewise, the project is moving to using the E<.St -isoC-99> designated "
"initializers when it makes sense to do so."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:326
msgid "Enumeration values are all uppercase."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:328
#, no-wrap
msgid "enum enumtype { ONE, TWO } et;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:332
msgid ""
"The use of internal_underscores in identifiers is preferred over camelCase "
"or TitleCase."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:341
msgid ""
"In declarations, do not put any whitespace between asterisks and adjacent "
"tokens, except for tokens that are identifiers related to types.  (These "
"identifiers are the names of basic types, type qualifiers, and E<.Ic typedef "
"Ns -names> other than the one being declared.)  Separate these identifiers "
"from asterisks using a single space."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:353
msgid ""
"When declaring variables in structures, declare them sorted by use, then by "
"size (largest to smallest), and then in alphabetical order.  The first "
"category normally does not apply, but there are exceptions.  Each one gets "
"its own line.  Try to make the structure readable by aligning the member "
"names using either one or two tabs depending upon your judgment.  You should "
"use one tab only if it suffices to align at least 90% of the member names.  "
"Names following extremely long types should be separated by a single space."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:361
msgid ""
"Major structures should be declared at the top of the file in which they are "
"used, or in separate header files if they are used in multiple source "
"files.  Use of the structures should be by separate declarations and should "
"be E<.Ic extern> if they are declared in a header file."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:369
#, no-wrap
msgid ""
"struct foo {\n"
"\tstruct foo\t*next;\t\t/* List of active foo. */\n"
"\tstruct mumble\tamumble;\t/* Comment for mumble. */\n"
"\tint\t\tbar;\t\t/* Try to align the comments. */\n"
"\tstruct verylongtypename *baz;\t/* Does not fit in 2 tabs. */\n"
"};\n"
"struct foo *foohead;\t\t\t/* Head of global foo list. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:376
msgid ""
"Use E<.Xr queue 3> macros rather than rolling your own lists, whenever "
"possible.  Thus, the previous example would be better written:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:378
#, no-wrap
msgid "#include E<lt>sys/queue.hE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:386
#, no-wrap
msgid ""
"struct foo {\n"
"\tLIST_ENTRY(foo)\tlink;\t\t/* Use queue macros for foo lists. */\n"
"\tstruct mumble\tamumble;\t/* Comment for mumble. */\n"
"\tint\t\tbar;\t\t/* Try to align the comments. */\n"
"\tstruct verylongtypename *baz;\t/* Does not fit in 2 tabs. */\n"
"};\n"
"LIST_HEAD(, foo) foohead;\t\t/* Head of global foo list. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:400
msgid ""
"Avoid using typedefs for structure types.  Typedefs are problematic because "
"they do not properly hide their underlying type; for example you need to "
"know if the typedef is the structure itself or a pointer to the structure.  "
"In addition they must be declared exactly once, whereas an incomplete "
"structure type can be mentioned as many times as necessary.  Typedefs are "
"difficult to use in stand-alone header files: the header that defines the "
"typedef must be included before the header that uses it, or by the header "
"that uses it (which causes namespace pollution), or there must be a "
"back-door mechanism for obtaining the typedef."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:407
msgid ""
"When convention requires a E<.Ic typedef>, make its name match the struct "
"tag.  Avoid typedefs ending in E<.Dq Li _t>, except as specified in Standard "
"C or by POSIX."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:414
#, no-wrap
msgid ""
"/* Make the structure name match the typedef. */\n"
"typedef\tstruct bar {\n"
"\tint\tlevel;\n"
"} BAR;\n"
"typedef\tint\t\tfoo;\t\t/* This is foo. */\n"
"typedef\tconst long\tbaz;\t\t/* This is baz. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:417
msgid "All functions are prototyped somewhere."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:423
msgid ""
"Function prototypes for private functions (i.e., functions not used "
"elsewhere) go at the top of the first source module.  Functions local to one "
"source module should be declared E<.Ic static>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:429
msgid ""
"Functions used from other parts of the kernel are prototyped in the relevant "
"include file.  Function prototypes should be listed in a logical order, "
"preferably alphabetical unless there is a compelling reason to use a "
"different ordering."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:433
msgid ""
"Functions that are used locally in more than one module go into a separate "
"header file, e.g., E<.Qq Pa extern.h>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:437
msgid "Do not use the E<.Dv __P> macro."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:445
msgid ""
"In general code can be considered E<.Dq \"new code\"> when it makes up about "
"50% or more of the file(s) involved.  This is enough to break precedents in "
"the existing code and use the current E<.Nm> guidelines."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:448
msgid ""
"The kernel has a name associated with parameter types, e.g., in the kernel "
"use:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:450
#, no-wrap
msgid "void\tfunction(int fd);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:459
msgid ""
"In header files visible to userland applications, prototypes that are "
"visible must use either E<.Dq protected> names (ones beginning with an "
"underscore)  or no names with the types.  It is preferable to use protected "
"names.  E.g., use:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:461
#, no-wrap
msgid "void\tfunction(int);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:464
msgid "or:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:466
#, no-wrap
msgid "void\tfunction(int _fd);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:470
msgid ""
"Prototypes may have an extra space after a tab to enable function names to "
"line up:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:474
#, no-wrap
msgid ""
"static char\t*function(int _arg, const char *_arg2, struct foo *_arg3,\n"
"\t\t    struct bar *_arg4);\n"
"static void\t usage(void);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:486
#, no-wrap
msgid ""
"/*\n"
" * All major routines should have a comment briefly describing what\n"
" * they do.  The comment before the \"main\" routine should describe\n"
" * what the program does.\n"
" */\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"\tchar *ep;\n"
"\tlong num;\n"
"\tint ch;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:509
msgid ""
"For consistency, E<.Xr getopt 3> should be used to parse options.  Options "
"should be sorted in the E<.Xr getopt 3> call and the E<.Ic switch> "
"statement, unless parts of the E<.Ic switch> cascade.  Elements in a E<.Ic "
"switch> statement that cascade should have a E<.Li FALLTHROUGH> comment.  "
"Numerical arguments should be checked for accuracy.  Code which is "
"unreachable for non-obvious reasons may be marked /* E<.Li NOTREACHED> */."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:535
#, no-wrap
msgid ""
"\twhile ((ch = getopt(argc, argv, \"abNn:\")) != -1)\n"
"\t\tswitch (ch) {\t\t/* Indent the switch. */\n"
"\t\tcase 'a':\t\t/* Do not indent the case. */\n"
"\t\t\taflag = 1;\t/* Indent case body one tab. */\n"
"\t\t\t/* FALLTHROUGH */\n"
"\t\tcase 'b':\n"
"\t\t\tbflag = 1;\n"
"\t\t\tbreak;\n"
"\t\tcase 'N':\n"
"\t\t\tNflag = 1;\n"
"\t\t\tbreak;\n"
"\t\tcase 'n':\n"
"\t\t\tnum = strtol(optarg, &ep, 10);\n"
"\t\t\tif (num E<lt>= 0 || *ep != '\\e0') {\n"
"\t\t\t\twarnx(\"illegal number, -n argument -- %s\",\n"
"\t\t\t\t    optarg);\n"
"\t\t\t\tusage();\n"
"\t\t\t}\n"
"\t\t\tbreak;\n"
"\t\tcase '?':\n"
"\t\tdefault:\n"
"\t\t\tusage();\n"
"\t\t}\n"
"\targc -= optind;\n"
"\targv += optind;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:551
msgid ""
"Space after keywords E<.Pq Ic if , while , for , return , switch>.  Two "
"styles of braces E<.Ql ( \\&{> and E<.Ql \\&}>)  are allowed for single line "
"statements.  Either they are used for all single statements, or they are "
"used only where needed for clarity.  Usage within a function should be "
"consistent.  Forever loops are done with E<.Ic for Ns 's>, not E<.Ic while "
"Ns 's>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:567
#, no-wrap
msgid ""
"\tfor (p = buf; *p != '\\e0'; ++p)\n"
"\t\t;\t/* nothing */\n"
"\tfor (;;)\n"
"\t\tstmt;\n"
"\tfor (;;) {\n"
"\t\tz = a + really + long + statement + that + needs +\n"
"\t\t    two + lines + gets + indented + four + spaces +\n"
"\t\t    on + the + second + and + subsequent + lines;\n"
"\t}\n"
"\tfor (;;) {\n"
"\t\tif (cond)\n"
"\t\t\tstmt;\n"
"\t}\n"
"\tif (val != NULL)\n"
"\t\tval = realloc(val, newsize);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:574
msgid ""
"Parts of a E<.Ic for> loop may be left empty.  Do not put declarations "
"inside blocks unless the routine is unusually complicated."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:579
#, no-wrap
msgid ""
"\tfor (; cnt E<lt> 15; cnt++) {\n"
"\t\tstmt1;\n"
"\t\tstmt2;\n"
"\t}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:585
msgid ""
"Indentation is an 8 character tab.  Second level indents are four spaces.  "
"If you have to wrap a long statement, put the operator at the end of the "
"line."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:591
#, no-wrap
msgid ""
"\twhile (cnt E<lt> 20 && this_variable_name_is_too_long &&\n"
"\t    ep != NULL)\n"
"\t\tz = a + really + long + statement + that + needs +\n"
"\t\t    two + lines + gets + indented + four + spaces +\n"
"\t\t    on + the + second + and + subsequent + lines;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:598
msgid ""
"Do not add whitespace at the end of a line, and only use tabs followed by "
"spaces to form the indentation.  Do not use more spaces than a tab will "
"produce and do not use spaces in front of tabs."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:602
msgid ""
"Closing and opening braces go on the same line as the E<.Ic else>.  Braces "
"that are not necessary may be left out."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:610
#, no-wrap
msgid ""
"\tif (test)\n"
"\t\tstmt;\n"
"\telse if (bar) {\n"
"\t\tstmt;\n"
"\t\tstmt;\n"
"\t} else\n"
"\t\tstmt;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:624
msgid ""
"No spaces after function names.  Commas have a space after them.  No spaces "
"after E<.Ql \\&(> or E<.Ql \\&[> or preceding E<.Ql \\&]> or E<.Ql \\&)> "
"characters."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:628
#, no-wrap
msgid ""
"\terror = function(a1, a2);\n"
"\tif (error != 0)\n"
"\t\texit(error);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:636
msgid ""
"Unary operators do not require spaces, binary operators do.  Do not use "
"parentheses unless they are required for precedence or unless the statement "
"is confusing without them.  Remember that other people may confuse easier "
"than you.  Do YOU understand the following?"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:639
#, no-wrap
msgid ""
"\ta = b-E<gt>c[0] + ~d == (e || f) || g && h ? i : j E<gt>E<gt> 1;\n"
"\tk = !(l & FLAGS);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:642
msgid "Exits should be 0 on success, or 1 on failure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:648
#, no-wrap
msgid ""
"\texit(0);\t/*\n"
"\t\t\t * Avoid obvious comments such as\n"
"\t\t\t * \"Exit 0 on success.\"\n"
"\t\t\t */\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:654
msgid ""
"The function type should be on a line by itself preceding the function.  The "
"opening brace of the function body should be on a line by itself."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:658
#, no-wrap
msgid ""
"static char *\n"
"function(int a1, int a2, float fl, int a4)\n"
"{\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:663
msgid ""
"When declaring variables in functions declare them sorted by size, then in "
"alphabetical order; multiple ones per line are okay.  If a line overflows "
"reuse the type keyword."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:668
msgid ""
"Be careful to not obfuscate the code by initializing variables in the "
"declarations.  Use this feature only thoughtfully.  DO NOT use function "
"calls in initializers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:673
#, no-wrap
msgid ""
"\tstruct foo one, *two;\n"
"\tdouble three;\n"
"\tint *four, five;\n"
"\tchar *six, seven, eight, nine, ten, eleven, twelve;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:675
#, no-wrap
msgid "\tfour = myfunction();\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:682
msgid ""
"Do not declare functions inside other functions; ANSI C says that such "
"declarations have file scope regardless of the nesting of the declaration.  "
"Hiding file declarations in what appears to be a local scope is undesirable "
"and will elicit complaints from a good compiler."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:694
msgid ""
"Casts and E<.Ic sizeof Ns 's> are not followed by a space.  Note that E<.Xr "
"indent 1> does not understand this rule.  E<.Ic sizeof Ns 's> are written "
"with parenthesis always.  The redundant parenthesis rules do not apply to "
"E<.Fn sizeof var> instances."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:715
msgid ""
"E<.Dv NULL> is the preferred null pointer constant.  Use E<.Dv NULL> instead "
"of E<.Vt ( \"type *\" ) Ns 0> or E<.Vt ( \"type *\" ) Ns Dv NULL> in "
"contexts where the compiler knows the type, e.g., in assignments.  Use E<.Vt "
"( \"type *\" ) Ns Dv NULL> in other contexts, in particular for all function "
"args.  (Casting is essential for variadic args and is necessary for other "
"args if the function prototype might not be in scope.)  Test pointers "
"against E<.Dv NULL>, e.g., use:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:717
#, no-wrap
msgid "(p = f()) == NULL\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:720 /usr/src/share/man/man9/style.9:732
msgid "not:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:722
#, no-wrap
msgid "!(p = f())\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:727
msgid "Do not use E<.Ic \\&!> for tests unless it is a boolean, e.g., use:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:729
#, no-wrap
msgid "if (*p == '\\e0')\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:734
#, no-wrap
msgid "if (!*p)\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:740
msgid ""
"Routines returning E<.Vt \"void *\"> should not have their return values "
"cast to any pointer type."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:744
msgid "Values in E<.Ic return> statements should be enclosed in parentheses."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:750
msgid "Use E<.Xr err 3> or E<.Xr warn 3>, do not roll your own."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:757
#, no-wrap
msgid ""
"\tif ((four = malloc(sizeof(struct foo))) == NULL)\n"
"\t\terr(1, (char *)NULL);\n"
"\tif ((six = (int *)overflow()) == NULL)\n"
"\t\terrx(1, \"number overflowed\");\n"
"\treturn (eight);\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:761
msgid ""
"When converting K&R style declarations to ANSI style, preserve any comments "
"about parameters."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:763
msgid "Long parameter lists are wrapped with a normal four space indent."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:765
msgid "Variable numbers of arguments should look like this:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:767
#, no-wrap
msgid "#include E<lt>stdarg.hE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:772
#, no-wrap
msgid ""
"void\n"
"vaf(const char *fmt, ...)\n"
"{\n"
"\tva_list ap;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:778
#, no-wrap
msgid ""
"\tva_start(ap, fmt);\n"
"\tSTUFF;\n"
"\tva_end(ap);\n"
"\t/* No return needed for void functions. */\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:783
#, no-wrap
msgid ""
"static void\n"
"usage()\n"
"{\n"
"\t/* Insert an empty line if the function has no local variables. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:793
msgid ""
"Use E<.Xr printf 3>, not E<.Xr fputs 3>, E<.Xr puts 3>, E<.Xr putchar 3>, "
"whatever; it is faster and usually cleaner, not to mention avoiding stupid "
"bugs."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:797
msgid ""
"Usage statements should look like the manual pages E<.Sx SYNOPSIS>.  The "
"usage statement should be structured in the following order:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:805
msgid ""
"Options without operands come first, in alphabetical order, inside a single "
"set of brackets E<.Ql ( \\&[> and E<.Ql \\&]>)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:809
msgid ""
"Options with operands come next, also in alphabetical order, with each "
"option and its argument inside its own pair of brackets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:814
msgid ""
"Required arguments (if any)  are next, listed in the order they should be "
"specified on the command line."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:819
msgid ""
"Finally, any optional arguments should be listed, listed in the order they "
"should be specified, and all inside brackets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:828
msgid ""
"A bar E<.Pq Ql \\&|> separates E<.Dq either-or> options/arguments, and "
"multiple options/arguments which are specified together are placed in a "
"single set of brackets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:831
#, no-wrap
msgid ""
"\"usage: f [-aDde] [-b b_arg] [-m m_arg] req1 req2 [opt1 [opt2]]\\en\"\n"
"\"usage: f [-a | -b] [-c [-dEe] [-n number]]\\en\"\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:836
#, no-wrap
msgid ""
"\t(void)fprintf(stderr, \"usage: f [-ab]\\en\");\n"
"\texit(1);\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:843
msgid ""
"Note that the manual page options description should list the options in "
"pure alphabetical order.  That is, without regard to whether an option takes "
"arguments or not.  The alphabetical ordering should take into account the "
"case ordering shown above."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:849
msgid ""
"New core kernel code should be reasonably compliant with the E<.Nm> guides.  "
"The guidelines for third-party maintained modules and device drivers are "
"more relaxed but at a minimum should be internally consistent with their "
"style."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:857
msgid ""
"Stylistic changes (including whitespace changes) are hard on the source "
"repository and are to be avoided without good reason.  Code that is "
"approximately E<.Fx> KNF E<.Nm> compliant in the repository must not diverge "
"from compliance."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:862
msgid ""
"Whenever possible, code should be run through a code checker (e.g., various "
"static analyzers or E<.Nm cc Fl Wall>)  and produce minimal warnings."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/style.9:862
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/style.9:864
#, no-wrap
msgid "Pa /usr/src/tools/tools/editing/freebsd.el"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:869
msgid "An Emacs plugin to follow the E<.Fx> E<.Nm> indentation rules."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/style.9:869
#, no-wrap
msgid "Pa /usr/src/tools/tools/editing/freebsd.vim"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:874
msgid "A Vim plugin to follow the E<.Fx> E<.Nm> indentation rules."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/style.9:875
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:881
msgid ""
"E<.Xr indent 1>, E<.Xr err 3>, E<.Xr warn 3>, E<.Xr style.Makefile 5>, E<.Xr "
"style.lua 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/style.9:881
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/style.9:893
msgid ""
"This manual page is largely based on the E<.Pa src/admin/style/style> file "
"from the E<.Bx 4.4 Lite2> release, with occasional updates to reflect the "
"current practice and desire of the E<.Fx> project.  E<.Pa "
"src/admin/style/style> is a codification by the CSRG of the programming "
"style of Ken Thompson and Dennis Ritchie in E<.At v6>."
msgstr ""
