# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/usbdi.9:27
#, no-wrap
msgid "November 14, 2016"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/usbdi.9:28
#, no-wrap
msgid "USBDI 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:82
msgid ""
"E<.Nm usb_fifo_alloc_buffer>, E<.Nm usb_fifo_attach>, E<.Nm "
"usb_fifo_detach>, E<.Nm usb_fifo_free_buffer>, E<.Nm usb_fifo_get_data>, "
"E<.Nm usb_fifo_get_data_buffer>, E<.Nm usb_fifo_get_data_error>, E<.Nm "
"usb_fifo_get_data_linear>, E<.Nm usb_fifo_put_bytes_max>, E<.Nm "
"usb_fifo_put_data>, E<.Nm usb_fifo_put_data_buffer>, E<.Nm "
"usb_fifo_put_data_error>, E<.Nm usb_fifo_put_data_linear>, E<.Nm "
"usb_fifo_reset>, E<.Nm usb_fifo_softc>, E<.Nm usb_fifo_wakeup>, E<.Nm "
"usbd_do_request>, E<.Nm usbd_do_request_flags>, E<.Nm usbd_errstr>, E<.Nm "
"usbd_lookup_id_by_info>, E<.Nm usbd_lookup_id_by_uaa>, E<.Nm "
"usbd_transfer_clear_stall>, E<.Nm usbd_transfer_drain>, E<.Nm "
"usbd_transfer_pending>, E<.Nm usbd_transfer_poll>, E<.Nm "
"usbd_transfer_setup>, E<.Nm usbd_transfer_start>, E<.Nm usbd_transfer_stop>, "
"E<.Nm usbd_transfer_submit>, E<.Nm usbd_transfer_unsetup>, E<.Nm "
"usbd_xfer_clr_flag>, E<.Nm usbd_xfer_frame_data>, E<.Nm "
"usbd_xfer_frame_len>, E<.Nm usbd_xfer_get_frame>, E<.Nm usbd_xfer_get_priv>, "
"E<.Nm usbd_xfer_is_stalled>, E<.Nm usbd_xfer_max_framelen>, E<.Nm "
"usbd_xfer_max_frames>, E<.Nm usbd_xfer_max_len>, E<.Nm usbd_xfer_set_flag>, "
"E<.Nm usbd_xfer_set_frame_data>, E<.Nm usbd_xfer_set_frame_len>, E<.Nm "
"usbd_xfer_set_frame_offset>, E<.Nm usbd_xfer_set_frames>, E<.Nm "
"usbd_xfer_set_interval>, E<.Nm usbd_xfer_set_priv>, E<.Nm "
"usbd_xfer_set_stall>, E<.Nm usbd_xfer_set_timeout>, E<.Nm usbd_xfer_softc>, "
"E<.Nm usbd_xfer_state>, E<.Nm usbd_xfer_status>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/usbdi.9:82
#, no-wrap
msgid "Universal Serial Bus driver programming interface"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:83
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/usbdi.9:84
#, no-wrap
msgid "dev/usb/usb.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/usbdi.9:85
#, no-wrap
msgid "dev/usb/usbdi.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/usbdi.9:86
#, no-wrap
msgid "dev/usb/usbdi_util.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:114
msgid ""
"E<.Ft \"usb_error_t\"> E<.Fo \"usbd_transfer_setup\"> E<.Fa \"struct "
"usb_device *udev\"> E<.Fa \"const uint8_t *ifaces\"> E<.Fa \"struct usb_xfer "
"**pxfer\"> E<.Fa \"const struct usb_config *setup_start\"> E<.Fa \"uint16_t "
"n_setup\"> E<.Fa \"void *priv_sc\"> E<.Fa \"struct mtx *priv_mtx\"> E<.Fc> "
"E<.Ft \"void\"> E<.Fo \"usbd_transfer_unsetup\"> E<.Fa \"struct usb_xfer "
"**pxfer\"> E<.Fa \"uint16_t n_setup\"> E<.Fc> E<.Ft \"void\"> E<.Fo "
"\"usbd_transfer_start\"> E<.Fa \"struct usb_xfer *xfer\"> E<.Fc> E<.Ft "
"\"void\"> E<.Fo \"usbd_transfer_stop\"> E<.Fa \"struct usb_xfer *xfer\"> "
"E<.Fc> E<.Ft \"void\"> E<.Fo \"usbd_transfer_drain\"> E<.Fa \"struct "
"usb_xfer *xfer\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:114
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:121
msgid ""
"The Universal Serial Bus (USB) driver programming interface provides USB "
"peripheral drivers with a host controller independent API for controlling "
"and communicating with USB peripherals.  The E<.Nm usb> module supports both "
"USB Host and USB Device side mode."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:121
#, no-wrap
msgid "USB TRANSFER MANAGEMENT FUNCTIONS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:123
msgid "The USB standard defines four types of USB transfers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:126
msgid ""
"Control transfers, Bulk transfers, Interrupt transfers and Isochronous "
"transfers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:128
msgid "All the transfer types are managed using the following five functions:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:134
msgid ""
"E<.Fn usbd_transfer_setup> This function will allocate memory for and "
"initialise an array of USB transfers and all required DMA memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:159
msgid ""
"This function can sleep or block waiting for resources to become available.  "
"E<.Fa udev> is a pointer to \"struct usb_device\".  E<.Fa ifaces> is an "
"array of interface index numbers to use.  See \"if_index\".  E<.Fa pxfer> is "
"a pointer to an array of USB transfer pointers that are initialized to NULL, "
"and then pointed to allocated USB transfers.  E<.Fa setup_start> is a "
"pointer to an array of USB config structures.  E<.Fa n_setup> is a number "
"telling the USB system how many USB transfers should be setup.  E<.Fa "
"priv_sc> is the private softc pointer, which will be used to initialize "
"\"xfer-E<gt>priv_sc\".  E<.Fa priv_mtx> is the private mutex protecting the "
"transfer structure and the softc.  This pointer is used to initialize "
"\"xfer-E<gt>priv_mtx\".  This function returns zero upon success.  A "
"non-zero return value indicates failure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:171
msgid ""
"E<.Fn usbd_transfer_unsetup> This function will release the given USB "
"transfers and all allocated resources associated with these USB transfers.  "
"E<.Fa pxfer> is a pointer to an array of USB transfer pointers, that may be "
"NULL, that should be freed by the USB system.  E<.Fa n_setup> is a number "
"telling the USB system how many USB transfers should be unsetup."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:173
msgid "This function can sleep waiting for USB transfers to complete."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:176 /usr/src/share/man/man9/usbdi.9:192 /usr/src/share/man/man9/usbdi.9:207 /usr/src/share/man/man9/usbdi.9:225
msgid ""
"This function is NULL safe with regard to the USB transfer structure "
"pointer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:179
msgid "It is not allowed to call this function from the USB transfer callback."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:186
msgid ""
"E<.Fn usbd_transfer_start> This function will start the USB transfer pointed "
"to by E<.Fa xfer>, if not already started."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:189 /usr/src/share/man/man9/usbdi.9:202
msgid ""
"This function is always non-blocking and must be called with the so-called "
"private USB mutex locked."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:199
msgid ""
"E<.Fn usbd_transfer_stop> This function will stop the USB transfer pointed "
"to by E<.Fa xfer>, if not already stopped."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:204
msgid "This function can return before the USB callback has been called."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:210
msgid ""
"If the transfer was in progress, the callback will called with "
"\"USB_ST_ERROR\" and \"error = USB_ERR_CANCELLED\"."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:216
msgid ""
"E<.Fn usbd_transfer_drain> This function will stop an USB transfer, if not "
"already stopped and wait for any additional USB hardware operations to "
"complete."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:219
msgid ""
"Buffers that are loaded into DMA using \"usbd_xfer_set_frame_data()\" can "
"safely be freed after that this function has returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:222
msgid ""
"This function can block the caller and will not return before the USB "
"callback has been called."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:226
#, no-wrap
msgid "USB TRANSFER CALLBACK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:229
msgid "The USB callback has three states."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:232
msgid ""
"USB_ST_SETUP, USB_ST_TRANSFERRED and USB_ST_ERROR.  USB_ST_SETUP is the "
"initial state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:235
msgid ""
"After the callback has been called with this state it will always be called "
"back at a later stage in one of the other two states."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:238
msgid ""
"The USB callback should not restart the USB transfer in case the error cause "
"is USB_ERR_CANCELLED."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:240
msgid "The USB callback is protected from recursion."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:243
msgid ""
"That means one can start and stop whatever transfer from the callback of "
"another transfer one desires."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:245
msgid "Also the transfer that is currently called back."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:248
msgid ""
"Recursion is handled like this that when the callback that wants to recurse "
"returns it is called one more time."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:255
msgid ""
"E<.Fn usbd_transfer_submit> This function should only be called from within "
"the USB callback and is used to start the USB hardware."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:258
msgid ""
"An USB transfer can have multiple frames consisting of one or more USB "
"packets making up an I/O vector for all USB transfer types."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:264
#, no-wrap
msgid ""
"void\n"
"usb_default_callback(struct usb_xfer *xfer, usb_error_t error)\n"
"{\n"
"\tint actlen;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:266
#, no-wrap
msgid "\tusbd_xfer_status(xfer, &actlen, NULL, NULL, NULL);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:274
#, no-wrap
msgid ""
"\tswitch (USB_GET_STATE(xfer)) {\n"
"\tcase USB_ST_SETUP:\n"
"\t\t/*\n"
"\t\t * Setup xfer frame lengths/count and data\n"
"\t\t */\n"
"\t\tusbd_transfer_submit(xfer);\n"
"\t\tbreak;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:282
#, no-wrap
msgid ""
"\tcase USB_ST_TRANSFERRED:\n"
"\t\t/*\n"
"\t\t * Read\tusb frame data, if any.\n"
"\t\t * \"actlen\" has the total length for all frames\n"
"\t\t * transferred.\n"
"\t\t */\n"
"\t\tbreak;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:296
#, no-wrap
msgid ""
"\tdefault: /* Error */\n"
"\t\t/*\n"
"\t\t * Print error message and clear stall\n"
"\t\t * for example.\n"
"\t\t */\n"
"\t\tbreak;\n"
"\t}\n"
"\t/*\n"
"\t * Here it is safe to do something without the private\n"
"\t * USB mutex locked.\n"
"\t */\n"
"\treturn;\n"
"}\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:298
#, no-wrap
msgid "USB CONTROL TRANSFERS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:300
msgid "An USB control transfer has three parts."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:303
msgid "First the SETUP packet, then DATA packet(s) and then a STATUS packet."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:311
msgid ""
"The SETUP packet is always pointed to by frame 0 and the length is set by "
"E<.Fn usbd_xfer_frame_len> also if there should not be sent any SETUP "
"packet! If an USB control transfer has no DATA stage, then the number of "
"frames should be set to 1."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:313
msgid "Else the default number of frames is 2."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:320
#, no-wrap
msgid ""
"Example1: SETUP + STATUS\n"
" usbd_xfer_set_frames(xfer, 1);\n"
" usbd_xfer_set_frame_len(xfer, 0, 8);\n"
" usbd_transfer_submit(xfer);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:326
#, no-wrap
msgid ""
"Example2: SETUP + DATA + STATUS\n"
" usbd_xfer_set_frames(xfer, 2);\n"
" usbd_xfer_set_frame_len(xfer, 0, 8);\n"
" usbd_xfer_set_frame_len(xfer, 1, 1);\n"
" usbd_transfer_submit(xfer);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:332
#, no-wrap
msgid ""
"Example3: SETUP + DATA + STATUS - split\n"
"1st callback:\n"
" usbd_xfer_set_frames(xfer, 1);\n"
" usbd_xfer_set_frame_len(xfer, 0, 8);\n"
" usbd_transfer_submit(xfer);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:339
#, no-wrap
msgid ""
"2nd callback:\n"
" /* IMPORTANT: frbuffers[0] must still point at the setup packet! */\n"
" usbd_xfer_set_frames(xfer, 2);\n"
" usbd_xfer_set_frame_len(xfer, 0, 0);\n"
" usbd_xfer_set_frame_len(xfer, 1, 1);\n"
" usbd_transfer_submit(xfer);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:346
#, no-wrap
msgid ""
"Example4: SETUP + STATUS - split\n"
"1st callback:\n"
" usbd_xfer_set_frames(xfer, 1);\n"
" usbd_xfer_set_frame_len(xfer, 0, 8);\n"
" usbd_xfer_set_flag(xfer, USB_MANUAL_STATUS);\n"
" usbd_transfer_submit(xfer);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:352
#, no-wrap
msgid ""
"2nd callback:\n"
" usbd_xfer_set_frames(xfer, 1);\n"
" usbd_xfer_set_frame_len(xfer, 0, 0);\n"
" usbd_xfer_clr_flag(xfer, USB_MANUAL_STATUS);\n"
" usbd_transfer_submit(xfer);\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:354
#, no-wrap
msgid "USB TRANSFER CONFIG"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:359
msgid ""
"To simply the search for endpoints the E<.Nm usb> module defines a USB "
"config structure where it is possible to specify the characteristics of the "
"wanted endpoint."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:372
#, no-wrap
msgid ""
"struct usb_config {\n"
"\tbufsize,\n"
"\tcallback\n"
"\tdirection,\n"
"\tendpoint,\n"
"\tframes,\n"
"\tindex flags,\n"
"\tinterval,\n"
"\ttimeout,\n"
"\ttype,\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:378
msgid "E<.Fa type> field selects the USB pipe type."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:381
msgid "Valid values are: UE_INTERRUPT, UE_CONTROL, UE_BULK, UE_ISOCHRONOUS."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:383
msgid "The special value UE_BULK_INTR will select BULK and INTERRUPT pipes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:385 /usr/src/share/man/man9/usbdi.9:394 /usr/src/share/man/man9/usbdi.9:412 /usr/src/share/man/man9/usbdi.9:600
msgid "This field is mandatory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:389
msgid "E<.Fa endpoint> field selects the USB endpoint number."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:392
msgid ""
"A value of 0xFF, \"-1\" or \"UE_ADDR_ANY\" will select the first matching "
"endpoint."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:398
msgid "E<.Fa direction> field selects the USB endpoint direction."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:400
msgid "A value of \"UE_DIR_ANY\" will select the first matching endpoint."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:402
msgid "Else valid values are: \"UE_DIR_IN\" and \"UE_DIR_OUT\"."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:406
msgid ""
"\"UE_DIR_IN\" and \"UE_DIR_OUT\" can be binary OR'ed by \"UE_DIR_SID\" which "
"means that the direction will be swapped in case of USB_MODE_DEVICE."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:410
msgid ""
"Note that \"UE_DIR_IN\" refers to the data transfer direction of the \"IN\" "
"tokens and \"UE_DIR_OUT\" refers to the data transfer direction of the "
"\"OUT\" tokens."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:416
msgid "E<.Fa interval> field selects the interrupt interval."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:419
msgid ""
"The value of this field is given in milliseconds and is independent of "
"device speed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:421
msgid "Depending on the endpoint type, this field has different meaning:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:422 /usr/src/share/man/man9/usbdi.9:452
#, no-wrap
msgid "UE_INTERRUPT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:425
msgid ""
"\"0\" use the default interrupt interval based on endpoint descriptor.  "
"\"Else\" use the given value for polling rate."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:425 /usr/src/share/man/man9/usbdi.9:456
#, no-wrap
msgid "UE_ISOCHRONOUS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:428
msgid "\"0\" use default.  \"Else\" the value is ignored."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:428 /usr/src/share/man/man9/usbdi.9:450
#, no-wrap
msgid "UE_BULK"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:429 /usr/src/share/man/man9/usbdi.9:454
#, no-wrap
msgid "UE_CONTROL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:434
msgid ""
"\"0\" no transfer pre-delay.  \"Else\" a delay as given by this field in "
"milliseconds is inserted before the hardware is started when "
"\"usbd_transfer_submit()\" is called."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:437
msgid ""
"NOTE: The transfer timeout, if any, is started after that the pre-delay has "
"elapsed!"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:444
msgid ""
"E<.Fa timeout> field, if non-zero, will set the transfer timeout in "
"milliseconds.  If the \"timeout\" field is zero and the transfer type is "
"ISOCHRONOUS a timeout of 250ms will be used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:449
msgid ""
"E<.Fa frames> field sets the maximum number of frames.  If zero is specified "
"it will yield the following results:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:452 /usr/src/share/man/man9/usbdi.9:454
msgid "xfer-E<gt>nframes = 1;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:456
msgid "xfer-E<gt>nframes = 2;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:459
msgid "Not allowed.  Will cause an error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:465
msgid ""
"E<.Fa ep_index> field allows you to give a number, in case more endpoints "
"match the description, that selects which matching \"ep_index\" should be "
"used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:471
msgid ""
"E<.Fa if_index> field allows you to select which of the interface numbers in "
"the \"ifaces\" array parameter passed to \"usbd_transfer_setup\" that should "
"be used when setting up the given USB transfer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:477
msgid ""
"E<.Fa flags> field has type \"struct usb_xfer_flags\" and allows one to set "
"initial flags an USB transfer.  Valid flags are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:478
#, no-wrap
msgid "force_short_xfer"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:483
msgid ""
"This flag forces the last transmitted USB packet to be short.  A short "
"packet has a length of less than \"xfer-E<gt>max_packet_size\", which "
"derives from \"wMaxPacketSize\".  This flag can be changed during operation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:483
#, no-wrap
msgid "short_xfer_ok"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:487
msgid ""
"This flag allows the received transfer length, \"xfer-E<gt>actlen\" to be "
"less than \"xfer-E<gt>sumlen\" upon completion of a transfer.  This flag can "
"be changed during operation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:487
#, no-wrap
msgid "short_frames_ok"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:493
msgid ""
"This flag allows the reception of multiple short USB frames.  This flag only "
"has effect for BULK and INTERRUPT endpoints and if the number of frames "
"received is greater than 1.  This flag can be changed during operation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:493
#, no-wrap
msgid "pipe_bof"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:499
msgid ""
"This flag causes a failing USB transfer to remain first in the PIPE queue "
"except in the case of \"xfer-E<gt>error\" equal to \"USB_ERR_CANCELLED\".  "
"No other USB transfers in the affected PIPE queue will be started until "
"either:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:500
#, no-wrap
msgid "1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:502
msgid "The failing USB transfer is stopped using \"usbd_transfer_stop()\"."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:502
#, no-wrap
msgid "2"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:504
msgid "The failing USB transfer performs a successful transfer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:509
msgid ""
"The purpose of this flag is to avoid races when multiple transfers are "
"queued for execution on an USB endpoint, and the first executing transfer "
"fails leading to the need for clearing of stall for example."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:513
msgid ""
"In this case this flag is used to prevent the following USB transfers from "
"being executed at the same time the clear-stall command is executed on the "
"USB control endpoint."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:515 /usr/src/share/man/man9/usbdi.9:558 /usr/src/share/man/man9/usbdi.9:575
msgid "This flag can be changed during operation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:517
msgid "\"BOF\" is short for \"Block On Failure\"."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:520
msgid ""
"NOTE: This flag should be set on all BULK and INTERRUPT USB transfers which "
"use an endpoint that can be shared between userland and kernel."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:522
#, no-wrap
msgid "proxy_buffer"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:525
msgid ""
"Setting this flag will cause that the total buffer size will be rounded up "
"to the nearest atomic hardware transfer size."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:528
msgid ""
"The maximum data length of any USB transfer is always stored in the "
"\"xfer-E<gt>max_data_length\"."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:531
msgid ""
"For control transfers the USB kernel will allocate additional space for the "
"8-bytes of SETUP header."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:534
msgid "These 8-bytes are not counted by the \"xfer-E<gt>max_data_length\" variable."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:536 /usr/src/share/man/man9/usbdi.9:545
msgid "This flag cannot be changed during operation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:538
#, no-wrap
msgid "ext_buffer"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:541
msgid "Setting this flag will cause that no data buffer will be allocated."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:543
msgid "Instead the USB client must supply a data buffer."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:547
#, no-wrap
msgid "manual_status"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:550
msgid ""
"Setting this flag prevents an USB STATUS stage to be appended to the end of "
"the USB control transfer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:552
msgid "If no control data is transferred this flag must be cleared."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:554
msgid "Else an error will be returned to the USB callback."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:556
msgid "This flag is mostly useful for the USB device side."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:560
#, no-wrap
msgid "no_pipe_ok"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:563
msgid ""
"Setting this flag causes the USB_ERR_NO_PIPE error to be ignored.  This flag "
"cannot be changed during operation."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:565
#, no-wrap
msgid "stall_pipe"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:567
#, no-wrap
msgid "Device Side Mode"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:570
msgid ""
"Setting this flag will cause STALL pids to be sent to the endpoint belonging "
"to this transfer before the transfer is started."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:573
msgid ""
"The transfer is started at the moment the host issues a clear-stall command "
"on the STALL'ed endpoint."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:575
#, no-wrap
msgid "Host Side Mode"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:578
msgid ""
"Setting this flag will cause a clear-stall control request to be executed on "
"the endpoint before the USB transfer is started."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:584
msgid ""
"If this flag is changed outside the USB callback function you have to use "
"the \"usbd_xfer_set_stall()\" and \"usbd_transfer_clear_stall()\" functions! "
"This flag is automatically cleared after that the stall or clear stall has "
"been executed."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/usbdi.9:585
#, no-wrap
msgid "pre_scale_frames"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:589
msgid ""
"If this flag is set the number of frames specified is assumed to give the "
"buffering time in milliseconds instead of frames.  During transfer setup the "
"frames field is pre scaled with the corresponding value for the endpoint and "
"rounded to the nearest number of frames greater than zero.  This option only "
"has effect for ISOCHRONOUS transfers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:593
msgid "E<.Fa bufsize> field sets the total buffer size in bytes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:596
msgid ""
"If this field is zero, \"wMaxPacketSize\" will be used, multiplied by the "
"\"frames\" field if the transfer type is ISOCHRONOUS."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:598
msgid "This is useful for setting up interrupt pipes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:603
msgid ""
"NOTE: For control transfers \"bufsize\" includes the length of the request "
"structure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:608
msgid "E<.Fa callback> pointer sets the USB callback.  This field is mandatory."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:610
#, no-wrap
msgid "USB LINUX COMPAT LAYER"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:614
msgid "The E<.Nm usb> module supports the Linux USB API."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:616
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:620
msgid "E<.Xr libusb 3>, E<.Xr usb 4>, E<.Xr usbconfig 8>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:620
#, no-wrap
msgid "STANDARDS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:624
msgid "The E<.Nm usb> module complies with the USB 2.0 standard."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/usbdi.9:624
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/usbdi.9:632
msgid ""
"The E<.Nm usb> module has been inspired by the NetBSD USB stack initially "
"written by Lennart Augustsson.  The E<.Nm usb> module was written by E<.An "
"Hans Petter Selasky Aq Mt hselasky@FreeBSD.org>."
msgstr ""
