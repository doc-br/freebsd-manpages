# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/vm_map_find.9:28
#, no-wrap
msgid "September 12, 2013"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/vm_map_find.9:29
#, no-wrap
msgid "VM_MAP_FIND 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:33
msgid "E<.Nm vm_map_find>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/vm_map_find.9:33
#, no-wrap
msgid "find a free region within a map, and optionally map a vm_object"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:34
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vm_map_find.9:35
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vm_map_find.9:36
#, no-wrap
msgid "vm/vm.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vm_map_find.9:37
#, no-wrap
msgid "vm/vm_map.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:44
msgid ""
"E<.Ft int> E<.Fo vm_map_find> E<.Fa \"vm_map_t map\" \"vm_object_t object\" "
"\"vm_ooffset_t offset\"> E<.Fa \"vm_offset_t *addr\" \"vm_size_t length\" "
"\"vm_offset_t max_addr\"> E<.Fa \"int find_space\" \"vm_prot_t prot\" "
"\"vm_prot_t max\" \"int cow\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:44
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:57
msgid ""
"The E<.Fn vm_map_find> function attempts to find a free region in the target "
"E<.Fa map>, with the given E<.Fa length.> If a free region is found, E<.Fn "
"vm_map_find> creates a mapping of E<.Fa object> via a call to E<.Xr "
"vm_map_insert 9>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:67
msgid ""
"The arguments E<.Fa offset>, E<.Fa prot>, E<.Fa max>, and E<.Fa cow> are "
"passed unchanged to E<.Xr vm_map_insert 9> when creating the mapping, if and "
"only if a free region is found."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:74
msgid ""
"If E<.Fa object> is E<.Pf non- Dv NULL>, the reference count on the object "
"must be incremented by the caller before calling this function to account "
"for the new entry."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:82
msgid ""
"If E<.Fa max_addr> is non-zero, it specifies an upper bound on the mapping.  "
"The mapping will only succeed if a free region can be found that resides "
"entirely below E<.Fa max_addr>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:94
msgid ""
"The E<.Fa find_space> argument specifies the strategy to use when searching "
"for a free region of the requested length.  For all values other than E<.Dv "
"VMFS_NO_SPACE>, E<.Xr vm_map_findspace 9> is called to locate a free region "
"of the requested length with a starting address at or above E<.Fa *addr>.  "
"The following strategies are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vm_map_find.9:95
#, no-wrap
msgid "Dv VMFS_NO_SPACE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:99
msgid ""
"The mapping will only succeed if there is a free region of the requested "
"length at the given address E<.Fa *addr>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vm_map_find.9:99
#, no-wrap
msgid "Dv VMFS_ANY_SPACE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:101
msgid "The mapping will succeed as long as there is a free region."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vm_map_find.9:101
#, no-wrap
msgid "Dv VMFS_SUPER_SPACE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:111
msgid ""
"The mapping will succeed as long as there is a free region that begins on a "
"superpage boundary.  If E<.Fa object> is E<.Pf non- Dv NULL> and is already "
"backed by superpages, then the mapping will require a free region that "
"aligns relative to the existing superpages rather than one beginning on a "
"superpage boundary."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vm_map_find.9:111
#, no-wrap
msgid "Dv VMFS_OPTIMAL_SPACE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:120
msgid ""
"The mapping will succeed as long as there is a free region.  However, if "
"E<.Fa object> is E<.Pf non- Dv NULL> and is already backed by superpages, "
"this strategy will attempt to find a free region aligned relative to the "
"existing superpages."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/vm_map_find.9:120
#, no-wrap
msgid "Dv VMFS_ALIGNED_SPACE Ns Pq Fa n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:125
msgid ""
"The mapping will succeed as long as there is a free region that aligns on a "
"E<.Pf 2^ Fa n> boundary."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:126
#, no-wrap
msgid "IMPLEMENTATION NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:132
msgid ""
"This function acquires a lock on E<.Fa map> by calling E<.Xr vm_map_lock 9>, "
"and holds it until the function returns."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:136
msgid ""
"The search for a free region is defined to be first-fit, from the address "
"E<.Fa addr> onwards."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:136
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:154
msgid ""
"The E<.Fn vm_map_find> function returns E<.Dv KERN_SUCCESS> if the mapping "
"was successfully created.  If space could not be found or E<.Fa find_space> "
"was E<.Dv VMFS_NO_SPACE> and the given address, E<.Fa addr>, was already "
"mapped, E<.Dv KERN_NO_SPACE> will be returned.  If the discovered range "
"turned out to be bogus, E<.Dv KERN_INVALID_ADDRESS> will be returned."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:154
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:159
msgid ""
"E<.Xr vm_map 9>, E<.Xr vm_map_findspace 9>, E<.Xr vm_map_insert 9>, E<.Xr "
"vm_map_lock 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vm_map_find.9:159
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vm_map_find.9:161
msgid "This manual page was written by E<.An Bruce M Simpson Aq Mt bms@spc.org>."
msgstr ""
