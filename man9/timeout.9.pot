# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/timeout.9:32
#, no-wrap
msgid "July 27, 2016"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/timeout.9:33
#, no-wrap
msgid "TIMEOUT 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/timeout.9:35
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:62
msgid ""
"E<.Nm callout_active>, E<.Nm callout_deactivate>, E<.Nm "
"callout_async_drain>, E<.Nm callout_drain>, E<.Nm callout_handle_init>, "
"E<.Nm callout_init>, E<.Nm callout_init_mtx>, E<.Nm callout_init_rm>, E<.Nm "
"callout_init_rw>, E<.Nm callout_pending>, E<.Nm callout_reset>, E<.Nm "
"callout_reset_curcpu>, E<.Nm callout_reset_on>, E<.Nm callout_reset_sbt>, "
"E<.Nm callout_reset_sbt_curcpu>, E<.Nm callout_reset_sbt_on>, E<.Nm "
"callout_schedule>, E<.Nm callout_schedule_curcpu>, E<.Nm "
"callout_schedule_on>, E<.Nm callout_schedule_sbt>, E<.Nm "
"callout_schedule_sbt_curcpu>, E<.Nm callout_schedule_sbt_on>, E<.Nm "
"callout_stop>, E<.Nm callout_when>, E<.Nm timeout>, E<.Nm untimeout>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/timeout.9:62
#, no-wrap
msgid "execute a function after a specified length of time"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/timeout.9:63
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/timeout.9:64
#, no-wrap
msgid "sys/types.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/timeout.9:65
#, no-wrap
msgid "sys/systm.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:68
#, no-wrap
msgid "typedef void timeout_t (void *);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:79
msgid ""
"E<.Ft int> E<.Fn callout_active \"struct callout *c\"> E<.Ft void> E<.Fn "
"callout_deactivate \"struct callout *c\"> E<.Ft int> E<.Fn "
"callout_async_drain \"struct callout *c\" \"timeout_t *drain\"> E<.Ft int> "
"E<.Fn callout_drain \"struct callout *c\"> E<.Ft void> E<.Fn "
"callout_handle_init \"struct callout_handle *handle\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:81
#, no-wrap
msgid "struct callout_handle handle = CALLOUT_HANDLE_INITIALIZER(&handle);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:179
msgid ""
"E<.Ft void> E<.Fn callout_init \"struct callout *c\" \"int mpsafe\"> E<.Ft "
"void> E<.Fn callout_init_mtx \"struct callout *c\" \"struct mtx *mtx\" \"int "
"flags\"> E<.Ft void> E<.Fn callout_init_rm \"struct callout *c\" \"struct "
"rmlock *rm\" \"int flags\"> E<.Ft void> E<.Fn callout_init_rw \"struct "
"callout *c\" \"struct rwlock *rw\" \"int flags\"> E<.Ft int> E<.Fn "
"callout_pending \"struct callout *c\"> E<.Ft int> E<.Fn callout_reset "
"\"struct callout *c\" \"int ticks\" \"timeout_t *func\" \"void *arg\"> E<.Ft "
"int> E<.Fo callout_reset_curcpu> E<.Fa \"struct callout *c\"> E<.Fa \"int "
"ticks\"> E<.Fa \"timeout_t *func\"> E<.Fa \"void *arg\"> E<.Fc> E<.Ft int> "
"E<.Fo callout_reset_on> E<.Fa \"struct callout *c\"> E<.Fa \"int ticks\"> "
"E<.Fa \"timeout_t *func\"> E<.Fa \"void *arg\"> E<.Fa \"int cpu\"> E<.Fc> "
"E<.Ft int> E<.Fo callout_reset_sbt> E<.Fa \"struct callout *c\"> E<.Fa "
"\"sbintime_t sbt\"> E<.Fa \"sbintime_t pr\"> E<.Fa \"timeout_t *func\"> "
"E<.Fa \"void *arg\"> E<.Fa \"int flags\"> E<.Fc> E<.Ft int> E<.Fo "
"callout_reset_sbt_curcpu> E<.Fa \"struct callout *c\"> E<.Fa \"sbintime_t "
"sbt\"> E<.Fa \"sbintime_t pr\"> E<.Fa \"timeout_t *func\"> E<.Fa \"void "
"*arg\"> E<.Fa \"int flags\"> E<.Fc> E<.Ft int> E<.Fo callout_reset_sbt_on> "
"E<.Fa \"struct callout *c\"> E<.Fa \"sbintime_t sbt\"> E<.Fa \"sbintime_t "
"pr\"> E<.Fa \"timeout_t *func\"> E<.Fa \"void *arg\"> E<.Fa \"int cpu\"> "
"E<.Fa \"int flags\"> E<.Fc> E<.Ft int> E<.Fn callout_schedule \"struct "
"callout *c\" \"int ticks\"> E<.Ft int> E<.Fn callout_schedule_curcpu "
"\"struct callout *c\" \"int ticks\"> E<.Ft int> E<.Fn callout_schedule_on "
"\"struct callout *c\" \"int ticks\" \"int cpu\"> E<.Ft int> E<.Fo "
"callout_schedule_sbt> E<.Fa \"struct callout *c\"> E<.Fa \"sbintime_t sbt\"> "
"E<.Fa \"sbintime_t pr\"> E<.Fa \"int flags\"> E<.Fc> E<.Ft int> E<.Fo "
"callout_schedule_sbt_curcpu> E<.Fa \"struct callout *c\"> E<.Fa \"sbintime_t "
"sbt\"> E<.Fa \"sbintime_t pr\"> E<.Fa \"int flags\"> E<.Fc> E<.Ft int> E<.Fo "
"callout_schedule_sbt_on> E<.Fa \"struct callout *c\"> E<.Fa \"sbintime_t "
"sbt\"> E<.Fa \"sbintime_t pr\"> E<.Fa \"int cpu\"> E<.Fa \"int flags\"> "
"E<.Fc> E<.Ft int> E<.Fn callout_stop \"struct callout *c\"> E<.Ft "
"sbintime_t> E<.Fo callout_when> E<.Fa \"sbintime_t sbt\"> E<.Fa \"sbintime_t "
"precision\"> E<.Fa \"int flags\"> E<.Fa \"sbintime_t *sbt_res\"> E<.Fa "
"\"sbintime_t *precision_res\"> E<.Fc> E<.Ft struct callout_handle> E<.Fn "
"timeout \"timeout_t *func\" \"void *arg\" \"int ticks\"> E<.Ft void> E<.Fn "
"untimeout \"timeout_t *func\" \"void *arg\" \"struct callout_handle "
"handle\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/timeout.9:179
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:193
msgid ""
"The E<.Nm callout> API is used to schedule a call to an arbitrary function "
"at a specific time in the future.  Consumers of this API are required to "
"allocate a callout structure E<.Pq struct callout> for each pending function "
"invocation.  This structure stores state about the pending function "
"invocation including the function to be called and the time at which the "
"function should be invoked.  Pending function calls can be cancelled or "
"rescheduled to a different time.  In addition, a callout structure may be "
"reused to schedule a new function call after a scheduled call is completed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:199
msgid ""
"Callouts only provide a single-shot mode.  If a consumer requires a periodic "
"timer, it must explicitly reschedule each function call.  This is normally "
"done by rescheduling the subsequent call within the called function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:205
msgid ""
"Callout functions must not sleep.  They may not acquire sleepable locks, "
"wait on condition variables, perform blocking allocation requests, or invoke "
"any other action that might sleep."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:225
msgid ""
"Each callout structure must be initialized by E<.Fn callout_init>, E<.Fn "
"callout_init_mtx>, E<.Fn callout_init_rm>, or E<.Fn callout_init_rw> before "
"it is passed to any of the other callout functions.  The E<.Fn callout_init> "
"function initializes a callout structure in E<.Fa c> that is not associated "
"with a specific lock.  If the E<.Fa mpsafe> argument is zero, the callout "
"structure is not considered to be E<.Dq multi-processor safe>; and the Giant "
"lock will be acquired before calling the callout function and released when "
"the callout function returns."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:250
msgid ""
"The E<.Fn callout_init_mtx>, E<.Fn callout_init_rm>, and E<.Fn "
"callout_init_rw> functions initialize a callout structure in E<.Fa c> that "
"is associated with a specific lock.  The lock is specified by the E<.Fa "
"mtx>, E<.Fa rm>, or E<.Fa rw> parameter.  The associated lock must be held "
"while stopping or rescheduling the callout.  The callout subsystem acquires "
"the associated lock before calling the callout function and releases it "
"after the function returns.  If the callout was cancelled while the callout "
"subsystem waited for the associated lock, the callout function is not "
"called, and the associated lock is released.  This ensures that stopping or "
"rescheduling the callout will abort any previously scheduled invocation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:268
msgid ""
"Only regular mutexes may be used with E<.Fn callout_init_mtx>; spin mutexes "
"are not supported.  A sleepable read-mostly lock E<.Po> one initialized with "
"the E<.Dv RM_SLEEPABLE> flag E<.Pc> may not be used with E<.Fn "
"callout_init_rm>.  Similarly, other sleepable lock types such as E<.Xr sx 9> "
"and E<.Xr lockmgr 9> cannot be used with callouts because sleeping is not "
"permitted in the callout subsystem."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:276
msgid ""
"These E<.Fa flags> may be specified for E<.Fn callout_init_mtx>, E<.Fn "
"callout_init_rm>, or E<.Fn callout_init_rw>:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:277
#, no-wrap
msgid "Dv CALLOUT_RETURNUNLOCKED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:281
msgid ""
"The callout function will release the associated lock itself, so the callout "
"subsystem should not attempt to unlock it after the callout function "
"returns."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:281
#, no-wrap
msgid "Dv CALLOUT_SHAREDLOCK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:285
msgid ""
"The lock is only acquired in read mode when running the callout handler.  "
"This flag is ignored by E<.Fn callout_init_mtx>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:306
msgid ""
"The function E<.Fn callout_stop> cancels a callout E<.Fa c> if it is "
"currently pending.  If the callout is pending and successfully stopped, then "
"E<.Fn callout_stop> returns a value of one.  If the callout is not set, or "
"has already been serviced, then negative one is returned.  If the callout is "
"currently being serviced and cannot be stopped, then zero will be returned.  "
"If the callout is currently being serviced and cannot be stopped, and at the "
"same time a next invocation of the same callout is also scheduled, then "
"E<.Fn callout_stop> unschedules the next run and returns zero.  If the "
"callout has an associated lock, then that lock must be held when this "
"function is called."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:330
msgid ""
"The function E<.Fn callout_async_drain> is identical to E<.Fn callout_stop> "
"with one difference.  When E<.Fn callout_async_drain> returns zero it will "
"arrange for the function E<.Fa drain> to be called using the same argument "
"given to the E<.Fn callout_reset> function.  E<.Fn callout_async_drain> If "
"the callout has an associated lock, then that lock must be held when this "
"function is called.  Note that when stopping multiple callouts that use the "
"same lock it is possible to get multiple return's of zero and multiple calls "
"to the E<.Fa drain> function, depending upon which CPU's the callouts are "
"running.  The E<.Fa drain> function itself is called from the context of the "
"completing callout i.e. softclock or hardclock, just like a callout itself."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:348
msgid ""
"The function E<.Fn callout_drain> is identical to E<.Fn callout_stop> except "
"that it will wait for the callout E<.Fa c> to complete if it is already in "
"progress.  This function MUST NOT be called while holding any locks on which "
"the callout might block, or deadlock will result.  Note that if the callout "
"subsystem has already begun processing this callout, then the callout "
"function may be invoked before E<.Fn callout_drain> returns.  However, the "
"callout subsystem does guarantee that the callout will be fully stopped "
"before E<.Fn callout_drain> returns."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:363
msgid ""
"The E<.Fn callout_reset> and E<.Fn callout_schedule> function families "
"schedule a future function invocation for callout E<.Fa c>.  If E<.Fa c> "
"already has a pending callout, it is cancelled before the new invocation is "
"scheduled.  These functions return a value of one if a pending callout was "
"cancelled and zero if there was no pending callout.  If the callout has an "
"associated lock, then that lock must be held when any of these functions are "
"called."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:383
msgid ""
"The time at which the callout function will be invoked is determined by "
"either the E<.Fa ticks> argument or the E<.Fa sbt>, E<.Fa pr>, and E<.Fa "
"flags> arguments.  When E<.Fa ticks> is used, the callout is scheduled to "
"execute after E<.Fa ticks Ns No /hz> seconds.  Non-positive values of E<.Fa "
"ticks> are silently converted to the value E<.Sq 1>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:413
msgid ""
"The E<.Fa sbt>, E<.Fa pr>, and E<.Fa flags> arguments provide more control "
"over the scheduled time including support for higher resolution times, "
"specifying the precision of the scheduled time, and setting an absolute "
"deadline instead of a relative timeout.  The callout is scheduled to execute "
"in a time window which begins at the time specified in E<.Fa sbt> and "
"extends for the amount of time specified in E<.Fa pr>.  If E<.Fa sbt> "
"specifies a time in the past, the window is adjusted to start at the current "
"time.  A non-zero value for E<.Fa pr> allows the callout subsystem to "
"coalesce callouts scheduled close to each other into fewer timer interrupts, "
"reducing processing overhead and power consumption.  These E<.Fa flags> may "
"be specified to adjust the interpretation of E<.Fa sbt> and E<.Fa pr>:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:414
#, no-wrap
msgid "Dv C_ABSOLUTE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:423
msgid ""
"Handle the E<.Fa sbt> argument as an absolute time since boot.  By default, "
"E<.Fa sbt> is treated as a relative amount of time, similar to E<.Fa ticks>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:423
#, no-wrap
msgid "Dv C_DIRECT_EXEC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:430
msgid ""
"Run the handler directly from hardware interrupt context instead of from the "
"softclock thread.  This reduces latency and overhead, but puts more "
"constraints on the callout function.  Callout functions run in this context "
"may use only spin mutexes for locking and should be as small as possible "
"because they run with absolute priority."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:430
#, no-wrap
msgid "Fn C_PREL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:439
msgid ""
"Specifies relative event time precision as binary logarithm of time interval "
"divided by acceptable time deviation: 1 -- 1/2, 2 -- 1/4, etc.  Note that "
"the larger of E<.Fa pr> or this value is used as the length of the time "
"window.  Smaller values E<.Pq which result in larger time intervals> allow "
"the callout subsystem to aggregate more events in one timer interrupt."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:439
#, no-wrap
msgid "Dv C_PRECALC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:459
msgid ""
"The E<.Fa sbt> argument specifies the absolute time at which the callout "
"should be run, and the E<.Fa pr> argument specifies the requested precision, "
"which will not be adjusted during the scheduling process.  The E<.Fa sbt> "
"and E<.Fa pr> values should be calculated by an earlier call to E<.Fn "
"callout_when> which uses the user-supplied E<.Fa sbt>, E<.Fa pr>, and E<.Fa "
"flags> values."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/timeout.9:459
#, no-wrap
msgid "Dv C_HARDCLOCK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:463
msgid "Align the timeouts to E<.Fn hardclock> calls if possible."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:494
msgid ""
"The E<.Fn callout_reset> functions accept a E<.Fa func> argument which "
"identifies the function to be called when the time expires.  It must be a "
"pointer to a function that takes a single E<.Fa void *> argument.  Upon "
"invocation, E<.Fa func> will receive E<.Fa arg> as its only argument.  The "
"E<.Fn callout_schedule> functions reuse the E<.Fa func> and E<.Fa arg> "
"arguments from the previous callout.  Note that one of the E<.Fn "
"callout_reset> functions must always be called to initialize E<.Fa func> and "
"E<.Fa arg> before one of the E<.Fn callout_schedule> functions can be used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:523
msgid ""
"The callout subsystem provides a softclock thread for each CPU in the "
"system.  Callouts are assigned to a single CPU and are executed by the "
"softclock thread for that CPU.  Initially, callouts are assigned to CPU 0.  "
"The E<.Fn callout_reset_on>, E<.Fn callout_reset_sbt_on>, E<.Fn "
"callout_schedule_on> and E<.Fn callout_schedule_sbt_on> functions assign the "
"callout to CPU E<.Fa cpu>.  The E<.Fn callout_reset_curcpu>, E<.Fn "
"callout_reset_sbt_curpu>, E<.Fn callout_schedule_curcpu> and E<.Fn "
"callout_schedule_sbt_curcpu> functions assign the callout to the current "
"CPU.  The E<.Fn callout_reset>, E<.Fn callout_reset_sbt>, E<.Fn "
"callout_schedule> and E<.Fn callout_schedule_sbt> functions schedule the "
"callout to execute in the softclock thread of the CPU to which it is "
"currently assigned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:532
msgid ""
"Softclock threads are not pinned to their respective CPUs by default.  The "
"softclock thread for CPU 0 can be pinned to CPU 0 by setting the E<.Va "
"kern.pin_default_swi> loader tunable to a non-zero value.  Softclock threads "
"for CPUs other than zero can be pinned to their respective CPUs by setting "
"the E<.Va kern.pin_pcpu_swi> loader tunable to a non-zero value."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:575
msgid ""
"The macros E<.Fn callout_pending>, E<.Fn callout_active> and E<.Fn "
"callout_deactivate> provide access to the current state of the callout.  The "
"E<.Fn callout_pending> macro checks whether a callout is E<.Em pending>; a "
"callout is considered E<.Em pending> when a timeout has been set but the "
"time has not yet arrived.  Note that once the timeout time arrives and the "
"callout subsystem starts to process this callout, E<.Fn callout_pending> "
"will return E<.Dv FALSE> even though the callout function may not have "
"finished E<.Pq or even begun> executing.  The E<.Fn callout_active> macro "
"checks whether a callout is marked as E<.Em active>, and the E<.Fn "
"callout_deactivate> macro clears the callout's E<.Em active> flag.  The "
"callout subsystem marks a callout as E<.Em active> when a timeout is set and "
"it clears the E<.Em active> flag in E<.Fn callout_stop> and E<.Fn "
"callout_drain>, but it E<.Em does not> clear it when a callout expires "
"normally via the execution of the callout function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:608
msgid ""
"The E<.Fn callout_when> function may be used to pre-calculate the absolute "
"time at which the timeout should be run and the precision of the scheduled "
"run time according to the required time E<.Fa sbt>, precision E<.Fa "
"precision>, and additional adjustments requested by the E<.Fa flags> "
"argument.  Flags accepted by the E<.Fn callout_when> function are the same "
"as flags for the E<.Fn callout_reset> function.  The resulting time is "
"assigned to the variable pointed to by the E<.Fa sbt_res> argument, and the "
"resulting precision is assigned to E<.Fa *precision_res>.  When passing the "
"results to E<.Fa callout_reset>, add the E<.Va C_PRECALC> flag to E<.Fa "
"flags>, to avoid incorrect re-adjustment.  The function is intended for "
"situations where precise time of the callout run should be known in advance, "
"since trying to read this time from the callout structure itself after a "
"E<.Fn callout_reset> call is racy."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/timeout.9:608
#, no-wrap
msgid "Avoiding Race Conditions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:619
msgid ""
"The callout subsystem invokes callout functions from its own thread "
"context.  Without some kind of synchronization, it is possible that a "
"callout function will be invoked concurrently with an attempt to stop or "
"reset the callout by another thread.  In particular, since callout functions "
"typically acquire a lock as their first action, the callout function may "
"have already been invoked, but is blocked waiting for that lock at the time "
"that another thread tries to reset or stop the callout."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:623
msgid ""
"There are three main techniques for addressing these synchronization "
"concerns.  The first approach is preferred as it is the simplest:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:645
msgid ""
"Callouts can be associated with a specific lock when they are initialized by "
"E<.Fn callout_init_mtx>, E<.Fn callout_init_rm>, or E<.Fn callout_init_rw>.  "
"When a callout is associated with a lock, the callout subsystem acquires the "
"lock before the callout function is invoked.  This allows the callout "
"subsystem to transparently handle races between callout cancellation, "
"scheduling, and execution.  Note that the associated lock must be acquired "
"before calling E<.Fn callout_stop> or one of the E<.Fn callout_reset> or "
"E<.Fn callout_schedule> functions to provide this safety."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:657
msgid ""
"A callout initialized via E<.Fn callout_init> with E<.Fa mpsafe> set to zero "
"is implicitly associated with the E<.Va Giant> mutex.  If E<.Va Giant> is "
"held when cancelling or rescheduling the callout, then its use will prevent "
"races with the callout function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:673
msgid ""
"The return value from E<.Fn callout_stop> E<.Po> or the E<.Fn callout_reset> "
"and E<.Fn callout_schedule> function families E<.Pc> indicates whether or "
"not the callout was removed.  If it is known that the callout was set and "
"the callout function has not yet executed, then a return value of E<.Dv "
"FALSE> indicates that the callout function is about to be called.  For "
"example:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:685
#, no-wrap
msgid ""
"if (sc-E<gt>sc_flags & SCFLG_CALLOUT_RUNNING) {\n"
"\tif (callout_stop(&sc-E<gt>sc_callout)) {\n"
"\t\tsc-E<gt>sc_flags &= ~SCFLG_CALLOUT_RUNNING;\n"
"\t\t/* successfully stopped */\n"
"\t} else {\n"
"\t\t/*\n"
"\t\t * callout has expired and callout\n"
"\t\t * function is about to be executed\n"
"\t\t */\n"
"\t}\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:722
msgid ""
"The E<.Fn callout_pending>, E<.Fn callout_active> and E<.Fn "
"callout_deactivate> macros can be used together to work around the race "
"conditions.  When a callout's timeout is set, the callout subsystem marks "
"the callout as both E<.Em active> and E<.Em pending>.  When the timeout time "
"arrives, the callout subsystem begins processing the callout by first "
"clearing the E<.Em pending> flag.  It then invokes the callout function "
"without changing the E<.Em active> flag, and does not clear the E<.Em "
"active> flag even after the callout function returns.  The mechanism "
"described here requires the callout function itself to clear the E<.Em "
"active> flag using the E<.Fn callout_deactivate> macro.  The E<.Fn "
"callout_stop> and E<.Fn callout_drain> functions always clear both the E<.Em "
"active> and E<.Em pending> flags before returning."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:744
msgid ""
"The callout function should first check the E<.Em pending> flag and return "
"without action if E<.Fn callout_pending> returns E<.Dv TRUE>.  This "
"indicates that the callout was rescheduled using E<.Fn callout_reset> just "
"before the callout function was invoked.  If E<.Fn callout_active> returns "
"E<.Dv FALSE> then the callout function should also return without action.  "
"This indicates that the callout has been stopped.  Finally, the callout "
"function should call E<.Fn callout_deactivate> to clear the E<.Em active> "
"flag.  For example:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:758
#, no-wrap
msgid ""
"mtx_lock(&sc-E<gt>sc_mtx);\n"
"if (callout_pending(&sc-E<gt>sc_callout)) {\n"
"\t/* callout was reset */\n"
"\tmtx_unlock(&sc-E<gt>sc_mtx);\n"
"\treturn;\n"
"}\n"
"if (!callout_active(&sc-E<gt>sc_callout)) {\n"
"\t/* callout was stopped */\n"
"\tmtx_unlock(&sc-E<gt>sc_mtx);\n"
"\treturn;\n"
"}\n"
"callout_deactivate(&sc-E<gt>sc_callout);\n"
"/* rest of callout function */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:767
msgid ""
"Together with appropriate synchronization, such as the mutex used above, "
"this approach permits the E<.Fn callout_stop> and E<.Fn callout_reset> "
"functions to be used at any time without races.  For example:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:771
#, no-wrap
msgid ""
"mtx_lock(&sc-E<gt>sc_mtx);\n"
"callout_stop(&sc-E<gt>sc_callout);\n"
"/* The callout is effectively stopped now. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:781
msgid ""
"If the callout is still pending then these functions operate normally, but "
"if processing of the callout has already begun then the tests in the callout "
"function cause it to return without further action.  Synchronization between "
"the callout function and other code ensures that stopping or resetting the "
"callout will never be attempted while the callout function is past the E<.Fn "
"callout_deactivate> call."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:791
msgid ""
"The above technique additionally ensures that the E<.Em active> flag always "
"reflects whether the callout is effectively enabled or disabled.  If E<.Fn "
"callout_active> returns false, then the callout is effectively disabled, "
"since even if the callout subsystem is actually just about to invoke the "
"callout function, the callout function will return without action."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:804
msgid ""
"There is one final race condition that must be considered when a callout is "
"being stopped for the last time.  In this case it may not be safe to let the "
"callout function itself detect that the callout was stopped, since it may "
"need to access data objects that have already been destroyed or recycled.  "
"To ensure that the callout is completely finished, a call to E<.Fn "
"callout_drain> should be used.  In particular, a callout should always be "
"drained prior to destroying its associated lock or releasing the storage for "
"the callout structure."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/timeout.9:804
#, no-wrap
msgid "LEGACY API"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:809
msgid ""
"E<.Bf Sy> The functions below are a legacy API that will be removed in a "
"future release.  New code should not use these routines.  E<.Ef>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:837
msgid ""
"The function E<.Fn timeout> schedules a call to the function given by the "
"argument E<.Fa func> to take place after E<.Fa ticks Ns No /hz> seconds.  "
"Non-positive values of E<.Fa ticks> are silently converted to the value "
"E<.Sq 1>.  E<.Fa func> should be a pointer to a function that takes a E<.Fa "
"void *> argument.  Upon invocation, E<.Fa func> will receive E<.Fa arg> as "
"its only argument.  The return value from E<.Fn timeout> is a E<.Ft struct "
"callout_handle> which can be used in conjunction with the E<.Fn untimeout> "
"function to request that a scheduled timeout be canceled."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:845
msgid ""
"The function E<.Fn callout_handle_init> can be used to initialize a handle "
"to a state which will cause any calls to E<.Fn untimeout> with that handle "
"to return with no side effects."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:851
msgid ""
"Assigning a callout handle the value of E<.Fn CALLOUT_HANDLE_INITIALIZER> "
"performs the same function as E<.Fn callout_handle_init> and is provided for "
"use on statically declared or global callout handles."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:879
msgid ""
"The function E<.Fn untimeout> cancels the timeout associated with E<.Fa "
"handle> using the E<.Fa func> and E<.Fa arg> arguments to validate the "
"handle.  If the handle does not correspond to a timeout with the function "
"E<.Fa func> taking the argument E<.Fa arg> no action is taken.  E<.Fa "
"handle> must be initialized by a previous call to E<.Fn timeout>, E<.Fn "
"callout_handle_init>, or assigned the value of E<.Fn "
"CALLOUT_HANDLE_INITIALIZER \"&handle\"> before being passed to E<.Fn "
"untimeout>.  The behavior of calling E<.Fn untimeout> with an uninitialized "
"handle is undefined."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:897
msgid ""
"As handles are recycled by the system, it is possible (although unlikely)  "
"that a handle from one invocation of E<.Fn timeout> may match the handle of "
"another invocation of E<.Fn timeout> if both calls used the same function "
"pointer and argument, and the first timeout is expired or canceled before "
"the second call.  The timeout facility offers O(1) running time for E<.Fn "
"timeout> and E<.Fn untimeout>.  Timeouts are executed from E<.Fn softclock> "
"with the E<.Va Giant> lock held.  Thus they are protected from re-entrancy."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/timeout.9:897
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:903
msgid ""
"The E<.Fn callout_active> macro returns the state of a callout's E<.Em "
"active> flag."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:909
msgid ""
"The E<.Fn callout_pending> macro returns the state of a callout's E<.Em "
"pending> flag."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:916
msgid ""
"The E<.Fn callout_reset> and E<.Fn callout_schedule> function families "
"return a value of one if the callout was pending before the new function "
"invocation was scheduled."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:930
msgid ""
"The E<.Fn callout_stop> and E<.Fn callout_drain> functions return a value of "
"one if the callout was still pending when it was called, a zero if the "
"callout could not be stopped and a negative one is it was either not running "
"or has already completed.  The E<.Fn timeout> function returns a E<.Ft "
"struct callout_handle> that can be passed to E<.Fn untimeout>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/timeout.9:930
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/timeout.9:954
msgid ""
"The current timeout and untimeout routines are based on the work of E<.An "
"Adam M. Costello> and E<.An George Varghese>, published in a technical "
"report entitled E<.%T \"Redesigning the BSD Callout and Timer Facilities\"> "
"and modified slightly for inclusion in E<.Fx> by E<.An Justin T. Gibbs>.  "
"The original work on the data structures used in this implementation was "
"published by E<.An G. Varghese> and E<.An A. Lauck> in the paper E<.%T "
"\"Hashed and Hierarchical Timing Wheels: Data Structures for the Efficient "
"Implementation of a Timer Facility\"> in the E<.%B \"Proceedings of the 11th "
"ACM Annual Symposium on Operating Systems Principles\">.  The current "
"implementation replaces the long standing E<.Bx> linked list callout "
"mechanism which offered O(n) insertion and removal running time but did not "
"generate or require handles for untimeout operations."
msgstr ""
