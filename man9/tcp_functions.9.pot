# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/tcp_functions.9:28
#, no-wrap
msgid "March 10, 2017"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/tcp_functions.9:29
#, no-wrap
msgid "TCP_FUNCTIONS 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:33
msgid "E<.Nm tcp_functions>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/tcp_functions.9:33
#, no-wrap
msgid "Alternate TCP Stack Framework"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:34
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/tcp_functions.9:35
#, no-wrap
msgid "netinet/tcp.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/tcp_functions.9:36
#, no-wrap
msgid "netinet/tcp_var.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:46
msgid ""
"E<.Ft int> E<.Fn register_tcp_functions \"struct tcp_function_block *blk\" "
"\"int wait\"> E<.Ft int> E<.Fn register_tcp_functions_as_name \"struct "
"tcp_function_block *blk\" \"const char *name\" \"int wait\"> E<.Fn "
"register_tcp_functions_as_names \"struct tcp_function_block *blk\" \"int "
"wait\" \"const char *names[]\" \"int *num_names\"> E<.Ft int> E<.Fn "
"deregister_tcp_functions \"struct tcp_function_block *blk\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:46
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:55
msgid ""
"The E<.Nm> framework allows a kernel developer to implement alternate TCP "
"stacks.  The alternate stacks can be compiled in the kernel or can be "
"implemented in loadable kernel modules.  This functionality is intended to "
"encourage experimentation with the TCP stack and to allow alternate "
"behaviors to be deployed for different TCP connections on a single system."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:64
msgid ""
"A system administrator can set a system default stack.  By default, all TCP "
"connections will use the system default stack.  Additionally, users can "
"specify a particular stack to use on a per-connection basis.  (See E<.Xr tcp "
"4> for details on setting the system default stack, or selecting a specific "
"stack for a given connection.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:69
msgid ""
"This man page treats \"TCP stacks\" as synonymous with \"function blocks\".  "
"This is intentional.  A \"TCP stack\" is a collection of functions that "
"implement a set of behavior.  Therefore, an alternate \"function block\" "
"defines an alternate \"TCP stack\"."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:83
msgid ""
"The E<.Fn register_tcp_functions>, E<.Fn register_tcp_functions_as_name>, "
"and E<.Fn register_tcp_functions_as_names> functions request that the system "
"add a specified function block and register it for use with a given name.  "
"Modules may register the same function block multiple times with different "
"names.  However, names must be globally unique among all registered function "
"blocks.  Also, modules may not ever modify the contents of the function "
"block (including the name) after it has been registered, unless the module "
"first successfully de-registers the function block."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:100
msgid ""
"The E<.Fn register_tcp_functions> function requests that the system register "
"the function block with the name defined in the function block's E<.Va "
"tfb_tcp_block_name> field.  Note that this is the only one of the three "
"registration functions that automatically registers the function block using "
"the name defined in the function block's E<.Va tfb_tcp_block_name> field.  "
"If a module uses one of the other registration functions, it may request "
"that the system register the function block using the name defined in the "
"function block's E<.Va tfb_tcp_block_name> field by explicitly providing "
"that name."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:107
msgid ""
"The E<.Fn register_tcp_functions_as_name> function requests that the system "
"register the function block with the name provided in the E<.Fa name> "
"argument."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:124
msgid ""
"The E<.Fn register_tcp_functions_as_names> function requests that the system "
"register the function block with all the names provided in the E<.Fa names> "
"argument.  The E<.Fa num_names> argument provides a pointer to the number of "
"names.  This function will either succeed in registering all of the names in "
"the array, or none of the names in the array.  On failure, the E<.Fa "
"num_names> argument is updated with the index number of the entry in the "
"E<.Fa names> array which the system was processing when it encountered the "
"error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:136
msgid ""
"The E<.Fn deregister_tcp_functions> function requests that the system remove "
"a specified function block from the system.  If this call succeeds, it will "
"completely deregister the function block, regardless of the number of names "
"used to register the function block.  If the call fails because sockets are "
"still using the specified function block, the system will mark the function "
"block as being in the process of being removed.  This will prevent "
"additional sockets from using the specified function block.  However, it "
"will not impact sockets that are already using the function block."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:142
msgid ""
"E<.Nm> modules must call one or more of the registration functions during "
"initialization and successfully call the E<.Fn deregister_tcp_functions> "
"function prior to allowing the module to be unloaded."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:156
msgid ""
"The E<.Fa blk> argument is a pointer to a E<.Vt \"struct "
"tcp_function_block\">, which is explained below (see E<.Sx Function Block "
"Structure>).  The E<.Fa wait> argument is used as the E<.Fa flags> argument "
"to E<.Xr malloc 9>, and must be set to one of the valid values defined in "
"that man page."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/tcp_functions.9:156
#, no-wrap
msgid "Function Block Structure"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:161
msgid ""
"The E<.Fa blk argument is a pointer to a> E<.Vt \"struct "
"tcp_function_block\">, which has the following members:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:188
#, no-wrap
msgid ""
"struct tcp_function_block {\n"
"\tchar\ttfb_tcp_block_name[TCP_FUNCTION_NAME_LEN_MAX];\n"
"\tint\t(*tfb_tcp_output)(struct tcpcb *);\n"
"\tvoid\t(*tfb_tcp_do_segment)(struct mbuf *, struct tcphdr *,\n"
"\t\t\t    struct socket *, struct tcpcb *,\n"
"\t\t\t    int, int, uint8_t,\n"
"\t\t\t    int);\n"
"\tint     (*tfb_tcp_ctloutput)(struct socket *so,\n"
"\t\t\t    struct sockopt *sopt,\n"
"\t\t\t    struct inpcb *inp, struct tcpcb *tp);\n"
"\t/* Optional memory allocation/free routine */\n"
"\tvoid\t(*tfb_tcp_fb_init)(struct tcpcb *);\n"
"\tvoid\t(*tfb_tcp_fb_fini)(struct tcpcb *, int);\n"
"\t/* Optional timers, must define all if you define one */\n"
"\tint\t(*tfb_tcp_timer_stop_all)(struct tcpcb *);\n"
"\tvoid\t(*tfb_tcp_timer_activate)(struct tcpcb *,\n"
"\t\t\t    uint32_t, u_int);\n"
"\tint\t(*tfb_tcp_timer_active)(struct tcpcb *, uint32_t);\n"
"\tvoid\t(*tfb_tcp_timer_stop)(struct tcpcb *, uint32_t);\n"
"\t/* Optional functions */\n"
"\tvoid\t(*tfb_tcp_rexmit_tmr)(struct tcpcb *);\n"
"\tvoid\t(*tfb_tcp_handoff_ok)(struct tcpcb *);\n"
"\t/* System use */\n"
"\tvolatile uint32_t tfb_refcnt;\n"
"\tuint32_t  tfb_flags;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:194
msgid ""
"The E<.Va tfb_tcp_block_name> field identifies the unique name of the TCP "
"stack, and should be no longer than TCP_FUNCTION_NAME_LEN_MAX-1 characters "
"in length."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:208
msgid ""
"The E<.Va tfb_tcp_output>, E<.Va tfb_tcp_do_segment>, and E<.Va "
"tfb_tcp_ctloutput> fields are pointers to functions that perform the "
"equivalent actions as the default E<.Fn tcp_output>, E<.Fn tcp_do_segment>, "
"and E<.Fn tcp_default_ctloutput> functions, respectively.  Each of these "
"function pointers must be non-NULL."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:219
msgid ""
"If a TCP stack needs to initialize data when a socket first selects the TCP "
"stack (or, when the socket is first opened), it should set a non-NULL "
"pointer in the E<.Va tfb_tcp_fb_init> field.  Likewise, if a TCP stack needs "
"to cleanup data when a socket stops using the TCP stack (or, when the socket "
"is closed), it should set a non-NULL pointer in the E<.Va tfb_tcp_fb_fini> "
"field."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:229
msgid ""
"If the E<.Va tfb_tcp_fb_fini> argument is non-NULL, the function to which it "
"points is called when the kernel is destroying the TCP control block or when "
"the socket is transitioning to use a different TCP stack.  The function is "
"called with arguments of the TCP control block and an integer flag.  The "
"flag will be zero if the socket is transitioning to use another TCP stack or "
"one if the TCP control block is being destroyed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:255
msgid ""
"If the TCP stack implements additional timers, the TCP stack should set a "
"non-NULL pointer in the E<.Va tfb_tcp_timer_stop_all>, E<.Va "
"tfb_tcp_timer_activate>, E<.Va tfb_tcp_timer_active>, and E<.Va "
"tfb_tcp_timer_stop> fields.  These fields should all be E<.Dv NULL> or "
"should all contain pointers to functions.  The E<.Va "
"tfb_tcp_timer_activate>, E<.Va tfb_tcp_timer_active>, and E<.Va "
"tfb_tcp_timer_stop> functions will be called when the E<.Fn "
"tcp_timer_activate>, E<.Fn tcp_timer_active>, and E<.Fn tcp_timer_stop> "
"functions, respectively, are called with a timer type other than the "
"standard types.  The functions defined by the TCP stack have the same "
"semantics (both for arguments and return values) as the normal timer "
"functions they supplement."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:265
msgid ""
"Additionally, a stack may define its own actions to take when the retransmit "
"timer fires by setting a non-NULL function pointer in the E<.Va "
"tfb_tcp_rexmit_tmr> field.  This function is called very early in the "
"process of handling a retransmit timer.  However, care must be taken to "
"ensure the retransmit timer leaves the TCP control block in a valid state "
"for the remainder of the retransmit timer logic."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:296
msgid ""
"A user may select a new TCP stack before calling E<.Xr connect 2> or E<.Xr "
"listen 2>.  Optionally, a TCP stack may also allow a user to begin using the "
"TCP stack for a connection that is in a later state by setting a non-NULL "
"function pointer in the E<.Va tfb_tcp_handoff_ok> field.  If this field is "
"non-NULL and a user attempts to select that TCP stack after calling E<.Xr "
"connect 2> or E<.Xr listen 2> for that socket, the kernel will call the "
"function pointed to by the E<.Va tfb_tcp_handoff_ok> field.  The function "
"should return 0 if the user is allowed to switch the socket to use the TCP "
"stack. Otherwise, the function should return an error code, which will be "
"returned to the user.  If the E<.Va tfb_tcp_handoff_ok> field is E<.Dv NULL> "
"and a user attempts to select the TCP stack after calling E<.Xr connect 2> "
"or E<.Xr listen 2> for that socket, the operation will fail and the kernel "
"will return E<.Er EINVAL>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:303
msgid ""
"The E<.Va tfb_refcnt> and E<.Va tfb_flags> fields are used by the kernel's "
"TCP code and will be initialized when the TCP stack is registered."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/tcp_functions.9:303
#, no-wrap
msgid "Requirements for Alternate TCP Stacks"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:323
msgid ""
"If the TCP stack needs to store data beyond what is stored in the default "
"TCP control block, the TCP stack can initialize its own per-connection "
"storage.  The E<.Va t_fb_ptr> field in the E<.Vt \"struct tcpcb\"> control "
"block structure has been reserved to hold a pointer to this per-connection "
"storage.  If the TCP stack uses this alternate storage, it should understand "
"that the value of the E<.Va t_fb_ptr> pointer may not be initialized to "
"E<.Dv NULL>.  Therefore, it should use a E<.Va tfb_tcp_fb_init> function to "
"initialize this field.  Additionally, it should use a E<.Va tfb_tcp_fb_fini> "
"function to deallocate storage when the socket is closed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:328
msgid ""
"It is understood that alternate TCP stacks may keep different sets of data.  "
"However, in order to ensure that data is available to both the user and the "
"rest of the system in a standardized format, alternate TCP stacks must "
"update all fields in the TCP control block to the greatest extent practical."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:328
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:345
msgid ""
"The E<.Fn register_tcp_functions>, E<.Fn register_tcp_functions_as_name>, "
"E<.Fn register_tcp_functions_as_names>, and E<.Fn deregister_tcp_functions> "
"functions return zero on success and non-zero on failure.  In particular, "
"the E<.Fn deregister_tcp_functions> will return E<.Er EBUSY> until no more "
"connections are using the specified TCP stack.  A module calling E<.Fn "
"deregister_tcp_functions> must be prepared to wait until all connections "
"have stopped using the specified TCP stack."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:345
#, no-wrap
msgid "ERRORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:349
msgid "The E<.Fn register_tcp_functions> function will fail if:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/tcp_functions.9:350
#, no-wrap
msgid "Bq Er EINVAL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:354
msgid "Any of the members of the E<.Fa blk> argument are set incorrectly."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/tcp_functions.9:354
#, no-wrap
msgid "Bq Er ENOMEM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:356
msgid "The function could not allocate memory for its internal data."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/tcp_functions.9:356
#, no-wrap
msgid "Bq Er EALREADY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:358
msgid "A function block is already registered with the same name."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:362
msgid "The E<.Fn deregister_tcp_functions> function will fail if:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/tcp_functions.9:363
#, no-wrap
msgid "Bq Er EPERM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:367
msgid ""
"The E<.Fa blk> argument references the kernel's compiled-in default function "
"block."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/tcp_functions.9:367
#, no-wrap
msgid "Bq Er EBUSY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:370
msgid ""
"The function block is still in use by one or more sockets, or is defined as "
"the current default function block."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/tcp_functions.9:370
#, no-wrap
msgid "Bq Er ENOENT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:374
msgid ""
"The E<.Fa blk> argument references a function block that is not currently "
"registered."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:375
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:380
msgid "E<.Xr connect 2>, E<.Xr listen 2>, E<.Xr tcp 4>, E<.Xr malloc 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:380
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:383
msgid "This framework first appeared in E<.Fx 11.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/tcp_functions.9:383
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:389
msgid ""
"E<.An -nosplit> The E<.Nm> framework was written by E<.An Randall Stewart Aq "
"Mt rrs@FreeBSD.org>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/tcp_functions.9:391
msgid ""
"This manual page was written by E<.An Jonathan Looney Aq Mt "
"jtl@FreeBSD.org>."
msgstr ""
