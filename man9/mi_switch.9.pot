# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/mi_switch.9:32
#, no-wrap
msgid "November 24, 1996"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/mi_switch.9:33
#, no-wrap
msgid "MI_SWITCH 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mi_switch.9:35
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:39
msgid "E<.Nm mi_switch>, E<.Nm cpu_switch>, E<.Nm cpu_throw>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/mi_switch.9:39
#, no-wrap
msgid "switch to another thread context"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mi_switch.9:40
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mi_switch.9:41
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/mi_switch.9:42
#, no-wrap
msgid "sys/proc.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:49
msgid ""
"E<.Ft void> E<.Fn mi_switch \"void\"> E<.Ft void> E<.Fn cpu_switch \"void\"> "
"E<.Ft void> E<.Fn cpu_throw \"void\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mi_switch.9:49
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:59
msgid ""
"The E<.Fn mi_switch> function implements the machine independent prelude to "
"a thread context switch.  It is called from only a few distinguished places "
"in the kernel code as a result of the principle of non-preemptable kernel "
"mode execution.  The various major uses of E<.Nm> can be enumerated as "
"follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:69
msgid ""
"From within a function such as E<.Xr cv_wait 9>, E<.Xr mtx_lock 9>, or E<.Xr "
"tsleep 9> when the current thread voluntarily relinquishes the CPU to wait "
"for some resource or lock to become available."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:81
msgid ""
"After handling a trap (e.g.\\& a system call, device interrupt)  when the "
"kernel prepares a return to user-mode execution.  This case is typically "
"handled by machine dependent trap-handling code after detection of a change "
"in the signal disposition of the current process, or when a higher priority "
"thread might be available to run.  The latter event is communicated by the "
"machine independent scheduling routines by calling the machine defined E<.Fn "
"need_resched>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:86
msgid ""
"In the signal handling code (see E<.Xr issignal 9>)  if a signal is "
"delivered that causes a process to stop."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:90
msgid ""
"When a thread dies in E<.Xr thread_exit 9> and control of the processor can "
"be passed to the next runnable thread."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:95
msgid ""
"In E<.Xr thread_suspend_check 9> where a thread needs to stop execution due "
"to the suspension state of the process as a whole."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:108
msgid ""
"E<.Fn mi_switch> records the amount of time the current thread has been "
"running in the process structures and checks this value against the CPU time "
"limits allocated to the process (see E<.Xr getrlimit 2>).  Exceeding the "
"soft limit results in a E<.Dv SIGXCPU> signal to be posted to the process, "
"while exceeding the hard limit will cause a E<.Dv SIGKILL>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:120
msgid ""
"If the thread is still in the E<.Dv TDS_RUNNING> state, E<.Fn mi_switch> "
"will put it back onto the run queue, assuming that it will want to run again "
"soon.  If it is in one of the other states and KSE threading is enabled, the "
"associated E<.Em KSE> will be made available to any higher priority threads "
"from the same group, to allow them to be scheduled next."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:126
msgid ""
"After these administrative tasks are done, E<.Fn mi_switch> hands over "
"control to the machine dependent routine E<.Fn cpu_switch>, which will "
"perform the actual thread context switch."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:134
msgid ""
"E<.Fn cpu_switch> first saves the context of the current thread.  Next, it "
"calls E<.Fn choosethread> to determine which thread to run next.  Finally, "
"it reads in the saved context of the new thread and starts to execute the "
"new thread."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:146
msgid ""
"E<.Fn cpu_throw> is similar to E<.Fn cpu_switch> except that it does not "
"save the context of the old thread.  This function is useful when the kernel "
"does not have an old thread context to save, such as when CPUs other than "
"the boot CPU perform their first task switch, or when the kernel does not "
"care about the state of the old thread, such as in E<.Fn thread_exit> when "
"the kernel terminates the current thread and switches into a new thread."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:152
msgid ""
"To protect the E<.Xr runqueue 9>, all of these functions must be called with "
"the E<.Va sched_lock> mutex held."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/mi_switch.9:152
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/mi_switch.9:158
msgid ""
"E<.Xr cv_wait 9>, E<.Xr issignal 9>, E<.Xr mutex 9>, E<.Xr runqueue 9>, "
"E<.Xr tsleep 9>, E<.Xr wakeup 9>"
msgstr ""
