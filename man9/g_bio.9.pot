# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/g_bio.9:27
#, no-wrap
msgid "Mar 7, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/g_bio.9:28
#, no-wrap
msgid "G_BIO 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:36
msgid ""
"E<.Nm g_new_bio>, E<.Nm g_clone_bio>, E<.Nm g_destroy_bio>, E<.Nm "
"g_print_bio>, E<.Nm g_reset_bio>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/g_bio.9:36
#, no-wrap
msgid "GEOM bio controlling functions"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:37
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/g_bio.9:38
#, no-wrap
msgid "sys/bio.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/g_bio.9:39
#, no-wrap
msgid "geom/geom.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:54
msgid ""
"E<.Ft \"struct bio *\"> E<.Fn g_new_bio void> E<.Ft \"struct bio *\"> E<.Fn "
"g_alloc_bio void> E<.Ft \"struct bio *\"> E<.Fn g_clone_bio \"struct bio "
"*bp\"> E<.Ft \"struct bio *\"> E<.Fn g_duplicate_bio \"struct bio *bp\"> "
"E<.Ft void> E<.Fn g_destroy_bio \"struct bio *bp\"> E<.Ft void> E<.Fn "
"g_print_bio \"struct bio *bp\"> E<.Ft void> E<.Fn g_reset_bio \"struct bio "
"*bp\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:54
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:59
msgid ""
"A E<.Vt \"struct bio\"> is used by GEOM to describe I/O requests, its most "
"important fields are described below:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:60
#, no-wrap
msgid "Va bio_cmd"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:63
msgid "I/O request command.  There are five I/O requests available in GEOM:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:64
#, no-wrap
msgid "Dv BIO_READ"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:66
msgid "A read request."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:66
#, no-wrap
msgid "Dv BIO_WRITE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:68
msgid "A write request."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:68
#, no-wrap
msgid "Dv BIO_DELETE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:75
msgid ""
"Indicates that a certain range of data is no longer used and that it can be "
"erased or freed as the underlying technology supports.  Technologies like "
"flash adaptation layers can arrange to erase the relevant blocks before they "
"will become reassigned and cryptographic devices may want to fill random "
"bits into the range to reduce the amount of data available for attack."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:75
#, no-wrap
msgid "Dv BIO_GETATTR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:81
msgid ""
"Inspect and manipulate out-of-band attributes on a particular provider or "
"path.  Attributes are named by ascii strings and are stored in the E<.Va "
"bio_attribute> field."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:81
#, no-wrap
msgid "Dv BIO_FLUSH"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:83
msgid "Tells underlying providers to flush their write caches."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:84
#, no-wrap
msgid "Va bio_flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:86
msgid "Available flags:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:87
#, no-wrap
msgid "Dv BIO_ERROR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:91
msgid "Request failed (error value is stored in E<.Va bio_error> field)."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:91
#, no-wrap
msgid "Dv BIO_DONE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:93
msgid "Request finished."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:94
#, no-wrap
msgid "Va bio_cflags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:96 /usr/src/share/man/man9/g_bio.9:114 /usr/src/share/man/man9/g_bio.9:116
msgid "Private use by the consumer."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:96
#, no-wrap
msgid "Va bio_pflags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:98 /usr/src/share/man/man9/g_bio.9:110 /usr/src/share/man/man9/g_bio.9:112
msgid "Private use by the provider."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:98
#, no-wrap
msgid "Va bio_offset"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:100
msgid "Offset into provider."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:100
#, no-wrap
msgid "Va bio_data"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:102
msgid "Pointer to data buffer."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:102
#, no-wrap
msgid "Va bio_error"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:106
msgid "Error value when E<.Dv BIO_ERROR> is set."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:106
#, no-wrap
msgid "Va bio_done"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:108
msgid "Pointer to function which will be called when the request is finished."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:108
#, no-wrap
msgid "Va bio_driver1"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:110
#, no-wrap
msgid "Va bio_driver2"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:112
#, no-wrap
msgid "Va bio_caller1"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:114
#, no-wrap
msgid "Va bio_caller2"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:116
#, no-wrap
msgid "Va bio_attribute"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:120
msgid "Attribute string for E<.Dv BIO_GETATTR> request."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:120
#, no-wrap
msgid "Va bio_from"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:124
msgid ""
"Consumer to use for request (attached to provider stored in E<.Va bio_to> "
"field) (typically read-only for a class)."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:124
#, no-wrap
msgid "Va bio_to"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:126
msgid "Destination provider (typically read-only for a class)."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:126
#, no-wrap
msgid "Va bio_length"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:128
msgid "Request length in bytes."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:128
#, no-wrap
msgid "Va bio_completed"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:131
msgid ""
"Number of bytes completed, but they may not be completed from the front of "
"the request."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:131
#, no-wrap
msgid "Va bio_children"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:135
msgid "Number of E<.Vt bio> clones (typically read-only for a class)."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:135
#, no-wrap
msgid "Va bio_inbed"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:139
msgid "Number of finished E<.Vt bio> clones."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/g_bio.9:139
#, no-wrap
msgid "Va bio_parent"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:142
msgid "Pointer to parent E<.Vt bio>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:149
msgid "The E<.Fn g_new_bio> function allocates a new, empty E<.Vt bio> structure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:156
msgid ""
"E<.Fn g_alloc_bio> - same as E<.Fn g_new_bio>, but always succeeds "
"(allocates bio with the E<.Dv M_WAITOK> malloc flag)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:178
msgid ""
"The E<.Fn g_clone_bio> function allocates a new E<.Vt bio> structure and "
"copies the following fields from the E<.Vt bio> given as an argument to "
"clone: E<.Va bio_cmd>, E<.Va bio_length>, E<.Va bio_offset>, E<.Va "
"bio_data>, E<.Va bio_attribute>.  The field E<.Va bio_parent> in the clone "
"points to the passed E<.Vt bio> and the field E<.Va bio_children> in the "
"passed E<.Vt bio> is incremented."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:182
msgid ""
"This function should be used for every request which enters through the "
"provider of a particular geom and needs to be scheduled down.  Proper order "
"is:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:187
msgid "Clone the received E<.Vt \"struct bio\">."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:189
msgid "Modify the clone."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:191
msgid "Schedule the clone on its own consumer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:199
msgid ""
"E<.Fn g_duplicate_bio> - same as E<.Fn g_clone_bio>, but always succeeds "
"(allocates bio with the E<.Dv M_WAITOK> malloc flag)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:205
msgid ""
"The E<.Fn g_destroy_bio> function deallocates and destroys the given E<.Vt "
"bio> structure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:211
msgid ""
"The E<.Fn g_print_bio> function prints information about the given E<.Vt "
"bio> structure (for debugging purposes)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:237
msgid ""
"The E<.Fn g_reset_bio> function resets the given E<.Vt bio> structure back "
"to its initial state.  E<.Fn g_reset_bio> preserves internal data "
"structures, while setting all user visible fields to their initial values.  "
"When reusing a E<.Vt bio> obtained from E<.Fn g_new_bio>, E<.Fn "
"g_alloc_bio>, E<.Fn g_clone_bio>, or E<.Fn g_duplicate_bio> for multiple "
"transactions, E<.Fn g_reset_bio> must be called between the transactions in "
"lieu of E<.Fn bzero>.  While not strictly required for a E<.Vt bio> "
"structure created by other means, E<.Fn g_reset_bio> should be used to "
"initialize it and between transactions."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:237
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:247
msgid ""
"The E<.Fn g_new_bio> and E<.Fn g_clone_bio> functions return a pointer to "
"the allocated E<.Vt bio>, or E<.Dv NULL> if an error occurred."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:247
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:257
msgid ""
"Implementation of E<.Dq Dv NULL Ns -transformation>, meaning that an I/O "
"request is cloned and scheduled down without any modifications.  Let us "
"assume that field E<.Va ex_consumer> in structure E<.Vt example_softc> "
"contains a consumer attached to the provider we want to operate on."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:263
#, no-wrap
msgid ""
"void\n"
"example_start(struct bio *bp)\n"
"{\n"
"\tstruct example_softc *sc;\n"
"\tstruct bio *cbp;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:267
#, no-wrap
msgid ""
"\tprintf(\"Request received: \");\n"
"\tg_print_bio(bp);\n"
"\tprintf(\"\\en\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:273
#, no-wrap
msgid ""
"\tsc = bp-E<gt>bio_to-E<gt>geom-E<gt>softc;\n"
"\tif (sc == NULL) {\n"
"\t\tg_io_deliver(bp, ENXIO);\n"
"\t\treturn;\n"
"\t}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:281
#, no-wrap
msgid ""
"\t/* Let's clone our bio request. */\n"
"\tcbp = g_clone_bio(bp);\n"
"\tif (cbp == NULL) {\n"
"\t\tg_io_deliver(bp, ENOMEM);\n"
"\t\treturn;\n"
"\t}\n"
"\tcbp-E<gt>bio_done = g_std_done;\t/* Standard 'done' function. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:290
#, no-wrap
msgid ""
"\t/* Ok, schedule it down. */\n"
"\t/*\n"
"\t * The consumer can be obtained from\n"
"\t * LIST_FIRST(&bp-E<gt>bio_to-E<gt>geom-E<gt>consumer) as well,\n"
"\t * if there is only one in our geom.\n"
"\t */\n"
"\tg_io_request(cbp, sc-E<gt>ex_consumer);\n"
"}\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:291
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:303
msgid ""
"E<.Xr geom 4>, E<.Xr DECLARE_GEOM_CLASS 9>, E<.Xr g_access 9>, E<.Xr "
"g_attach 9>, E<.Xr g_consumer 9>, E<.Xr g_data 9>, E<.Xr g_event 9>, E<.Xr "
"g_geom 9>, E<.Xr g_provider 9>, E<.Xr g_provider_by_name 9>, E<.Xr "
"g_wither_geom 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/g_bio.9:303
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/g_bio.9:306
msgid ""
"E<.An -nosplit> This manual page was written by E<.An Pawel Jakub Dawidek Aq "
"Mt pjd@FreeBSD.org>."
msgstr ""
