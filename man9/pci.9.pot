# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/pci.9:28
#, no-wrap
msgid "January 15, 2017"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/pci.9:29
#, no-wrap
msgid "PCI 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/pci.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:77
msgid ""
"E<.Nm pci>, E<.Nm pci_alloc_msi>, E<.Nm pci_alloc_msix>, E<.Nm "
"pci_disable_busmaster>, E<.Nm pci_disable_io>, E<.Nm pci_enable_busmaster>, "
"E<.Nm pci_enable_io>, E<.Nm pci_find_bsf>, E<.Nm pci_find_cap>, E<.Nm "
"pci_find_dbsf>, E<.Nm pci_find_device>, E<.Nm pci_find_extcap>, E<.Nm "
"pci_find_htcap>, E<.Nm pci_find_next_cap>, E<.Nm pci_find_next_extcap>, "
"E<.Nm pci_find_next_htcap>, E<.Nm pci_find_pcie_root_port>, E<.Nm "
"pci_get_id>, E<.Nm pci_get_max_payload>, E<.Nm pci_get_max_read_req>, E<.Nm "
"pci_get_powerstate>, E<.Nm pci_get_vpd_ident>, E<.Nm pci_get_vpd_readonly>, "
"E<.Nm pci_iov_attach>, E<.Nm pci_iov_attach_name>, E<.Nm pci_iov_detach>, "
"E<.Nm pci_msi_count>, E<.Nm pci_msix_count>, E<.Nm pci_msix_pba_bar>, E<.Nm "
"pci_msix_table_bar>, E<.Nm pci_pending_msix>, E<.Nm pci_read_config>, E<.Nm "
"pci_release_msi>, E<.Nm pci_remap_msix>, E<.Nm pci_restore_state>, E<.Nm "
"pci_save_state>, E<.Nm pci_set_max_read_req>, E<.Nm pci_set_powerstate>, "
"E<.Nm pci_write_config>, E<.Nm pcie_adjust_config>, E<.Nm pcie_flr>, E<.Nm "
"pcie_get_max_completion_timeout>, E<.Nm pcie_read_config>, E<.Nm "
"pcie_wait_for_pending_transactions>, E<.Nm pcie_write_config>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/pci.9:77
#, no-wrap
msgid "PCI bus interface"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/pci.9:78
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/pci.9:79
#, no-wrap
msgid "sys/bus.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/pci.9:80
#, no-wrap
msgid "dev/pci/pcireg.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/pci.9:81
#, no-wrap
msgid "dev/pci/pcivar.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:174
msgid ""
"E<.Ft int> E<.Fn pci_alloc_msi \"device_t dev\" \"int *count\"> E<.Ft int> "
"E<.Fn pci_alloc_msix \"device_t dev\" \"int *count\"> E<.Ft int> E<.Fn "
"pci_disable_busmaster \"device_t dev\"> E<.Ft int> E<.Fn pci_disable_io "
"\"device_t dev\" \"int space\"> E<.Ft int> E<.Fn pci_enable_busmaster "
"\"device_t dev\"> E<.Ft int> E<.Fn pci_enable_io \"device_t dev\" \"int "
"space\"> E<.Ft device_t> E<.Fn pci_find_bsf \"uint8_t bus\" \"uint8_t slot\" "
"\"uint8_t func\"> E<.Ft int> E<.Fn pci_find_cap \"device_t dev\" \"int "
"capability\" \"int *capreg\"> E<.Ft device_t> E<.Fn pci_find_dbsf \"uint32_t "
"domain\" \"uint8_t bus\" \"uint8_t slot\" \"uint8_t func\"> E<.Ft device_t> "
"E<.Fn pci_find_device \"uint16_t vendor\" \"uint16_t device\"> E<.Ft int> "
"E<.Fn pci_find_extcap \"device_t dev\" \"int capability\" \"int *capreg\"> "
"E<.Ft int> E<.Fn pci_find_htcap \"device_t dev\" \"int capability\" \"int "
"*capreg\"> E<.Ft int> E<.Fn pci_find_next_cap \"device_t dev\" \"int "
"capability\" \"int start\" \"int *capreg\"> E<.Ft int> E<.Fn "
"pci_find_next_extcap \"device_t dev\" \"int capability\" \"int start\" \"int "
"*capreg\"> E<.Ft int> E<.Fn pci_find_next_htcap \"device_t dev\" \"int "
"capability\" \"int start\" \"int *capreg\"> E<.Ft device_t> E<.Fn "
"pci_find_pcie_root_port \"device_t dev\"> E<.Ft int> E<.Fn pci_get_id "
"\"device_t dev\" \"enum pci_id_type type\" \"uintptr_t *id\"> E<.Ft int> "
"E<.Fn pci_get_max_payload \"device_t dev\"> E<.Ft int> E<.Fn "
"pci_get_max_read_req \"device_t dev\"> E<.Ft int> E<.Fn pci_get_powerstate "
"\"device_t dev\"> E<.Ft int> E<.Fn pci_get_vpd_ident \"device_t dev\" "
"\"const char **identptr\"> E<.Ft int> E<.Fn pci_get_vpd_readonly \"device_t "
"dev\" \"const char *kw\" \"const char **vptr\"> E<.Ft int> E<.Fn "
"pci_msi_count \"device_t dev\"> E<.Ft int> E<.Fn pci_msix_count \"device_t "
"dev\"> E<.Ft int> E<.Fn pci_msix_pba_bar \"device_t dev\"> E<.Ft int> E<.Fn "
"pci_msix_table_bar \"device_t dev\"> E<.Ft int> E<.Fn pci_pending_msix "
"\"device_t dev\" \"u_int index\"> E<.Ft uint32_t> E<.Fn pci_read_config "
"\"device_t dev\" \"int reg\" \"int width\"> E<.Ft int> E<.Fn pci_release_msi "
"\"device_t dev\"> E<.Ft int> E<.Fn pci_remap_msix \"device_t dev\" \"int "
"count\" \"const u_int *vectors\"> E<.Ft void> E<.Fn pci_restore_state "
"\"device_t dev\"> E<.Ft void> E<.Fn pci_save_state \"device_t dev\"> E<.Ft "
"int> E<.Fn pci_set_max_read_req \"device_t dev\" \"int size\"> E<.Ft int> "
"E<.Fn pci_set_powerstate \"device_t dev\" \"int state\"> E<.Ft void> E<.Fn "
"pci_write_config \"device_t dev\" \"int reg\" \"uint32_t val\" \"int "
"width\"> E<.Ft uint32_t> E<.Fo pcie_adjust_config> E<.Fa \"device_t dev\"> "
"E<.Fa \"int reg\"> E<.Fa \"uint32_t mask\"> E<.Fa \"uint32_t val\"> E<.Fa "
"\"int width\"> E<.Fc> E<.Ft bool> E<.Fn pcie_flr \"device_t dev\" \"u_int "
"max_delay\" \"bool force\"> E<.Ft int> E<.Fn pcie_get_max_completion_timeout "
"\"device_t dev\"> E<.Ft uint32_t> E<.Fn pcie_read_config \"device_t dev\" "
"\"int reg\" \"int width\"> E<.Ft bool> E<.Fn "
"pcie_wait_for_pending_transactions \"device_t dev\" \"u_int max_delay\"> "
"E<.Ft void> E<.Fn pcie_write_config \"device_t dev\" \"int reg\" \"uint32_t "
"val\" \"int width\"> E<.Ft void> E<.Fn pci_event_fn \"void *arg\" \"device_t "
"dev\"> E<.Fn EVENTHANDLER_REGISTER \"pci_add_device\" \"pci_event_fn\"> "
"E<.Fn EVENTHANDLER_DEREGISTER \"pci_delete_resource\" \"pci_event_fn\">"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/pci.9:174
#, no-wrap
msgid "dev/pci/pci_iov.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:187
msgid ""
"E<.Ft int> E<.Fn pci_iov_attach \"device_t dev\" \"nvlist_t *pf_schema\" "
"\"nvlist_t *vf_schema\"> E<.Ft int> E<.Fo pci_iov_attach_name> E<.Fa "
"\"device_t dev\"> E<.Fa \"nvlist_t *pf_schema\"> E<.Fa \"nvlist_t "
"*vf_schema\"> E<.Fa \"const char *fmt\"> E<.Fa \"...\"> E<.Fc> E<.Ft int> "
"E<.Fn pci_iov_detach \"device_t dev\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/pci.9:187
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:198
msgid ""
"The E<.Nm> set of functions are used for managing PCI devices.  The "
"functions are split into several groups: raw configuration access, locating "
"devices, device information, device configuration, and message signaled "
"interrupts."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/pci.9:198
#, no-wrap
msgid "Raw Configuration Access"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:209
msgid ""
"The E<.Fn pci_read_config> function is used to read data from the PCI "
"configuration space of the device E<.Fa dev>, at offset E<.Fa reg>, with "
"E<.Fa width> specifying the size of the access."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:222
msgid ""
"The E<.Fn pci_write_config> function is used to write the value E<.Fa val> "
"to the PCI configuration space of the device E<.Fa dev>, at offset E<.Fa "
"reg>, with E<.Fa width> specifying the size of the access."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:241
msgid ""
"The E<.Fn pcie_adjust_config> function is used to modify the value of a "
"register in the PCI-express capability register set of device E<.Fa dev>.  "
"The offset E<.Fa reg> specifies a relative offset in the register set with "
"E<.Fa width> specifying the size of the access.  The new value of the "
"register is computed by modifying bits set in E<.Fa mask> to the value in "
"E<.Fa val>.  Any bits not specified in E<.Fa mask> are preserved.  The "
"previous value of the register is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:252
msgid ""
"The E<.Fn pcie_read_config> function is used to read the value of a register "
"in the PCI-express capability register set of device E<.Fa dev>.  The offset "
"E<.Fa reg> specifies a relative offset in the register set with E<.Fa width> "
"specifying the size of the access."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:264
msgid ""
"The E<.Fn pcie_write_config> function is used to write the value E<.Fa val> "
"to a register in the PCI-express capability register set of device E<.Fa "
"dev>.  The offset E<.Fa reg> specifies a relative offset in the register set "
"with E<.Fa width> specifying the size of the access."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:270
msgid ""
"E<.Em NOTE>: Device drivers should only use these functions for "
"functionality that is not available via another E<.Fn pci> function."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/pci.9:270
#, no-wrap
msgid "Locating Devices"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:290
msgid ""
"The E<.Fn pci_find_bsf> function looks up the E<.Vt device_t> of a PCI "
"device, given its E<.Fa bus>, E<.Fa slot>, and E<.Fa func>.  The E<.Fa slot> "
"number actually refers to the number of the device on the bus, which does "
"not necessarily indicate its geographic location in terms of a physical "
"slot.  Note that in case the system has multiple PCI domains, the E<.Fn "
"pci_find_bsf> function only searches the first one.  Actually, it is "
"equivalent to:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:292
#, no-wrap
msgid "pci_find_dbsf(0, bus, slot, func);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:309
msgid ""
"The E<.Fn pci_find_dbsf> function looks up the E<.Vt device_t> of a PCI "
"device, given its E<.Fa domain>, E<.Fa bus>, E<.Fa slot>, and E<.Fa func>.  "
"The E<.Fa slot> number actually refers to the number of the device on the "
"bus, which does not necessarily indicate its geographic location in terms of "
"a physical slot."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:321
msgid ""
"The E<.Fn pci_find_device> function looks up the E<.Vt device_t> of a PCI "
"device, given its E<.Fa vendor> and E<.Fa device> IDs.  Note that there can "
"be multiple matches for this search; this function only returns the first "
"matching device."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/pci.9:321
#, no-wrap
msgid "Device Information"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:332
msgid ""
"The E<.Fn pci_find_cap> function is used to locate the first instance of a "
"PCI capability register set for the device E<.Fa dev>.  The capability to "
"locate is specified by ID via E<.Fa capability>.  Constant macros of the "
"form E<.Dv PCIY_xxx> for standard capability IDs are defined in"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/pci.9:332 /usr/src/share/man/man9/pci.9:369 /usr/src/share/man/man9/pci.9:407
#, no-wrap
msgid "dev/pci/pcireg.h ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:358
msgid ""
"If the capability is found, then E<.Fa *capreg> is set to the offset in "
"configuration space of the capability register set, and E<.Fn pci_find_cap> "
"returns zero.  If the capability is not found or the device does not support "
"capabilities, E<.Fn pci_find_cap> returns an error.  The E<.Fn "
"pci_find_next_cap> function is used to locate the next instance of a PCI "
"capability register set for the device E<.Fa dev>.  The E<.Fa start> should "
"be the E<.Fa *capreg> returned by a prior E<.Fn pci_find_cap> or E<.Fn "
"pci_find_next_cap>.  When no more instances are located E<.Fn "
"pci_find_next_cap> returns an error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:369
msgid ""
"The E<.Fn pci_find_extcap> function is used to locate the first instance of "
"a PCI-express extended capability register set for the device E<.Fa dev>.  "
"The extended capability to locate is specified by ID via E<.Fa capability>.  "
"Constant macros of the form E<.Dv PCIZ_xxx> for standard extended capability "
"IDs are defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:396
msgid ""
"If the extended capability is found, then E<.Fa *capreg> is set to the "
"offset in configuration space of the extended capability register set, and "
"E<.Fn pci_find_extcap> returns zero.  If the extended capability is not "
"found or the device is not a PCI-express device, E<.Fn pci_find_extcap> "
"returns an error.  The E<.Fn pci_find_next_extcap> function is used to "
"locate the next instance of a PCI-express extended capability register set "
"for the device E<.Fa dev>.  The E<.Fa start> should be the E<.Fa *capreg> "
"returned by a prior E<.Fn pci_find_extcap> or E<.Fn pci_find_next_extcap>.  "
"When no more instances are located E<.Fn pci_find_next_extcap> returns an "
"error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:407
msgid ""
"The E<.Fn pci_find_htcap> function is used to locate the first instance of a "
"HyperTransport capability register set for the device E<.Fa dev>.  The "
"capability to locate is specified by type via E<.Fa capability>.  Constant "
"macros of the form E<.Dv PCIM_HTCAP_xxx> for standard HyperTransport "
"capability types are defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:433
msgid ""
"If the capability is found, then E<.Fa *capreg> is set to the offset in "
"configuration space of the capability register set, and E<.Fn "
"pci_find_htcap> returns zero.  If the capability is not found or the device "
"is not a HyperTransport device, E<.Fn pci_find_htcap> returns an error.  The "
"E<.Fn pci_find_next_htcap> function is used to locate the next instance of a "
"HyperTransport capability register set for the device E<.Fa dev>.  The E<.Fa "
"start> should be the E<.Fa *capreg> returned by a prior E<.Fn "
"pci_find_htcap> or E<.Fn pci_find_next_htcap>.  When no more instances are "
"located E<.Fn pci_find_next_htcap> returns an error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:443
msgid ""
"The E<.Fn pci_find_pcie_root_port> function walks up the PCI device "
"hierarchy to locate the PCI-express root port upstream of E<.Fa dev>.  If a "
"root port is not found, E<.Fn pci_find_pcie_root_port> returns E<.Dv NULL>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:451
msgid ""
"The E<.Fn pci_get_id> function is used to read an identifier from a device.  "
"The E<.Fa type> flag is used to specify which identifier to read.  The "
"following flags are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:452
#, no-wrap
msgid "Dv PCI_ID_RID"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:454
msgid "Read the routing identifier for the device."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:454
#, no-wrap
msgid "Dv PCI_ID_MSI"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:457
msgid ""
"Read the MSI routing ID.  This is needed by some interrupt controllers to "
"route MSI and MSI-X interrupts."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:479
msgid ""
"The E<.Fn pci_get_vpd_ident> function is used to fetch a device's Vital "
"Product Data E<.Pq VPD> identifier string.  If the device E<.Fa dev> "
"supports VPD and provides an identifier string, then E<.Fa *identptr> is set "
"to point at a read-only, null-terminated copy of the identifier string, and "
"E<.Fn pci_get_vpd_ident> returns zero.  If the device does not support VPD "
"or does not provide an identifier string, then E<.Fn pci_get_vpd_ident> "
"returns an error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:500
msgid ""
"The E<.Fn pci_get_vpd_readonly> function is used to fetch the value of a "
"single VPD read-only keyword for the device E<.Fa dev>.  The keyword to "
"fetch is identified by the two character string E<.Fa kw>.  If the device "
"supports VPD and provides a read-only value for the requested keyword, then "
"E<.Fa *vptr> is set to point at a read-only, null-terminated copy of the "
"value, and E<.Fn pci_get_vpd_readonly> returns zero.  If the device does not "
"support VPD or does not provide the requested keyword, then E<.Fn "
"pci_get_vpd_readonly> returns an error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:515
msgid ""
"The E<.Fn pcie_get_max_completion_timeout> function returns the maximum "
"completion timeout configured for the device E<.Fa dev> in microseconds.  If "
"the E<.Fa dev> device is not a PCI-express device, E<.Fn "
"pcie_get_max_completion_timeout> returns zero.  When completion timeouts are "
"disabled for E<.Fa dev>, this function returns the maxmimum timeout that "
"would be used if timeouts were enabled."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:545
msgid ""
"The E<.Fn pcie_wait_for_pending_transactions> function waits for any pending "
"transactions initiated by the E<.Fa dev> device to complete.  The function "
"checks for pending transactions by polling the transactions pending flag in "
"the PCI-express device status register.  It returns E<.Dv true> once the "
"transaction pending flag is clear.  If transactions are still pending after "
"E<.Fa max_delay> milliseconds, E<.Fn pcie_wait_for_pending_transactions> "
"returns E<.Dv false>.  If E<.Fa max_delay> is set to zero, E<.Fn "
"pcie_wait_for_pending_transactions> performs a single check; otherwise, this "
"function may sleep while polling the transactions pending flag.  E<.Nm "
"pcie_wait_for_pending_transactions> returns E<.Dv true> if E<.Fa dev> is not "
"a PCI-express device."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/pci.9:545
#, no-wrap
msgid "Device Configuration"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:558
msgid ""
"The E<.Fn pci_enable_busmaster> function enables PCI bus mastering for the "
"device E<.Fa dev>, by setting the E<.Dv PCIM_CMD_BUSMASTEREN> bit in the "
"E<.Dv PCIR_COMMAND> register.  The E<.Fn pci_disable_busmaster> function "
"clears this bit."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:589
msgid ""
"The E<.Fn pci_enable_io> function enables memory or I/O port address "
"decoding for the device E<.Fa dev>, by setting the E<.Dv PCIM_CMD_MEMEN> or "
"E<.Dv PCIM_CMD_PORTEN> bit in the E<.Dv PCIR_COMMAND> register "
"appropriately.  The E<.Fn pci_disable_io> function clears the appropriate "
"bit.  The E<.Fa space> argument specifies which resource is affected; this "
"can be either E<.Dv SYS_RES_MEMORY> or E<.Dv SYS_RES_IOPORT> as "
"appropriate.  Device drivers should generally not use these routines "
"directly.  The PCI bus will enable decoding automatically when a E<.Dv "
"SYS_RES_MEMORY> or E<.Dv SYS_RES_IOPORT> resource is activated via E<.Xr "
"bus_alloc_resource 9> or E<.Xr bus_activate_resource 9>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:599
msgid ""
"The E<.Fn pci_get_max_payload> function returns the current maximum TLP "
"payload size in bytes for a PCI-express device.  If the E<.Fa dev> device is "
"not a PCI-express device, E<.Fn pci_get_max_payload> returns zero."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:609
msgid ""
"The E<.Fn pci_get_max_read_req> function returns the current maximum read "
"request size in bytes for a PCI-express device.  If the E<.Fa dev> device is "
"not a PCI-express device, E<.Fn pci_get_max_read_req> returns zero."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:625
msgid ""
"The E<.Fn pci_set_max_read_req> sets the PCI-express maximum read request "
"size for E<.Fa dev>.  The requested E<.Fa size> may be adjusted, and E<.Fn "
"pci_set_max_read_req> returns the actual size set in bytes.  If the E<.Fa "
"dev> device is not a PCI-express device, E<.Fn pci_set_max_read_req> returns "
"zero."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:635
msgid ""
"The E<.Fn pci_get_powerstate> function returns the current power state of "
"the device E<.Fa dev>.  If the device does not support power management "
"capabilities, then the default state of E<.Dv PCI_POWERSTATE_D0> is "
"returned.  The following power states are defined by PCI:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:636
#, no-wrap
msgid "Dv PCI_POWERSTATE_D0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:640
msgid ""
"State in which device is on and running.  It is receiving full power from "
"the system and delivering full functionality to the user."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:640
#, no-wrap
msgid "Dv PCI_POWERSTATE_D1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:645
msgid ""
"Class-specific low-power state in which device context may or may not be "
"lost.  Buses in this state cannot do anything to the bus, to force devices "
"to lose context."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:645
#, no-wrap
msgid "Dv PCI_POWERSTATE_D2"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:654
msgid ""
"Class-specific low-power state in which device context may or may not be "
"lost.  Attains greater power savings than E<.Dv PCI_POWERSTATE_D1>.  Buses "
"in this state can cause devices to lose some context.  Devices E<.Em must> "
"be prepared for the bus to be in this state or higher."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:654
#, no-wrap
msgid "Dv PCI_POWERSTATE_D3"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:658
msgid ""
"State in which the device is off and not running.  Device context is lost, "
"and power from the device can be removed."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/pci.9:658
#, no-wrap
msgid "Dv PCI_POWERSTATE_UNKNOWN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:660
msgid "State of the device is unknown."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:673
msgid ""
"The E<.Fn pci_set_powerstate> function is used to transition the device "
"E<.Fa dev> to the PCI power state E<.Fa state>.  If the device does not "
"support power management capabilities or it does not support the specific "
"power state E<.Fa state>, then the function will fail with E<.Er "
"EOPNOTSUPP>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:720
msgid ""
"The E<.Fn pci_iov_attach> function is used to advertise that the given "
"device E<.Pq and associated device driver> supports PCI Single-Root I/O "
"Virtualization E<.Pq SR-IOV>.  A driver that supports SR-IOV must implement "
"the E<.Xr PCI_IOV_INIT 9>, E<.Xr PCI_IOV_ADD_VF 9> and E<.Xr PCI_IOV_UNINIT "
"9> methods.  This function should be called during the E<.Xr DEVICE_ATTACH "
"9> method.  If this function returns an error, it is recommended that the "
"device driver still successfully attaches, but runs with SR-IOV disabled.  "
"The E<.Fa pf_schema> and E<.Fa vf_schema> parameters are used to define what "
"device-specific configuration parameters the device driver accepts when "
"SR-IOV is enabled for the Physical Function E<.Pq PF> and for individual "
"Virtual Functions E<.Pq VFs> respectively.  See E<.Xr pci_iov_schema 9> for "
"details on how to construct the schema.  If either the E<.Pa pf_schema> or "
"E<.Pa vf_schema> is invalid or specifies parameter names that conflict with "
"parameter names that are already in use, E<.Fn pci_iov_attach> will return "
"an error and SR-IOV will not be available on the PF device.  If a driver "
"does not accept configuration parameters for either the PF device or the VF "
"devices, the driver must pass an empty schema for that device.  The SR-IOV "
"infrastructure takes ownership of the E<.Fa pf_schema> and E<.Fa vf_schema> "
"and is responsible for freeing them.  The driver must never free the schemas "
"itself."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:734
msgid ""
"The E<.Fn pci_iov_attach_name> function is a variant of E<.Fn "
"pci_iov_attach> that allows the name of the associated character device in "
"E<.Pa /dev/iov> to be specified by E<.Fa fmt>.  The E<.Fn pci_iov_attach> "
"function uses the name of E<.Fa dev> as the device name."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:756
msgid ""
"The E<.Fn pci_iov_detach> function is used to advise the SR-IOV "
"infrastructure that the driver for the given device is attempting to detach "
"and that all SR-IOV resources for the device must be released.  This "
"function must be called during the E<.Xr DEVICE_DETACH 9> method if E<.Fn "
"pci_iov_attach> was successfully called on the device and E<.Fn "
"pci_iov_detach> has not subsequently been called on the device and returned "
"no error.  If this function returns an error, the E<.Xr DEVICE_DETACH 9> "
"method must fail and return an error, as detaching the PF driver while VF "
"devices are active would cause system instability.  This function is safe to "
"call and will always succeed if E<.Fn pci_iov_attach> previously failed with "
"an error on the given device, or if E<.Fn pci_iov_attach> was never called "
"on the device."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:776
msgid ""
"The E<.Fn pci_save_state> and E<.Fn pci_restore_state> functions can be used "
"by a device driver to save and restore standard PCI config registers.  The "
"E<.Fn pci_save_state> function must be invoked while the device has valid "
"state before E<.Fn pci_restore_state> can be used.  If the device is not in "
"the fully-powered state E<.Pq Dv PCI_POWERSTATE_D0> when E<.Fn "
"pci_restore_state> is invoked, then the device will be transitioned to E<.Dv "
"PCI_POWERSTATE_D0> before any config registers are restored."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:821
msgid ""
"The E<.Fn pcie_flr> function requests a Function Level Reset E<.Pq FLR> of "
"E<.Fa dev>.  If E<.Fa dev> is not a PCI-express device or does not support "
"Function Level Resets via the PCI-express device control register, E<.Dv "
"false> is returned.  Pending transactions are drained by disabling "
"busmastering and calling E<.Fn pcie_wait_for_pending_transactions> before "
"resetting the device.  The E<.Fa max_delay> argument specifies the maximum "
"timeout to wait for pending transactions as described for E<.Fn "
"pcie_wait_for_pending_transactions>.  If E<.Fn "
"pcie_wait_for_pending_transactions> fails with a timeout and E<.Fa force> is "
"E<.Dv false>, busmastering is re-enabled and E<.Dv false> is returned.  If "
"E<.Fn pcie_wait_for_pending_transactions> fails with a timeout and E<.Fa "
"force> is E<.Dv true>, the device is reset despite the timeout.  After the "
"reset has been requested, E<.Nm pcie_flr> sleeps for at least 100 "
"milliseconds before returning E<.Dv true>.  Note that E<.Nm pcie_flr> does "
"not save and restore any state around the reset.  The caller should save and "
"restore state as needed."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/pci.9:821
#, no-wrap
msgid "Message Signaled Interrupts"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:852
msgid ""
"Message Signaled Interrupts E<.Pq MSI> and Enhanced Message Signaled "
"Interrupts E<.Pq MSI-X> are PCI capabilities that provide an alternate "
"method for PCI devices to signal interrupts.  The legacy INTx interrupt is "
"available to PCI devices as a E<.Dv SYS_RES_IRQ> resource with a resource ID "
"of zero.  MSI and MSI-X interrupts are available to PCI devices as one or "
"more E<.Dv SYS_RES_IRQ> resources with resource IDs greater than zero.  A "
"driver must ask the PCI bus to allocate MSI or MSI-X interrupts using E<.Fn "
"pci_alloc_msi> or E<.Fn pci_alloc_msix> before it can use MSI or MSI-X E<.Dv "
"SYS_RES_IRQ> resources.  A driver is not allowed to use the legacy INTx "
"E<.Dv SYS_RES_IRQ> resource if MSI or MSI-X interrupts have been allocated, "
"and attempts to allocate MSI or MSI-X interrupts will fail if the driver is "
"currently using the legacy INTx E<.Dv SYS_RES_IRQ> resource.  A driver is "
"only allowed to use either MSI or MSI-X, but not both."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:862
msgid ""
"The E<.Fn pci_msi_count> function returns the maximum number of MSI messages "
"supported by the device E<.Fa dev>.  If the device does not support MSI, "
"then E<.Fn pci_msi_count> returns zero."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:891
msgid ""
"The E<.Fn pci_alloc_msi> function attempts to allocate E<.Fa *count> MSI "
"messages for the device E<.Fa dev>.  The E<.Fn pci_alloc_msi> function may "
"allocate fewer messages than requested for various reasons including "
"requests for more messages than the device E<.Fa dev> supports, or if the "
"system has a shortage of available MSI messages.  On success, E<.Fa *count> "
"is set to the number of messages allocated and E<.Fn pci_alloc_msi> returns "
"zero.  The E<.Dv SYS_RES_IRQ> resources for the allocated messages will be "
"available at consecutive resource IDs beginning with one.  If E<.Fn "
"pci_alloc_msi> is not able to allocate any messages, it returns an error.  "
"Note that MSI only supports message counts that are powers of two; requests "
"to allocate a non-power of two count of messages will fail."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:905
msgid ""
"The E<.Fn pci_release_msi> function is used to release any allocated MSI or "
"MSI-X messages back to the system.  If any MSI or MSI-X E<.Dv SYS_RES_IRQ> "
"resources are allocated by the driver or have a configured interrupt "
"handler, this function will fail with E<.Er EBUSY>.  The E<.Fn "
"pci_release_msi> function returns zero on success and an error on failure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:915
msgid ""
"The E<.Fn pci_msix_count> function returns the maximum number of MSI-X "
"messages supported by the device E<.Fa dev>.  If the device does not support "
"MSI-X, then E<.Fn pci_msix_count> returns zero."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:931
msgid ""
"The E<.Fn pci_msix_pba_bar> function returns the offset in configuration "
"space of the Base Address Register E<.Pq BAR> containing the MSI-X Pending "
"Bit Array (PBA) for device E<.Fa dev>.  The returned value can be used as "
"the resource ID with E<.Xr bus_alloc_resource 9> and E<.Xr "
"bus_release_resource 9> to allocate the BAR.  If the device does not support "
"MSI-X, then E<.Fn pci_msix_pba_bar> returns -1."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:946
msgid ""
"The E<.Fn pci_msix_table_bar> function returns the offset in configuration "
"space of the BAR containing the MSI-X vector table for device E<.Fa dev>.  "
"The returned value can be used as the resource ID with E<.Xr "
"bus_alloc_resource 9> and E<.Xr bus_release_resource 9> to allocate the "
"BAR.  If the device does not support MSI-X, then E<.Fn pci_msix_table_bar> "
"returns -1."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:985
msgid ""
"The E<.Fn pci_alloc_msix> function attempts to allocate E<.Fa *count> MSI-X "
"messages for the device E<.Fa dev>.  The E<.Fn pci_alloc_msix> function may "
"allocate fewer messages than requested for various reasons including "
"requests for more messages than the device E<.Fa dev> supports, or if the "
"system has a shortage of available MSI-X messages.  On success, E<.Fa "
"*count> is set to the number of messages allocated and E<.Fn pci_alloc_msix> "
"returns zero.  For MSI-X messages, the resource ID for each E<.Dv "
"SYS_RES_IRQ> resource identifies the index in the MSI-X table of the "
"corresponding message.  A resource ID of one maps to the first index of the "
"MSI-X table; a resource ID two identifies the second index in the table, "
"etc.  The E<.Fn pci_alloc_msix> function assigns the E<.Fa *count> messages "
"allocated to the first E<.Fa *count> table indices.  If E<.Fn "
"pci_alloc_msix> is not able to allocate any messages, it returns an error.  "
"Unlike MSI, MSI-X does not require message counts that are powers of two."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:995
msgid ""
"The BARs containing the MSI-X vector table and PBA must be allocated via "
"E<.Xr bus_alloc_resource 9> before calling E<.Fn pci_alloc_msix> and must "
"not be released until after calling E<.Fn pci_release_msi>.  Note that the "
"vector table and PBA may be stored in the same BAR or in different BARs."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1010
msgid ""
"The E<.Fn pci_pending_msix> function examines the E<.Fa dev> device's PBA to "
"determine the pending status of the MSI-X message at table index E<.Fa "
"index>.  If the indicated message is pending, this function returns a "
"non-zero value; otherwise, it returns zero.  Passing an invalid E<.Fa index> "
"to this function will result in undefined behavior."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1027
msgid ""
"As mentioned in the description of E<.Fn pci_alloc_msix>, MSI-X messages are "
"initially assigned to the first N table entries.  A driver may use a "
"different distribution of available messages to table entries via the E<.Fn "
"pci_remap_msix> function.  Note that this function must be called after a "
"successful call to E<.Fn pci_alloc_msix> but before any of the E<.Dv "
"SYS_RES_IRQ> resources are allocated.  The E<.Fn pci_remap_msix> function "
"returns zero on success, or an error on failure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1048
msgid ""
"The E<.Fa vectors> array should contain E<.Fa count> message vectors.  The "
"array maps directly to the MSI-X table in that the first entry in the array "
"specifies the message used for the first entry in the MSI-X table, the "
"second entry in the array corresponds to the second entry in the MSI-X "
"table, etc.  The vector value in each array index can either be zero to "
"indicate that no message should be assigned to the corresponding MSI-X table "
"entry, or it can be a number from one to N E<.Po> where N is the count "
"returned from the previous call to E<.Fn pci_alloc_msix> E<.Pc> to indicate "
"which of the allocated messages should be assigned to the corresponding "
"MSI-X table entry."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1073
msgid ""
"If E<.Fn pci_remap_msix> succeeds, each MSI-X table entry with a non-zero "
"vector will have an associated E<.Dv SYS_RES_IRQ> resource whose resource ID "
"corresponds to the table index as described above for E<.Fn "
"pci_alloc_msix>.  MSI-X table entries that with a vector of zero will not "
"have an associated E<.Dv SYS_RES_IRQ> resource.  Additionally, if any of the "
"original messages allocated by E<.Fn pci_alloc_msix> are not used in the new "
"distribution of messages in the MSI-X table, they will be released "
"automatically.  Note that if a driver wishes to use fewer messages than were "
"allocated by E<.Fn pci_alloc_msix>, the driver must use a single, contiguous "
"range of messages beginning with one in the new distribution.  The E<.Fn "
"pci_remap_msix> function will fail if this condition is not met."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/pci.9:1073
#, no-wrap
msgid "Device Events"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1078
msgid ""
"The E<.Va pci_add_device> event handler is invoked every time a new PCI "
"device is added to the system.  This includes the creation of Virtual "
"Functions via SR-IOV."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1082
msgid ""
"The E<.Va pci_delete_device> event handler is invoked every time a PCI "
"device is removed from the system."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1091
msgid ""
"Both event handlers pass the E<.Vt device_t> object of the relevant PCI "
"device as E<.Fa dev> to each callback function.  Both event handlers are "
"invoked while E<.Fa dev> is unattached but with valid instance variables."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/pci.9:1091
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1117
msgid ""
"E<.Xr pci 4>, E<.Xr pciconf 8>, E<.Xr bus_alloc_resource 9>, E<.Xr bus_dma "
"9>, E<.Xr bus_release_resource 9>, E<.Xr bus_setup_intr 9>, E<.Xr "
"bus_teardown_intr 9>, E<.Xr devclass 9>, E<.Xr device 9>, E<.Xr driver 9>, "
"E<.Xr eventhandler 9>, E<.Xr rman 9> E<.Rs> E<.%B FreeBSD Developers' "
"Handbook> E<.%T NewBus> E<.%U "
"https://www.FreeBSD.org/doc/en_US.ISO8859-1/books/developers-handbook/> "
"E<.Re> E<.Rs> E<.%A Shanley> E<.%A Anderson> E<.%B PCI System Architecture> "
"E<.%N 2nd Edition> E<.%I Addison-Wesley> E<.%O ISBN 0-201-30974-2> E<.Re>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/pci.9:1117
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1123
msgid ""
"E<.An -nosplit> This manual page was written by E<.An Bruce M Simpson Aq Mt "
"bms@FreeBSD.org> and E<.An John Baldwin Aq Mt jhb@FreeBSD.org>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/pci.9:1123
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1130
msgid ""
"The kernel PCI code has a number of references to E<.Dq \"slot numbers\">.  "
"These do not refer to the geographic location of PCI devices, but to the "
"device number assigned by the combination of the PCI IDSEL mechanism and the "
"platform firmware.  This should be taken note of when working with the "
"kernel PCI code."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/pci.9:1132
msgid ""
"The PCI bus driver should allocate the MSI-X vector table and PBA internally "
"as necessary rather than requiring the caller to do so."
msgstr ""
