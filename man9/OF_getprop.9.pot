# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/OF_getprop.9:28
#, no-wrap
msgid "June 23, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/OF_getprop.9:29
#, no-wrap
msgid "OF_GETPROP 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/OF_getprop.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:45
msgid ""
"E<.Nm OF_getprop>, E<.Nm OF_getproplen>, E<.Nm OF_getencprop>, E<.Nm "
"OF_hasprop>, E<.Nm OF_searchprop>, E<.Nm OF_searchencprop>, E<.Nm "
"OF_getprop_alloc>, E<.Nm OF_getencprop_alloc>, E<.Nm "
"OF_getprop_alloc_multi>, E<.Nm OF_getencprop_alloc_multi>, E<.Nm "
"OF_prop_free>, E<.Nm OF_nextprop>, E<.Nm OF_setprop>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/OF_getprop.9:45
#, no-wrap
msgid "access properties of device tree node"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/OF_getprop.9:46
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/OF_getprop.9:47
#, no-wrap
msgid "dev/ofw/ofw_bus.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/OF_getprop.9:48
#, no-wrap
msgid "dev/ofw/ofw_bus_subr.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:85
msgid ""
"E<.Ft ssize_t> E<.Fn OF_getproplen \"phandle_t node\" \"const char "
"*propname\"> E<.Ft ssize_t> E<.Fn OF_getprop \"phandle_t node\" \"const char "
"*propname\" \"void *buf\" \"size_t len\"> E<.Ft ssize_t> E<.Fn OF_getencprop "
"\"phandle_t node\" \"const char *prop\" \"pcell_t *buf\" \"size_t len\"> "
"E<.Ft int> E<.Fn OF_hasprop \"phandle_t node\" \"const char *propname\"> "
"E<.Ft ssize_t> E<.Fn OF_searchprop \"phandle_t node\" \"const char "
"*propname\" \"void *buf\" \"size_t len\"> E<.Ft ssize_t> E<.Fn "
"OF_searchencprop \"phandle_t node\" \"const char *propname\" \"pcell_t "
"*buf\" \"size_t len\"> E<.Ft ssize_t> E<.Fn OF_getprop_alloc \"phandle_t "
"node\" \"const char *propname\" \"void **buf\"> E<.Ft ssize_t> E<.Fn "
"OF_getencprop_alloc \"phandle_t node\" \"const char *propname\" \"pcell_t "
"**buf\"> E<.Ft ssize_t> E<.Fn OF_getprop_alloc_multi \"phandle_t node\" "
"\"const char *propname\" \"int elsz\" \"void **buf\"> E<.Ft ssize_t> E<.Fn "
"OF_getencprop_alloc_multi \"phandle_t node\" \"const char *propname\" \"int "
"elsz\" \"pcell_t **buf\"> E<.Ft void> E<.Fn OF_prop_free \"void *buf\"> "
"E<.Ft int> E<.Fn OF_nextprop \"phandle_t node\" \"const char *propname\" "
"\"char *buf\" \"size_t len\"> E<.Ft int> E<.Fn OF_setprop \"phandle_t node\" "
"\"const char *propname\" \"const void *buf\" \"size_t len\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/OF_getprop.9:85
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:95
msgid ""
"Device nodes can have associated properties.  Properties consist of a name "
"and a value.  A name is a human-readable string from 1 to 31 characters "
"long.  A value is an array of zero or more bytes that encode certain "
"information.  The meaning of that bytes depends on how drivers interpret "
"them.  Properties can encode byte arrays, text strings, unsigned 32-bit "
"values or any combination of these types."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:99
msgid ""
"Property with a zero-length value usually represents boolean information.  "
"If the property is present, it signifies true, otherwise false."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:102
msgid ""
"A byte array is encoded as a sequence of bytes and represents values like "
"MAC addresses."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:106
msgid ""
"A text string is a sequence of n printable characters.  It is encoded as a "
"byte array of length n + 1 bytes with characters represented as bytes plus a "
"terminating null character."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:109
msgid ""
"Unsigned 32-bit values, also sometimes called cells, are encoded as a "
"sequence of 4 bytes in big-endian order."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:119
msgid ""
"E<.Fn OF_getproplen> returns either the length of the value associated with "
"the property E<.Fa propname> in the node identified by E<.Fa node>, or 0 if "
"the property exists but has no associated value.  If E<.Fa propname> does "
"not exist, -1 is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:131
msgid ""
"E<.Fn OF_getprop> copies a maximum of E<.Fa len> bytes from the value "
"associated with the property E<.Fa propname> of the device node E<.Fa node> "
"into the memory specified by E<.Fa buf>.  Returns the actual size of the "
"value or -1 if the property does not exist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:142
msgid ""
"E<.Fn OF_getencprop> copies a maximum of E<.Fa len> bytes into memory "
"specified by E<.Fa buf>, then converts cell values from big-endian to host "
"byte order.  Returns the actual size of the value in bytes, or -1 if the "
"property does not exist.  E<.Fa len> must be a multiple of 4."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:149
msgid ""
"E<.Fn OF_hasprop> returns 1 if the device node E<.Fa node> has a property "
"specified by E<.Fa propname>, and zero if the property does not exist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:163
msgid ""
"E<.Fn OF_searchprop> recursively looks for the property specified by E<.Fa "
"propname> starting with the device node E<.Fa node> followed by the parent "
"node and up to the root node.  If the property is found, the function copies "
"a maximum of E<.Fa len> bytes of the value associated with the property into "
"the memory specified by E<.Fa buf>.  Returns the actual size in bytes of the "
"value, or -1 if the property does not exist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:178
msgid ""
"E<.Fn OF_searchencprop> recursively looks for the property specified by "
"E<.Fa propname> starting with the device node E<.Fa node> followed by the "
"parent node and up to the root node.  If the property is found, the function "
"copies a maximum of E<.Fa len> bytes of the value associated with the "
"property into the memory specified by E<.Fa buf>, then converts cell values "
"from big-endian to host byte order.  Returns the actual size in bytes of the "
"value, or -1 if the property does not exist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:198
msgid ""
"E<.Fn OF_getprop_alloc> allocates memory large enough to hold the value "
"associated with the property E<.Fa propname> of the device node E<.Fa node> "
"and copies the value into the newly allocated memory region.  Returns the "
"actual size of the value and stores the address of the allocated memory in "
"E<.Fa *buf>.  If the property has a zero-sized value E<.Fa *buf> is set "
"NULL.  Returns -1 if the property does not exist or memory allocation "
"failed.  Allocated memory should be released when no longer required by "
"calling E<.Fn OF_prop_free>.  The function might sleep when allocating "
"memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:221
msgid ""
"E<.Fn OF_getencprop_alloc> allocates enough memory to hold the value "
"associated with the property E<.Fa propname> of the device node E<.Fa node>, "
"copies the value into the newly allocated memory region, and then converts "
"cell values from big-endian to host byte order.  The actual size of the "
"value is returned and the address of allocated memory is stored in E<.Fa "
"*buf>.  If the property has zero-length value, E<.Fa *buf> is set to NULL.  "
"Returns -1 if the property does not exist or memory allocation failed or the "
"size of the value is not divisible by a cell size (4 bytes).  Allocated "
"memory should be released when no longer required by calling E<.Fn "
"OF_prop_free>.  The function might sleep when allocating memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:246
msgid ""
"E<.Fn OF_getprop_alloc_multi> allocates memory large enough to hold the "
"value associated with the property E<.Fa propname> of the device node E<.Fa "
"node> and copies the value into the newly allocated memory region.  The "
"value is expected to be an array of zero or more elements E<.Fa elsz> bytes "
"long.  Returns the number of elements in the value and stores the address of "
"the allocated memory in E<.Fa *buf>.  If the property has a zero-sized value "
"E<.Fa *buf> is set NULL.  Returns -1 if the property does not exist or "
"memory allocation failed or the size of the value is not divisible by E<.Fa "
"elsz>.  Allocated memory should be released when no longer required by "
"calling E<.Fn OF_prop_free>.  The function might sleep when allocating "
"memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:273
msgid ""
"E<.Fn OF_getencprop_alloc_multi> allocates memory large enough to hold the "
"value associated with the property E<.Fa propname> of the device node E<.Fa "
"node> and copies the value into the newly allocated memory region, and then "
"converts cell values from big-endian to host byte order.  The value is "
"expected to be an array of zero or more elements E<.Fa elsz> bytes long.  "
"Returns the number of elements in the value and stores the address of the "
"allocated memory in E<.Fa *buf>.  If the property has a zero-sized value "
"E<.Fa *buf> is set NULL.  Returns -1 if the property does not exist or "
"memory allocation failed or the size of the value is not divisible by E<.Fa "
"elsz>.  Allocated memory should be released when no longer required by "
"calling E<.Fn OF_prop_free>.  The function might sleep when allocating "
"memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:282
msgid ""
"E<.Fn OF_prop_free> releases memory at E<.Fa buf> that was allocated by "
"E<.Fn OF_getprop_alloc>, E<.Fn OF_getencprop_alloc>, E<.Fn "
"OF_getprop_alloc_multi>, E<.Fn OF_getencprop_alloc_multi>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:302
msgid ""
"E<.Fn OF_nextprop> copies a maximum of E<.Fa size> bytes of the name of the "
"property following the E<.Fa propname> property into E<.Fa buf>.  If E<.Fa "
"propname> is NULL, the function copies the name of the first property of the "
"device node E<.Fa node>.  E<.Fn OF_nextprop> returns -1 if E<.Fa propname> "
"is invalid or there is an internal error, 0 if there are no more properties "
"after E<.Fa propname>, or 1 otherwise."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:319
msgid ""
"E<.Fn OF_setprop> sets the value of the property E<.Fa propname> in the "
"device node E<.Fa node> to the value beginning at the address specified by "
"E<.Fa buf> and running for E<.Fa len> bytes.  If the property does not "
"exist, the function tries to create it.  E<.Fn OF_setprop> returns the "
"actual size of the new value, or -1 if the property value cannot be changed "
"or the new property cannot be created."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/OF_getprop.9:319
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:326
#, no-wrap
msgid ""
"    phandle_t node;\n"
"    phandle_t hdmixref, hdminode;\n"
"    device_t hdmi;\n"
"    uint8_t mac[6];\n"
"    char *model;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:332
#, no-wrap
msgid ""
"    /*\n"
"     * Get a byte array property\n"
"     */\n"
"    if (OF_getprop(node, \"eth,hwaddr\", mac, sizeof(mac)) != sizeof(mac))\n"
"        return;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:339
#, no-wrap
msgid ""
"    /*\n"
"     * Get internal node reference and device associated with it\n"
"     */\n"
"    if (OF_getencprop(node, \"hdmi\", &hdmixref) E<lt>= 0)\n"
"        return;\n"
"    hdmi = OF_device_from_xref(hdmixref);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:346
#, no-wrap
msgid ""
"    /*\n"
"     * Get string value of model property of HDMI framer node\n"
"     */\n"
"    hdminode = OF_node_from_xref(hdmixref);\n"
"    if (OF_getprop_alloc(hdminode, \"model\", (void **)&model) E<lt>= 0)\n"
"        return;\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/OF_getprop.9:347
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:350
msgid "E<.Xr OF_device_from_xref 9> E<.Xr OF_node_from_xref 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/OF_getprop.9:350
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/OF_getprop.9:353
msgid ""
"E<.An -nosplit> This manual page was written by E<.An Oleksandr Tymoshenko "
"Aq Mt gonzo@FreeBSD.org>."
msgstr ""
