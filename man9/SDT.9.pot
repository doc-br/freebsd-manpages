# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/SDT.9:27
#, no-wrap
msgid "April 18, 2015"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/SDT.9:28
#, no-wrap
msgid "SDT 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:32
msgid "E<.Nm SDT>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/SDT.9:32
#, no-wrap
msgid "a DTrace framework for adding statically-defined tracing probes"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:33
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/SDT.9:34
#, no-wrap
msgid "sys/param.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/SDT.9:35
#, no-wrap
msgid "sys/queue.h"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/SDT.9:36
#, no-wrap
msgid "sys/sdt.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:71
msgid ""
"E<.Fn SDT_PROVIDER_DECLARE prov> E<.Fn SDT_PROVIDER_DEFINE prov> E<.Fn "
"SDT_PROBE_DECLARE prov mod func name> E<.Fn SDT_PROBE_DEFINE prov mod func "
"name> E<.Fn SDT_PROBE_DEFINE0 prov mod func name> E<.Fn SDT_PROBE_DEFINE1 "
"prov mod func name arg0> E<.Fn SDT_PROBE_DEFINE2 prov mod func name arg0 "
"arg1> E<.Fn SDT_PROBE_DEFINE3 prov mod func name arg0 arg1 arg2> E<.Fn "
"SDT_PROBE_DEFINE4 prov mod func name arg0 arg1 arg2 arg3> E<.Fn "
"SDT_PROBE_DEFINE5 prov mod func name arg0 arg1 arg2 arg3 arg4> E<.Fn "
"SDT_PROBE_DEFINE6 prov mod func name arg0 arg1 arg2 arg3 arg4 arg5> E<.Fn "
"SDT_PROBE_DEFINE7 prov mod func name arg0 arg1 arg2 arg3 arg4 arg5 arg6> "
"E<.Fn SDT_PROBE_DEFINE0_XLATE prov mod func name> E<.Fn "
"SDT_PROBE_DEFINE1_XLATE prov mod func name arg0 xarg0> E<.Fn "
"SDT_PROBE_DEFINE2_XLATE prov mod func name arg0 xarg0 arg1 xarg1> E<.Fn "
"SDT_PROBE_DEFINE3_XLATE prov mod func name arg0 xarg0 arg1 xarg1 arg2 xarg2> "
"E<.Fn SDT_PROBE_DEFINE4_XLATE prov mod func name arg0 xarg0 arg1 xarg1 arg2 "
"xarg2 arg3 xarg3> E<.Fn SDT_PROBE_DEFINE5_XLATE prov mod func name arg0 "
"xarg0 arg1 xarg1 arg2 xarg2 arg3 xarg3 arg4 xarg4> E<.Fn "
"SDT_PROBE_DEFINE6_XLATE prov mod func name arg0 xarg0 arg1 xarg1 arg2 xarg2 "
"arg3 xarg3 arg4 xarg4 arg5 xarg5> E<.Fn SDT_PROBE_DEFINE7_XLATE prov mod "
"func name arg0 xarg0 arg1 xarg1 arg2 xarg2 arg3 xarg3 arg4 xarg4 arg5 xarg5 "
"arg6 xarg6> E<.Fn SDT_PROBE0 prov mod func name> E<.Fn SDT_PROBE1 prov mod "
"func name arg0> E<.Fn SDT_PROBE2 prov mod func name arg0 arg1> E<.Fn "
"SDT_PROBE3 prov mod func name arg0 arg1 arg2> E<.Fn SDT_PROBE4 prov mod func "
"name arg0 arg1 arg2 arg3> E<.Fn SDT_PROBE5 prov mod func name arg0 arg1 arg2 "
"arg3 arg4> E<.Fn SDT_PROBE6 prov mod func name arg0 arg1 arg2 arg3 arg4 "
"arg5> E<.Fn SDT_PROBE7 prov mod func name arg0 arg1 arg2 arg3 arg4 arg5 "
"arg6>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:71
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:87
msgid ""
"The E<.Nm> macros allow programmers to define static trace points in kernel "
"code.  These trace points are used by the E<.Nm> framework to create DTrace "
"probes, allowing the code to be instrumented using E<.Xr dtrace 1>.  By "
"default, E<.Nm> trace points are disabled and have no effect on the "
"surrounding code.  When a DTrace probe corresponding to a given trace point "
"is enabled, threads that execute the trace point will call a handler and "
"cause the probe to fire.  Moreover, trace points can take arguments, making "
"it possible to pass data to the DTrace framework when an enabled probe "
"fires."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:95
msgid ""
"Multiple trace points may correspond to a single DTrace probe, allowing "
"programmers to create DTrace probes that correspond to logical system events "
"rather than tying probes to specific code execution paths.  For instance, a "
"DTrace probe corresponding to the arrival of an IP packet into the network "
"stack may be defined using two E<.Nm> trace points: one for IPv4 packets and "
"one for IPv6 packets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:105
msgid ""
"In addition to defining DTrace probes, the E<.Nm> macros allow programmers "
"to define new DTrace providers, making it possible to namespace "
"logically-related probes.  An example is FreeBSD's sctp provider, which "
"contains E<.Nm> probes for FreeBSD's E<.Xr sctp 4> implementation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:119
msgid ""
"The E<.Fn SDT_PROVIDER_DECLARE> and E<.Fn SDT_PROVIDER_DEFINE> macros are "
"used respectively to declare and define a DTrace provider named E<.Ar prov> "
"with the E<.Nm> framework.  A provider need only be defined once; however, "
"the provider must be declared before defining any E<.Nm> probes belonging to "
"that provider."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:141
msgid ""
"Similarly, the E<.Fn SDT_PROBE_DECLARE> and E<.Fn SDT_PROBE_DEFINE*> macros "
"are used to declare and define DTrace probes using the E<.Nm> framework.  "
"Once a probe has been defined, trace points for that probe may be added to "
"kernel code.  DTrace probe identifiers consist of a provider, module, "
"function and name, all of which may be specified in the E<.Nm> probe "
"definition.  Note that probes should not specify a module name: the module "
"name of a probe is used to determine whether or not it should be destroyed "
"when a kernel module is unloaded.  See the E<.Sx BUGS> section.  Note in "
"particular that probes must not be defined across multiple kernel modules."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:154
msgid ""
"If E<.Ql -> character (dash) is wanted in a probe name, then it should be "
"represented as E<.Ql __> (double underscore) in the probe E<.Ar name> "
"parameter passed to various E<.Fn SDT_*> macros, because of technical "
"reasons (a dash is not valid in C identifiers)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:165
msgid ""
"The E<.Fn SDT_PROBE_DEFINE*> macros also allow programmers to declare the "
"types of the arguments that are passed to probes.  This is optional; if the "
"argument types are omitted (through use of the E<.Fn SDT_PROBE_DEFINE> "
"macro), users wishing to make use of the arguments will have to manually "
"cast them to the correct types in their D scripts.  It is strongly "
"recommended that probe definitions include a declaration of their argument "
"types."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:189
msgid ""
"The E<.Fn SDT_PROBE_DEFINE*_XLATE> macros are used for probes whose argument "
"types are to be dynamically translated to the types specified by the "
"corresponding E<.Ar xarg> arguments.  This is mainly useful when porting "
"probe definitions from other operating systems.  As seen by E<.Xr dtrace 1>, "
"the arguments of a probe defined using these macros will have types which "
"match the E<.Ar xarg> types in the probe definition.  However, the arguments "
"passed in at the trace point will have types matching the native argument "
"types in the probe definition, and thus the native type is dynamically "
"translated to the translated type.  So long as an appropriate translator is "
"defined in E<.Pa /usr/lib/dtrace>, scripts making use of the probe need not "
"concern themselves with the underlying type of a given E<.Nm> probe "
"argument."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:197
msgid ""
"The E<.Fn SDT_PROBE*> macros are used to create E<.Nm> trace points.  They "
"are meant to be added to executable code and can be used to instrument the "
"code in which they are called."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:197
#, no-wrap
msgid "PROVIDERS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:211
msgid ""
"A number of kernel DTrace providers are available.  In general, these "
"providers define stable interfaces and should be treated as such: existing D "
"scripts may be broken if a probe is renamed or its arguments are modified.  "
"However, it is often useful to define ad-hoc E<.Nm> probes for debugging a "
"subsystem or driver.  Similarly, a developer may wish to provide a group of "
"E<.Nm> probes without committing to their future stability.  Such probes "
"should be added to the E<.Ql sdt> provider instead of defining a new "
"provider."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:211
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:213
msgid "The DTrace providers available on the current system can be listed with"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:215
#, no-wrap
msgid "dtrace -l | sed 1d | awk '{print $2}' | sort -u\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:224
msgid ""
"A detailed list of the probes offered by a given provider can be obtained by "
"specifying the provider using the E<.Fl P> flag.  For example, to view the "
"probes and argument types for the E<.Ql sched> provider, run"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:226
#, no-wrap
msgid "dtrace -lv -P sched\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:232
msgid ""
"The following probe definition will create a DTrace probe called E<.Ql "
"icmp:::receive-unreachable>, which would hypothetically be triggered when "
"the kernel receives an ICMP packet of type Destination Unreachable:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:234
#, no-wrap
msgid "SDT_PROVIDER_DECLARE(icmp);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:237
#, no-wrap
msgid ""
"SDT_PROBE_DEFINE1(icmp, , , receive__unreachable,\n"
"    \"struct icmp *\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:242
msgid ""
"This particular probe would take a single argument: a pointer to the struct "
"containing the ICMP header for the packet.  Note that the module name of "
"this probe is not specified."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:246
msgid ""
"Consider a DTrace probe which fires when the network stack receives an IP "
"packet.  Such a probe would be defined by multiple tracepoints:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:249
#, no-wrap
msgid ""
"SDT_PROBE_DEFINE3(ip, , , receive, \"struct ifnet *\",\n"
"    \"struct ip *\", \"struct ip6_hdr *\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:259
#, no-wrap
msgid ""
"int\n"
"ip_input(struct mbuf *m)\n"
"{\n"
"\tstruct ip *ip;\n"
"\t...\n"
"\tip = mtod(m, struct ip *);\n"
"\tSDT_PROBE3(ip, , , receive, m-E<gt>m_pkthdr.rcvif, ip, NULL);\n"
"\t...\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:269
#, no-wrap
msgid ""
"int\n"
"ip6_input(struct mbuf *m)\n"
"{\n"
"\tstruct ip6_hdr *ip6;\n"
"\t...\n"
"\tip6 = mtod(m, struct ip6_hdr *);\n"
"\tSDT_PROBE3(ip, , , receive, m-E<gt>m_pkthdr.rcvif, NULL, ip6);\n"
"\t...\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:273
msgid ""
"In particular, the probe should fire when the kernel receives either an IPv4 "
"packet or an IPv6 packet."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:302
msgid ""
"Consider the ICMP probe discussed above.  We note that its second argument "
"is of type E<.Ar struct icmp>, which is a type defined in the FreeBSD kernel "
"to represent the ICMP header of an ICMP packet, defined in RFC 792.  Linux "
"has a corresponding type, E<.Ar struct icmphdr>, for the same purpose, but "
"its field names differ from FreeBSD's E<.Ar struct icmp>.  Similarly, "
"illumos defines the E<.Ar icmph_t> type, again with different field names.  "
"Even with the E<.Ql icmp:::pkt-receive> probes defined in all three "
"operating systems, one would still have to write OS-specific scripts to "
"extract a given field out of the ICMP header argument.  "
"Dynamically-translated types solve this problem: one can define an "
"OS-independent E<.Xr c 7> struct to represent an ICMP header, say E<.Ar "
"struct icmp_hdr_dt>, and define translators from each of the three "
"OS-specific types to E<.Ar struct icmp_hdr_dt>, all in the E<.Xr dtrace 1> "
"library path.  Then the FreeBSD probe above can be defined with:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:305
#, no-wrap
msgid ""
"SDT_PROBE_DEFINE1_XLATE(ip, , , receive, \"struct icmp *\",\n"
"    \"struct icmp_hdr_dt *\");\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:306
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:314
msgid ""
"E<.Xr dtrace 1>, E<.Xr dtrace_io 4>, E<.Xr dtrace_ip 4>, E<.Xr dtrace_proc "
"4>, E<.Xr dtrace_sched 4>, E<.Xr dtrace_tcp 4>, E<.Xr dtrace_udp 4>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:314
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:322
msgid ""
"E<.An -nosplit> DTrace and the E<.Nm> framework were originally ported to "
"FreeBSD from Solaris by E<.An John Birrell Aq Mt jb@FreeBSD.org>.  This "
"manual page was written by E<.An Mark Johnston Aq Mt markj@FreeBSD.org>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/SDT.9:322
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:335
msgid ""
"The E<.Nm> macros allow the module and function names of a probe to be "
"specified as part of a probe definition.  The DTrace framework uses the "
"module name of probes to determine which probes should be destroyed when a "
"kernel module is unloaded, so the module name of a probe should match the "
"name of the module in which its defined.  E<.Nm> will set the module name "
"properly if it is left unspecified in the probe definition; see the E<.Sx "
"EXAMPLES> section."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/SDT.9:346
msgid ""
"One of the goals of the original E<.Nm> implementation (and by extension, of "
"FreeBSD's port) is that inactive E<.Nm> probes should have no performance "
"impact.  This is unfortunately not the case; E<.Nm> trace points will add a "
"small but non-zero amount of latency to the code in which they are defined.  "
"A more sophisticated implementation of the probes will help alleviate this "
"problem."
msgstr ""
