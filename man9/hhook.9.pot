# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/hhook.9:33
#, no-wrap
msgid "June 21, 2013"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/hhook.9:34
#, no-wrap
msgid "HHOOK 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:36
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:44
msgid ""
"E<.Nm hhook>, E<.Nm hhook_head_register>, E<.Nm hhook_head_deregister>, "
"E<.Nm hhook_head_deregister_lookup>, E<.Nm hhook_run_hooks>, E<.Nm "
"HHOOKS_RUN_IF>, E<.Nm HHOOKS_RUN_LOOKUP_IF>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/hhook.9:44
#, no-wrap
msgid "Helper Hook Framework"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:45
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/hhook.9:46 /usr/src/share/man/man9/hhook.9:96 /usr/src/share/man/man9/hhook.9:191
#, no-wrap
msgid "sys/hhook.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:58
msgid ""
"E<.Ft typedef int> E<.Fn \"\\*(lp*hhook_func_t\\*(rp\" \"int32_t "
"hhook_type\" \"int32_t hhook_id\" \"void *udata\" \"void *ctx_data\" \"void "
"*hdata\" \"struct osd *hosd\"> E<.Fn \"int hhook_head_register\" \"int32_t "
"hhook_type\" \"int32_t hhook_id\" \"struct hhook_head **hhh\" \"uint32_t "
"flags\"> E<.Fn \"int hhook_head_deregister\" \"struct hhook_head *hhh\"> "
"E<.Fn \"int hhook_head_deregister_lookup\" \"int32_t hhook_type\" \"int32_t "
"hhook_id\"> E<.Fn \"void hhook_run_hooks\" \"struct hhook_head *hhh\" \"void "
"*ctx_data\" \"struct osd *hosd\"> E<.Fn HHOOKS_RUN_IF \"hhh\" \"ctx_data\" "
"\"hosd\"> E<.Fn HHOOKS_RUN_LOOKUP_IF \"hhook_type\" \"hhook_id\" "
"\"ctx_data\" \"hosd\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:58
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:65
msgid ""
"E<.Nm> provides a framework for managing and running arbitrary hook "
"functions at defined hook points within the kernel.  The KPI was inspired by "
"E<.Xr pfil 9>, and in many respects can be thought of as a more generic "
"superset of pfil."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:79
msgid ""
"The E<.Xr khelp 9> and E<.Nm> frameworks are tightly integrated.  Khelp is "
"responsible for registering and deregistering Khelp module hook functions "
"with E<.Nm> points.  The KPI functions used by E<.Xr khelp 9> to do this are "
"not documented here as they are not relevant to consumers wishing to "
"instantiate hook points."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/hhook.9:79
#, no-wrap
msgid "Information for Khelp Module Implementors"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:88
msgid ""
"Khelp modules indirectly interact with E<.Nm> by defining appropriate hook "
"functions for insertion into hook points.  Hook functions must conform to "
"the E<.Ft hhook_func_t> function pointer declaration outlined in the E<.Sx "
"SYNOPSIS>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:96
msgid ""
"The E<.Fa hhook_type> and E<.Fa hhook_id> arguments identify the hook point "
"which has called into the hook function.  These are useful when a single "
"hook function is registered for multiple hook points and wants to know which "
"hook point has called into it."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:103
msgid ""
"lists available E<.Fa hhook_type> defines and subsystems which export hook "
"points are responsible for defining the E<.Fa hhook_id> value in appropriate "
"header files."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:109
msgid ""
"The E<.Fa udata> argument will be passed to the hook function if it was "
"specified in the E<.Vt struct hookinfo> at hook registration time."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:114
msgid ""
"The E<.Fa ctx_data> argument contains context specific data from the hook "
"point call site.  The data type passed is subsystem dependent."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:121
msgid ""
"The E<.Fa hdata> argument is a pointer to the persistent per-object storage "
"allocated for use by the module if required.  The pointer will only ever be "
"NULL if the module did not request per-object storage."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:129
msgid ""
"The E<.Fa hosd> argument can be used with the E<.Xr khelp 9> framework's "
"E<.Fn khelp_get_osd> function to access data belonging to a different Khelp "
"module."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:135
msgid ""
"Khelp modules instruct the Khelp framework to register their hook functions "
"with E<.Nm> points by creating a E<.Vt \"struct hookinfo\"> per hook point, "
"which contains the following members:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:143
#, no-wrap
msgid ""
"struct hookinfo {\n"
"\thhook_func_t\thook_func;\n"
"\tstruct helper\t*hook_helper;\n"
"\tvoid\t\t*hook_udata;\n"
"\tint32_t\t\thook_id;\n"
"\tint32_t\t\thook_type;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:148
msgid ""
"Khelp modules are responsible for setting all members of the struct except "
"E<.Va hook_helper> which is handled by the Khelp framework."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/hhook.9:148
#, no-wrap
msgid "Creating and Managing Hook Points"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:153
msgid ""
"Kernel subsystems that wish to provide E<.Nm> points typically need to make "
"four and possibly five key changes to their implementation:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:158
msgid ""
"Define a list of E<.Va hhook_id> mappings in an appropriate subsystem "
"header."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:162
msgid ""
"Register each hook point with the E<.Fn hhook_head_register> function during "
"initialisation of the subsystem."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:165
msgid ""
"Select or create a standardised data type to pass to hook functions as "
"contextual data."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:171
msgid ""
"Add a call to E<.Fn HHOOKS_RUN_IF> or E<.Fn HHOOKS_RUN_IF_LOOKUP> at the "
"point in the subsystem's code where the hook point should be executed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:180
msgid ""
"If the subsystem can be dynamically added/removed at runtime, each hook "
"point registered with the E<.Fn hhook_head_register> function when the "
"subsystem was initialised needs to be deregistered with the E<.Fn "
"hhook_head_deregister> or E<.Fn hhook_head_deregister_lookup> functions when "
"the subsystem is being deinitialised prior to removal."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:191
msgid ""
"The E<.Fn hhook_head_register> function registers a hook point with the "
"E<.Nm> framework.  The E<.Fa hook_type> argument defines the high level type "
"for the hook point.  Valid types are defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:217
msgid ""
"and new types should be added as required.  The E<.Fa hook_id> argument "
"specifies a unique, subsystem specific identifier for the hook point.  The "
"E<.Fa hhh> argument will, if not NULL, be used to store a reference to the "
"E<.Vt struct hhook_head> created as part of the registration process.  "
"Subsystems will generally want to store a local copy of the E<.Vt struct "
"hhook_head> so that they can use the E<.Fn HHOOKS_RUN_IF> macro to "
"instantiate hook points.  The HHOOK_WAITOK flag may be passed in via the "
"E<.Fa flags> argument if E<.Xr malloc 9> is allowed to sleep waiting for "
"memory to become available.  If the hook point is within a virtualised "
"subsystem (e.g. the network stack), the HHOOK_HEADISINVNET flag should be "
"passed in via the E<.Fa flags> argument so that the E<.Vt struct hhook_head> "
"created during the registration process will be added to a virtualised list."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:230
msgid ""
"The E<.Fn hhook_head_deregister> function deregisters a previously "
"registered hook point from the E<.Nm> framework.  The E<.Fa hhh> argument is "
"the pointer to the E<.Vt struct hhook_head> returned by E<.Fn "
"hhoook_head_register> when the hook point was registered."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:242
msgid ""
"The E<.Fn hhook_head_deregister_lookup> function can be used instead of "
"E<.Fn hhook_head_deregister> in situations where the caller does not have a "
"cached copy of the E<.Vt struct hhook_head> and wants to deregister a hook "
"point using the appropriate E<.Fa hook_type> and E<.Fa hook_id> identifiers "
"instead."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:267
msgid ""
"The E<.Fn hhook_run_hooks> function should normally not be called directly "
"and should instead be called indirectly via the E<.Fn HHOOKS_RUN_IF> macro.  "
"However, there may be circumstances where it is preferable to call the "
"function directly, and so it is documented here for completeness.  The E<.Fa "
"hhh> argument references the E<.Nm> point to call all registered hook "
"functions for.  The E<.Fa ctx_data> argument specifies a pointer to the "
"contextual hook point data to pass into the hook functions.  The E<.Fa hosd> "
"argument should be the pointer to the appropriate object's E<.Vt struct osd> "
"if the subsystem provides the ability for Khelp modules to associate "
"per-object data.  Subsystems which do not should pass NULL."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:280
msgid ""
"The E<.Fn HHOOKS_RUN_IF> macro is the preferred way to implement hook "
"points.  It only calls the E<.Fn hhook_run_hooks> function if at least one "
"hook function is registered for the hook point.  By checking for registered "
"hook functions, the macro minimises the cost associated with adding hook "
"points to frequently used code paths by reducing to a simple if test in the "
"common case where no hook functions are registered.  The arguments are as "
"described for the E<.Fn hhook_run_hooks> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:294
msgid ""
"The E<.Fn HHOOKS_RUN_IF_LOOKUP> macro performs the same function as the "
"E<.Fn HHOOKS_RUN_IF> macro, but performs an additional step to look up the "
"E<.Vt struct hhook_head> for the specified E<.Fa hook_type> and E<.Fa "
"hook_id> identifiers.  It should not be used except in code paths which are "
"infrequently executed because of the reference counting overhead associated "
"with the look up."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:294
#, no-wrap
msgid "IMPLEMENTATION NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:307
msgid ""
"Each E<.Vt struct hhook_head> protects its internal list of hook functions "
"with a E<.Xr rmlock 9>.  Therefore, anytime E<.Fn hhook_run_hooks> is called "
"directly or indirectly via the E<.Fn HHOOKS_RUN_IF> or E<.Fn "
"HHOOKS_RUN_IF_LOOKUP> macros, a non-sleepable read lock will be acquired and "
"held across the calls to all registered hook functions."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:307
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:325
msgid ""
"E<.Fn hhook_head_register> returns 0 if no errors occurred.  It returns "
"EEXIST if a hook point with the same E<.Fa hook_type> and E<.Fa hook_id> is "
"already registered.  It returns EINVAL if the HHOOK_HEADISINVNET flag is not "
"set in E<.Fa flags> because the implementation does not yet support hook "
"points in non-virtualised subsystems (see the E<.Sx BUGS> section for "
"details).  It returns ENOMEM if E<.Xr malloc 9> failed to allocate memory "
"for the new E<.Vt struct hhook_head>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:336
msgid ""
"E<.Fn hhook_head_deregister> and E<.Fn hhook_head_deregister_lookup> return "
"0 if no errors occurred.  They return ENOENT if E<.Fa hhh> is NULL.  They "
"return EBUSY if the reference count of E<.Fa hhh> is greater than one."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:336
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:339
msgid ""
"A well commented example Khelp module can be found at: E<.Pa "
"/usr/share/examples/kld/khelp/h_example.c>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:352
msgid ""
"The E<.Xr tcp 4> implementation provides two E<.Nm> points which are called "
"for packets sent/received when a connection is in the established phase.  "
"Search for HHOOK in the following files: E<.Pa sys/netinet/tcp_var.h>, E<.Pa "
"sys/netinet/tcp_input.c>, E<.Pa sys/netinet/tcp_output.c> and E<.Pa "
"sys/netinet/tcp_subr.c>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:352
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:354
msgid "E<.Xr khelp 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:354
#, no-wrap
msgid "ACKNOWLEDGEMENTS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:358
msgid ""
"Development and testing of this software were made possible in part by "
"grants from the FreeBSD Foundation and Cisco University Research Program "
"Fund at Community Foundation Silicon Valley."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:358
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:363
msgid "The E<.Nm> framework first appeared in E<.Fx 9.0>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:370
msgid ""
"The E<.Nm> framework was first released in 2010 by Lawrence Stewart whilst "
"studying at Swinburne University of Technology's Centre for Advanced "
"Internet Architectures, Melbourne, Australia.  More details are available "
"at:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:372
msgid "http://caia.swin.edu.au/urp/newtcp/"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/hhook.9:372
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:378
msgid ""
"E<.An -nosplit> The E<.Nm> framework was written by E<.An Lawrence Stewart "
"Aq Mt lstewart@FreeBSD.org>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/hhook.9:382
msgid ""
"This manual page was written by E<.An David Hayes Aq Mt "
"david.hayes@ieee.org> and E<.An Lawrence Stewart Aq Mt "
"lstewart@FreeBSD.org>."
msgstr ""
