# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/ieee80211_output.9:30
#, no-wrap
msgid "March 29, 2010"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/ieee80211_output.9:31
#, no-wrap
msgid "IEEE80211_OUTPUT 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:33
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:35
msgid "E<.Nm ieee80211_output>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/ieee80211_output.9:35
#, no-wrap
msgid "software 802.11 stack output functions"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:36
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/ieee80211_output.9:37
#, no-wrap
msgid "net80211/ieee80211_var.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:54
msgid ""
"E<.Ft int> E<.Fn M_WME_GETAC \"struct mbuf *\"> E<.Ft int> E<.Fn M_SEQNO_GET "
"\"struct mbuf *\"> E<.Ft struct ieee80211_key *> E<.Fn "
"ieee80211_crypto_encap \"struct ieee80211_node *\" \"struct mbuf *\"> E<.Ft "
"void> E<.Fo ieee80211_process_callback> E<.Fa \"struct ieee80211_node *\"> "
"E<.Fa \"struct mbuf *\"> E<.Fa \"int\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:54
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:76
msgid ""
"The E<.Nm net80211> layer that supports 802.11 device drivers handles most "
"of the work required to transmit frames.  Drivers usually receive "
"fully-encapsulated 802.11 frames that have been classified and assigned a "
"transmit priority; all that is left is to do crypto encapsulation, prepare "
"any hardware-specific state, and push the packet out to the device.  "
"Outbound frames are either generated by the E<.Nm net80211> layer "
"(e.g. management frames) or are passed down from upper layers through the "
"E<.Xr ifnet 9> transmit queue.  Data frames passed down for transmit flow "
"through E<.Nm net80211> which handles aggregation, 802.11 encapsulation, and "
"then dispatches the frames to the driver through it's transmit queue."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:92
msgid ""
"There are two control paths by which frames reach a driver for transmit.  "
"Data packets are queued to the device's E<.Vt if_snd> queue and the driver's "
"E<.Vt if_start> method is called.  Other frames are passed down using the "
"E<.Vt ic_raw_xmit> method without queueing (unless done by the driver).  The "
"raw transmit path may include data frames from user applications that inject "
"them through E<.Xr bpf 4> and NullData frames generated by E<.Nm net80211> "
"to probe for idle stations (when operating as an access point)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:106
msgid ""
"E<.Nm net80211> handles all state-related bookkeeping and management for the "
"handling of data frames.  Data frames are only transmit for a vap in the "
"E<.Dv IEEE80211_S_RUN> state; there is no need, for example, to check for "
"frames sent down when CAC or CSA is active.  Similarly, E<.Nm net80211> "
"handles activities such as background scanning and power save mode, frames "
"will not be sent to a driver unless it is operating on the BSS channel with "
"E<.Dq full power>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:126
msgid ""
"All frames passed to a driver for transmit hold a reference to a node table "
"entry in the E<.Vt m_pkthdr.rcvif> field.  The node is associated with the "
"frame destination.  Typically it is the receiver's entry but in some "
"situations it may be a placeholder entry or the E<.Dq next hop station> "
"(such as in a mesh network).  In all cases the reference must be reclaimed "
"with E<.Fn ieee80211_free_node> when the transmit work is completed.  The "
"rule to remember is: E<.Nm net80211> passes responsibility for the E<.Vt "
"mbuf> and E<.Dq node reference> to the driver with each frame it hands off "
"for transmit."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:126
#, no-wrap
msgid "PACKET CLASSIFICATION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:139
msgid ""
"All frames passed by E<.Nm net80211> for transmit are assigned a priority "
"based on any vlan tag assigned to the receiving station and/or any Diffserv "
"setting in an IP or IPv6 header.  If both vlan and Diffserv priority are "
"present the higher of the two is used.  If WME/WMM is being used then any "
"ACM policy (in station mode) is also enforced.  The resulting AC is attached "
"to the mbuf and may be read back using the E<.Fn M_WME_GETAC> macro."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:155
msgid ""
"PAE/EAPOL frames are tagged with an E<.Dv M_EAPOL> mbuf flag; drivers should "
"transmit them with care, usually by using the transmit rate for management "
"frames.  Multicast/broadcast frames are marked with the E<.Dv M_MCAST> mbuf "
"flag.  Frames coming out of a station's power save queue and that have more "
"frames immediately following are marked with the E<.Dv M_MORE_DATA> mbuf "
"flag.  Such frames will be queued consecutively in the driver's E<.Vt "
"if_snd> queue and drivers should preserve the ordering when passing them to "
"the device."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:155
#, no-wrap
msgid "FRAGMENTED FRAMES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:174
msgid ""
"The E<.Nm net80211> layer will fragment data frames according to the setting "
"of E<.Vt iv_fragthreshold> if a driver marks the E<.Dv IEEE80211_C_TXFRAG> "
"capability.  Fragmented frames are placed in the devices transmit queue with "
"the fragments chained together with E<.Vt m_nextpkt>.  Each frame is marked "
"with the E<.Dv M_FRAG> mbuf flag, and the first and last are marked with "
"E<.Dv M_FIRSTFRAG> and E<.Dv M_LASTFRAG>, respectively.  Drivers are "
"expected to process all fragments or none."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:174
#, no-wrap
msgid "TRANSMIT CALLBACKS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:191
msgid ""
"Frames sent by E<.Nm net80211> may be tagged with the E<.Dv M_TXCB> mbuf "
"flag to indicate a callback should be done when their transmission "
"completes.  The callback is done using E<.Fn ieee80211_process_callback> "
"with the last parameter set to a non-zero value if an error occurred and "
"zero otherwise.  Note E<.Nm net80211> understands that drivers may be "
"incapable of determining status; a device may not report if an ACK frame is "
"received and/or a device may queue transmit requests in its hardware and "
"only report status on whether the frame was successfully queued."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/ieee80211_output.9:191
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/ieee80211_output.9:194
msgid "E<.Xr bpf 4>, E<.Xr ieee80211 9>, E<.Xr ifnet 9>"
msgstr ""
