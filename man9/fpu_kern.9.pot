# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/fpu_kern.9:26
#, no-wrap
msgid "March 7, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/fpu_kern.9:27
#, no-wrap
msgid "FPU_KERN 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/fpu_kern.9:29
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:31
msgid "E<.Nm fpu_kern>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/fpu_kern.9:31
#, no-wrap
msgid "facility to use the FPU in the kernel"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/fpu_kern.9:32
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:45
msgid ""
"E<.Ft struct fpu_kern_ctx *> E<.Fn fpu_kern_alloc_ctx \"u_int flags\"> E<.Ft "
"void> E<.Fn fpu_kern_free_ctx \"struct fpu_kern_ctx *ctx\"> E<.Ft void> "
"E<.Fn fpu_kern_enter \"struct thread *td\" \"struct fpu_kern_ctx *ctx\" "
"\"u_int flags\"> E<.Ft int> E<.Fn fpu_kern_leave \"struct thread *td\" "
"\"struct fpu_kern_ctx *ctx\"> E<.Ft int> E<.Fn fpu_kern_thread \"u_int "
"flags\"> E<.Ft int> E<.Fn is_fpu_kern_thread \"u_int flags\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/fpu_kern.9:45
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:53
msgid ""
"The E<.Nm> family of functions allows the use of FPU hardware in kernel "
"code.  Modern FPUs are not limited to providing hardware implementation for "
"floating point arithmetic; they offer advanced accelerators for cryptography "
"and other computational-intensive algorithms.  These facilities share "
"registers with the FPU hardware."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:59
msgid ""
"Typical kernel code does not need access to the FPU.  Saving a large "
"register file on each entry to the kernel would waste time.  When kernel "
"code uses the FPU, the current FPU state must be saved to avoid corrupting "
"the user-mode state, and vice versa."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:65
msgid ""
"The management of the save and restore is automatic.  The processor catches "
"accesses to the FPU registers when the non-current context tries to access "
"them.  Explicit calls are required for the allocation of the save area and "
"the notification of the start and end of the code using the FPU."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:76
msgid ""
"The E<.Fn fpu_kern_alloc_ctx> function allocates the memory used by E<.Nm> "
"to track the use of the FPU hardware state and the related software state.  "
"The E<.Fn fpu_kern_alloc_ctx> function requires the E<.Fa flags> argument, "
"which currently accepts the following flags:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:77
#, no-wrap
msgid "Dv FPU_KERN_NOWAIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:80
msgid ""
"Do not wait for the available memory if the request could not be satisfied "
"without sleep."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:80
#, no-wrap
msgid "0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:82
msgid "No special handling is required."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:87
msgid ""
"The function returns the allocated context area, or E<.Va NULL> if the "
"allocation failed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:92
msgid ""
"The E<.Fn fpu_kern_free_ctx> function frees the context previously allocated "
"by E<.Fn fpu_kern_alloc_ctx>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:98
msgid ""
"The E<.Fn fpu_kern_enter> function designates the start of the region of "
"kernel code where the use of the FPU is allowed.  Its arguments are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:99
#, no-wrap
msgid "Fa td"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:102
msgid "Currently must be E<.Va curthread>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:102
#, no-wrap
msgid "Fa ctx"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:107
msgid ""
"The context save area previously allocated by E<.Fn fpu_kern_alloc_ctx> and "
"not currently in use by another call to E<.Fn fpu_kern_enter>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:107
#, no-wrap
msgid "Fa flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:109
msgid "This argument currently accepts the following flags:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:110
#, no-wrap
msgid "Dv FPU_KERN_NORMAL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:113
msgid ""
"Indicates that the caller intends to access the full FPU state.  Must be "
"specified currently."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:113
#, no-wrap
msgid "Dv FPU_KERN_KTHR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:123
msgid ""
"Indicates that no saving of the current FPU state should be performed, if "
"the thread called E<.Xr fpu_kern_thread 9> function.  This is intended to "
"minimize code duplication in callers which could be used from both kernel "
"thread and syscall contexts.  The E<.Fn fpu_kern_leave> function correctly "
"handles such contexts."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/fpu_kern.9:123
#, no-wrap
msgid "Dv FPU_KERN_NOCTX"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:133
msgid ""
"Avoid nesting save area.  If the flag is specified, the E<.Fa ctx> must be "
"passed as E<.Va NULL>.  The flag should only be used for really short code "
"blocks which can be executed in a critical section.  It avoids the need to "
"allocate the FPU context by the cost of increased system latency."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:142
msgid ""
"The function does not sleep or block.  It could cause an FPU trap during "
"execution, and on the first FPU access after the function returns, as well "
"as after each context switch.  On i386 and amd64 this will be the E<.Nm "
"Device Not Available> exception (see Intel Software Developer Manual for the "
"reference)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:163
msgid ""
"The E<.Fn fpu_kern_leave> function ends the region started by E<.Fn "
"fpu_kern_enter>.  It is erroneous to use the FPU in the kernel before E<.Fn "
"fpu_kern_enter> or after E<.Fn fpu_kern_leave>.  The function takes the "
"E<.Fa td> thread argument, which currently must be E<.Va curthread>, and the "
"E<.Fa ctx> context pointer, previously passed to E<.Fn fpu_kern_enter>.  "
"After the function returns, the context may be freed or reused by another "
"invocation of E<.Fn fpu_kern_enter>.  The function always returns 0."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:177
msgid ""
"The E<.Fn fpu_kern_thread> function enables an optimization for threads "
"which never leave to the usermode.  The current thread will reuse the "
"usermode save area for the kernel FPU state instead of requiring an "
"explicitly allocated context.  There are no flags defined for the function, "
"and no error states that the function returns.  Once this function has been "
"called, neither E<.Fn fpu_kern_enter> nor E<.Fn fpu_kern_leave> is required "
"to be called and the fpu is available for use in the calling thread."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:186
msgid ""
"The E<.Fn is_fpu_kern_thread> function returns the boolean indicating "
"whether the current thread entered the mode enabled by E<.Fn "
"fpu_kern_thread>.  There is currently no flags defined for the function, the "
"return value is true if the current thread have the permanent FPU save area, "
"and false otherwise."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/fpu_kern.9:186
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:190
msgid ""
"The E<.Nm> is currently implemented only for the i386, amd64, and arm64 "
"architectures."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:193
msgid "There is no way to handle floating point exceptions raised from kernel mode."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:202
msgid ""
"The unused E<.Fa flags> arguments to the E<.Nm> functions are to be extended "
"to allow specification of the set of the FPU hardware state used by the code "
"region.  This would allow optimizations of saving and restoring the state."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/fpu_kern.9:202
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:209
msgid ""
"The E<.Nm> facitily and this manual page were written by E<.An Konstantin "
"Belousov Aq Mt kib@FreeBSD.org>.  The arm64 support was added by E<.An "
"Andrew Turner Aq Mt andrew@FreeBSD.org>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/fpu_kern.9:209
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/fpu_kern.9:214
msgid ""
"E<.Fn fpu_kern_leave> should probably have type E<.Ft void> (like E<.Fn "
"fpu_kern_enter>)."
msgstr ""
