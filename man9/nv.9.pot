# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/nv.9:32
#, no-wrap
msgid "June 19, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/nv.9:33
#, no-wrap
msgid "NV 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:35
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:60
msgid ""
"E<.Nm nvlist_create>, E<.Nm nvlist_destroy>, E<.Nm nvlist_error>, E<.Nm "
"nvlist_set_error>, E<.Nm nvlist_empty>, E<.Nm nvlist_flags>, E<.Nm "
"nvlist_exists>, E<.Nm nvlist_free>, E<.Nm nvlist_clone>, E<.Nm nvlist_dump>, "
"E<.Nm nvlist_fdump>, E<.Nm nvlist_size>, E<.Nm nvlist_pack>, E<.Nm "
"nvlist_unpack>, E<.Nm nvlist_send>, E<.Nm nvlist_recv>, E<.Nm nvlist_xfer>, "
"E<.Nm nvlist_in_array>, E<.Nm nvlist_next>, E<.Nm nvlist_add>, E<.Nm "
"nvlist_move>, E<.Nm nvlist_get>, E<.Nm nvlist_take>, E<.Nm nvlist_append>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/nv.9:60
#, no-wrap
msgid "library for name/value pairs"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:61
#, no-wrap
msgid "LIBRARY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:63
msgid "E<.Lb libnv>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:63
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/nv.9:64
#, no-wrap
msgid "sys/nv.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:154
msgid ""
"E<.Ft \"nvlist_t *\"> E<.Fn nvlist_create \"int flags\"> E<.Ft void> E<.Fn "
"nvlist_destroy \"nvlist_t *nvl\"> E<.Ft int> E<.Fn nvlist_error \"const "
"nvlist_t *nvl\"> E<.Ft void> E<.Fn nvlist_set_error \"nvlist_t *nvl\" \"int "
"error\"> E<.Ft bool> E<.Fn nvlist_empty \"const nvlist_t *nvl\"> E<.Ft int> "
"E<.Fn nvlist_flags \"const nvlist_t *nvl\"> E<.Ft bool> E<.Fn "
"nvlist_in_array \"const nvlist_t *nvl\"> E<.Ft \"nvlist_t *\"> E<.Fn "
"nvlist_clone \"const nvlist_t *nvl\"> E<.Ft void> E<.Fn nvlist_dump \"const "
"nvlist_t *nvl\" \"int fd\"> E<.Ft void> E<.Fn nvlist_fdump \"const nvlist_t "
"*nvl\" \"FILE *fp\"> E<.Ft size_t> E<.Fn nvlist_size \"const nvlist_t "
"*nvl\"> E<.Ft \"void *\"> E<.Fn nvlist_pack \"const nvlist_t *nvl\" \"size_t "
"*sizep\"> E<.Ft \"nvlist_t *\"> E<.Fn nvlist_unpack \"const void *buf\" "
"\"size_t size\" \"int flags\"> E<.Ft int> E<.Fn nvlist_send \"int sock\" "
"\"const nvlist_t *nvl\"> E<.Ft \"nvlist_t *\"> E<.Fn nvlist_recv \"int "
"sock\" \"int flags\"> E<.Ft \"nvlist_t *\"> E<.Fn nvlist_xfer \"int sock\" "
"\"nvlist_t *nvl\" \"int flags\"> E<.Ft \"const char *\"> E<.Fn nvlist_next "
"\"const nvlist_t *nvl\" \"int *typep\" \"void **cookiep\"> E<.Ft bool> E<.Fn "
"nvlist_exists \"const nvlist_t *nvl\" \"const char *name\"> E<.Ft bool> "
"E<.Fn nvlist_exists_type \"const nvlist_t *nvl\" \"const char *name\" \"int "
"type\"> E<.Ft bool> E<.Fn nvlist_exists_null \"const nvlist_t *nvl\" \"const "
"char *name\"> E<.Ft bool> E<.Fn nvlist_exists_bool \"const nvlist_t *nvl\" "
"\"const char *name\"> E<.Ft bool> E<.Fn nvlist_exists_number \"const "
"nvlist_t *nvl\" \"const char *name\"> E<.Ft bool> E<.Fn nvlist_exists_string "
"\"const nvlist_t *nvl\" \"const char *name\"> E<.Ft bool> E<.Fn "
"nvlist_exists_nvlist \"const nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"bool> E<.Fn nvlist_exists_descriptor \"const nvlist_t *nvl\" \"const char "
"*name\"> E<.Ft bool> E<.Fn nvlist_exists_binary \"const nvlist_t *nvl\" "
"\"const char *name\"> E<.Ft bool> E<.Fn nvlist_exists_bool_array \"const "
"nvlist_t *nvl\" \"const char *name\"> E<.Ft bool> E<.Fn "
"nvlist_exists_number_array \"const nvlist_t *nvl\" \"const char *name\"> "
"E<.Ft bool> E<.Fn nvlist_exists_string_array \"const nvlist_t *nvl\" \"const "
"char *name\"> E<.Ft bool> E<.Fn nvlist_exists_nvlist_array \"const nvlist_t "
"*nvl\" \"const char *name\"> E<.Ft bool> E<.Fn "
"nvlist_exists_descriptor_array \"const nvlist_t *nvl\" \"const char *name\"> "
"E<.Ft void> E<.Fn nvlist_add_null \"nvlist_t *nvl\" \"const char *name\"> "
"E<.Ft void> E<.Fn nvlist_add_bool \"nvlist_t *nvl\" \"const char *name\" "
"\"bool value\"> E<.Ft void> E<.Fn nvlist_add_number \"nvlist_t *nvl\" "
"\"const char *name\" \"uint64_t value\"> E<.Ft void> E<.Fn nvlist_add_string "
"\"nvlist_t *nvl\" \"const char *name\" \"const char *value\"> E<.Ft void> "
"E<.Fn nvlist_add_stringf \"nvlist_t *nvl\" \"const char *name\" \"const char "
"*valuefmt\" \"...\"> E<.Ft void> E<.Fn nvlist_add_stringv \"nvlist_t *nvl\" "
"\"const char *name\" \"const char *valuefmt\" \"va_list valueap\"> E<.Ft "
"void> E<.Fn nvlist_add_nvlist \"nvlist_t *nvl\" \"const char *name\" \"const "
"nvlist_t *value\"> E<.Ft void> E<.Fn nvlist_add_descriptor \"nvlist_t *nvl\" "
"\"const char *name\" \"int value\"> E<.Ft void> E<.Fn nvlist_add_binary "
"\"nvlist_t *nvl\" \"const char *name\" \"const void *value\" \"size_t "
"size\"> E<.Ft void> E<.Fn nvlist_add_bool_array \"nvlist_t *nvl\" \"const "
"char *name\" \"const bool *value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:157
msgid ""
"E<.Ft void> E<.Fn nvlist_add_number_array \"nvlist_t *nvl\" \"const char "
"*name\" \"const uint64_t *value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:160
msgid ""
"E<.Ft void> E<.Fn nvlist_add_string_array \"nvlist_t *nvl\" \"const char "
"*name\" \"const char * const * value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:163
msgid ""
"E<.Ft void> E<.Fn nvlist_add_nvlist_array \"nvlist_t *nvl\" \"const char "
"*name\" \"const nvlist_t * const * value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:177
msgid ""
"E<.Ft void> E<.Fn nvlist_add_descriptor_array \"nvlist_t *nvl\" \"const char "
"*name\" \"const int *value\" \"size_t nitems\"> E<.Ft void> E<.Fn "
"nvlist_move_string \"nvlist_t *nvl\" \"const char *name\" \"char *value\"> "
"E<.Ft void> E<.Fn nvlist_move_nvlist \"nvlist_t *nvl\" \"const char *name\" "
"\"nvlist_t *value\"> E<.Ft void> E<.Fn nvlist_move_descriptor \"nvlist_t "
"*nvl\" \"const char *name\" \"int value\"> E<.Ft void> E<.Fn "
"nvlist_move_binary \"nvlist_t *nvl\" \"const char *name\" \"void *value\" "
"\"size_t size\"> E<.Ft void> E<.Fn nvlist_move_bool_array \"nvlist_t *nvl\" "
"\"const char *name\" \"bool *value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:180
msgid ""
"E<.Ft void> E<.Fn nvlist_move_number_array \"nvlist_t *nvl\" \"const char "
"*name\" \"uint64_t *value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:183
msgid ""
"E<.Ft void> E<.Fn nvlist_move_string_array \"nvlist_t *nvl\" \"const char "
"*name\" \"char **value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:186
msgid ""
"E<.Ft void> E<.Fn nvlist_move_nvlist_array \"nvlist_t *nvl\" \"const char "
"*name\" \"nvlist_t **value\" \"size_t nitems\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:282
msgid ""
"E<.Ft void> E<.Fn nvlist_move_descriptor_array \"nvlist_t *nvl\" \"const "
"char *name\" \"int *value\" \"size_t nitems\"> E<.Ft bool> E<.Fn "
"nvlist_get_bool \"const nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"uint64_t> E<.Fn nvlist_get_number \"const nvlist_t *nvl\" \"const char "
"*name\"> E<.Ft \"const char *\"> E<.Fn nvlist_get_string \"const nvlist_t "
"*nvl\" \"const char *name\"> E<.Ft \"const nvlist_t *\"> E<.Fn "
"nvlist_get_nvlist \"const nvlist_t *nvl\" \"const char *name\"> E<.Ft int> "
"E<.Fn nvlist_get_descriptor \"const nvlist_t *nvl\" \"const char *name\"> "
"E<.Ft \"const void *\"> E<.Fn nvlist_get_binary \"const nvlist_t *nvl\" "
"\"const char *name\" \"size_t *sizep\"> E<.Ft \"const bool *\"> E<.Fn "
"nvlist_get_bool_array \"const nvlist_t *nvl\" \"const char *name\" \"size_t "
"*nitems\"> E<.Ft \"const uint64_t *\"> E<.Fn nvlist_get_number_array \"const "
"nvlist_t *nvl\" \"const char *name\" \"size_t *nitems\"> E<.Ft \"const char "
"* const *\"> E<.Fn nvlist_get_string_array \"const nvlist_t *nvl\" \"const "
"char *name\" \"size_t *nitems\"> E<.Ft \"const nvlist_t * const *\"> E<.Fn "
"nvlist_get_nvlist_array \"const nvlist_t *nvl\" \"const char *name\" "
"\"size_t *nitems\"> E<.Ft \"const int *\"> E<.Fn nvlist_get_descriptor_array "
"\"const nvlist_t *nvl\" \"const char *name\" \"size_t *nitems\"> E<.Ft "
"\"const nvlist_t *\"> E<.Fn nvlist_get_parent \"const nvlist_t *nvl\" \"void "
"**cookiep\"> E<.Ft \"const nvlist_t *\"> E<.Fn nvlist_get_array_next \"const "
"nvlist_t *nvl\"> E<.Ft \"const nvlist_t *\"> E<.Fn nvlist_get_pararr \"const "
"nvlist_t *nvl\" \"void **cookiep\"> E<.Ft bool> E<.Fn nvlist_take_bool "
"\"nvlist_t *nvl\" \"const char *name\"> E<.Ft uint64_t> E<.Fn "
"nvlist_take_number \"nvlist_t *nvl\" \"const char *name\"> E<.Ft \"char *\"> "
"E<.Fn nvlist_take_string \"nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"\"nvlist_t *\"> E<.Fn nvlist_take_nvlist \"nvlist_t *nvl\" \"const char "
"*name\"> E<.Ft int> E<.Fn nvlist_take_descriptor \"nvlist_t *nvl\" \"const "
"char *name\"> E<.Ft \"void *\"> E<.Fn nvlist_take_binary \"nvlist_t *nvl\" "
"\"const char *name\" \"size_t *sizep\"> E<.Ft \"bool *\"> E<.Fn "
"nvlist_take_bool_array \"nvlist_t *nvl\" \"const char *name\" \"size_t "
"*nitems\"> E<.Ft \"uint64_t **\"> E<.Fn nvlist_take_number_array \"nvlist_t "
"*nvl\" \"const char *name\" \"size_t *nitems\"> E<.Ft \"char **\"> E<.Fn "
"nvlist_take_string_array \"nvlist_t *nvl\" \"const char *name\" \"size_t "
"*nitems\"> E<.Ft \"nvlist_t **\"> E<.Fn nvlist_take_nvlist_array \"nvlist_t "
"*nvl\" \"const char *name\" \"size_t *nitems\"> E<.Ft \"int *\"> E<.Fn "
"nvlist_take_descriptor_array \"nvlist_t *nvl\" \"const char *name\" \"size_t "
"*nitems\"> E<.Ft void> E<.Fn nvlist_append_bool_array \"nvlist_t *nvl\" "
"\"const char *name\" \"const bool value\"> E<.Ft void> E<.Fn "
"nvlist_append_number_array \"nvlist_t *nvl\" \"const char *name\" \"const "
"uint64_t value\"> E<.Ft void> E<.Fn nvlist_append_string_array \"nvlist_t "
"*nvl\" \"const char *name\" \"const char * const value\"> E<.Ft void> E<.Fn "
"nvlist_append_nvlist_array \"nvlist_t *nvl\" \"const char *name\" \"const "
"nvlist_t * const value\"> E<.Ft void> E<.Fn nvlist_append_descriptor_array "
"\"nvlist_t *nvl\" \"const char *name\" \"int value\"> E<.Ft void> E<.Fn "
"nvlist_free \"nvlist_t *nvl\" \"const char *name\"> E<.Ft void> E<.Fn "
"nvlist_free_type \"nvlist_t *nvl\" \"const char *name\" \"int type\"> E<.Ft "
"void> E<.Fn nvlist_free_null \"nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"void> E<.Fn nvlist_free_bool \"nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"void> E<.Fn nvlist_free_number \"nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"void> E<.Fn nvlist_free_string \"nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"void> E<.Fn nvlist_free_nvlist \"nvlist_t *nvl\" \"const char *name\"> E<.Ft "
"void> E<.Fn nvlist_free_descriptor \"nvlist_t *nvl\" \"const char *name\"> "
"E<.Ft void> E<.Fn nvlist_free_binary \"nvlist_t *nvl\" \"const char *name\"> "
"E<.Ft void> E<.Fn nvlist_free_bool_array \"nvlist_t *nvl\" \"const char "
"*name\"> E<.Ft void> E<.Fn nvlist_free_number_array \"nvlist_t *nvl\" "
"\"const char *name\"> E<.Ft void> E<.Fn nvlist_free_string_array \"nvlist_t "
"*nvl\" \"const char *name\"> E<.Ft void> E<.Fn nvlist_free_nvlist_array "
"\"nvlist_t *nvl\" \"const char *name\"> E<.Ft void> E<.Fn "
"nvlist_free_descriptor_array \"nvlist_t *nvl\" \"const char *name\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:282
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:290
msgid ""
"The E<.Nm libnv> library allows to easily manage name value pairs as well as "
"send and receive them over sockets.  A group (list) of name value pairs is "
"called an E<.Nm nvlist>.  The API supports the following data types:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:291
#, no-wrap
msgid "Sy null ( NV_TYPE_NULL )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:293
msgid "There is no data associated with the name."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:293
#, no-wrap
msgid "Sy bool ( NV_TYPE_BOOL )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:298
msgid "The value can be either E<.Dv true> or E<.Dv false>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:298
#, no-wrap
msgid "Sy number ( NV_TYPE_NUMBER )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:301
msgid "The value is a number stored as E<.Vt uint64_t>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:301
#, no-wrap
msgid "Sy string ( NV_TYPE_STRING )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:303
msgid "The value is a C string."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:303
#, no-wrap
msgid "Sy nvlist ( NV_TYPE_NVLIST )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:305
msgid "The value is a nested nvlist."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:305
#, no-wrap
msgid "Sy descriptor ( NV_TYPE_DESCRIPTOR )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:310
msgid ""
"The value is a file descriptor.  Note that file descriptors can be sent only "
"over E<.Xr unix 4> domain sockets."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:310
#, no-wrap
msgid "Sy binary ( NV_TYPE_BINARY )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:312
msgid "The value is a binary buffer."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:312
#, no-wrap
msgid "Sy bool array ( NV_TYPE_BOOL_ARRAY )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:314
msgid "The value is an array of boolean values."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:314
#, no-wrap
msgid "Sy number array ( NV_TYPE_NUMBER_ARRAY )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:317
msgid "The value is an array of numbers, each stored as E<.Vt uint64_t>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:317
#, no-wrap
msgid "Sy string array ( NV_TYPE_STRING_ARRAY )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:319
msgid "The value is an array of C strings."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:319
#, no-wrap
msgid "Sy nvlist array ( NV_TYPE_NVLIST_ARRAY )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:327
msgid ""
"The value is an array of nvlists.  When an nvlist is added to an array, it "
"becomes part of the primary nvlist.  Traversing these arrays can be done "
"using the E<.Fn nvlist_get_array_next> and E<.Fn nvlist_get_pararr> "
"functions."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:327
#, no-wrap
msgid "Sy descriptor array ( NV_TYPE_DESCRIPTOR_ARRAY )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:329
msgid "The value is an array of files descriptors."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:334
msgid ""
"The E<.Fn nvlist_create> function allocates memory and initializes an "
"nvlist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:336
msgid "The following flag can be provided:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:338
#, no-wrap
msgid "Dv NV_FLAG_IGNORE_CASE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:340
msgid "Perform case-insensitive lookups of provided names."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/nv.9:340
#, no-wrap
msgid "Dv NV_FLAG_NO_UNIQUE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:342
msgid "Names in the nvlist do not have to be unique."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:353
msgid ""
"The E<.Fn nvlist_destroy> function destroys the given nvlist.  Function does "
"nothing if E<.Dv NULL> nvlist is provided.  Function never modifies the "
"E<.Va errno> global variable."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:362
msgid ""
"The E<.Fn nvlist_error> function returns any error value that the nvlist "
"accumulated.  If the given nvlist is E<.Dv NULL> the E<.Er ENOMEM> error "
"will be returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:371
msgid ""
"The E<.Fn nvlist_set_error> function sets an nvlist to be in the error "
"state.  Subsequent calls to E<.Fn nvlist_error> will return the given error "
"value.  This function cannot be used to clear the error state from an "
"nvlist.  This function does nothing if the nvlist is already in the error "
"state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:380
msgid ""
"The E<.Fn nvlist_empty> function returns E<.Dv true> if the given nvlist is "
"empty and E<.Dv false> otherwise.  The nvlist must not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:386
msgid ""
"The E<.Fn nvlist_flags> function returns flags used to create the nvlist "
"with the E<.Fn nvlist_create> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:394
msgid ""
"The E<.Fn nvlist_in_array> function returns E<.Dv true> if E<.Fa nvl> is "
"part of an array that is a member of another nvlist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:403
msgid ""
"The E<.Fn nvlist_clone> functions clones the given nvlist.  The clone shares "
"no resources with its origin.  This also means that all file descriptors "
"that are part of the nvlist will be duplicated with the E<.Xr dup 2> system "
"call before placing them in the clone."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:408
msgid ""
"The E<.Fn nvlist_dump> dumps nvlist content for debugging purposes to the "
"given file descriptor E<.Fa fd>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:413
msgid ""
"The E<.Fn nvlist_fdump> dumps nvlist content for debugging purposes to the "
"given file stream E<.Fa fp>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:420
msgid ""
"The E<.Fn nvlist_size> function returns the size of the given nvlist after "
"converting it to binary buffer with the E<.Fn nvlist_pack> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:439
msgid ""
"The E<.Fn nvlist_pack> function converts the given nvlist to a binary "
"buffer.  The function allocates memory for the buffer, which should be freed "
"with the E<.Xr free 3> function.  If the E<.Fa sizep> argument is not E<.Dv "
"NULL>, the size of the buffer will be stored there.  The function returns "
"E<.Dv NULL> in case of an error (allocation failure).  If the nvlist "
"contains any file descriptors E<.Dv NULL> will be returned.  The nvlist must "
"not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:458
msgid ""
"The E<.Fn nvlist_unpack> function converts the given buffer to the nvlist.  "
"The E<.Fa flags> argument defines what type of the top level nvlist is "
"expected to be.  Flags are set up using the E<.Fn nvlist_create> function.  "
"If the nvlist flags do not match the flags passed to E<.Fn nvlist_unpack>, "
"the nvlist will not be returned.  Every nested nvlist list should be checked "
"using E<.Fn nvlist_flags> function.  The function returns E<.Dv NULL> in "
"case of an error."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:467
msgid ""
"The E<.Fn nvlist_send> function sends the given nvlist over the socket given "
"by the E<.Fa sock> argument.  Note that nvlist that contains file "
"descriptors can only be send over E<.Xr unix 4> domain sockets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:485
msgid ""
"The E<.Fn nvlist_recv> function receives nvlist over the socket given by the "
"E<.Fa sock> argument.  The E<.Fa flags> argument defines what type of the "
"top level nvlist is expected to be.  Flags are set up using the E<.Fn "
"nvlist_create> function.  If the nvlist flags do not match the flags passed "
"to E<.Fn nvlist_recv>, the nvlist will not be returned.  Every nested nvlist "
"list should be checked using E<.Fn nvlist_flags> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:504
msgid ""
"The E<.Fn nvlist_xfer> function sends the given nvlist over the socket given "
"by the E<.Fa sock> argument and receives nvlist over the same socket.  The "
"E<.Fa flags> argument defines what type of the top level nvlist is expected "
"to be.  Flags are set up using the E<.Fn nvlist_create> function.  If the "
"nvlist flags do not match the flags passed to E<.Fn nvlist_xfer>, the nvlist "
"will not be returned.  Every nested nvlist list should be checked using "
"E<.Fn nvlist_flags> function.  The given nvlist is always destroyed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:536
msgid ""
"The E<.Fn nvlist_next> function iterates over the given nvlist returning "
"names and types of subsequent elements.  The E<.Fa cookiep> argument allows "
"the function to figure out which element should be returned next.  The E<.Va "
"*cookiep> should be set to E<.Dv NULL> for the first call and should not be "
"changed later.  Returning E<.Dv NULL> means there are no more elements on "
"the nvlist.  The E<.Fa typep> argument can be NULL.  Elements may not be "
"removed from the nvlist while traversing it.  The nvlist must not be in "
"error state.  Note that E<.Fn nvlist_next> will handle E<.Va cookiep> being "
"set to E<.Dv NULL>.  In this case first element is returned or E<.Dv NULL> "
"if nvlist is empty.  This behavior simplifies removing the first element "
"from the list."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:545
msgid ""
"The E<.Fn nvlist_exists> function returns E<.Dv true> if element of the "
"given name exists (besides of its type) or E<.Dv false> otherwise.  The "
"nvlist must not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:554
msgid ""
"The E<.Fn nvlist_exists_type> function returns E<.Dv true> if element of the "
"given name and the given type exists or E<.Dv false> otherwise.  The nvlist "
"must not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:575
msgid ""
"The E<.Fn nvlist_exists_null>, E<.Fn nvlist_exists_bool>, E<.Fn "
"nvlist_exists_number>, E<.Fn nvlist_exists_string>, E<.Fn "
"nvlist_exists_nvlist>, E<.Fn nvlist_exists_descriptor>, E<.Fn "
"nvlist_exists_binary>, E<.Fn nvlist_exists_bool_array>, E<.Fn "
"nvlist_exists_number_array>, E<.Fn nvlist_exists_string_array>, E<.Fn "
"nvlist_exists_nvlist_array>, E<.Fn nvlist_exists_descriptor_array> functions "
"return E<.Dv true> if element of the given name and the given type "
"determined by the function name exists or E<.Dv false> otherwise.  The "
"nvlist must not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:606
msgid ""
"The E<.Fn nvlist_add_null>, E<.Fn nvlist_add_bool>, E<.Fn "
"nvlist_add_number>, E<.Fn nvlist_add_string>, E<.Fn nvlist_add_stringf>, "
"E<.Fn nvlist_add_stringv>, E<.Fn nvlist_add_nvlist>, E<.Fn "
"nvlist_add_descriptor>, E<.Fn nvlist_add_binary>, E<.Fn "
"nvlist_add_bool_array>, E<.Fn nvlist_add_number_array>, E<.Fn "
"nvlist_add_string_array>, E<.Fn nvlist_add_nvlist_array>, E<.Fn "
"nvlist_add_descriptor_array> functions add element to the given nvlist.  "
"When adding string or binary buffer the functions will allocate memory and "
"copy the data over.  When adding nvlist, the nvlist will be cloned and clone "
"will be added.  When adding descriptor, the descriptor will be duplicated "
"using the E<.Xr dup 2> system call and the new descriptor will be added.  "
"The array functions will fail if there are any E<.Dv NULL> elements in the "
"array, or if the array pointer is E<.Dv NULL>.  If an error occurs while "
"adding new element, internal error is set which can be examined using the "
"E<.Fn nvlist_error> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:630
msgid ""
"The E<.Fn nvlist_move_string>, E<.Fn nvlist_move_nvlist>, E<.Fn "
"nvlist_move_descriptor>, E<.Fn nvlist_move_binary>, E<.Fn "
"nvlist_move_bool_array>, E<.Fn nvlist_move_number_array>, E<.Fn "
"nvlist_move_string_array>, E<.Fn nvlist_move_nvlist_array>, E<.Fn "
"nvlist_move_descriptor_array> functions add new element to the given nvlist, "
"but unlike E<.Fn nvlist_add_E<lt>typeE<gt>> functions they will consume the "
"given resource.  In the case of strings, descriptors, or nvlists every "
"elements must be unique, or it could cause a double free.  The array "
"functions will fail if there are any E<.Dv NULL> elements, or if the array "
"pointer is E<.Dv NULL>.  If an error occurs while adding new element, the "
"resource is destroyed and internal error is set which can be examined using "
"the E<.Fn nvlist_error> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:652
msgid ""
"The E<.Fn nvlist_get_bool>, E<.Fn nvlist_get_number>, E<.Fn "
"nvlist_get_string>, E<.Fn nvlist_get_nvlist>, E<.Fn nvlist_get_descriptor>, "
"E<.Fn nvlist_get_binary>, E<.Fn nvlist_get_bool_array>, E<.Fn "
"nvlist_get_number_array>, E<.Fn nvlist_get_string_array>, E<.Fn "
"nvlist_get_nvlist_array>, E<.Fn nvlist_get_descriptor_array> functions "
"return the value that corresponds to the given key name.  In the case of "
"strings, nvlists, descriptors, binary, or arrays, the returned resource "
"should not be modified - they still belong to the nvlist.  If an element of "
"the given name does not exist, the program will be aborted.  To avoid this, "
"the caller should check for the existence of the name before trying to "
"obtain the value, or use the E<.Xr dnvlist 3> extension, which can provide a "
"default value in the case of a missing element.  The nvlist must not be in "
"error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:656
msgid ""
"The E<.Fn nvlist_get_parent> function returns the parent nvlist of the "
"nested nvlist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:669
msgid ""
"The E<.Fn nvlist_get_array_next> function returns the next element from the "
"array or E<.Dv NULL> if the nvlist is not in array or it is the last "
"element.  Note that E<.Fn nvlist_get_array_next> only works if you added the "
"nvlist array using the E<.Fn nvlist_move_nvlist_array> or E<.Fn "
"nvlist_add_nvlist_array> functions."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:674
msgid ""
"The E<.Fn nvlist_get_pararr> function returns the next element in the array, "
"or if not available the parent of the nested nvlist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:723
msgid ""
"The E<.Fn nvlist_take_bool>, E<.Fn nvlist_take_number>, E<.Fn "
"nvlist_take_string>, E<.Fn nvlist_take_nvlist>, E<.Fn "
"nvlist_take_descriptor>, E<.Fn nvlist_take_binary>, E<.Fn "
"nvlist_take_bool_array>, E<.Fn nvlist_take_number_array>, E<.Fn "
"nvlist_take_string_array>, E<.Fn nvlist_take_nvlist_array>, E<.Fn "
"nvlist_take_descriptor_array> functions return value associated with the "
"given name and remove the element from the nvlist.  In case of string and "
"binary values, the caller is responsible for free returned memory using the "
"E<.Xr free 3> function.  In case of nvlist, the caller is responsible for "
"destroying returned nvlist using the E<.Fn nvlist_destroy> function.  In "
"case of descriptor, the caller is responsible for closing returned "
"descriptor using the E<.Fn close 2> system call.  If an element of the given "
"name does not exist, the program will be aborted.  To avoid that the caller "
"should check for the existence of the given name before trying to obtain the "
"value, or use the E<.Xr dnvlist 3> extension, which can provide a default "
"value in the case of a missing element.  In the case of an array of strings "
"or binary values, the caller is responsible for freeing every element of the "
"array using the E<.Xr free 3> function.  In the case of an array of nvlists, "
"the caller is responsible for destroying every element of array using the "
"E<.Fn nvlist_destroy> function.  In the case of descriptors, the caller is "
"responsible for closing every element of array using the E<.Fn close 2> "
"system call.  In every case involving an array, the caller must also free "
"the pointer to the array using the E<.Xr free 3> function.  The nvlist must "
"not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:737
msgid ""
"The E<.Fn nvlist_append_bool_array>, E<.Fn nvlist_append_number_array>, "
"E<.Fn nvlist_append_string_array>, E<.Fn nvlist_append_nvlist_array>, E<.Fn "
"nvlist_append_descriptor_array> functions append an element to the existing "
"array using the same semantics as the add functions (i.e. the element will "
"be copied when applicable).  If the array for a given key does not exist, "
"then it will be created as if using the E<.Fn "
"nvlist_add_E<lt>typeE<gt>_array> function.  The internal error is set on "
"append failure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:744
msgid ""
"The E<.Fn nvlist_free> function removes element of the given name from the "
"nvlist (besides of its type)  and frees all resources associated with it.  "
"If element of the given name does not exist, the program will be aborted.  "
"The nvlist must not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:752
msgid ""
"The E<.Fn nvlist_free_type> function removes element of the given name and "
"the given type from the nvlist and frees all resources associated with it.  "
"If element of the given name and the given type does not exist, the program "
"will be aborted.  The nvlist must not be in error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:771
msgid ""
"The E<.Fn nvlist_free_null>, E<.Fn nvlist_free_bool>, E<.Fn "
"nvlist_free_number>, E<.Fn nvlist_free_string>, E<.Fn nvlist_free_nvlist>, "
"E<.Fn nvlist_free_descriptor>, E<.Fn nvlist_free_binary>, E<.Fn "
"nvlist_free_bool_array>, E<.Fn nvlist_free_number_array>, E<.Fn "
"nvlist_free_string_array>, E<.Fn nvlist_free_nvlist_array>, E<.Fn "
"nvlist_free_descriptor_array> functions remove element of the given name and "
"the given type determined by the function name from the nvlist and free all "
"resources associated with it.  If element of the given name and the given "
"type does not exist, the program will be aborted.  The nvlist must not be in "
"error state."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:771
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:778
msgid ""
"The E<.Fn nvlist_pack> and E<.Fn nvlist_unpack> functions handle the "
"byte-order conversions, so the binary buffer can be packed/unpacked by the "
"hosts with the different endianness."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:778
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:782
msgid ""
"The following example demonstrates how to prepare an nvlist and send it over "
"E<.Xr unix 4> domain socket."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:785
#, no-wrap
msgid ""
"nvlist_t *nvl;\n"
"int fd;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:789
#, no-wrap
msgid ""
"fd = open(\"/tmp/foo\", O_RDONLY);\n"
"if (fd E<lt> 0)\n"
"        err(1, \"open(\\e\"/tmp/foo\\e\") failed\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:809
#, no-wrap
msgid ""
"nvl = nvlist_create(0);\n"
"/*\n"
" * There is no need to check if nvlist_create() succeeded,\n"
" * as the nvlist_add_E<lt>typeE<gt>() functions can cope.\n"
" * If it failed, nvlist_send() will fail.\n"
" */\n"
"nvlist_add_string(nvl, \"filename\", \"/tmp/foo\");\n"
"nvlist_add_number(nvl, \"flags\", O_RDONLY);\n"
"/*\n"
" * We just want to send the descriptor, so we can give it\n"
" * for the nvlist to consume (that's why we use nvlist_move\n"
" * not nvlist_add).\n"
" */\n"
"nvlist_move_descriptor(nvl, \"fd\", fd);\n"
"if (nvlist_send(sock, nvl) E<lt> 0) {\n"
"\tnvlist_destroy(nvl);\n"
"\terr(1, \"nvlist_send() failed\");\n"
"}\n"
"nvlist_destroy(nvl);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:812
msgid "Receiving nvlist and getting data:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:817
#, no-wrap
msgid ""
"nvlist_t *nvl;\n"
"const char *command;\n"
"char *filename;\n"
"int fd;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:821 /usr/src/share/man/man9/nv.9:850 /usr/src/share/man/man9/nv.9:879
#, no-wrap
msgid ""
"nvl = nvlist_recv(sock, 0);\n"
"if (nvl == NULL)\n"
"\terr(1, \"nvlist_recv() failed\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:831
#, no-wrap
msgid ""
"/* For command we take pointer to nvlist's buffer. */\n"
"command = nvlist_get_string(nvl, \"command\");\n"
"/*\n"
" * For filename we remove it from the nvlist and take\n"
" * ownership of the buffer.\n"
" */\n"
"filename = nvlist_take_string(nvl, \"filename\");\n"
"/* The same for the descriptor. */\n"
"fd = nvlist_take_descriptor(nvl, \"fd\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:833
#, no-wrap
msgid "printf(\"command=%s filename=%s fd=%d\\n\", command, filename, fd);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:838
#, no-wrap
msgid ""
"nvlist_destroy(nvl);\n"
"free(filename);\n"
"close(fd);\n"
"/* command was freed by nvlist_destroy() */\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:841
msgid "Iterating over nvlist:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:846 /usr/src/share/man/man9/nv.9:875
#, no-wrap
msgid ""
"nvlist_t *nvl;\n"
"const char *name;\n"
"void *cookie;\n"
"int type;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:867
#, no-wrap
msgid ""
"cookie = NULL;\n"
"while ((name = nvlist_next(nvl, &type, &cookie)) != NULL) {\n"
"\tprintf(\"%s=\", name);\n"
"\tswitch (type) {\n"
"\tcase NV_TYPE_NUMBER:\n"
"\t\tprintf(\"%ju\", (uintmax_t)nvlist_get_number(nvl, name));\n"
"\t\tbreak;\n"
"\tcase NV_TYPE_STRING:\n"
"\t\tprintf(\"%s\", nvlist_get_string(nvl, name));\n"
"\t\tbreak;\n"
"\tdefault:\n"
"\t\tprintf(\"N/A\");\n"
"\t\tbreak;\n"
"\t}\n"
"\tprintf(\"\\en\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:870
msgid "Iterating over every nested nvlist:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:889
#, no-wrap
msgid ""
"cookie = NULL;\n"
"do {\n"
"\twhile ((name = nvlist_next(nvl, &type, &cookie)) != NULL) {\n"
"\t\tif (type == NV_TYPE_NVLIST) {\n"
"\t\t\tnvl = nvlist_get_nvlist(nvl, name);\n"
"\t\t\tcookie = NULL;\n"
"\t\t}\n"
"\t}\n"
"} while ((nvl = nvlist_get_parent(nvl, &cookie)) != NULL);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:892
msgid "Iterating over every nested nvlist and every nvlist element:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:898
#, no-wrap
msgid ""
"nvlist_t *nvl;\n"
"const nvlist_t * const *array;\n"
"const char *name;\n"
"void *cookie;\n"
"int type;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:902 /usr/src/share/man/man9/nv.9:928
#, no-wrap
msgid ""
"nvl = nvlist_recv(sock, 0);\n"
"if (nvl == null)\n"
"\terr(1, \"nvlist_recv() failed\");\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:915
#, no-wrap
msgid ""
"cookie = null;\n"
"do {\n"
"\twhile ((name = nvlist_next(nvl, &type, &cookie)) != NULL) {\n"
"\t\tif (type == NV_TYPE_NVLIST) {\n"
"\t\t\tnvl = nvlist_get_nvlist(nvl, name);\n"
"\t\t\tcookie = NULL;\n"
"\t\t} else if (type == NV_TYPE_NVLIST_ARRAY) {\n"
"\t\t\tnvl = nvlist_get_nvlist_array(nvl, name, NULL)[0];\n"
"\t\t\tcookie = NULL;\n"
"\t\t}\n"
"\t}\n"
"} while ((nvl = nvlist_get_pararr(nvl, &cookie)) != NULL);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:918
msgid "Or alternatively:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:924
#, no-wrap
msgid ""
"nvlist_t *nvl, *tmp;\n"
"const nvlist_t * const *array;\n"
"const char *name;\n"
"void *cookie;\n"
"int type;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:948
#, no-wrap
msgid ""
"cooke = NULL;\n"
"tmp = nvl;\n"
"do {\n"
"\tdo {\n"
"\t\tnvl = tmp;\n"
"\t\twhile ((name = nvlist_next(nvl, &type, &cookie)) != NULL) {\n"
"\t\t\tif (type == NV_TYPE_NVLIST) {\n"
"\t\t\t\tnvl = nvlist_get_nvlist(nvl,\n"
"\t\t\t\t    name);\n"
"\t\t\t\tcookie = NULL;\n"
"\t\t\t} else if (type == NV_TYPE_NVLIST_ARRAY) {\n"
"\t\t\t\tnvl = nvlist_get_nvlist_array(nvl, name,\n"
"\t\t\t\t    NULL)[0];\n"
"\t\t\t\tcookie = NULL;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\tcookie = NULL;\n"
"\t} while ((tmp = nvlist_get_array_next(nvl)) != NULL);\n"
"} while ((tmp = nvlist_get_parent(nvl, &cookie)) != NULL);\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:949
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:957
msgid ""
"E<.Xr close 2>, E<.Xr dup 2>, E<.Xr open 2>, E<.Xr err 3>, E<.Xr free 3>, "
"E<.Xr printf 3>, E<.Xr unix 4>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:957
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:962
msgid "The E<.Nm libnv> library appeared in E<.Fx 11.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/nv.9:962
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/nv.9:968
msgid ""
"E<.An -nosplit> The E<.Nm libnv> library was implemented by E<.An Pawel "
"Jakub Dawidek Aq Mt pawel@dawidek.net> under sponsorship from the FreeBSD "
"Foundation."
msgstr ""
