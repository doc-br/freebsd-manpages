# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/cnv.9:28
#, no-wrap
msgid "June 18, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/cnv.9:29
#, no-wrap
msgid "CNV 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:35
msgid "E<.Nm cnvlist_get>, E<.Nm cnvlist_take>, E<.Nm cnvlist_free>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/cnv.9:35
#, no-wrap
msgid "API for managing name/value pairs by cookie."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:36
#, no-wrap
msgid "LIBRARY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:38
msgid "E<.Lb libnv>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:38
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/cnv.9:39
#, no-wrap
msgid "sys/cnv.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:115
msgid ""
"E<.Ft const char *> E<.Fn cnvlist_name \"const void *cookie\"> E<.Ft int> "
"E<.Fn cnvlist_type \"const void *cookie\"> E<.Ft bool> E<.Fn "
"cnvlist_get_bool \"const void *cookie\"> E<.Ft uint64_t> E<.Fn "
"cnvlist_get_number \"const void *cookie\"> E<.Ft \"const char *\"> E<.Fn "
"cnvlist_get_string \"const void *cookie\"> E<.Ft \"const nvlist_t *\"> E<.Fn "
"cnvlist_get_nvlist \"const void *cookie\"> E<.Ft \"const void *\"> E<.Fn "
"cnvlist_get_binary \"const void *cookie\" \"size_t *sizep\"> E<.Ft \"const "
"bool *\"> E<.Fn cnvlist_get_bool_array \"const void *cookie\" \"size_t "
"*nitemsp\"> E<.Ft \"const uint64_t *\"> E<.Fn cnvlist_get_number_array "
"\"const void *cookie\" \"size_t *nitemsp\"> E<.Ft \"const char * const *\"> "
"E<.Fn cnvlist_get_string_array \"const void *cookie\" \"size_t *nitemsp\"> "
"E<.Ft \"const nvlist_t * const *\"> E<.Fn cnvlist_get_nvlist_array \"const "
"void *cookie\" \"size_t *nitemsp\"> E<.Ft int> E<.Fn cnvlist_get_descriptor "
"\"const void *cookie\"> E<.Ft \"const int *\"> E<.Fn "
"cnvlist_get_descriptor_array \"const void *cookie\" \"size_t *nitemsp\"> "
"E<.Ft bool> E<.Fn cnvlist_take_bool \"void *cookie\"> E<.Ft uint64_t> E<.Fn "
"cnvlist_take_number \"void *cookie\"> E<.Ft \"const char *\"> E<.Fn "
"cnvlist_take_string \"void *cookie\"> E<.Ft \"const nvlist_t *\"> E<.Fn "
"cnvlist_take_nvlist \"void *cookie\"> E<.Ft \"const void *\"> E<.Fn "
"cnvlist_take_binary \"void *cookie\" \"size_t *sizep\"> E<.Ft \"const bool "
"*\"> E<.Fn cnvlist_take_bool_array \"void *cookie\" \"size_t *nitemsp\"> "
"E<.Ft \"const uint64_t *\"> E<.Fn cnvlist_take_number_array \"void *cookie\" "
"\"size_t *nitemsp\"> E<.Ft \"const char * const *\"> E<.Fn "
"cnvlist_take_string_array \"void *cookie\" \"size_t *nitemsp\"> E<.Ft "
"\"const nvlist_t * const *\"> E<.Fn cnvlist_take_nvlist_array \"void "
"*cookie\" \"size_t *nitemsp\"> E<.Ft int> E<.Fn cnvlist_take_descriptor "
"\"void *cookie\"> E<.Ft \"const int *\"> E<.Fn cnvlist_take_descriptor_array "
"\"void *cookie\" \"size_t *nitemsp\"> E<.Ft void> E<.Fn cnvlist_free_null "
"\"void *cookie\"> E<.Ft void> E<.Fn cnvlist_free_bool \"void *cookie\"> "
"E<.Ft void> E<.Fn cnvlist_free_number \"void *cookie\"> E<.Ft void> E<.Fn "
"cnvlist_free_string \"void *cookie\"> E<.Ft void> E<.Fn cnvlist_free_nvlist "
"\"void *cookie\"> E<.Ft void> E<.Fn cnvlist_free_descriptor \"void "
"*cookie\"> E<.Ft void> E<.Fn cnvlist_free_binary \"void *cookie\"> E<.Ft "
"void> E<.Fn cnvlist_free_bool_array \"void *cookie\"> E<.Ft void> E<.Fn "
"cnvlist_free_number_array \"void *cookie\"> E<.Ft void> E<.Fn "
"cnvlist_free_string_array \"void *cookie\"> E<.Ft void> E<.Fn "
"cnvlist_free_nvlist_array \"void *cookie\"> E<.Ft void> E<.Fn "
"cnvlist_free_descriptor_array \"void *cookie\">"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:115
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:122
msgid ""
"The E<.Nm libnv> library permits easy management of name/value pairs and can "
"send and receive them over sockets.  For more information, also see E<.Xr nv "
"9>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:130
msgid ""
"The concept of cookies is explained in E<.Fn nvlist_next>, E<.Fn "
"nvlist_get_parent>, and E<.Fn nvlist_get_pararr> from E<.Xr nv 9>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:134
msgid ""
"The E<.Fn cnvlist_name> function returns the name of an element associated "
"with the given cookie."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:140
msgid ""
"The E<.Fn cnvlist_type> function returns the type of an element associated "
"with the given cookie.  Types which can be returned are described in E<.Xr "
"nv 9>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:147
msgid ""
"The E<.Nm cnvlist_get> family of functions obtains the value associated with "
"the given cookie.  Returned strings, nvlists, descriptors, binaries, or "
"arrays must not be modified by the user, since they still belong to the "
"nvlist.  The nvlist must not be in an error state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:161
msgid ""
"The E<.Nm cnvlist_take> family of functions returns the value associated "
"with the given cookie and removes the element from the nvlist.  When the "
"value is a string, binary, or array value, the caller is responsible for "
"freeing the returned memory with E<.Fn free 3>.  When the value is an "
"nvlist, the caller is responsible for destroying the returned nvlist with "
"E<.Fn nvlist_destroy>.  When the value is a descriptor, the caller is "
"responsible for closing the returned descriptor with the E<.Fn close 2>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:169
msgid ""
"The E<.Nm cnvlist_free> family of functions removes an element of the "
"supplied cookie and frees all resources.  If an element of the given cookie "
"has the wrong type or does not exist, the program is aborted."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:169
#, no-wrap
msgid "EXAMPLE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:171
msgid "The following example demonstrates how to deal with cnvlist API."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:176
#, no-wrap
msgid ""
"int type;\n"
"void *cookie, *scookie, *bcookie;\n"
"nvlist_t *nvl;\n"
"char *name;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:181
#, no-wrap
msgid ""
"nvl = nvlist_create(0);\n"
"nvlist_add_bool(nvl, \"test\", 1 == 2);\n"
"nvlist_add_string(nvl, \"test2\", \"cnvlist\");\n"
"cookie = NULL;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:194
#, no-wrap
msgid ""
"while (nvlist_next(nvl, &type, &cookie) != NULL) {\n"
"        switch (type) {\n"
"        case NV_TYPE_BOOL:\n"
"                printf(\"test: %d\\en\", cnvlist_get_bool(cookie));\n"
"                bcookie = cookie;\n"
"                break;\n"
"        case NV_TYPE_STRING:\n"
"                printf(\"test2: %s\\en\", cnvlist_get_string(cookie));\n"
"                scookie = cookie;\n"
"                break;\n"
"        }\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:197
#, no-wrap
msgid ""
"name = cnvlist_take_string(scookie);\n"
"cnvlist_free_bool(bcookie);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:200
#, no-wrap
msgid ""
"printf(\"test2: %s\\en\", name);\n"
"free(name);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:203
#, no-wrap
msgid ""
"printf(\"nvlist_empty = %d\\en\", nvlist_empty(nvl));\n"
"nvlist_destroy(nvl);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:205
#, no-wrap
msgid "return (0);\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:206
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:210
msgid "E<.Xr close 2>, E<.Xr free 3>, E<.Xr nv 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/cnv.9:210
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/cnv.9:214
msgid ""
"The E<.Nm cnv> API was created during the Google Summer Of Code 2016 by "
"E<.An Adam Starak>."
msgstr ""
