# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/bhnd.9:31
#, no-wrap
msgid "March 26, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/bhnd.9:32
#, no-wrap
msgid "BHND 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bhnd.9:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:36
msgid "E<.Nm bhnd>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/bhnd.9:36
#, no-wrap
msgid "BHND driver programming interface"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bhnd.9:37
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/bhnd.9:38
#, no-wrap
msgid "dev/bhnd/bhnd.h"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:40 /usr/src/share/man/man9/bhnd.9:740 /usr/src/share/man/man9/bhnd.9:2476
#, no-wrap
msgid "Bus Resource Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:72
msgid ""
"E<.Ft int> E<.Fo bhnd_activate_resource> E<.Fa \"device_t dev\" \"int type\" "
"\"int rid\" \"struct bhnd_resource *r\"> E<.Fc> E<.Ft \"struct bhnd_resource "
"*\"> E<.Fo bhnd_alloc_resource> E<.Fa \"device_t dev\" \"int type\" \"int "
"*rid\" \"rman_res_t start\" \"rman_res_t end\"> E<.Fa \"rman_res_t count\" "
"\"u_int flags\"> E<.Fc> E<.Ft \"struct bhnd_resource *\"> E<.Fo "
"bhnd_alloc_resource_any> E<.Fa \"device_t dev\" \"int type\" \"int *rid\" "
"\"u_int flags\"> E<.Fc> E<.Ft int> E<.Fo bhnd_alloc_resources> E<.Fa "
"\"device_t dev\" \"struct resource_spec *rs\" \"struct bhnd_resource "
"**res\"> E<.Fc> E<.Ft int> E<.Fo bhnd_deactivate_resource> E<.Fa \"device_t "
"dev\" \"int type\" \"int rid\" \"struct bhnd_resource *r\"> E<.Fc> E<.Ft "
"int> E<.Fo bhnd_release_resource> E<.Fa \"device_t dev\" \"int type\" \"int "
"rid\" \"struct bhnd_resource *r\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_release_resources> E<.Fa \"device_t dev\" \"const struct resource_spec "
"*rs\"> E<.Fa \"struct bhnd_resource **res\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:72 /usr/src/share/man/man9/bhnd.9:930
#, no-wrap
msgid "Bus Space Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:253
msgid ""
"E<.Ft void> E<.Fo bhnd_bus_barrier> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\"> E<.Fa \"bus_size_t length\" \"int flags\"> E<.Fc> "
"E<.Ft uint8_t> E<.Fn bhnd_bus_read_1 \"struct bhnd_resource *r\" "
"\"bus_size_t offset\"> E<.Ft uint16_t> E<.Fn bhnd_bus_read_2 \"struct "
"bhnd_resource *r\" \"bus_size_t offset\"> E<.Ft uint32_t> E<.Fn "
"bhnd_bus_read_4 \"struct bhnd_resource *r\" \"bus_size_t offset\"> E<.Ft "
"void> E<.Fo bhnd_bus_read_multi_1> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint8_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_read_multi_2> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint16_t *datap\"> E<.Fa \"bus_size_t count\"> "
"E<.Fc> E<.Ft void> E<.Fo bhnd_bus_read_multi_4> E<.Fa \"struct bhnd_resource "
"*r\" \"bus_size_t offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> "
"E<.Fc> E<.Ft void> E<.Fo bhnd_bus_read_multi_stream_1> E<.Fa \"struct "
"bhnd_resource *r\" \"bus_size_t offset\" \"uint8_t *datap\"> E<.Fa "
"\"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo bhnd_bus_read_multi_stream_2> "
"E<.Fa \"struct bhnd_resource *r\" \"bus_size_t offset\" \"uint16_t *datap\"> "
"E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_bus_read_multi_stream_4> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_read_region_1> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint8_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_read_region_2> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint16_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_read_region_4> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_read_region_stream_1> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint8_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_read_region_stream_2> E<.Fa \"struct "
"bhnd_resource *r\" \"bus_size_t offset\" \"uint16_t *datap\"> E<.Fa "
"\"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_bus_read_region_stream_4> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> "
"E<.Fc> E<.Ft void> E<.Fn bhnd_bus_read_stream_1 \"struct bhnd_resource *r\" "
"\"bus_size_t offset\"> E<.Ft void> E<.Fn bhnd_bus_read_stream_2 \"struct "
"bhnd_resource *r\" \"bus_size_t offset\"> E<.Ft uint32_t> E<.Fn "
"bhnd_bus_read_stream_4 \"struct bhnd_resource *r\" \"bus_size_t offset\"> "
"E<.Ft void> E<.Fo bhnd_bus_set_multi_1> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint8_t value\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_set_multi_2> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint16_t value\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_set_multi_4> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint32_t value\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_set_region_1> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint8_t value\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_set_region_2> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint16_t value\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_set_region_4> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint32_t value\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fn bhnd_bus_write_1 \"struct bhnd_resource *r\" \"uint8_t "
"value\"> E<.Ft void> E<.Fn bhnd_bus_write_2 \"struct bhnd_resource *r\" "
"\"uint16_t value\"> E<.Ft void> E<.Fn bhnd_bus_write_4 \"struct "
"bhnd_resource *r\" \"uint32_t value\"> E<.Ft void> E<.Fo "
"bhnd_bus_write_multi_1> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint8_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_write_multi_2> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint16_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_write_multi_4> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_write_multi_stream_1> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint8_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_write_multi_stream_2> E<.Fa \"struct "
"bhnd_resource *r\" \"bus_size_t offset\" \"uint16_t *datap\"> E<.Fa "
"\"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_bus_write_multi_stream_4> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> "
"E<.Fc> E<.Ft void> E<.Fo bhnd_bus_write_region_1> E<.Fa \"struct "
"bhnd_resource *r\" \"bus_size_t offset\" \"uint8_t *datap\"> E<.Fa "
"\"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo bhnd_bus_write_region_2> "
"E<.Fa \"struct bhnd_resource *r\" \"bus_size_t offset\" \"uint16_t *datap\"> "
"E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_bus_write_region_4> E<.Fa \"struct bhnd_resource *r\" \"bus_size_t "
"offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> E<.Ft void> "
"E<.Fo bhnd_bus_write_region_stream_1> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint8_t *datap\"> E<.Fa \"bus_size_t count\"> E<.Fc> "
"E<.Ft void> E<.Fo bhnd_bus_write_region_stream_2> E<.Fa \"struct "
"bhnd_resource *r\" \"bus_size_t offset\" \"uint16_t *datap\"> E<.Fa "
"\"bus_size_t count\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_bus_write_region_stream_4> E<.Fa \"struct bhnd_resource *r\" "
"\"bus_size_t offset\" \"uint32_t *datap\"> E<.Fa \"bus_size_t count\"> "
"E<.Fc> E<.Ft void> E<.Fn bhnd_bus_write_stream_1 \"struct bhnd_resource *r\" "
"\"uint8_t value\"> E<.Ft void> E<.Fn bhnd_bus_write_stream_2 \"struct "
"bhnd_resource *r\" \"uint16_t value\"> E<.Ft void> E<.Fn "
"bhnd_bus_write_stream_4 \"struct bhnd_resource *r\" \"uint32_t value\">"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:253 /usr/src/share/man/man9/bhnd.9:955 /usr/src/share/man/man9/bhnd.9:2493
#, no-wrap
msgid "Device Configuration Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:275
msgid ""
"E<.Ft int> E<.Fn bhnd_read_ioctl \"device_t dev\" \"uint16_t *ioctl\"> E<.Ft "
"int> E<.Fn bhnd_write_ioctl \"device_t dev\" \"uint16_t value\" \"uint16_t "
"mask\"> E<.Ft int> E<.Fn bhnd_read_iost \"device_t dev\" \"uint16_t *iost\"> "
"E<.Ft uint32_t> E<.Fo bhnd_read_config> E<.Fa \"device_t dev\" \"bus_size_t "
"offset\" \"void *value\" \"u_int width\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_write_config> E<.Fa \"device_t dev\" \"bus_size_t offset\" \"const void "
"*value\" \"u_int width\"> E<.Fc> E<.Ft int> E<.Fn bhnd_reset_hw \"device_t "
"dev\" \"uint16_t ioctl\" \"uint16_t reset_ioctl\"> E<.Ft int> E<.Fn "
"bhnd_suspend_hw \"device_t dev\" \"uint16_t ioctl\"> E<.Ft bool> E<.Fn "
"bhnd_is_hw_suspended \"device_t dev\">"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:275 /usr/src/share/man/man9/bhnd.9:1093 /usr/src/share/man/man9/bhnd.9:2523
#, no-wrap
msgid "Device Information Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:325
msgid ""
"E<.Ft bhnd_attach_type> E<.Fo bhnd_get_attach_type> E<.Fa \"device_t dev\"> "
"E<.Fc> E<.Ft \"const struct bhnd_chipid *\"> E<.Fo bhnd_get_chipid> E<.Fa "
"\"device_t dev\"> E<.Fc> E<.Ft bhnd_devclass_t> E<.Fo bhnd_get_class> E<.Fa "
"\"device_t dev\"> E<.Fc> E<.Ft u_int> E<.Fo bhnd_get_core_index> E<.Fa "
"\"device_t dev\"> E<.Fc> E<.Ft \"struct bhnd_core_info\"> E<.Fo "
"bhnd_get_core_info> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_get_core_unit> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft uint16_t> E<.Fo "
"bhnd_get_device> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft const char *> E<.Fo "
"bhnd_get_device_name> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft uint8_t> E<.Fo "
"bhnd_get_hwrev> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft uint16_t> E<.Fo "
"bhnd_get_vendor> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft const char *> E<.Fo "
"bhnd_get_vendor_name> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_read_board_info> E<.Fa \"device_t dev\" \"struct bhnd_board_info "
"*info\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:325 /usr/src/share/man/man9/bhnd.9:1366
#, no-wrap
msgid "Device Matching Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:360
msgid ""
"E<.Ft bool> E<.Fo bhnd_board_matches> E<.Fa \"const struct bhnd_board_info "
"*board\" \"const struct bhnd_board_match *desc\"> E<.Fc> E<.Ft device_t> "
"E<.Fo bhnd_bus_match_child> E<.Fa \"device_t bus\" \"const struct "
"bhnd_core_match *desc\"> E<.Fc> E<.Ft bool> E<.Fo bhnd_chip_matches> E<.Fa "
"\"const struct bhnd_chipid *chip\" \"const struct bhnd_chip_match *desc\"> "
"E<.Fc> E<.Ft \"struct bhnd_core_match\"> E<.Fo bhnd_core_get_match_desc> "
"E<.Fa \"const struct bhnd_core_info *core\"> E<.Fc> E<.Ft bool> E<.Fo "
"bhnd_core_matches> E<.Fa \"const struct bhnd_core_info *core\" \"const "
"struct bhnd_core_match *desc\"> E<.Fc> E<.Ft bool> E<.Fo bhnd_cores_equal> "
"E<.Fa \"const struct bhnd_core_info *lhs\" \"const struct bhnd_core_info "
"*rhs\"> E<.Fc> E<.Ft bool> E<.Fo bhnd_hwrev_matches> E<.Fa \"uint16_t "
"hwrev\" \"const struct bhnd_hwrev_match *desc\"> E<.Fc> E<.Ft \"const struct "
"bhnd_core_info *\"> E<.Fo bhnd_match_core> E<.Fa \"const struct "
"bhnd_core_info *cores\" \"u_int num_cores\"> E<.Fa \"const struct "
"bhnd_core_match *desc\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:360 /usr/src/share/man/man9/bhnd.9:1650
#, no-wrap
msgid "Device Table Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:394
msgid ""
"E<.Ft \"const struct bhnd_device *\"> E<.Fo bhnd_device_lookup> E<.Fa "
"\"device_t dev\" \"const struct bhnd_device *table\" \"size_t entry_size\"> "
"E<.Fc> E<.Ft bool> E<.Fo bhnd_device_matches> E<.Fa \"device_t dev\" \"const "
"struct bhnd_device_match *desc\"> E<.Fc> E<.Ft uint32_t> E<.Fo "
"bhnd_device_quirks> E<.Fa \"device_t dev\" \"const struct bhnd_device "
"*table\" \"size_t entry_size\"> E<.Fc> E<.Fo BHND_BOARD_QUIRK> E<.Fa "
"\"board\" \"flags\"> E<.Fc> E<.Fo BHND_CHIP_QUIRK> E<.Fa \"chip\" \"hwrev\" "
"\"flags\"> E<.Fc> E<.Fo BHND_CORE_QUIRK> E<.Fa \"hwrev\" \"flags\"> E<.Fc> "
"E<.Fo BHND_DEVICE> E<.Fa \"vendor\" \"device\" \"desc\" \"quirks\" \"...\"> "
"E<.Fc> E<.Fo BHND_DEVICE_IS_END> E<.Fa \"struct bhnd_device *d\"> E<.Fc> "
"E<.Fo BHND_DEVICE_QUIRK_IS_END> E<.Fa \"struct bhnd_device_quirk *q\"> "
"E<.Fc> E<.Fo BHND_PKG_QUIRK> E<.Fa \"chip\" \"pkg\" \"flags\"> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:399
#, no-wrap
msgid ""
"struct bhnd_device_quirk {\n"
"\tstruct bhnd_device_match\tdesc;\n"
"\tuint32_t\t\t\tquirks;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:407
#, no-wrap
msgid ""
"struct bhnd_device {\n"
"    const struct bhnd_device_match\t core;\n"
"    const char\t\t\t\t*desc;\n"
"    const struct bhnd_device_quirk\t*quirks_table;\n"
"    uint32_t\t\t\t\t device_flags;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:415
#, no-wrap
msgid ""
"enum {\n"
"\tBHND_DF_ANY\t= 0,\n"
"\tBHND_DF_HOSTB\t= (1 E<lt>E<lt> 0),\n"
"\tBHND_DF_SOC\t= (1 E<lt>E<lt> 1),\n"
"\tBHND_DF_ADAPTER\t= (1 E<lt>E<lt> 2)\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:418
#, no-wrap
msgid "#define BHND_DEVICE_END { { BHND_MATCH_ANY }, NULL, NULL, 0 }\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:421
#, no-wrap
msgid "#define BHND_DEVICE_QUIRK_END { { BHND_MATCH_ANY }, 0 }\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:423 /usr/src/share/man/man9/bhnd.9:1804 /usr/src/share/man/man9/bhnd.9:2529
#, no-wrap
msgid "DMA Address Translation Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:429
msgid ""
"E<.Ft int> E<.Fo bhnd_get_dma_translation> E<.Fa \"device_t dev\" \"u_int "
"width\" \"uint32_t flags\" \"bus_dma_tag_t *dmat\"> E<.Fa \"struct "
"bhnd_dma_translation *translation\"> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:436
#, no-wrap
msgid ""
"struct bhnd_dma_translation {\n"
"\tbhnd_addr_t\tbase_addr;\n"
"\tbhnd_addr_t\taddr_mask;\n"
"\tbhnd_addr_t\taddrext_mask;\n"
"\tuint32_t\tflags;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:443
#, no-wrap
msgid ""
"typedef enum {\n"
"\tBHND_DMA_ADDR_30BIT\t= 30,\n"
"\tBHND_DMA_ADDR_32BIT\t= 32,\n"
"\tBHND_DMA_ADDR_64BIT\t= 64\n"
"} bhnd_dma_addrwidth;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:449
#, no-wrap
msgid ""
"enum bhnd_dma_translation_flags {\n"
"\tBHND_DMA_TRANSLATION_PHYSMAP\t\t= (1E<lt>E<lt>0),\n"
"\tBHND_DMA_TRANSLATION_BYTESWAPPED\t= (1E<lt>E<lt>1)\n"
"};\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:451 /usr/src/share/man/man9/bhnd.9:1885 /usr/src/share/man/man9/bhnd.9:2544
#, no-wrap
msgid "Interrupt Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:469
msgid ""
"E<.Ft u_int> E<.Fo bhnd_get_intr_count> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft "
"int> E<.Fo bhnd_get_intr_ivec> E<.Fa \"device_t dev\" \"u_int intr\" \"u_int "
"*ivec\"> E<.Fc> E<.Ft int> E<.Fo bhnd_map_intr> E<.Fa \"device_t dev\" "
"\"u_int intr\" \"rman_res_t *irq\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_unmap_intr> E<.Fa \"device_t dev\" \"rman_res_t irq\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:469 /usr/src/share/man/man9/bhnd.9:1932 /usr/src/share/man/man9/bhnd.9:2558
#, no-wrap
msgid "NVRAM Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:514
msgid ""
"E<.Ft int> E<.Fo bhnd_nvram_getvar> E<.Fa \"device_t dev\" \"const char "
"*name\" \"void *buf\" \"size_t *len\"> E<.Fa \"bhnd_nvram_type type\"> "
"E<.Fc> E<.Ft int> E<.Fo bhnd_nvram_getvar_array> E<.Fa \"device_t dev\" "
"\"const char *name\" \"void *buf\" \"size_t size\"> E<.Fa \"bhnd_nvram_type "
"type\"> E<.Fc> E<.Ft int> E<.Fo bhnd_nvram_getvar_int> E<.Fa \"device_t "
"dev\" \"const char *name\" \"void *value\" \"int width\"> E<.Fc> E<.Ft int> "
"E<.Fn bhnd_nvram_getvar_int8 \"device_t dev\" \"const char *name\" \"int8_t "
"*value\"> E<.Ft int> E<.Fn bhnd_nvram_getvar_int16 \"device_t dev\" \"const "
"char *name\" \"int16_t *value\"> E<.Ft int> E<.Fn bhnd_nvram_getvar_int32 "
"\"device_t dev\" \"const char *name\" \"int32_t *value\"> E<.Ft int> E<.Fo "
"bhnd_nvram_getvar_uint> E<.Fa \"device_t dev\" \"const char *name\" \"void "
"*value\" \"int width\"> E<.Fc> E<.Ft int> E<.Fo bhnd_nvram_getvar_uint8> "
"E<.Fa \"device_t dev\" \"const char *name\" \"uint8_t *value\"> E<.Fc> E<.Ft "
"int> E<.Fo bhnd_nvram_getvar_uint16> E<.Fa \"device_t dev\" \"const char "
"*name\" \"uint16_t *value\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_nvram_getvar_uint32> E<.Fa \"device_t dev\" \"const char *name\" "
"\"uint32_t *value\"> E<.Fc> E<.Ft int> E<.Fo bhnd_nvram_getvar_str> E<.Fa "
"\"device_t dev\" \"const char *name\" \"char *buf\" \"size_t len\" \"size_t "
"*rlen\"> E<.Fc> E<.Ft \"const char *\"> E<.Fo bhnd_nvram_string_array_next> "
"E<.Fa \"const char *inp\" \"size_t ilen\" \"const char *prev\" \"size_t "
"*olen\"> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:541
#, no-wrap
msgid ""
"typedef enum {\n"
"\tBHND_NVRAM_TYPE_UINT8\t\t= 0,\n"
"\tBHND_NVRAM_TYPE_UINT16\t\t= 1,\n"
"\tBHND_NVRAM_TYPE_UINT32\t\t= 2,\n"
"\tBHND_NVRAM_TYPE_UINT64\t\t= 3,\n"
"\tBHND_NVRAM_TYPE_INT8\t\t= 4,\n"
"\tBHND_NVRAM_TYPE_INT16\t\t= 5,\n"
"\tBHND_NVRAM_TYPE_INT32\t\t= 6,\n"
"\tBHND_NVRAM_TYPE_INT64\t\t= 7,\n"
"\tBHND_NVRAM_TYPE_CHAR\t\t= 8,\n"
"\tBHND_NVRAM_TYPE_STRING\t\t= 9,\n"
"\tBHND_NVRAM_TYPE_BOOL\t\t= 10,\n"
"\tBHND_NVRAM_TYPE_NULL\t\t= 11,\n"
"\tBHND_NVRAM_TYPE_DATA\t\t= 12\n"
"\tBHND_NVRAM_TYPE_UINT8_ARRAY\t= 16,\n"
"\tBHND_NVRAM_TYPE_UINT16_ARRAY\t= 17,\n"
"\tBHND_NVRAM_TYPE_UINT32_ARRAY\t= 18,\n"
"\tBHND_NVRAM_TYPE_UINT64_ARRAY\t= 19,\n"
"\tBHND_NVRAM_TYPE_INT8_ARRAY\t= 20,\n"
"\tBHND_NVRAM_TYPE_INT16_ARRAY\t= 21,\n"
"\tBHND_NVRAM_TYPE_INT32_ARRAY\t= 22,\n"
"\tBHND_NVRAM_TYPE_INT64_ARRAY\t= 23,\n"
"\tBHND_NVRAM_TYPE_CHAR_ARRAY\t= 24,\n"
"\tBHND_NVRAM_TYPE_STRING_ARRAY\t= 25,\n"
"\tBHND_NVRAM_TYPE_BOOL_ARRAY\t= 26\n"
"} bhnd_nvram_type;\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:543 /usr/src/share/man/man9/bhnd.9:2098 /usr/src/share/man/man9/bhnd.9:2589
#, no-wrap
msgid "Port/Region Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:570
msgid ""
"E<.Ft int> E<.Fo bhnd_decode_port_rid> E<.Fa \"device_t dev\" \"int type\" "
"\"int rid\" \"bhnd_port_type *port_type\"> E<.Fa \"u_int *port\" \"u_int "
"*region\"> E<.Fc> E<.Ft u_int> E<.Fo bhnd_get_port_count> E<.Fa \"device_t "
"dev\" \"bhnd_port_type type\"> E<.Fc> E<.Ft int> E<.Fo bhnd_get_port_rid> "
"E<.Fa \"device_t dev\" \"bhnd_port_type type\" \"u_int port\" \"u_int "
"region\"> E<.Fc> E<.Ft int> E<.Fo bhnd_get_region_addr> E<.Fa \"device_t "
"dev\" \"bhnd_port_type port_type\" \"u_int port\" \"u_int region\"> E<.Fa "
"\"bhnd_addr_t *region_addr\" \"bhnd_size_t *region_size\"> E<.Fc> E<.Ft "
"u_int> E<.Fo bhnd_get_region_count> E<.Fa \"device_t dev\" \"bhnd_port_type "
"type\" \"u_int port\"> E<.Fc> E<.Ft bool> E<.Fo bhnd_is_region_valid> E<.Fa "
"\"device_t dev\" \"bhnd_port_type type\" \"u_int port\" \"u_int region\"> "
"E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:576
#, no-wrap
msgid ""
"typedef enum {\n"
"\tBHND_PORT_DEVICE\t= 0,\n"
"\tBHND_PORT_BRIDGE\t= 1,\n"
"\tBHND_PORT_AGENT\t\t= 2\n"
"} bhnd_port_type;\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:578 /usr/src/share/man/man9/bhnd.9:2197
#, no-wrap
msgid "Power Management Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:611
msgid ""
"E<.Ft int> E<.Fo bhnd_alloc_pmu> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft int> "
"E<.Fo bhnd_release_pmu> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_enable_clocks> E<.Fa \"device_t dev\" \"uint32_t clocks\"> E<.Fc> E<.Ft "
"int> E<.Fo bhnd_request_clock> E<.Fa \"device_t dev\" \"bhnd_clock clock\"> "
"E<.Fc> E<.Ft int> E<.Fo bhnd_get_clock_freq> E<.Fa \"device_t dev\" "
"\"bhnd_clock clock\" \"u_int *freq\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_get_clock_latency> E<.Fa \"device_t dev\" \"bhnd_clock clock\" \"u_int "
"*latency\"> E<.Fc> E<.Ft int> E<.Fo bhnd_request_ext_rsrc> E<.Fa \"device_t "
"dev\" \"u_int rsrc\"> E<.Fc> E<.Ft int> E<.Fo bhnd_release_ext_rsrc> E<.Fa "
"\"device_t dev\" \"u_int rsrc\"> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:618
#, no-wrap
msgid ""
"typedef enum {\n"
"\tBHND_CLOCK_DYN\t= (1 E<lt>E<lt> 0),\n"
"\tBHND_CLOCK_ILP\t= (1 E<lt>E<lt> 1),\n"
"\tBHND_CLOCK_ALP\t= (1 E<lt>E<lt> 2),\n"
"\tBHND_CLOCK_HT\t= (1 E<lt>E<lt> 3)\n"
"} bhnd_clock;\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:620 /usr/src/share/man/man9/bhnd.9:2308 /usr/src/share/man/man9/bhnd.9:2646
#, no-wrap
msgid "Service Provider Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:637
msgid ""
"E<.Ft int> E<.Fo bhnd_register_provider> E<.Fa \"device_t dev\" "
"\"bhnd_service_t service\"> E<.Fc> E<.Ft int> E<.Fo "
"bhnd_deregister_provider> E<.Fa \"device_t dev\" \"bhnd_service_t service\"> "
"E<.Fc> E<.Ft device_t> E<.Fo bhnd_retain_provider> E<.Fa \"device_t dev\" "
"\"bhnd_service_t service\"> E<.Fc> E<.Ft void> E<.Fo bhnd_release_provider> "
"E<.Fa \"device_t dev\" \"device_t provider\" \"bhnd_service_t service\"> "
"E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:646
#, no-wrap
msgid ""
"typedef enum {\n"
"\tBHND_SERVICE_CHIPC,\n"
"\tBHND_SERVICE_PWRCTL,\n"
"\tBHND_SERVICE_PMU,\n"
"\tBHND_SERVICE_NVRAM,\n"
"\tBHND_SERVICE_GPIO,\n"
"\tBHND_SERVICE_ANY\t= 1000\n"
"} bhnd_service_t;\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:648 /usr/src/share/man/man9/bhnd.9:2385 /usr/src/share/man/man9/bhnd.9:2666
#, no-wrap
msgid "Utility Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:685
msgid ""
"E<.Ft \"bhnd_erom_class_t *\"> E<.Fo bhnd_driver_get_erom_class> E<.Fa "
"\"driver_t *driver\"> E<.Fc> E<.Ft bhnd_devclass_t> E<.Fo "
"bhnd_find_core_class> E<.Fa \"uint16_t vendor\" \"uint16_t device\"> E<.Fc> "
"E<.Ft \"const char *\"> E<.Fo bhnd_find_core_name> E<.Fa \"uint16_t vendor\" "
"\"uint16_t device\"> E<.Fc> E<.Ft bhnd_devclass_t> E<.Fo bhnd_core_class> "
"E<.Fa \"const struct bhnd_core_info *ci\"> E<.Fc> E<.Ft \"const char *\"> "
"E<.Fo bhnd_core_name> E<.Fa \"const struct bhnd_core_info *ci\"> E<.Fc> "
"E<.Ft int> E<.Fo bhnd_format_chip_id> E<.Fa \"char *buffer\" \"size_t size\" "
"\"uint16_t chip_id\"> E<.Fc> E<.Ft void> E<.Fo bhnd_set_custom_core_desc> "
"E<.Fa \"device_t dev\" \"const char *dev_name\"> E<.Fc> E<.Ft void> E<.Fo "
"bhnd_set_default_core_desc> E<.Fa \"device_t dev\"> E<.Fc> E<.Ft \"const "
"char *\"> E<.Fo bhnd_vendor_name> E<.Fa \"uint16_t vendor\"> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:687
#, no-wrap
msgid "#define\tBHND_CHIPID_MAX_NAMELEN\t32\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bhnd.9:689
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:694
msgid ""
"E<.Nm> provides a unified bus and driver programming interface for the "
"on-chip interconnects and IP cores found in Broadcom Home Networking "
"Division (BHND) devices."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:698
msgid ""
"The BHND device family consists of MIPS/ARM SoCs (System On a Chip) and "
"host-connected chipsets based on a common library of Broadcom IP cores, "
"connected via one of two on-chip backplane (hardware bus) architectures."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:705
msgid ""
"Hardware designed prior to 2009 used Broadcom's E<.Dq SSB> backplane "
"architecture, based on Sonics Silicon's interconnect IP.  Each core on the "
"Sonics backplane vends a 4 KiB register block, containing both "
"device-specific CSRs, and SSB-specific per-core device management "
"(enable/reset/etc) registers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:714
msgid ""
"Subsequent hardware is based on Broadcom's E<.Dq BCMA> backplane, based on "
"ARM's AMBA IP.  The IP cores used in earlier SSB-based devices were adapted "
"for compatibility with the new backplane, with additional E<.Dq wrapper> "
"cores providing per-core device management functions in place of the SSB "
"per-core management registers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:718
msgid ""
"When BHND hardware is used as a host-connected peripheral (e.g., in a PCI "
"Wi-Fi card), the on-chip peripheral controller core is configured to operate "
"as an endpoint device, bridging access to the SoC hardware:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:723
msgid ""
"Host access to SoC address space is provided via a set of register windows "
"(e.g., a set of configurable windows into SoC address space mapped via PCI "
"BARs)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:727
msgid ""
"DMA is supported by the bridge core's sparse mapping of host address space "
"into the backplane address space.  These address regions may be used as a "
"target for the on-chip DMA engine."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:730
msgid ""
"Any backplane interrupt vectors routed to the bridge core may be mapped by "
"the bridge to host interrupts (e.g., PCI INTx/MSI/MSI-X)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:740
msgid ""
"The E<.Nm> driver programming interface \\(em and E<.Xr bhndb 4> host bridge "
"drivers \\(em support the implementation of common drivers for Broadcom IP "
"cores, whether attached via a BHND host bridge, or via the native SoC "
"backplane."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:749
msgid ""
"The bhnd_resource functions are wrappers for the standard E<.Vt \"struct "
"resource\"> bus APIs, providing support for E<.Vt SYS_RES_MEMORY> resources "
"that, on E<.Xr bhndb 4> bridged chipsets, may require on-demand remapping of "
"address windows prior to accessing bus memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:753
msgid ""
"These functions are primarily used in the implementation of BHND platform "
"device drivers that, on host-connected peripherals, must share a small set "
"of register windows during initial setup and teardown."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:758
msgid ""
"BHND peripherals are designed to not require register window remapping "
"during normal operation, and most drivers may safely use the standard E<.Vt "
"struct resource> APIs directly."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:762
msgid ""
"The E<.Fn bhnd_activate_resource> function activates a previously allocated "
"resource."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:764 /usr/src/share/man/man9/bhnd.9:783 /usr/src/share/man/man9/bhnd.9:831 /usr/src/share/man/man9/bhnd.9:856
msgid "The arguments are as follows:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:765 /usr/src/share/man/man9/bhnd.9:784 /usr/src/share/man/man9/bhnd.9:832 /usr/src/share/man/man9/bhnd.9:857 /usr/src/share/man/man9/bhnd.9:876 /usr/src/share/man/man9/bhnd.9:892 /usr/src/share/man/man9/bhnd.9:908
#, no-wrap
msgid "Fa dev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:767
msgid "The device holding ownership of the allocated resource."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:767 /usr/src/share/man/man9/bhnd.9:786 /usr/src/share/man/man9/bhnd.9:834 /usr/src/share/man/man9/bhnd.9:878 /usr/src/share/man/man9/bhnd.9:894
#, no-wrap
msgid "Fa type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:769 /usr/src/share/man/man9/bhnd.9:880 /usr/src/share/man/man9/bhnd.9:896
msgid "The type of the resource."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:769 /usr/src/share/man/man9/bhnd.9:791 /usr/src/share/man/man9/bhnd.9:839 /usr/src/share/man/man9/bhnd.9:880 /usr/src/share/man/man9/bhnd.9:896
#, no-wrap
msgid "Fa rid"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:771
msgid "The bus-specific handle that identifies the resource being activated."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:771 /usr/src/share/man/man9/bhnd.9:882 /usr/src/share/man/man9/bhnd.9:898
#, no-wrap
msgid "Fa r"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:774
msgid "A pointer to the resource returned by E<.Fn bhnd_alloc_resource>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:781
msgid ""
"The E<.Fn bhnd_alloc_resource> function allocates a resource from a device's "
"parent E<.Xr bhnd 4> bus."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:786 /usr/src/share/man/man9/bhnd.9:834
msgid "The device requesting resource ownership."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:791 /usr/src/share/man/man9/bhnd.9:839
msgid ""
"The type of resource to allocate.  This may be any type supported by the "
"standard E<.Xr bus_alloc_resource 9> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:793 /usr/src/share/man/man9/bhnd.9:841
msgid "The bus-specific handle identifying the resource being allocated."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:793
#, no-wrap
msgid "Fa start"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:795
msgid "The start address of the resource."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:795
#, no-wrap
msgid "Fa end"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:797
msgid "The end address of the resource."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:797
#, no-wrap
msgid "Fa count"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:799
msgid "The size of the resource."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:799 /usr/src/share/man/man9/bhnd.9:841 /usr/src/share/man/man9/bhnd.9:1881
#, no-wrap
msgid "Fa flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:804 /usr/src/share/man/man9/bhnd.9:846
msgid ""
"The flags for the resource to be allocated.  These may be any values "
"supported by the standard E<.Xr bus_alloc_resource 9> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:818
msgid ""
"To request that the bus supply the resource's default E<.Fa start>, E<.Fa "
"end>, and E<.Fa count> values, pass E<.Fa start> and E<.Fa end> values of "
"0ul and ~0ul respectively, and a E<.Fa count> of 1."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:829
msgid ""
"The E<.Fn bhnd_alloc_resource_any> function is a convenience wrapper for "
"E<.Fn bhnd_alloc_resource>, using the resource's default E<.Fa start>, E<.Fa "
"end>, and E<.Fa count> values."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:854
msgid ""
"The E<.Fn bhnd_alloc_resources> function allocates resources defined in "
"resource specification from a device's parent E<.Xr bhnd 4> bus."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:859
msgid "The device requesting ownership of the resources."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:859 /usr/src/share/man/man9/bhnd.9:910
#, no-wrap
msgid "Fa rs"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:863
msgid ""
"A standard bus resource specification. If all requested resources, are "
"successfully allocated, this will be updated with the allocated resource "
"identifiers."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:863 /usr/src/share/man/man9/bhnd.9:913 /usr/src/share/man/man9/bhnd.9:921
#, no-wrap
msgid "Fa res"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:868
msgid ""
"If all requested resources are successfully allocated, this will be "
"populated with the allocated E<.Vt \"struct bhnd_resource\"> instances."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:875
msgid ""
"The E<.Fn bhnd_deactivate_resource> function deactivates a resource "
"previously activated by.  E<.Fn bhnd_activate_resource>.  The arguments are "
"as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:878
msgid "The device holding ownership of the activated resource."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:882 /usr/src/share/man/man9/bhnd.9:898
msgid "The bus-specific handle identifying the resource."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:884 /usr/src/share/man/man9/bhnd.9:900
msgid "A pointer to the resource returned by bhnd_alloc_resource."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:891
msgid ""
"The E<.Fn bhnd_release_resource> function frees a resource previously "
"returned by E<.Fn bhnd_alloc_resource>.  The arguments are as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:894
msgid "The device holding ownership of the resource."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:907
msgid ""
"The E<.Fn bhnd_release_resources> function frees resources previously "
"returned by E<.Fn bhnd_alloc_resources>.  The arguments are as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:910
msgid "The device that owns the resources."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:913
msgid ""
"A standard bus resource specification previously initialized by E<.Fn "
"bhnd_alloc_resources>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:915
msgid "The resources to be released."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:920
msgid "The E<.Vt bhnd_resource> structure contains the following fields:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:924
msgid "A pointer to the bus E<.Vt struct resource>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:924
#, no-wrap
msgid "Fa direct"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:927
msgid ""
"If true, the resource requires bus window remapping before it is MMIO "
"accessible."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:935
msgid ""
"The bhnd_bus_space functions wrap their equivalent E<.Xr bus_space 9> "
"counterparts, and provide support for accessing bus memory via E<.Vt "
"\"struct bhnd_resource\".>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:937
#, no-wrap
msgid "Fn bhnd_bus_barrier"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:938
#, no-wrap
msgid "Fn bhnd_bus_[read|write]_[1|2|4]"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:939
#, no-wrap
msgid "Fn bhnd_bus_[read_multi|write_multi]_[1|2|4]"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:940
#, no-wrap
msgid "Fn bhnd_bus_[read_multi_stream|write_multi_stream]_[1|2|4]"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:941
#, no-wrap
msgid "Fn bhnd_bus_[read_region|write_region]_[1|2|4]"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:942
#, no-wrap
msgid "Fn bhnd_bus_[read_region_stream|write_region_stream]_[1|2|4]"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:943
#, no-wrap
msgid "Fn bhnd_bus_[read_stream|write_stream]_[1|2|4]"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:944
#, no-wrap
msgid "Fn bhnd_bus_[set_multi|set_stream]_[1|2|4]"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:955
msgid ""
"Drivers that do not rely on E<.Vt \"struct bhnd_resource\"> should use the "
"standard E<.Vt struct resource> and E<.Xr bus_space 9> APIs directly."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:962
msgid ""
"The E<.Fn bhnd_read_ioctl> function is used to read the I/O control register "
"value of device E<.Fa dev>, returning the current value in E<.Fa ioctl>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:972
msgid ""
"The E<.Fn bhnd_write_ioctl> function is used to modify the I/O control "
"register of E<.Fa dev>.  The new value of the register is computed by "
"updating any bits set in E<.Fa mask> to E<.Fa value>.  The following I/O "
"control flags are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:973
#, no-wrap
msgid "Dv BHND_IOCTL_BIST"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:976
msgid ""
"Initiate a built-in self-test (BIST).  Must be cleared after BIST results "
"are read via the IOST (I/O Status) register."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:976
#, no-wrap
msgid "Dv BHND_IOCTL_PME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:978
msgid "Enable posting of power management events by the core."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:978
#, no-wrap
msgid "Dv BHND_IOCTL_CLK_FORCE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:983
msgid ""
"Force disable of clock gating, resulting in all clocks being distributed "
"within the core.  Should be set when asserting/deasserting reset to ensure "
"the reset signal fully propagates to the entire core."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:983
#, no-wrap
msgid "Dv BHND_IOCTL_CLK_EN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:987
msgid ""
"If cleared, the core clock will be disabled.  Should be set during normal "
"operation, and cleared when the core is held in reset."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:987
#, no-wrap
msgid "Dv BHND_IOCTL_CFLAGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:989
msgid ""
"The mask of IOCTL bits reserved for additional core-specific I/O control "
"flags."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:998
msgid ""
"The E<.Fn bhnd_read_iost> function is used to read the I/O status register "
"of device E<.Fa dev>, returning the current value in E<.Fa iost>.  The "
"following I/O status flags are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:999
#, no-wrap
msgid "Dv BHND_IOST_BIST_DONE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1005
msgid ""
"Set upon BIST completion.  Will be cleared when the E<.Dv BHND_IOCTL_BIST> "
"flag of the I/O control register is cleared using E<.Fn bhnd_write_ioctl>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1005
#, no-wrap
msgid "Dv BHND_IOST_BIST_FAIL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1010
msgid ""
"Set upon detection of a BIST error; the value is unspecified if BIST has not "
"completed and E<.Dv BHND_IOST_BIST_DONE> is not also set."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1010
#, no-wrap
msgid "Dv BHND_IOST_CLK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1013
msgid ""
"Set if the core has required that clocked be ungated, or cleared otherwise.  "
"The value is undefined if a core does not support clock gating."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1013
#, no-wrap
msgid "Dv BHND_IOST_DMA64"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1015
msgid "Set if this core supports 64-bit DMA."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1015
#, no-wrap
msgid "Dv BHND_IOST_CFLAGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1017
msgid ""
"The mask of IOST bits reserved for additional core-specific I/O status "
"flags."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1027
msgid ""
"The E<.Fn bhnd_read_config> function is used to read a data item of E<.Fa "
"width> bytes at E<.Fa offset> from the backplane-specific agent/config space "
"of the device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1041
msgid ""
"The E<.Fn bhnd_write_config> function is used to write a data item of E<.Fa "
"width> bytes with E<.Fa value> at E<.Fa offset> from the backplane-specific "
"agent/config space of the device E<.Fa dev>.  The requested E<.Fa width> "
"must be one of 1, 2, or 4 bytes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1050
msgid ""
"The agent/config space accessible via E<.Fn bhnd_read_config> and E<.Fn "
"bhnd_write_config> is backplane-specific, and these functions should only be "
"used for functionality that is not available via another E<.Nm> function."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1063
msgid ""
"The E<.Fn bhnd_suspend_hw> function transitions the device E<.Fa dev> to a "
"low power E<.Dq RESET> state, writing E<.Fa ioctl> to the I/O control flags "
"of E<.Fa dev>.  The hardware may be brought out of this state using E<.Fn "
"bhnd_reset_hw>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1076
msgid ""
"The E<.Fn bhnd_reset_hw> function first transitions the device E<.Fa dev> to "
"a low power RESET state, writing E<.Fa ioctl_reset> to the I/O control flags "
"of E<.Fa dev>, and then brings the device out of RESET, writing E<.Fa ioctl> "
"to the device's I/O control flags."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1086
msgid ""
"The E<.Fn bhnd_is_hw_suspended> function returns E<.Dv true> if the device "
"E<.Fa dev> is currently held in a RESET state, or is otherwise not clocked.  "
"Otherwise, it returns E<.Dv false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1093
msgid ""
"Any outstanding per-device PMU requests made using E<.Fn "
"bhnd_enable_clocks>, E<.Fn bhnd_request_clock>, or E<.Fn "
"bhnd_request_ext_rsrc> will be released automatically upon placing a device "
"into a RESET state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1100
msgid ""
"The E<.Fn bhnd_get_attach_type> function returns the attachment type of the "
"parent E<.Xr bhnd 4> bus of device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1102
msgid "The following attachment types are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1103
#, no-wrap
msgid "Dv BHND_ATTACH_ADAPTER"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1105
msgid "The bus is resident on a bridged adapter, such as a PCI Wi-Fi device."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1105
#, no-wrap
msgid "Dv BHND_ATTACH_NATIVE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1108
msgid ""
"The bus is resident on the native host, such as the primary or secondary bus "
"of an embedded SoC."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1119
msgid ""
"The E<.Fn bhnd_get_chipid> function returns chip information from the parent "
"E<.Xr bhnd 4> bus of device E<.Fa dev>.  The returned E<.Vt bhnd_chipid> "
"struct contains the following fields:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1121
#, no-wrap
msgid "Fa chip_id"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1123
msgid "The chip identifier."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1123
#, no-wrap
msgid "Fa chip_rev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1125
msgid "The chip's hardware revision."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1125
#, no-wrap
msgid "Fa chip_pkg"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1127
msgid "The chip's semiconductor package identifier."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1131
msgid ""
"Several different physical semiconductor package variants may exist for a "
"given chip, each of which may require driver workarounds for hardware "
"errata, unpopulated components, etc."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1131
#, no-wrap
msgid "Fa chip_type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1133
msgid "The interconnect architecture used by this chip."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1133
#, no-wrap
msgid "Fa chip_caps"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1137
msgid "The E<.Nm> capability flags supported by this chip."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1137
#, no-wrap
msgid "Fa enum_addr"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1141
msgid ""
"The backplane enumeration address.  On SSB devices, this will be the base "
"address of the first SSB core.  On BCMA devices, this will be the address of "
"the enumeration ROM (EROM) core."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1141
#, no-wrap
msgid "Fa ncores"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1143
msgid "The number of cores on the chip backplane, or 0 if unknown."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1148
msgid "The following constants are defined for known E<.Fa chip_type> values:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1149
#, no-wrap
msgid "Dv BHND_CHIPTYPE_SIBA"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1151
msgid "SSB interconnect."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1151
#, no-wrap
msgid "Dv BHND_CHIPTYPE_BCMA"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1153
msgid "BCMA interconnect."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1153
#, no-wrap
msgid "Dv BHND_CHIPTYPE_BCMA_ALT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1155
msgid "BCMA-compatible variant found in Broadcom Northstar ARM SoCs."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1155
#, no-wrap
msgid "Dv BHND_CHIPTYPE_UBUS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1161
msgid ""
"UBUS interconnect.  This BCMA-derived interconnect is found in Broadcom "
"BCM33xx DOCSIS SoCs, and BCM63xx xDSL SoCs.  UBUS is not currently supported "
"by E<.Xr bhnd 4>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1166
msgid "The following E<.Fa chip_caps> flags are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1167
#, no-wrap
msgid "Dv BHND_CAP_BP64"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1169
msgid "The backplane supports 64-bit addressing."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1169
#, no-wrap
msgid "Dv BHND_CAP_PMU"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1171
msgid "PMU is present."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1179
msgid ""
"Additional symbolic constants for known E<.Fa chip_id>, E<.Fa chip_pkg>, and "
"E<.Fa chip_type> values are defined in"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/bhnd.9:1179 /usr/src/share/man/man9/bhnd.9:1270 /usr/src/share/man/man9/bhnd.9:1364
#, no-wrap
msgid "dev/bhnd/bhnd_ids.h ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1192
msgid ""
"The E<.Fn bhnd_get_class> function returns the BHND class of device E<.Fa "
"dev>, if the device's E<.Em vendor> and E<.Em device> identifiers are "
"recognized.  Otherwise, returns E<.Dv BHND_DEVCLASS_OTHER>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1194
msgid "One of the following device classes will be returned:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1196
#, no-wrap
msgid "Dv BHND_DEVCLASS_CC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1198
msgid "ChipCommon I/O Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1198
#, no-wrap
msgid "Dv BHND_DEVCLASS_CC_B"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1200
msgid "ChipCommon Auxiliary Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1200
#, no-wrap
msgid "Dv BHND_DEVCLASS_PMU"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1202
msgid "PMU Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1202
#, no-wrap
msgid "Dv BHND_DEVCLASS_PCI"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1204
msgid "PCI Host/Device Bridge"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1204
#, no-wrap
msgid "Dv BHND_DEVCLASS_PCIE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1206
msgid "PCIe Host/Device Bridge"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1206
#, no-wrap
msgid "Dv BHND_DEVCLASS_PCCARD"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1208
msgid "PCMCIA Host/Device Bridge"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1208
#, no-wrap
msgid "Dv BHND_DEVCLASS_RAM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1210
msgid "Internal RAM/SRAM"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1210
#, no-wrap
msgid "Dv BHND_DEVCLASS_MEMC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1212
msgid "Memory Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1212
#, no-wrap
msgid "Dv BHND_DEVCLASS_ENET"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1214
msgid "IEEE 802.3 MAC/PHY"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1214
#, no-wrap
msgid "Dv BHND_DEVCLASS_ENET_MAC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1216
msgid "IEEE 802.3 MAC"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1216
#, no-wrap
msgid "Dv BHND_DEVCLASS_ENET_PHY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1218
msgid "IEEE 802.3 PHY"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1218
#, no-wrap
msgid "Dv BHND_DEVCLASS_WLAN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1220
msgid "IEEE 802.11 MAC/PHY/Radio"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1220
#, no-wrap
msgid "Dv BHND_DEVCLASS_WLAN_MAC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1222
msgid "IEEE 802.11 MAC"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1222
#, no-wrap
msgid "Dv BHND_DEVCLASS_WLAN_PHY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1224
msgid "IEEE 802.11 PHY"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1224
#, no-wrap
msgid "Dv BHND_DEVCLASS_CPU"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1226
msgid "CPU Core"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1226
#, no-wrap
msgid "Dv BHND_DEVCLASS_SOC_ROUTER"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1228
msgid "Interconnect Router"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1228
#, no-wrap
msgid "Dv BHND_DEVCLASS_SOC_BRIDGE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1230
msgid "Interconnect Host Bridge"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1230
#, no-wrap
msgid "Dv BHND_DEVCLASS_EROM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1232
msgid "Device Enumeration ROM"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1232
#, no-wrap
msgid "Dv BHND_DEVCLASS_NVRAM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1234
msgid "NVRAM/Flash Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1234
#, no-wrap
msgid "Dv BHND_DEVCLASS_SOFTMODEM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1236
msgid "Analog/PSTN SoftModem Codec"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1236
#, no-wrap
msgid "Dv BHND_DEVCLASS_USB_HOST"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1238
msgid "USB Host Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1238
#, no-wrap
msgid "Dv BHND_DEVCLASS_USB_DEV"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1240
msgid "USB Device Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1240
#, no-wrap
msgid "Dv BHND_DEVCLASS_USB_DUAL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1242
msgid "USB Host/Device Controller"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1242
#, no-wrap
msgid "Dv BHND_DEVCLASS_OTHER"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1244
msgid "Other / Unknown"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1244
#, no-wrap
msgid "Dv BHND_DEVCLASS_INVALID"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1246
msgid "Invalid Class"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1255
msgid ""
"The E<.Fn bhnd_get_core_info> function returns the core information for "
"device E<.Fa dev>.  The returned E<.Vt bhnd_core_info> structure contains "
"the following fields:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1257
#, no-wrap
msgid "Fa vendor"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1259
msgid "Vendor identifier (JEP-106, ARM 4-bit continuation encoded)"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1259
#, no-wrap
msgid "Fa device"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1261
msgid "Device identifier"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1261
#, no-wrap
msgid "Fa hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1263
msgid "Hardware revision"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1263
#, no-wrap
msgid "Fa core_idx"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1265
msgid "Core index"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1265
#, no-wrap
msgid "Fa unit"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1267
msgid "Core unit"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1270
msgid "Symbolic constants for common vendor and device identifiers are defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1272
msgid "Common vendor identifiers include:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1274
#, no-wrap
msgid "Dv BHND_MFGID_ARM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1276
msgid "ARM"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1276
#, no-wrap
msgid "Dv BHND_MFGID_BCM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1278
msgid "Broadcom"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1278
#, no-wrap
msgid "Dv BHND_MFGID_MIPS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1280
msgid "MIPS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1301
msgid ""
"The E<.Fn bhnd_get_core_index>, E<.Fn bhnd_get_core_unit>, E<.Fn "
"bhnd_get_device>, E<.Fn bhnd_get_hwrev>, and E<.Fn bhnd_get_vendor> "
"functions are convenience wrappers for E<.Fn bhnd_get_core_info>, returning, "
"respect the E<.Fa core_idx>, E<.Fa core_unit>, E<.Fa device>, E<.Fa hwrev>, "
"or E<.Fa vendor> field from the E<.Vt bhnd_core_info> structure."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1306
msgid ""
"The E<.Fn bhnd_get_device_name> function returns a human readable name for "
"device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1311
msgid ""
"The E<.Fn bhnd_get_vendor_name> function returns a human readable name for "
"the vendor of device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1319
msgid ""
"The E<.Fn bhnd_read_board_info> function attempts to read the board "
"information for device E<.Fa dev>.  The board information will be returned "
"in the location pointed to by E<.Fa info> on success."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1323
msgid "The E<.Vt bhnd_board_info> structure contains the following fields:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1325
#, no-wrap
msgid "Fa board_vendor"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1327
msgid "Vendor ID of the board manufacturer (PCI-SIG assigned)."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1327
#, no-wrap
msgid "Fa board_type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1329
msgid "Board ID."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1329
#, no-wrap
msgid "Fa board_devid"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1331
msgid "Device ID."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1331
#, no-wrap
msgid "Fa board_rev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1333
msgid "Board revision."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1333
#, no-wrap
msgid "Fa board_srom_rev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1335
msgid "Board SROM format revision."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1335
#, no-wrap
msgid "Fa board_flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1337
msgid "Board flags (1)"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1337
#, no-wrap
msgid "Fa board_flags2"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1339
msgid "Board flags (2)"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1339
#, no-wrap
msgid "Fa board_flags3"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1341
msgid "Board flags (3)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1347
msgid ""
"The E<.Fa board_devid> field is the Broadcom PCI device ID that most closely "
"matches the capabilities of the BHND device (if any)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1355
msgid ""
"On PCI devices, the E<.Fa board_vendor>, E<.Fa board_type>, and E<.Fa "
"board_devid> fields default to the PCI Subsystem Vendor ID, PCI Subsystem "
"ID, and PCI device ID, unless overridden in device NVRAM."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1362
msgid ""
"On other devices, including SoCs, the E<.Fa board_vendor>, E<.Fa "
"board_type>, and E<.Fa board_devid> fields will be populated from device "
"NVRAM."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1364
msgid "Symbolic constants for common board flags are defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1377
msgid ""
"The bhnd device matching functions are used to match against core, chip, and "
"board-level device attributes.  Match requirements are specified using the "
"E<.Vt \"struct bhnd_board_match\">, E<.Vt \"struct bhnd_chip_match\">, E<.Vt "
"\"struct bhnd_core_match\">, E<.Vt \"struct bhnd_device_match\">, and E<.Vt "
"\"struct bhnd_hwrev_match\"> match descriptor structures."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1388
msgid ""
"The E<.Fn bhnd_board_matches> function returns E<.Dv true> if E<.Fa board> "
"matches the board match descriptor E<.Fa desc>.  Otherwise, it returns E<.Dv "
"false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1399
msgid ""
"The E<.Fn bhnd_chip_matches> function returns E<.Dv true> if E<.Fa chip> "
"matches the chip match descriptor E<.Fa desc>.  Otherwise, it returns E<.Dv "
"false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1410
msgid ""
"The E<.Fn bhnd_core_matches> function returns E<.Dv true> if E<.Fa core> "
"matches the core match descriptor E<.Fa desc>.  Otherwise, it returns E<.Dv "
"false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1421
msgid ""
"The E<.Fn bhnd_device_matches> function returns E<.Dv true> if the device "
"E<.Fa dev> matches the device match descriptor E<.Fa desc>.  Otherwise, it "
"returns E<.Dv false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1432
msgid ""
"The E<.Fn bhnd_hwrev_matches> function returns E<.Dv true> if E<.Fa hwrev> "
"matches the hwrev match descriptor E<.Fa desc>.  Otherwise, it returns E<.Dv "
"false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1442
msgid ""
"The E<.Fn bhnd_bus_match_child> function returns the first child device of "
"E<.Fa bus> that matches the device match descriptor E<.Fa desc>.  If no "
"matching child is found, E<.Dv NULL> is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1450
msgid ""
"The E<.Fn bhnd_core_get_match_desc> function returns an equality match "
"descriptor for the core info in E<.Fa core>.  The returned descriptor will "
"match only on core attributes identical to those defined by E<.Fa core>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1468
msgid ""
"The E<.Fn bhnd_cores_equal> function is a convenience wrapper for E<.Fn "
"bhnd_core_matches> and E<.Fn bhnd_core_get_match_desc>.  This function "
"returns E<.Dv true> if the E<.Vt bhnd_core_info> structures E<.Fa lhs> and "
"E<.Fa rhs> are equal.  Otherwise, it returns E<.Dv false>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1480
msgid ""
"The E<.Fn bhnd_match_core> function returns a pointer to the first entry in "
"the array E<.Fa cores> of length E<.Fa num_cores> that matches E<.Fa desc>.  "
"If no matching core is found, E<.Dv NULL> is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1484
msgid ""
"A E<.Vt bhnd_board_match> match descriptor may be initialized using one or "
"more of the following macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1486
#, no-wrap
msgid "Fn BHND_MATCH_BOARD_VENDOR vendor"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1489
msgid "Match on boards with a vendor equal to E<.Fa vendor>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1489
#, no-wrap
msgid "Fn BHND_MATCH_BOARD_TYPE type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1493
msgid "Match on boards with a type equal to E<.Dv \"BHND_BOARD_ ##\"> E<.Fa type>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1493
#, no-wrap
msgid "Fn BHND_MATCH_SROMREV sromrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1497
msgid ""
"Match on boards with a sromrev that matches E<.Dv \"BHND_HWREV_ ##\"> E<.Fa "
"sromrev>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1497
#, no-wrap
msgid "Fn BHND_MATCH_BOARD_REV hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1501
msgid ""
"Match on boards with hardware revisions that match E<.Dv \"BHND_ ##\"> E<.Fa "
"hwrev>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1501
#, no-wrap
msgid "Fn BHND_MATCH_BOARD vendor type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1506
msgid ""
"A convenience wrapper for E<.Fn BHND_MATCH_BOARD_VENDOR> and E<.Fn "
"BHND_MATCH_BOARD_TYPE>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1509 /usr/src/share/man/man9/bhnd.9:1558 /usr/src/share/man/man9/bhnd.9:1597 /usr/src/share/man/man9/bhnd.9:1615 /usr/src/share/man/man9/bhnd.9:1742 /usr/src/share/man/man9/bhnd.9:1797
msgid "For example:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1516
#, no-wrap
msgid ""
"struct bhnd_board_match board_desc = {\n"
"\tBHND_MATCH_BOARD_VENDOR(BHND_MFGID_BROADCOM),\n"
"\tBHND_MATCH_BOARD_TYPE(BCM94360X52C),\n"
"\tBHND_MATCH_BOARD_REV(HWREV_ANY),\n"
"\tBHND_MATCH_SROMREV(RANGE(0, 10))\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1521
msgid ""
"A E<.Vt bhnd_chip_match> match descriptor may be initialized using one or "
"more of the following macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1523
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_ID id"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1527
msgid "Match on chips with an ID equal to E<.Dv \"BHND_CHIPID_ ##\"> E<.Fa id>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1527
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_REV hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1531
msgid ""
"Match on chips with hardware revisions that match E<.Dv \"BHND_ ##\"> E<.Fa "
"hwrev>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1531
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_PKG pkg"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1535
msgid ""
"Match on chips with a package ID equal to E<.Dv \"BHND_PKGID_ ##\"> E<.Fa "
"pkg>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1535
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_TYPE type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1539
msgid ""
"Match on chips with a chip type equal to E<.Dv \"BHND_CHIPTYPE_ ##\"> E<.Fa "
"type>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1539
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_IP id pkg"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1544
msgid ""
"A convenience wrapper for E<.Fn BHND_MATCH_CHIP_ID> and E<.Fn "
"BHND_MATCH_CHIP_PKG>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1544
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_IPR id pkg hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1550
msgid ""
"A convenience wrapper for E<.Fn BHND_MATCH_CHIP_ID>, E<.Fn "
"BHND_MATCH_CHIP_PKG>, and E<.Fn BHND_MATCH_CHIP_REV>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1550
#, no-wrap
msgid "Fn BHND_MATCH_CHIP_IR id hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1555
msgid ""
"A convenience wrapper for E<.Fn BHND_MATCH_CHIP_ID> and E<.Fn "
"BHND_MATCH_CHIP_REV>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1563
#, no-wrap
msgid ""
"struct bhnd_chip_match chip_desc = {\n"
"\tBHND_MATCH_CHIP_IP(BCM4329, BCM4329_289PIN),\n"
"\tBHND_MATCH_CHIP_TYPE(SIBA)\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1568
msgid ""
"A E<.Vt bhnd_core_match> match descriptor may be initialized using one or "
"more of the following macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1570
#, no-wrap
msgid "Fn BHND_MATCH_CORE_VENDOR vendor"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1573
msgid "Match on cores with a vendor ID equal to E<.Fa vendor>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1573
#, no-wrap
msgid "Fn BHND_MATCH_CORE_ID id"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1576
msgid "Match on cores with a device ID equal to E<.Fa id>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1576
#, no-wrap
msgid "Fn BHND_MATCH_CORE_REV hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1580
msgid ""
"Match on cores with hardware revisions that match E<.Dv \"BHND_ ##\"> E<.Fa "
"hwrev>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1580
#, no-wrap
msgid "Fn BHND_MATCH_CORE_CLASS class"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1583
msgid "Match on cores with a core device class equal to E<.Fa class>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1583
#, no-wrap
msgid "Fn BHND_MATCH_CORE_IDX idx"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1586
msgid "Match on cores with a core index equal to E<.Fa idx>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1586
#, no-wrap
msgid "Fn BHND_MATCH_CORE_UNIT unit"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1589
msgid "Match on cores with a core unit equal to E<.Fa unit>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1589
#, no-wrap
msgid "Fn BHND_MATCH_CORE vendor id"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1594
msgid ""
"A convenience wrapper for E<.Fn BHND_MATCH_CORE_VENDOR> and E<.Fn "
"BHND_MATCH_CORE_ID>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1602
#, no-wrap
msgid ""
"struct bhnd_core_match core_desc = {\n"
"\tBHND_MATCH_CORE(BHND_MFGID_BROADCOM, BHND_COREID_CC),\n"
"\tBHND_MATCH_CORE_REV(HWREV_RANGE(0, 10))\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1613
msgid ""
"The E<.Vt bhnd_device_match> match descriptor supports matching on all "
"board, chip, and core attributes, and may be initialized using any of the "
"E<.Vt bhnd_board_match>, E<.Vt bhnd_chip_match>, or E<.Vt bhnd_core_match> "
"macros."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1622
#, no-wrap
msgid ""
"struct bhnd_device_match device_desc = {\n"
"\tBHND_MATCH_CHIP_IP(BCM4329, BCM4329_289PIN),\n"
"\tBHND_MATCH_BOARD_VENDOR(BHND_MFGID_BROADCOM),\n"
"\tBHND_MATCH_BOARD_TYPE(BCM94329AGB),\n"
"\tBHND_MATCH_CORE(BHND_MFGID_BROADCOM, BHND_COREID_CC),\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1627
msgid ""
"A E<.Vt bhnd_hwrev_match> match descriptor may be initialized using one of "
"the following macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1629
#, no-wrap
msgid "Dv BHND_HWREV_ANY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1631
msgid "Matches any hardware revision."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1631
#, no-wrap
msgid "Fn BHND_HWREV_EQ hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1634
msgid "Matches any hardware revision equal to E<.Fa hwrev>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1634
#, no-wrap
msgid "Fn BHND_HWREV_GTE hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1637
msgid "Matches any hardware revision greater than or equal to E<.Fa hwrev>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1637
#, no-wrap
msgid "Fn BHND_HWREV_LTE hwrev"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1640
msgid "Matches any hardware revision less than or equal to E<.Fa hwrev>"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1640
#, no-wrap
msgid "Fn BHND_HWREV_RANGE start end"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1648
msgid ""
"Matches any hardware revision within an inclusive range.  If E<.Dv "
"BHND_HWREV_INVALID> is specified as the E<.Fa end> value, will match on any "
"revision equal to or greater than E<.Fa start>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1653
msgid "The bhnd device table functions are used to query device and quirk tables."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1662
msgid ""
"The E<.Fn bhnd_device_lookup> function returns a pointer to the first entry "
"in device table E<.Fa table> that matches the device E<.Fa dev>.  The table "
"entry size is specified by E<.Fa entry_size>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1672
msgid ""
"The E<.Fn bhnd_device_quirks> function scan the device table E<.Fa table> "
"for all quirk entries that match the device E<.Fa dev>, returning the "
"bitwise OR of all matching quirk flags.  The table entry size is specified "
"by E<.Fa entry_size>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1676
msgid "The E<.Vt bhnd_device> structure contains the following fields:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1677
#, no-wrap
msgid "Fa core"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1681 /usr/src/share/man/man9/bhnd.9:1758
msgid "A E<.Vt bhnd_device_match> descriptor."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1681 /usr/src/share/man/man9/bhnd.9:1754
#, no-wrap
msgid "Fa desc"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1686
msgid ""
"A verbose device description suitable for use with E<.Xr device_set_desc 9>, "
"or E<.Dv NULL>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1686
#, no-wrap
msgid "Fa quirks_table"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1689
msgid "The quirks table for this device, or E<.Dv NULL>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1689
#, no-wrap
msgid "Fa device_flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1691
msgid "The device flags required when matching this entry."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1694
msgid "The following device flags are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1695
#, no-wrap
msgid "Dv BHND_DF_ANY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1697
msgid "Match on any device."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1697
#, no-wrap
msgid "Dv BHND_DF_HOSTB"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1703
msgid ""
"Match only if the device is the E<.Xr bhndb 4> host bridge.  Implies E<.Dv "
"BHND_DF_ADAPTER>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1703
#, no-wrap
msgid "Dv BHND_DF_SOC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1705
msgid "Match only if the device is attached to a native SoC backplane."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1705
#, no-wrap
msgid "Dv BHND_DF_ADAPTER"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1709
msgid "Match only if the device is attached to a E<.Xr bhndb 4> bridged backplane."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1714
msgid ""
"A E<.Vt bhnd_device> table entry may be initialized using one of the "
"following macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1716
#, no-wrap
msgid "Fn BHND_DEVICE vendor device desc quirks flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1723
msgid ""
"Match on devices with a vendor ID equal to E<.Dv BHND_MFGID_ ##> E<.Fa "
"vendor> and a core device ID equal to E<.Dv BHND_COREID_ ##> E<.Fa device>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1735
msgid ""
"The device's verbose description is specified by the E<.Fa desc> argument, a "
"pointer to the device-specific quirks table is specified by the E<.Fa "
"quirks> argument, and any required device flags may be provided in E<.Fa "
"flags>.  The optional E<.Fa flags> argument defaults to E<.Dv BHND_DF_ANY> "
"if omitted."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1735
#, no-wrap
msgid "Dv BHND_DEVICE_END"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1739
msgid "Terminate the E<.Vt bhnd_device> table."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1748
#, no-wrap
msgid ""
"struct bhnd_device bhnd_usb11_devices[] = {\n"
"\tBHND_DEVICE(BCM, USB, \"Broadcom USB1.1 Controller\",\n"
"\t    bhnd_usb11_quirks),\n"
"\tBHND_DEVICE_END\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1753
msgid "The E<.Vt bhnd_device_quirk> structure contains the following fields:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1758
#, no-wrap
msgid "Fa quirks"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1760
msgid "Applicable quirk flags."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1764
msgid ""
"A bhnd_device_quirk table entry may be initialized using one of the "
"following convenience macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1765
#, no-wrap
msgid "Fn BHND_BOARD_QUIRK board flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1771
msgid ""
"Set quirk flags E<.Fa flags> on devices with a board type equal to E<.Dv "
"BHND_BOARD_ ##> E<.Fa board>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1771
#, no-wrap
msgid "Fn BHND_CHIP_QUIRK chip hwrev flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1780
msgid ""
"Set quirk flags E<.Fa flags> on devices with a chip ID equal to E<.Dv "
"BHND_CHIPID_BCM ##> E<.Fa chip> and chip hardware revision that matches "
"E<.Dv BHND_ ##> E<.Fa hwrev>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1780
#, no-wrap
msgid "Fn BHND_PKG_QUIRK chip pkg flags\""
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1789
msgid ""
"Set quirk flags E<.Fa flags> on devices with a chip ID equal to E<.Dv "
"BHND_CHIPID_BCM ##> E<.Fa chip> and chip package equal to E<.Dv BHND_ ## "
"chip ##> E<.Fa pkg>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1789
#, no-wrap
msgid "Fn BHND_CORE_QUIRK hwrev flags\""
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1795
msgid ""
"Set quirk flags E<.Fa flags> on devices with a core hardware revision that "
"matches E<.Dv BHND_ ##> E<.Fa hwrev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1803
#, no-wrap
msgid ""
"struct bhnd_device_quirk bhnd_usb11_quirks[] = {\n"
"\tBHND_DEVICE(BCM, USB, \"Broadcom USB1.1 Controller\",\n"
"\t    bhnd_usb11_quirks),\n"
"\tBHND_DEVICE_END\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1812
msgid ""
"The E<.Fn bhnd_get_dma_translation> function is used to request a DMA "
"address translation descriptor suitable for use with a maximum DMA address "
"width of E<.Fa width>, with support for the requested translation E<.Fa "
"flags>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1825
msgid ""
"If a suitable DMA address translation descriptor is found, it will be stored "
"in E<.Fa translation>, and a bus DMA tag specifying the DMA translation's "
"address restrictions will be stored in E<.Fa dmat>.  The E<.Fa translation> "
"and E<.Fa dmat> arguments may be E<.Dv NULL> if the translation descriptor "
"or DMA tag are not desired."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1827
msgid "The following DMA translation flags are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1828
#, no-wrap
msgid "Dv BHND_DMA_TRANSLATION_PHYSMAP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1830
msgid "The translation remaps the device's physical address space."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1835
msgid ""
"This is used in conjunction with E<.Dv BHND_DMA_TRANSLATION_BYTESWAPPED> to "
"define a DMA translation that provides byteswapped access to physical memory "
"on big-endian MIPS SoCs."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1835
#, no-wrap
msgid "Dv BHND_DMA_TRANSLATION_BYTESWAPPED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1839
msgid ""
"The translation provides a byte-swapped mapping; write requests will be "
"byte-swapped before being written to memory, and read requests will be "
"byte-swapped before being returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1842
msgid ""
"This is primarily used to perform efficient byte swapping of DMA data on "
"embedded MIPS SoCs executing in big-endian mode."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1845
msgid "The following symbolic constants are defined for common DMA address widths:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1847
#, no-wrap
msgid "Dv BHND_DMA_ADDR_30BIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1849
msgid "30-bit DMA"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1849
#, no-wrap
msgid "Dv BHND_DMA_ADDR_32BIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1851
msgid "32-bit DMA"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1851
#, no-wrap
msgid "Dv BHND_DMA_ADDR_64BIT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1853
msgid "64-bit DMA"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1858
msgid "The E<.Vt bhnd_dma_translation> structure contains the following fields:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1859
#, no-wrap
msgid "Fa base_addr"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1862
msgid ""
"Host-to-device physical address translation.  This may be added to a host "
"physical address to produce a device DMA address."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1862
#, no-wrap
msgid "Fa addr_mask"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1867
msgid ""
"Device-addressable address mask.  This defines the device DMA address range, "
"and excludes any bits reserved for mapping the address within the "
"translation window at E<.Fa base_addr>."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1867
#, no-wrap
msgid "Fa addrext_mask"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1872
msgid ""
"Device-addressable extended address mask.  If a the per-core BHND DMA engine "
"supports the 'addrext' control field, it can be used to provide address bits "
"excluded by E<.Fa addr_mask>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1876
msgid ""
"Support for DMA extended address changes \\(em including coordination with "
"the core providing device-to-host DMA address translation \\(em is handled "
"transparently by the DMA engine."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1881
msgid ""
"For example, on PCI Wi-Fi devices, the Wi-Fi core's DMA engine will (in "
"effect)  update the PCI host bridge core's DMA E<.Dv sbtopcitranslation> "
"base address to map the target address prior to performing a DMA "
"transaction."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1883
msgid "Translation flags."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1893
msgid ""
"The E<.Fn bhnd_get_intr_count> function is used to determine the number of "
"backplane interrupt lines assigned to the device E<.Fa dev>.  Interrupt line "
"identifiers are allocated in monotonically increasing order, starting with "
"0."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1907
msgid ""
"The E<.Fn bhnd_get_intr_ivec> function is used to determine the backplane "
"interrupt vector assigned to interrupt line E<.Fa intr> on the device E<.Fa "
"dev>, writing the result to E<.Fa ivec>.  Interrupt vector assignments are "
"backplane-specific: On BCMA devices, this function returns the OOB bus line "
"assigned to the interrupt.  On SIBA devices, it returns the target OCP slave "
"flag number assigned to the interrupt."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1918
msgid ""
"The E<.Fn bhnd_map_intr> function is used to map interrupt line E<.Fa intr> "
"assigned to device E<.Fa dev> to an IRQ number, writing the result to E<.Fa "
"irq>.  Until unmapped, this IRQ may be used when allocating a resource of "
"type SYS_RES_IRQ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1922
msgid ""
"Ownership of the interrupt mapping is assumed by the caller, and must be "
"explicitly released using E<.Fa bhnd_unmap_intr>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1932
msgid ""
"The E<.Fn bhnd_unmap_intr> function is used to unmap bus IRQ E<.Fa irq> "
"previously mapped using E<.Fn bhnd_map_intr> by the device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1945
msgid ""
"The E<.Fn bhnd_nvram_getvar> function is used to read the value of NVRAM "
"variable E<.Fa name> from the NVRAM provider(s) registered with the parent "
"E<.Xr bhnd 4> bus of device E<.Fa dev>, coerced to the desired data "
"representation E<.Fa type>, written to the buffer specified by E<.Fa buf>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1960
msgid ""
"Before the call, the maximum capacity of E<.Fa buf> is specified by E<.Fa "
"len>.  After a successful call \\(em or if E<.Er ENOMEM> is returned \\(em "
"the size of the available data will be written to E<.Fa len>.  The size of "
"the desired data representation can be determined by calling E<.Fn "
"bhnd_nvram_getvar> with a E<.Dv NULL> argument for E<.Fa buf>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1962
msgid "The following NVRAM data types are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1964
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT8"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1966
msgid "unsigned 8-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1966
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT16"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1968
msgid "unsigned 16-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1968
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT32"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1970
msgid "unsigned 32-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1970
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT64"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1972 /usr/src/share/man/man9/bhnd.9:1980
msgid "signed 64-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1972
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT8"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1974
msgid "signed 8-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1974
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT16"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1976
msgid "signed 16-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1976
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT32"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1978
msgid "signed 32-bit integer"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1978
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT64"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1980
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_CHAR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1982
msgid "UTF-8 character"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1982
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_STRING"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1984
msgid "UTF-8 NUL-terminated string"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1984
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_BOOL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1986
msgid "uint8 boolean value"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1986
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_NULL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1988
msgid "NULL (empty) value"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1988
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_DATA"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1990
msgid "opaque octet string"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1990
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT8_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1992
msgid "array of uint8 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1992
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT16_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1994
msgid "array of uint16 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1994
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT32_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1996
msgid "array of uint32 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1996
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_UINT64_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:1998
msgid "array of uint64 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:1998
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT8_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2000
msgid "array of int8 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2000
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT16_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2002
msgid "array of int16 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2002
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT32_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2004
msgid "array of int32 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2004
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_INT64_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2006
msgid "array of int64 integers"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2006
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_CHAR_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2008
msgid "array of UTF-8 characters"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2008
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_STRING_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2010
msgid "array of UTF-8 NUL-terminated strings"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2010
#, no-wrap
msgid "Dv BHND_NVRAM_TYPE_BOOL_ARRAY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2012
msgid "array of uint8 boolean values"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2028
msgid ""
"The E<.Fn bhnd_nvram_getvar_array>, E<.Fn bhnd_nvram_getvar_int>, E<.Fn "
"bhnd_nvram_getvar_int8>, E<.Fn bhnd_nvram_getvar_int16>, E<.Fn "
"bhnd_nvram_getvar_int32>, E<.Fn bhnd_nvram_getvar_uint>, E<.Fn "
"bhnd_nvram_getvar_uint8>, E<.Fn bhnd_nvram_getvar_uint16>, E<.Fn "
"bhnd_nvram_getvar_uint32>, and E<.Fn bhnd_nvram_getvar_str> functions are "
"convenience wrappers for E<.Fn bhnd_nvram_getvar>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2040
msgid ""
"The E<.Fn bhnd_nvram_getvar_array> function returns either a value of "
"exactly E<.Fa size> in E<.Fa buf>, or returns an error code of E<.Er ENXIO> "
"if the data representation is not exactly E<.Fa size> in length."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2051
msgid ""
"The E<.Fn bhnd_nvram_getvar_int> and E<.Fn bhnd_nvram_getvar_uint> functions "
"return the value of NVRAM variable E<.Fa name>, coerced to a signed or "
"unsigned integer type of E<.Fa width> (1, 2, or 4 bytes)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2064
msgid ""
"The E<.Fn bhnd_nvram_getvar_int8>, E<.Fn bhnd_nvram_getvar_int16>, E<.Fn "
"bhnd_nvram_getvar_int32>, E<.Fn bhnd_nvram_getvar_uint>, E<.Fn "
"bhnd_nvram_getvar_uint8>, E<.Fn bhnd_nvram_getvar_uint16>, and E<.Fn "
"bhnd_nvram_getvar_uint32> functions return the value of NVRAM variable E<.Fa "
"name>, coerced to a signed or unsigned 8, 16, or 32-bit integer type."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2070
msgid ""
"The E<.Fn bhnd_nvram_getvar_str> functions return the value of NVRAM "
"variable E<.Fa name>, coerced to a NUL-terminated string."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2098
msgid ""
"The E<.Fn bhnd_nvram_string_array_next> function iterates over all strings "
"in the E<.Fa inp> E<.Dv BHND_NVRAM_TYPE_STRING_ARRAY> value.  The size of "
"E<.Fa inp>, including any terminating NUL character(s), is specified using "
"the E<.Fa ilen> argument.  The E<.Fa prev> argument should be either a "
"string pointer previously returned by E<.Fn bhnd_nvram_string_array_next>, "
"or E<.Dv NULL> to begin iteration.  If E<.Fa prev is not> E<.Dv NULL>, the "
"E<.Fa olen> argument must be a pointer to the length previously returned by "
"E<.Fn bhnd_nvram_string_array_next>.  On success, the next string element's "
"length will be written to this pointer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2108
msgid ""
"Per-device interconnect memory mappings are identified by a combination of "
"E<.Em port type>, E<.Em port number>, and E<.Em region number>.  Port and "
"memory region identifiers are allocated in monotonically increasing order "
"for each E<.Em port type>, starting with 0."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2110
msgid "The following port types are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2111
#, no-wrap
msgid "Dv BHND_PORT_DEVICE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2117
msgid ""
"Device memory.  The device's control/status registers are always mapped by "
"the first device port and region, and will be assigned a E<.Dv "
"SYS_RES_MEMORY> resource ID of 0."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2117
#, no-wrap
msgid "Dv BHND_PORT_BRIDGE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2119
msgid "Bridge memory."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2119
#, no-wrap
msgid "Dv BHND_PORT_AGENT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2121
msgid "Interconnect agent/wrapper."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2138
msgid ""
"The E<.Fn bhnd_decode_port_rid> function is used to decode the resource ID "
"E<.Fa rid> assigned to device E<.Fa dev>, of resource type E<.Fa type>, "
"writing the port type to E<.Fa port_type>, port number to E<.Fa port>, and "
"region number to E<.Fa region>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2145
msgid ""
"The E<.Fn bhnd_get_port_count> function returns the number of ports of type "
"E<.Fa type> assigned to device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2159
msgid ""
"The E<.Fn bhnd_get_port_rid> function returns the resource ID for the E<.Dv "
"SYS_RES_MEMORY> resource mapping the E<.Fa port> of E<.Fa type> and E<.Fa "
"region> on device E<.Fa dev>, or -1 if the port or region are invalid, or do "
"not have an assigned resource ID."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2174
msgid ""
"The E<.Fn bhnd_get_region_addr> function is used to determine the base "
"address and size of the memory E<.Fa region> on E<.Fa port> of E<.Fa type> "
"assigned to E<.Fa dev>.  The region's base device address will be written to "
"E<.Fa region_addr>, and the region size to E<.Fa region_size>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2183
msgid ""
"The E<.Fn bhnd_get_region_count> function returns the number of memory "
"regions mapped to E<.Fa port> of E<.Fa type> on device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2197
msgid ""
"The E<.Fn bhnd_is_region_valid> function returns E<.Dv true> if E<.Fa "
"region> is a valid region mapped by E<.Fa port> of E<.Fa type> on device "
"E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2203
msgid ""
"Drivers must ask the parent E<.Xr bhnd 4> bus to allocate device PMU state "
"using E<.Fn bhnd_alloc_pmu> before calling any another bhnd PMU functions."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2218
msgid ""
"The E<.Fn bhnd_alloc_pmu> function is used to allocate per-device PMU state "
"and enable PMU request handling for device E<.Fa dev>.  The memory region "
"containing the device's PMU register block must be allocated using E<.Xr "
"bus_alloc_resource 9> or E<.Fn bhnd_alloc_resource> before calling E<.Fn "
"bhnd_alloc_pmu>, and must not be released until after calling E<.Fn "
"bhnd_release_pmu>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2221
msgid ""
"On all supported BHND hardware, the PMU register block is mapped by the "
"device's control/status registers in the first device port and region."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2230
msgid ""
"The E<.Fn bhnd_release_pmu> function releases the per-device PMU state "
"previously allocated for device E<.Fa dev> using E<.Fn bhnd_alloc_pmu>.  Any "
"outstanding clock and external resource requests will be discarded upon "
"release of the device PMU state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2242
msgid ""
"The E<.Fn bhnd_enable_clocks> function is used to request that E<.Fa clocks> "
"be powered up and routed to the backplane on behalf of device E<.Fa dev>.  "
"This will power any clock sources required (e.g., XTAL, PLL, etc) and wait "
"until the requested clocks are stable.  If the request succeeds, any "
"previous clock requests issued by E<.Fa dev> will be discarded."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2245
msgid ""
"The following clocks are supported, and may be combined using bitwise OR to "
"request multiple clocks:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2247
#, no-wrap
msgid "BHND_CLOCK_DYN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2252
msgid ""
"Dynamically select an appropriate clock source based on all outstanding "
"clock requests by any device attached to the parent E<.Xr bhnd 4> bus."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2252
#, no-wrap
msgid "BHND_CLOCK_ILP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2256
msgid ""
"Idle Low-Power (ILP) Clock.  May be used if no register access is required, "
"or long request latency is acceptable."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2256
#, no-wrap
msgid "BHND_CLOCK_ALP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2259
msgid ""
"Active Low-Power (ALP) Clock.  Supports low-latency register access and "
"low-rate DMA."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2259
#, no-wrap
msgid "BHND_CLOCK_HT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2262
msgid ""
"High Throughput (HT) Clock.  Supports high bus throughput and lowest-latency "
"register access."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2270
msgid ""
"The E<.Fn bhnd_request_clock> function is used to request that E<.Fa clock> "
"(or faster) be powered up and routed to device E<.Fa dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2277
msgid ""
"The E<.Fn bhnd_get_clock_freq> function is used to request the current clock "
"frequency of E<.Fa clock>, writing the frequency in Hz to E<.Fa freq>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2289
msgid ""
"The E<.Fn bhnd_get_clock_latency> function is used to determine the "
"transition latency required for E<.Fa clock>, writing the latency in "
"microseconds to E<.Fa latency>.  The E<.Dv BHND_CLOCK_HT> latency value is "
"suitable for use as the D11 Wi-Fi core E<.Em fastpwrup_dly> value."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2298
msgid ""
"The E<.Fn bhnd_request_ext_rsrc> function is used to request that the "
"external PMU-managed resource assigned to device E<.Fa dev>, identified by "
"device-specific identifier E<.Fa rsrc>, be powered up."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2308
msgid ""
"The E<.Fn bhnd_release_ext_rsrc> function releases any outstanding requests "
"by device E<.Fa dev> for the PMU-managed resource identified by "
"device-specific identifier E<.Fa rsrc>.  If an external resource is shared "
"by multiple devices, it will not be powered down until all device requests "
"are released."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2318
msgid ""
"The E<.Fn bhnd_register_provider> function is used to register device E<.Fa "
"dev> as a provider for platform E<.Fa service> with the parent E<.Xr bhnd 4> "
"bus."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2320
msgid "The following service types are supported:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2321
#, no-wrap
msgid "Dv BHND_SERVICE_CHIPC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2324
msgid ""
"ChipCommon service.  The providing device must implement the bhnd_chipc "
"interface."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2324
#, no-wrap
msgid "Dv BHND_SERVICE_PWRCTL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2327
msgid ""
"Legacy PWRCTL service.  The providing device must implement the bhnd_pwrctl "
"interface."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2327
#, no-wrap
msgid "Dv BHND_SERVICE_PMU"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2330
msgid "PMU service.  The providing device must implement the bhnd_pmu interface."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2330
#, no-wrap
msgid "Dv BHND_SERVICE_NVRAM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2333
msgid ""
"NVRAM service.  The providing device must implement the bhnd_nvram "
"interface."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2333
#, no-wrap
msgid "Dv BHND_SERVICE_GPIO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2338
msgid ""
"GPIO service.  The providing device must implement the standard E<.Xr gpio "
"4> interface."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2338
#, no-wrap
msgid "Dv BHND_SERVICE_ANY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2343
msgid ""
"Matches on any service type.  May be used with E<.Fn "
"bhnd_deregister_provider> to remove all service provider registrations for a "
"device."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2358
msgid ""
"The E<.Fn bhnd_deregister_provider> function attempts to remove provider "
"registration for the device E<.Fa dev> and E<.Fa service>.  If a E<.Fa "
"service> argument of E<.Dv BHND_SERVICE_ANY> is specified, this function "
"will attempt to remove E<.Em all service provider registrations for> E<.Fa "
"dev>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2373
msgid ""
"The E<.Fn bhnd_retain_provider> function retains and returns a reference to "
"the provider registered for E<.Fa service> with the parent E<.Xr bhnd 4> bus "
"of devce E<.Fa dev>, if available.  On success, the caller is responsible "
"for releasing this provider reference using E<.Fn bhnd_release_provider>.  "
"The service provider is guaranteed to remain available until the provider "
"reference is released."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2385
msgid ""
"The E<.Fn bhnd_release_provider> function releases a reference to a E<.Fa "
"provider> for E<.Fa service>, previously retained by device E<.Fa dev> using "
"E<.Fn bhnd_retain_provider>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2399
msgid ""
"The E<.Fn bhnd_driver_get_erom_class> function returns the E<.Xr bhnd_erom "
"9> class for the device enumeration table format used by E<.Xr bhnd 4> bus "
"driver instance E<.Fa driver>.  If the driver does not support E<.Xr "
"bhnd_erom 9> device enumeration, E<.Dv NULL> is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2406
msgid ""
"The E<.Fn bhnd_find_core_class> function looks up the BHND class, if known, "
"for the BHND vendor ID E<.Fa vendor> and device ID E<.Fa device>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2414
msgid ""
"The E<.Fn bhnd_find_core_name> function is used to fetch the human-readable "
"name, if known, for the BHND core with a vendor ID of E<.Fa vendor> and "
"device ID of E<.Fa device>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2429
msgid ""
"The E<.Fn bhnd_core_class> and E<.Fn bhnd_core_name> functions are "
"convenience wrappers for E<.Fn bhnd_find_core_class> and E<.Fn "
"bhnd_find_core_name>, that use the E<.Fa vendor> and E<.Fa device> fields of "
"the core info structure E<.Fa ci>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2447
msgid ""
"The E<.Fn bhnd_format_chip_id> function writes a NUL-terminated "
"human-readable representation of the BHND E<.Fa chip_id> value to the "
"specified E<.Fa buffer> with a capacity of E<.Fa size>.  No more than E<.Fa "
"size-1> characters will be written, with the E<.Fa size'th> character set to "
"'\\e0'.  A buffer size of E<.Dv BHND_CHIPID_MAX_NAMELEN> is sufficient for "
"any string representation produced using E<.Fn bhnd_format_chip_id>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2458
msgid ""
"The E<.Fn bhnd_set_custom_core_desc> function uses the E<.Xr bhnd 4> device "
"identification of E<.Fa dev>, overriding the core name with the specified "
"E<.Fa dev_name>, to populate the device's verbose description using E<.Xr "
"device_set_desc>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2467
msgid ""
"The E<.Fn bhnd_set_default_core_desc> function uses the E<.Xr bhnd 4> device "
"identification of E<.Fa dev> to populate the device's verbose description "
"using E<.Xr device_set_desc>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2475
msgid ""
"The E<.Fn bhnd_vendor_name> function returns the human-readable name for the "
"JEP-106, ARM 4-bit continuation encoded manufacturer ID E<.Fa vendor>, if "
"known."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bhnd.9:2475
#, no-wrap
msgid "RETURN VALUES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2484
msgid ""
"The E<.Fn bhnd_activate_resource>, E<.Fn bhnd_alloc_resources>, E<.Fn "
"bhnd_deactivate_resource>, and E<.Fn bhnd_release_resource> functions return "
"0 on success, otherwise an appropriate error code is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2493
msgid ""
"The E<.Fn bhnd_alloc_resource> and E<.Fn bhnd_alloc_resource_any> functions "
"return a pointer to E<.Vt \"struct resource\"> on success, a null pointer "
"otherwise."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2500
msgid ""
"The E<.Fn bhnd_read_config> and E<.Fn bhnd_write_config> functions return 0 "
"on success, or one of the following values on error:"
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2501 /usr/src/share/man/man9/bhnd.9:2505
#, no-wrap
msgid "Bq Er EINVAL"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2505
msgid "The device is not a direct child of the E<.Xr bhnd 4> bus"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2507
msgid "The requested width is not one of 1, 2, or 4 bytes."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2507 /usr/src/share/man/man9/bhnd.9:2534 /usr/src/share/man/man9/bhnd.9:2573 /usr/src/share/man/man9/bhnd.9:2621
#, no-wrap
msgid "Bq Er ENODEV"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2509
msgid "Accessing agent/config space for the device is unsupported."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2509
#, no-wrap
msgid "Bq Er EFAULT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2512
msgid ""
"The requested offset or width exceeds the bounds of the mapped agent/config "
"space."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2523
msgid ""
"The E<.Fn bhnd_read_ioctl>, E<.Fn bhnd_write_ioctl>, E<.Fn bhnd_read_iost>, "
"E<.Fn bhnd_reset_hw>, and E<.Fn bhnd_suspend_hw> functions return 0 on "
"success, otherwise an appropriate error code is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2529
msgid ""
"The E<.Fn bhnd_read_board_info> function returns 0 on success, otherwise an "
"appropriate error code is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2533
msgid ""
"The E<.Fn bhnd_get_dma_translation> function returns 0 on success, or one of "
"the following values on error:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2536
msgid "DMA is not supported."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2536 /usr/src/share/man/man9/bhnd.9:2575
#, no-wrap
msgid "Bq Er ENOENT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2539
msgid ""
"No DMA translation matching the requested address width and translation "
"flags is available."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2544
msgid ""
"If fetching the requested DMA address translation otherwise fails, an "
"appropriate error code will be returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2553
msgid ""
"The E<.Fn bhnd_get_intr_ivec> function returns 0 on success, or E<.Er ENXIO> "
"if the requested interrupt line exceeds the number of interrupt lines "
"assigned to the device."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2558
msgid ""
"The E<.Fn bhnd_map_intr> function returns 0 on success, otherwise an "
"appropriate error code is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2572
msgid ""
"The E<.Fn bhnd_nvram_getvar>, E<.Fn bhnd_nvram_getvar_array>, E<.Fn "
"bhnd_nvram_getvar_int>, E<.Fn bhnd_nvram_getvar_int8>, E<.Fn "
"bhnd_nvram_getvar_int16>, E<.Fn bhnd_nvram_getvar_int32>, E<.Fn "
"bhnd_nvram_getvar_uint>, E<.Fn bhnd_nvram_getvar_uint8>, E<.Fn "
"bhnd_nvram_getvar_uint16>, and E<.Fn bhnd_nvram_getvar_uint32> functions "
"return 0 on success, or one of the following values on error:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2575
msgid "If an NVRAM provider has not been registered with the bus."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2577
msgid "The requested variable was not found."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2577
#, no-wrap
msgid "Bq Er ENOMEM"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2579
msgid "If the buffer of size is too small to hold the requested value."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2579
#, no-wrap
msgid "Bq Er EOPNOTSUPP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2582
msgid ""
"If the value's native type is incompatible with and cannot be coerced to the "
"requested type."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2582
#, no-wrap
msgid "Bq Er ERANGE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2584
msgid "If value coercion would overflow (or underflow) the requested type"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2589
msgid ""
"If reading the variable otherwise fails, an appropriate error code will be "
"returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2594
msgid ""
"The E<.Fn bhnd_decode_port_rid> function returns 0 on success, or an "
"appropriate error code if no matching port/region is found."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2599
msgid ""
"The E<.Fn bhnd_get_port_rid> function returns the resource ID for the "
"requested port and region, or -1 if the port or region are invalid, or do "
"not have an assigned resource ID."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2605
msgid ""
"The E<.Fn bhnd_get_region_addr> function returns 0 on success, or an "
"appropriate error code if no matching port/region is found."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/bhnd.9:2605
#, no-wrap
msgid "PMU Functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2609
msgid ""
"The E<.Fn bhnd_alloc_pmu> function returns 0 on success, otherwise an "
"appropriate error code is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2614
msgid ""
"The E<.Fn bhnd_release_pmu> function returns 0 on success, otherwise an "
"appropriate error code is returned, and the core state will be left "
"unmodified."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2620
msgid ""
"The E<.Fn bhnd_enable_clocks> and E<.Fn bhnd_request_clock> functions return "
"0 on success, or one of the following values on error:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2623
msgid "An unsupported clock was requested."
msgstr ""

#. type: It
#: /usr/src/share/man/man9/bhnd.9:2623
#, no-wrap
msgid "Bq Er ENXIO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2625
msgid "No PMU or PWRCTL provider has been registered with the bus."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2632
msgid ""
"The E<.Fn bhnd_get_clock_freq> function returns 0 on success, or E<.Er "
"ENODEV> if the frequency for the specified clock is not available."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2638
msgid ""
"The E<.Fn bhnd_get_clock_latency> function returns 0 on success, or E<.Er "
"ENODEV> if the transition latency for the specified clock is not available."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2644
msgid ""
"The E<.Fn bhnd_request_ext_rsrc> and E<.Fn bhnd_release_ext_rsrc> functions "
"return 0 on success, otherwise an appropriate error code is returned."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2653
msgid ""
"The E<.Fn bhnd_register_provider> function returns 0 on success, E<.Er "
"EEXIST> if an entry for service already exists, or an appropriate error code "
"if service registration otherwise fails."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2659
msgid ""
"The E<.Fn bhnd_deregister_provider> function returns 0 on success, or E<.Er "
"EBUSY> if active references to the service provider exist."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2666
msgid ""
"The E<.Fn bhnd_retain_provider> function returns a pointer to E<.Vt "
"\"device_t\"> on success, a null pointer if the requested provider is not "
"registered."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2673
msgid ""
"The E<.Fn bhnd_format_chip_id> function returns the total number of bytes "
"written on success, or a negative integer on failure."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bhnd.9:2673
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2676
msgid "E<.Xr bhnd 4> E<.Xr bhnd_erom 9>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/bhnd.9:2676
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/bhnd.9:2681
msgid ""
"E<.An -nosplit> The E<.Nm> driver programming interface and this manual page "
"were written by E<.An Landon Fuller Aq Mt landonf@FreeBSD.org>."
msgstr ""
