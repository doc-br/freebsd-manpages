# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man9/vnet.9:31
#, no-wrap
msgid "July 24, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man9/vnet.9:32
#, no-wrap
msgid "VNET 9"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vnet.9:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:36
msgid "E<.Nm VNET>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man9/vnet.9:36
#, no-wrap
msgid "network subsystem virtualization infrastructure"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vnet.9:37
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:40
msgid "E<.Cd \"options VIMAGE\"> E<.Cd \"options VNET_DEBUG\">"
msgstr ""

#. type: In
#: /usr/src/share/man/man9/vnet.9:41
#, no-wrap
msgid "sys/vnet.h"
msgstr ""

#. ------------------------------------------------------------
#. type: Ss
#: /usr/src/share/man/man9/vnet.9:44
#, no-wrap
msgid "Constants and Global Variables"
msgstr ""

#
#. 	"set_vnet"
#. 	"vnet_entry_"
#. ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:52
msgid "E<.Dv VNET_SETNAME> E<.Dv VNET_SYMPREFIX> E<.Vt extern struct vnet *vnet0;>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/vnet.9:52 /usr/src/share/man/man9/vnet.9:209
#, no-wrap
msgid "Variable Declaration"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:73
msgid ""
"E<.Fo VNET> E<.Fa \"name\"> E<.Fc> E<.Fo VNET_NAME> E<.Fa \"name\"> E<.Fc> "
"E<.Fo VNET_DECLARE> E<.Fa \"type\" \"name\"> E<.Fc> E<.Fo VNET_DEFINE> E<.Fa "
"\"type\" \"name\"> E<.Fc> E<.Fo VNET_DEFINE_STATIC> E<.Fa \"type\" \"name\"> "
"E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:75
#, no-wrap
msgid "#define\tV_name\tVNET(name)\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/vnet.9:77 /usr/src/share/man/man9/vnet.9:261
#, no-wrap
msgid "Virtual Instance Selection"
msgstr ""

#
#
#
#
#
#
#
#
#
#
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:117
msgid ""
"E<.Fo CRED_TO_VNET> E<.Fa \"struct ucred *\"> E<.Fc> E<.Fo TD_TO_VNET> E<.Fa "
"\"struct thread *\"> E<.Fc> E<.Fo P_TO_VNET> E<.Fa \"struct proc *\"> E<.Fc> "
"E<.Fo IS_DEFAULT_VNET> E<.Fa \"struct vnet *\"> E<.Fc> E<.Fo VNET_ASSERT> "
"E<.Fa exp msg> E<.Fc> E<.Fo CURVNET_SET> E<.Fa \"struct vnet *\"> E<.Fc> "
"E<.Fo CURVNET_SET_QUIET> E<.Fa \"struct vnet *\"> E<.Fc> E<.Fn "
"CURVNET_RESTORE> E<.Fo VNET_ITERATOR_DECL> E<.Fa \"struct vnet *\"> E<.Fc> "
"E<.Fo VNET_FOREACH> E<.Fa \"struct vnet *\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/vnet.9:117 /usr/src/share/man/man9/vnet.9:381
#, no-wrap
msgid "Locking"
msgstr ""

#
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:124
msgid ""
"E<.Fn VNET_LIST_RLOCK> E<.Fn VNET_LIST_RUNLOCK> E<.Fn "
"VNET_LIST_RLOCK_NOSLEEP> E<.Fn VNET_LIST_RUNLOCK_NOSLEEP>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/vnet.9:124 /usr/src/share/man/man9/vnet.9:398
#, no-wrap
msgid "Startup and Teardown Functions"
msgstr ""

#
#
#
#
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:152
msgid ""
"E<.Ft \"struct vnet *\"> E<.Fo vnet_alloc> E<.Fa void> E<.Fc> E<.Ft void> "
"E<.Fo vnet_destroy> E<.Fa \"struct vnet *\"> E<.Fc> E<.Fo VNET_SYSINIT> "
"E<.Fa ident> E<.Fa \"enum sysinit_sub_id subsystem\"> E<.Fa \"enum "
"sysinit_elem_order order\"> E<.Fa \"sysinit_cfunc_t func\"> E<.Fa \"const "
"void *arg\"> E<.Fc> E<.Fo VNET_SYSUNINIT> E<.Fa ident> E<.Fa \"enum "
"sysinit_sub_id subsystem\"> E<.Fa \"enum sysinit_elem_order order\"> E<.Fa "
"\"sysinit_cfunc_t func\"> E<.Fa \"const void *arg\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/vnet.9:152 /usr/src/share/man/man9/vnet.9:425
#, no-wrap
msgid "Eventhandlers"
msgstr ""

#
#
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:169
msgid ""
"E<.Fo VNET_GLOBAL_EVENTHANDLER_REGISTER> E<.Fa \"const char *name\"> E<.Fa "
"\"void *func\"> E<.Fa \"void *arg\"> E<.Fa \"int priority\"> E<.Fc> E<.Fo "
"VNET_GLOBAL_EVENTHANDLER_REGISTER_TAG> E<.Fa \"eventhandler_tag tag\"> E<.Fa "
"\"const char *name\"> E<.Fa \"void *func\"> E<.Fa \"void *arg\"> E<.Fa \"int "
"priority\"> E<.Fc>"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man9/vnet.9:169 /usr/src/share/man/man9/vnet.9:462
#, no-wrap
msgid "Sysctl Handling"
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:189
msgid ""
"E<.Fo SYSCTL_VNET_INT> E<.Fa parent nbr name access ptr val descr> E<.Fc> "
"E<.Fo SYSCTL_VNET_PROC> E<.Fa parent nbr name access ptr arg handler fmt "
"descr> E<.Fc> E<.Fo SYSCTL_VNET_STRING> E<.Fa parent nbr name access arg len "
"descr> E<.Fc> E<.Fo SYSCTL_VNET_STRUCT> E<.Fa parent nbr name access ptr "
"type descr> E<.Fc> E<.Fo SYSCTL_VNET_UINT> E<.Fa parent nbr name access ptr "
"val descr> E<.Fc> E<.Fo VNET_SYSCTL_ARG> E<.Fa req arg1> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vnet.9:189
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:200
msgid ""
"E<.Nm> is the name of a technique to virtualize the network stack.  The "
"basic idea is to change global resources most notably variables into per "
"network stack resources and have functions, sysctls, eventhandlers, "
"etc. access and handle them in the context of the correct instance.  Each "
"(virtual) network stack is attached to a E<.Em prison>, with E<.Vt vnet0> "
"being the unrestricted default network stack of the base system."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:209
msgid ""
"The global defines for E<.Dv VNET_SETNAME> and E<.Dv VNET_SYMPREFIX> are "
"shared with E<.Xr kvm 3> to access internals for debugging reasons."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:216
msgid ""
"Variables are virtualized by using the E<.Fn VNET_DEFINE> macro rather than "
"writing them out as E<.Em type name>.  One can still use static "
"initialization, e.g.,"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man9/vnet.9:217
#, no-wrap
msgid "Li VNET_DEFINE(int, foo) = 1;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:222
msgid ""
"Variables declared with the static keyword can use the E<.Fn "
"VNET_DEFINE_STATIC> macro, e.g.,"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man9/vnet.9:223
#, no-wrap
msgid "Li VNET_DEFINE_STATIC(SLIST_HEAD(, bar), bars);"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:231
msgid ""
"Static initialization is not possible when the virtualized variable would "
"need to be referenced, e.g., with E<.Dq TAILQ_HEAD_INITIALIZER()>.  In that "
"case a E<.Fn VNET_SYSINIT> based initialization function must be used."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:246
msgid ""
"External variables have to be declared using the E<.Fn VNET_DECLARE> macro.  "
"In either case the convention is to define another macro, that is then used "
"throughout the implementation to access that variable.  The variable name is "
"usually prefixed by E<.Em V_> to express that it is virtualized.  The E<.Fn "
"VNET> macro will then translate accesses to that variable to the copy of the "
"currently selected instance (see the E<.Sx \"Virtual instance selection\"> "
"section):"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man9/vnet.9:247
#, no-wrap
msgid "Li \"#define\tV_name\tVNET(name)\""
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:252
msgid "E<.Em NOTE:> Do not confuse this with the convention used by E<.Xr VFS 9>."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:261
msgid ""
"The E<.Fn VNET_NAME> macro returns the offset within the memory region of "
"the virtual network stack instance.  It is usually only used with E<.Fn "
"SYSCTL_VNET_*> macros."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:265
msgid ""
"There are three different places where the current virtual network stack "
"pointer is stored and can be taken from:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:269
msgid "a E<.Em prison>:"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man9/vnet.9:269
#, no-wrap
msgid "(struct prison *)-E<gt>pr_vnet"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:272
msgid "For convenience the following macros are provided:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:276
#, no-wrap
msgid ""
"E<.Fn CRED_TO_VNET \"struct ucred *\">\n"
"E<.Fn TD_TO_VNET \"struct thread *\">\n"
"E<.Fn P_TO_VNET \"struct proc *\">\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:280
msgid "a E<.Em socket>:"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man9/vnet.9:280
#, no-wrap
msgid "(struct socket *)-E<gt>so_vnet"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:284
msgid "an E<.Em interface>:"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man9/vnet.9:284
#, no-wrap
msgid "(struct ifnet *)-E<gt>if_vnet"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:293
msgid ""
"In addition the currently active instance is cached in E<.Dq "
"\"curthread-E<gt>td_vnet\"> which is usually only accessed through the E<.Dv "
"curvnet> macro."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:311
msgid ""
"To set the correct context of the current virtual network instance, use the "
"E<.Fn CURVNET_SET> or E<.Fn CURVNET_SET_QUIET> macros.  The E<.Fn "
"CURVNET_SET_QUIET> version will not record vnet recursions in case the "
"kernel was compiled with E<.Cd \"options VNET_DEBUG\"> and should thus only "
"be used in well known cases, where recursion is unavoidable.  Both macros "
"will save the previous state on the stack and it must be restored with the "
"E<.Fn CURVNET_RESTORE> macro."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:316
msgid ""
"E<.Em NOTE:> As the previous state is saved on the stack, you cannot have "
"multiple E<.Fn CURVNET_SET> calls in the same block."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:324
msgid ""
"E<.Em NOTE:> As the previous state is saved on the stack, a E<.Fn "
"CURVNET_RESTORE> call has to be in the same block as the E<.Fn CURVNET_SET> "
"call or in a subblock with the same idea of the saved instances as the outer "
"block."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:332
msgid ""
"E<.Em NOTE:> As each macro is a set of operations and, as previously "
"explained, cannot be put into its own block when defined, one cannot "
"conditionally set the current vnet context.  The following will E<.Em not> "
"work:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:335
#, no-wrap
msgid ""
"if (condition)\n"
"\tCURVNET_SET(vnet);\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:338
msgid "nor would this work:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:343
#, no-wrap
msgid ""
"if (condition) {\n"
"\tCURVNET_SET(vnet);\n"
"}\n"
"CURVNET_RESTORE();\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:360
msgid ""
"Sometimes one needs to loop over all virtual instances, for example to "
"update virtual from global state, to run a function from a E<.Xr callout 9> "
"for each instance, etc.  For those cases the E<.Fn VNET_ITERATOR_DECL> and "
"E<.Fn VNET_FOREACH> macros are provided.  The former macro defines the "
"variable that iterates over the loop, and the latter loops over all of the "
"virtual network stack instances.  See E<.Sx \"Locking\"> for how to savely "
"traverse the list of all virtual instances."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:367
msgid ""
"The E<.Fn IS_DEFAULT_VNET> macro provides a safe way to check whether the "
"currently active instance is the unrestricted default network stack of the "
"base system E<.Pq Vt vnet0>."
msgstr ""

#
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:381
msgid ""
"The E<.Fn VNET_ASSERT> macro provides a way to conditionally add assertions "
"that are only active with E<.Cd \"options VIMAGE\"> compiled in and either "
"E<.Cd \"options VNET_DEBUG\"> or E<.Cd \"options INVARIANTS\"> enabled as "
"well.  It uses the same semantics as E<.Xr KASSERT 9>."
msgstr ""

#
#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:398
msgid ""
"For public access to the list of virtual network stack instances e.g., by "
"the E<.Fn VNET_FOREACH> macro, read locks are provided.  Macros are used to "
"abstract from the actual type of the locks.  If a caller may sleep while "
"traversing the list, it must use the E<.Fn VNET_LIST_RLOCK> and E<.Fn "
"VNET_LIST_RUNLOCK> macros.  Otherwise, the caller can use E<.Fn "
"VNET_LIST_RLOCK_NOSLEEP> and E<.Fn VNET_LIST_RUNLOCK_NOSLEEP>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:408
msgid ""
"To start or tear down a virtual network stack instance the internal "
"functions E<.Fn vnet_alloc> and E<.Fn vnet_destroy> are provided and called "
"from the jail framework.  They run the publicly provided methods to handle "
"network stack startup and teardown."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:425
msgid ""
"For public control, the system startup interface has been enhanced to not "
"only handle a system boot but to also handle a virtual network stack startup "
"and teardown.  To the base system the E<.Fn VNET_SYSINIT> and E<.Fn "
"VNET_SYSUNINIT> macros look exactly as if there were no virtual network "
"stack.  In fact, if E<.Cd \"options VIMAGE\"> is not compiled in they are "
"compiled to the standard E<.Fn SYSINIT> macros.  In addition to that they "
"are run for each virtual network stack when starting or, in reverse order, "
"when shutting down."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:428
msgid "Eventhandlers can be handled in two ways:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:435
msgid ""
"save the E<.Em tags> returned in each virtual instance and properly free the "
"eventhandlers on teardown using those, or"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:438
msgid ""
"use one eventhandler that will iterate over all virtual network stack "
"instances."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:462
msgid ""
"For the first case one can just use the normal E<.Xr EVENTHANDLER 9> "
"functions, while for the second case the E<.Fn "
"VNET_GLOBAL_EVENTHANDLER_REGISTER> and E<.Fn "
"VNET_GLOBAL_EVENTHANDLER_REGISTER_TAG> macros are provided.  These differ in "
"that E<.Fn VNET_GLOBAL_EVENTHANDLER_REGISTER_TAG> takes an extra first "
"argument that will carry the E<.Fa \"tag\"> upon return.  Eventhandlers "
"registered with either of these will not run E<.Fa func> directly but E<.Fa "
"func> will be called from an internal iterator function for each vnet.  Both "
"macros can only be used for eventhandlers that do not take additional "
"arguments, as the variadic arguments from an E<.Xr EVENTHANDLER_INVOKE 9> "
"call will be ignored."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:469
msgid ""
"A E<.Xr sysctl 9> can be virtualized by using one of the E<.Fn "
"SYSCTL_VNET_*> macros."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:480
msgid ""
"They take the same arguments as the standard E<.Xr sysctl 9> functions, with "
"the only difference, that the E<.Fa ptr> argument has to be passed as E<.Ql "
"&VNET_NAME(foo)> instead of E<.Ql &foo> so that the variable can be selected "
"from the correct memory region of the virtual network stack instance of the "
"caller."
msgstr ""

#.  ------------------------------------------------------------
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:491
msgid ""
"For the very rare case a sysctl handler function would want to handle E<.Fa "
"arg1> itself the E<.Fn VNET_SYSCTL_ARG req arg1> is provided that will "
"translate the E<.Fa arg1> argument to the correct memory address in the "
"virtual network stack context of the caller."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vnet.9:491
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#.  .Xr pcpu 9 ,
#.  .Xr SYSINIT 9
#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:499
msgid ""
"E<.Xr jail 2>, E<.Xr kvm 3>, E<.Xr EVENTHANDLER 9>, E<.Xr KASSERT 9>, E<.Xr "
"sysctl 9>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:502
msgid ""
"Marko Zec, Implementing a Clonable Network Stack in the FreeBSD Kernel, "
"USENIX ATC'03, June 2003, Boston"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vnet.9:502
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:505
msgid "The virtual network stack implementation first appeared in E<.Fx 8.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man9/vnet.9:505
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:516
msgid ""
"E<.An -nosplit> The E<.Nm> framework was designed and implemented at the "
"University of Zagreb by E<.An Marko Zec> under sponsorship of the FreeBSD "
"Foundation and NLnet Foundation, and later extended and refined by E<.An "
"Bjoern A. Zeeb> (also under FreeBSD Foundation sponsorship), and E<.An "
"Robert Watson>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man9/vnet.9:519
msgid ""
"This manual page was written by E<.An Bjoern A. Zeeb, CK Software GmbH,> "
"under sponsorship from the FreeBSD Foundation."
msgstr ""
