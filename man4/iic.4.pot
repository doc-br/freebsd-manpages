# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:27-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man4/iic.4:28
#, no-wrap
msgid "May 15, 2015"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man4/iic.4:29
#, no-wrap
msgid "IIC 4"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/iic.4:31
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:33
msgid "E<.Nm iic>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man4/iic.4:33
#, no-wrap
msgid "I2C generic I/O device driver"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/iic.4:34
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:36
msgid "E<.Cd \"device iic\">"
msgstr ""

#. type: In
#: /usr/src/share/man/man4/iic.4:37 /usr/src/share/man/man4/iic.4:184
#, no-wrap
msgid "dev/iicbus/iic.h"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/iic.4:38
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:48
msgid ""
"The E<.Nm> device driver provides generic I/O to any E<.Xr iicbus 4> "
"instance.  In order to control I2C devices, use E<.Pa /dev/iic?> with the "
"following ioctls:"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:49
#, no-wrap
msgid "Dv I2CSTART"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:63
msgid ""
"E<.Pq Vt \"struct iiccmd\"> Sends the start condition to the slave specified "
"by the E<.Va slave> element to the bus.  The E<.Va slave> element consists "
"of a 7-bit address and a read/write bit (that is, a 7-bit address E<lt>E<lt> "
"1 | r/w).  A read operation is initiated when the read/write bit is set, or "
"a write operation when it is cleared.  All other elements are ignored.  If "
"successful, the file descriptor receives exclusive ownership of the "
"underlying iicbus instance."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:63
#, no-wrap
msgid "Dv I2CRPTSTART"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:73
msgid ""
"E<.Pq Vt \"struct iiccmd\"> Sends the repeated start condition to the slave "
"specified by the E<.Va slave> element to the bus.  The slave address should "
"be specified as in E<.Dv I2CSTART>.  All other elements are ignored.  E<.Dv "
"I2CSTART> must have previously been issued on the same file descriptor."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:73
#, no-wrap
msgid "Dv I2CSTOP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:82
msgid ""
"No argument is passed.  Sends the stop condition to the bus.  If E<.Dv "
"I2CSTART> was previously issued on the file descriptor, the current "
"transaction is terminated and exclusive ownership of the underlying iicbus "
"instance is released.  Otherwise, no action is performed."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:82
#, no-wrap
msgid "Dv I2CRSTCARD"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:91
msgid ""
"E<.Pq Vt \"struct iiccmd\"> Resets the bus.  The argument is completely "
"ignored.  This command does not require E<.Dv I2CSTART> to have been "
"previously issued on the file descriptor.  If it was previously issued, "
"exclusive ownership of the underlying iicbus instance is released."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:91
#, no-wrap
msgid "Dv I2CWRITE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:112
msgid ""
"E<.Pq Vt \"struct iiccmd\"> Writes data to the E<.Xr iicbus 4>.  The bus "
"must already be started by a previous E<.Dv I2CSTART> on the file "
"descriptor.  The E<.Va slave> element is ignored.  The E<.Va count> element "
"is the number of bytes to write.  The E<.Va last> element is a boolean "
"flag.  It must be zero when additional read commands will follow, or "
"non-zero if this is the last command.  The E<.Va buf> element is a pointer "
"to the data to write to the bus."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:112
#, no-wrap
msgid "Dv I2CREAD"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:134
msgid ""
"E<.Pq Vt \"struct iiccmd\"> Reads data from the E<.Xr iicbus 4>.  The bus "
"must already be started by a previous E<.Dv I2CSTART> on the file "
"descriptor.  The E<.Va slave> element is ignored.  The E<.Va count> element "
"is the number of bytes to read.  The E<.Va last> element is a boolean flag.  "
"It must be zero when additional read commands will follow, or non-zero if "
"this is the last command.  The E<.Va buf> element is a pointer to where to "
"store the data read from the bus.  Short reads on the bus produce undefined "
"results."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:134
#, no-wrap
msgid "Dv I2CRDWR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:170
msgid ""
"E<.Pq Vt \"struct iic_rdwr_data\"> Generic read/write interface.  Allows for "
"an arbitrary number of commands to be sent to an arbitrary number of devices "
"on the bus.  Any previous transaction started by E<.Dv I2CSTART> must be "
"terminated by E<.Dv I2CSTOP> or E<.Dv I2CRSTCARD> before E<.Dv I2CRDWR> can "
"be issued on the same file descriptor.  A read transfer is specified if "
"E<.Dv IIC_M_RD> is set in E<.Va flags>.  Otherwise the transfer is a write "
"transfer.  The E<.Va slave> element specifies the 7-bit address with the "
"read/write bit for the transfer.  The read/write bit will be handled by the "
"iicbus stack based on the specified transfer operation.  The E<.Va len> "
"element is the number of E<.Pq Vt \"struct iic_msg\"> messages encoded on "
"E<.Pq Vt \"struct iic_rdwr_data\">.  The E<.Va buf> element is a buffer for "
"that data.  This ioctl is intended to be E<.Tn Linux> compatible."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/iic.4:170
#, no-wrap
msgid "Dv I2CSADDR"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:181
msgid ""
"E<.Pq Vt \"uint8_t\"> Associate the specified address with the file "
"descriptor for use by subsequent E<.Xr read 2> or E<.Xr write 2> calls.  The "
"argument is an 8-bit address (that is, a 7-bit address E<lt>E<lt> 1).  The "
"read/write bit in the least-significant position is ignored.  Any subsequent "
"read or write operation will set or clear that bit as needed."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:184
msgid "The following data structures are defined in"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:186
msgid "and referenced above:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:193
#, no-wrap
msgid ""
"struct iiccmd {\n"
"\tu_char slave;\n"
"\tint count;\n"
"\tint last;\n"
"\tchar *buf;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:206
#, no-wrap
msgid ""
"/* Designed to be compatible with linux's struct i2c_msg */\n"
"struct iic_msg\n"
"{\n"
"\tuint16_t\tslave;\n"
"\tuint16_t\tflags;\n"
"#define\tIIC_M_WR\t0\t/* Fake flag for write */\n"
"#define\tIIC_M_RD\t0x0001\t/* read vs write */\n"
"#define\tIIC_M_NOSTOP\t0x0002\t/* do not send a I2C stop after message */\n"
"#define\tIIC_M_NOSTART\t0x0004\t/* do not send a I2C start before message "
"*/\n"
"\tuint16_t\tlen;\t/* msg length */\n"
"\tuint8_t *\tbuf;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:211
#, no-wrap
msgid ""
"struct iic_rdwr_data {\n"
"\tstruct iic_msg *msgs;\n"
"\tuint32_t nmsgs;\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:244
msgid ""
"It is also possible to use E<.Xr read 2> or E<.Xr write 2>, in which case "
"the I2C start/stop handshake is managed by E<.Xr iicbus 4>.  The address "
"used for the read/write operation is the one passed to the most recent E<.Dv "
"I2CSTART> E<.Xr ioctl 2> or E<.Dv I2CSADDR> E<.Xr ioctl 2> on the open E<.Pa "
"/dev/iic?> file descriptor.  Closing the file descriptor clears any "
"addressing state established by a previous E<.Dv I2CSTART> or E<.Dv "
"I2CSADDR>, stops any transaction established by a not-yet-terminated E<.Dv "
"I2CSTART>, and releases iicbus ownership.  Because addressing state is "
"stored on a per-file-descriptor basis, it is permissible for multiple file "
"descriptors to be simultaneously open on the same E<.Pa /dev/iic?> device.  "
"Concurrent transactions on those descriptors are synchronized by the "
"exclusive-ownership requests issued to the underlying iicbus instance."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/iic.4:244
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:249
msgid "E<.Xr ioctl 2>, E<.Xr read 2>, E<.Xr write 2>, E<.Xr iicbus 4>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/iic.4:249
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:254
msgid "The E<.Nm> manual page first appeared in E<.Fx 3.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/iic.4:254
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/iic.4:260
msgid ""
"E<.An -nosplit> This manual page was written by E<.An Nicolas Souchu> and "
"E<.An M. Warner Losh>."
msgstr ""
