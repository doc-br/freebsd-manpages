# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man4/ioat.4:27
#, no-wrap
msgid "May 3, 2016"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man4/ioat.4:28
#, no-wrap
msgid "IOAT 4"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:30
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:32
msgid "E<.Nm I/OAT>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man4/ioat.4:32
#, no-wrap
msgid "Intel I/O Acceleration Technology"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:33
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:36
msgid ""
"To compile this driver into your kernel, place the following line in your "
"kernel configuration file:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:38
#, no-wrap
msgid "E<.Cd \"device ioat\">\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:42
msgid ""
"Or, to load the driver as a module at boot, place the following line in "
"E<.Xr loader.conf 5>:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:44
#, no-wrap
msgid "ioat_load=\"YES\"\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:48
msgid "In E<.Xr loader.conf 5>:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:50
msgid "E<.Cd hw.ioat.force_legacy_interrupts=0>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:54
msgid "In E<.Xr loader.conf 5 or> E<.Xr sysctl.conf 5>:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:58
msgid ""
"E<.Cd hw.ioat.enable_ioat_test=0> E<.Cd hw.ioat.debug_level=0> (only "
"critical errors; maximum of 3)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:61
msgid ""
"E<.Ft typedef void> E<.Fn (*bus_dmaengine_callback_t) \"void *arg\" \"int "
"error\">"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:141
msgid ""
"E<.Ft bus_dmaengine_t> E<.Fn ioat_get_dmaengine \"uint32_t channel_index\"> "
"E<.Ft void> E<.Fn ioat_put_dmaengine \"bus_dmaengine_t dmaengine\"> E<.Ft "
"int> E<.Fn ioat_get_hwversion \"bus_dmaengine_t dmaengine\"> E<.Ft size_t> "
"E<.Fn ioat_get_max_io_size \"bus_dmaengine_t dmaengine\"> E<.Ft int> E<.Fn "
"ioat_set_interrupt_coalesce \"bus_dmaengine_t dmaengine\" \"uint16_t "
"delay\"> E<.Ft uint16_t> E<.Fn ioat_get_max_coalesce_period "
"\"bus_dmaengine_t dmaengine\"> E<.Ft void> E<.Fn ioat_acquire "
"\"bus_dmaengine_t dmaengine\"> E<.Ft int> E<.Fn ioat_acquire_reserve "
"\"bus_dmaengine_t dmaengine\" \"uint32_t n\" \"int mflags\"> E<.Ft void> "
"E<.Fn ioat_release \"bus_dmaengine_t dmaengine\"> E<.Ft struct bus_dmadesc "
"*> E<.Fo ioat_copy> E<.Fa \"bus_dmaengine_t dmaengine\"> E<.Fa \"bus_addr_t "
"dst\"> E<.Fa \"bus_addr_t src\"> E<.Fa \"bus_size_t len\"> E<.Fa "
"\"bus_dmaengine_callback_t callback_fn\"> E<.Fa \"void *callback_arg\"> "
"E<.Fa \"uint32_t flags\"> E<.Fc> E<.Ft struct bus_dmadesc *> E<.Fo "
"ioat_copy_8k_aligned> E<.Fa \"bus_dmaengine_t dmaengine\"> E<.Fa "
"\"bus_addr_t dst1\"> E<.Fa \"bus_addr_t dst2\"> E<.Fa \"bus_addr_t src1\"> "
"E<.Fa \"bus_addr_t src2\"> E<.Fa \"bus_dmaengine_callback_t callback_fn\"> "
"E<.Fa \"void *callback_arg\"> E<.Fa \"uint32_t flags\"> E<.Fc> E<.Ft struct "
"bus_dmadesc *> E<.Fo ioat_copy_crc> E<.Fa \"bus_dmaengine_t dmaengine\"> "
"E<.Fa \"bus_addr_t dst\"> E<.Fa \"bus_addr_t src\"> E<.Fa \"bus_size_t "
"len\"> E<.Fa \"uint32_t *initialseed\"> E<.Fa \"bus_addr_t crcptr\"> E<.Fa "
"\"bus_dmaengine_callback_t callback_fn\"> E<.Fa \"void *callback_arg\"> "
"E<.Fa \"uint32_t flags\"> E<.Fc> E<.Ft struct bus_dmadesc *> E<.Fo ioat_crc> "
"E<.Fa \"bus_dmaengine_t dmaengine\"> E<.Fa \"bus_addr_t src\"> E<.Fa "
"\"bus_size_t len\"> E<.Fa \"uint32_t *initialseed\"> E<.Fa \"bus_addr_t "
"crcptr\"> E<.Fa \"bus_dmaengine_callback_t callback_fn\"> E<.Fa \"void "
"*callback_arg\"> E<.Fa \"uint32_t flags\"> E<.Fc> E<.Ft struct bus_dmadesc "
"*> E<.Fo ioat_blockfill> E<.Fa \"bus_dmaengine_t dmaengine\"> E<.Fa "
"\"bus_addr_t dst\"> E<.Fa \"uint64_t fillpattern\"> E<.Fa \"bus_size_t "
"len\"> E<.Fa \"bus_dmaengine_callback_t callback_fn\"> E<.Fa \"void "
"*callback_arg\"> E<.Fa \"uint32_t flags\"> E<.Fc> E<.Ft struct bus_dmadesc "
"*> E<.Fo ioat_null> E<.Fa \"bus_dmaengine_t dmaengine\"> E<.Fa "
"\"bus_dmaengine_callback_t callback_fn\"> E<.Fa \"void *callback_arg\"> "
"E<.Fa \"uint32_t flags\"> E<.Fc>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:141
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:146
msgid ""
"The E<.Nm> driver provides a kernel API to a variety of DMA engines on some "
"Intel server platforms."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:151
msgid ""
"There is a number of DMA channels per CPU package.  (Typically 4 or 8.)  "
"Each may be used independently.  Operations on a single channel proceed "
"sequentially."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:153
msgid "Blockfill operations can be used to write a 64-bit pattern to memory."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:155
msgid "Copy operations can be used to offload memory copies to the DMA engines."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:158
msgid ""
"Null operations do nothing, but may be used to test the interrupt and "
"callback mechanism."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:164
msgid ""
"All operations can optionally trigger an interrupt at completion with the "
"E<.Ar DMA_INT_EN> flag.  For example, a user might submit multiple "
"operations to the same channel and only enable an interrupt and callback for "
"the last operation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:178
msgid ""
"The hardware can delay and coalesce interrupts on a given channel for a "
"configurable period of time, in microseconds.  This may be desired to reduce "
"the processing and interrupt overhead per descriptor, especially for "
"workflows consisting of many small operations.  Software can control this on "
"a per-channel basis with the E<.Fn ioat_set_interrupt_coalesce> API.  The "
"E<.Fn ioat_get_max_coalesce_period> API can be used to determine the maximum "
"coalescing period supported by the hardware, in microseconds.  Current "
"platforms support up to a 16.383 millisecond coalescing period.  Optimal "
"configuration will vary by workflow and desired operation latency."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:185
msgid ""
"All operations are safe to use in a non-blocking context with the E<.Ar "
"DMA_NO_WAIT> flag.  (Of course, allocations may fail and operations "
"requested with E<.Ar DMA_NO_WAIT> may return NULL.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:196
msgid ""
"Operations that depend on the result of prior operations should use E<.Ar "
"DMA_FENCE>.  For example, such a scenario can happen when two related DMA "
"operations are queued.  First, a DMA copy to one location (A), followed "
"directly by a DMA copy from A to B.  In this scenario, some classes of I/OAT "
"hardware may prefetch A for the second operation before it is written by the "
"first operation.  To avoid reading a stale value in sequences of dependent "
"operations, use E<.Ar DMA_FENCE>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:205
msgid ""
"All operations, as well as E<.Fn ioat_get_dmaengine>, can return NULL in "
"special circumstances.  For example, if the E<.Nm> driver is being unloaded, "
"or the administrator has induced a hardware reset, or a usage error has "
"resulted in a hardware error state that needs to be recovered from."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:209
msgid ""
"It is invalid to attempt to submit new DMA operations in a E<.Fa "
"bus_dmaengine_callback_t> context."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:214
msgid ""
"The CRC operations have three distinct modes.  The default mode is to "
"accumulate.  By accumulating over multiple descriptors, a user may gather a "
"CRC over several chunks of memory and only write out the result once."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:227
msgid ""
"The E<.Ar DMA_CRC_STORE> flag causes the operation to emit the CRC32C "
"result.  If E<.Ar DMA_CRC_INLINE> is set, the result is written inline with "
"the destination data (or source in E<.Fn ioat_crc> mode).  If E<.Ar "
"DMA_CRC_INLINE> is not set, the result is written to the provided E<.Fa "
"crcptr>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:237
msgid ""
"Similarly, the E<.Ar DMA_CRC_TEST> flag causes the operation to compare the "
"CRC32C result to an existing checksum.  If E<.Ar DMA_CRC_INLINE> is set, the "
"result is compared against the inline four bytes trailing the source data.  "
"If it is not set, the result is compared against the value pointed to by "
"E<.Fa crcptr>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:246
msgid ""
"E<.Fn ioat_copy_crc> calculates a CRC32C while copying data.  E<.Fn "
"ioat_crc> only computes a CRC32C of some data.  If the E<.Fa initialseed> "
"argument to either routine is non-NULL, the CRC32C engine is initialized "
"with the value it points to."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:246
#, no-wrap
msgid "USAGE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:262
msgid ""
"A typical user will lookup the DMA engine object for a given channel with "
"E<.Fn ioat_get_dmaengine>.  When the user wants to offload a copy, they will "
"first E<.Fn ioat_acquire> the E<.Ar bus_dmaengine_t> object for exclusive "
"access to enqueue operations on that channel.  Optionally, the user can "
"reserve space by using E<.Fn ioat_acquire_reserve> instead.  If E<.Fn "
"ioat_acquire_reserve> succeeds, there is guaranteed to be room for E<.Fa N> "
"new operations in the internal ring buffer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:285
msgid ""
"Then, they will submit one or more operations using E<.Fn ioat_blockfill>, "
"E<.Fn ioat_copy>, E<.Fn ioat_copy_8k_aligned>, E<.Fn ioat_copy_crc>, E<.Fn "
"ioat_crc>, or E<.Fn ioat_null>.  After queuing one or more individual DMA "
"operations, they will E<.Fn ioat_release> the E<.Ar bus_dmaengine_t> to drop "
"their exclusive access to the channel.  The routine they provided for the "
"E<.Fa callback_fn> argument will be invoked with the provided E<.Fa "
"callback_arg> when the operation is complete.  When they are finished with "
"the E<.Ar bus_dmaengine_t>, the user should E<.Fn ioat_put_dmaengine>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:294
msgid ""
"Users MUST NOT block between E<.Fn ioat_acquire> and E<.Fn ioat_release>.  "
"Users SHOULD NOT hold E<.Ar bus_dmaengine_t> references for a very long time "
"to enable fault recovery and kernel module unload."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:297
msgid "For an example of usage, see E<.Pa src/sys/dev/ioat/ioat_test.c>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:297
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/ioat.4:299
#, no-wrap
msgid "Pa /dev/ioat_test"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:302
msgid "test device for E<.Xr ioatcontrol 8>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:303
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:305
msgid "E<.Xr ioatcontrol 8>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:305
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:310
msgid "The E<.Nm> driver first appeared in E<.Fx 11.0>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:310
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:320
msgid ""
"The E<.Nm> driver was developed by E<.An \\&Jim Harris Aq Mt "
"jimharris@FreeBSD.org>, E<.An \\&Carl Delsey Aq Mt carl.r.delsey@intel.com>, "
"and E<.An \\&Conrad Meyer Aq Mt cem@FreeBSD.org>.  This manual page was "
"written by E<.An \\&Conrad Meyer Aq Mt cem@FreeBSD.org>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:320
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:322
msgid "Copy operation takes bus addresses as parameters, not virtual addresses."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:324
msgid "Buffers for individual copy operations must be physically contiguous."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:329
msgid ""
"Copies larger than max transfer size (1MB, but may vary by hardware) are not "
"supported.  Future versions will likely support this by breaking up the "
"transfer into smaller sizes."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/ioat.4:329
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/ioat.4:334
msgid ""
"The E<.Nm> driver only supports blockfill, copy, and null operations at this "
"time.  The driver does not yet support advanced DMA modes, such as XOR, that "
"some I/OAT devices support."
msgstr ""
