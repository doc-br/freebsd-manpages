# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:27-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man4/netmap.4:30
#, no-wrap
msgid "November 20, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man4/netmap.4:31
#, no-wrap
msgid "NETMAP 4"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:33
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:35
msgid "E<.Nm netmap>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man4/netmap.4:35
#, no-wrap
msgid "a framework for fast packet I/O"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:36
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:38
msgid "E<.Cd device netmap>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:38
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:47
msgid ""
"E<.Nm> is a framework for extremely fast and efficient packet I/O for "
"userspace and kernel clients, and for Virtual Machines.  It runs on E<.Fx> "
"Linux and some versions of Windows, and supports a variety of E<.Nm netmap "
"ports>, including"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:48
#, no-wrap
msgid "Nm physical NIC ports"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:50
msgid "to access individual queues of network interfaces;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:50
#, no-wrap
msgid "Nm host ports"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:52
msgid "to inject packets into the host stack;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:52
#, no-wrap
msgid "Nm VALE ports"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:54
msgid "implementing a very fast and modular in-kernel software switch/dataplane;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:54
#, no-wrap
msgid "Nm netmap pipes"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:56
msgid "a shared memory packet transport channel;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:56
#, no-wrap
msgid "Nm netmap monitors"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:60
msgid "a mechanism similar to E<.Xr bpf 4> to capture traffic"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:84
msgid ""
"All these E<.Nm netmap ports> are accessed interchangeably with the same "
"API, and are at least one order of magnitude faster than standard OS "
"mechanisms (sockets, bpf, tun/tap interfaces, native switches, pipes).  With "
"suitably fast hardware (NICs, PCIe buses, CPUs), packet I/O using E<.Nm> on "
"supported NICs reaches 14.88 million packets per second (Mpps)  with much "
"less than one core on 10 Gbit/s NICs; 35-40 Mpps on 40 Gbit/s NICs (limited "
"by the hardware); about 20 Mpps per core for VALE ports; and over 100 Mpps "
"for E<.Nm netmap pipes>.  NICs without native E<.Nm> support can still use "
"the API in emulated mode, which uses unmodified device drivers and is 3-5 "
"times faster than E<.Xr bpf 4> or raw sockets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:98
msgid ""
"Userspace clients can dynamically switch NICs into E<.Nm> mode and send and "
"receive raw packets through memory mapped buffers.  Similarly, E<.Nm VALE> "
"switch instances and ports, E<.Nm netmap pipes> and E<.Nm netmap monitors> "
"can be created dynamically, providing high speed packet I/O between "
"processes, virtual machines, NICs and the host stack."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:120
msgid ""
"E<.Nm> supports both non-blocking I/O through E<.Xr ioctl 2>, "
"synchronization and blocking I/O through a file descriptor and standard OS "
"mechanisms such as E<.Xr select 2>, E<.Xr poll 2>, E<.Xr kqueue 2> and E<.Xr "
"epoll 7>.  All types of E<.Nm netmap ports> and the E<.Nm VALE switch> are "
"implemented by a single kernel module, which also emulates the E<.Nm> API "
"over standard drivers.  For best performance, E<.Nm> requires native support "
"in device drivers.  A list of such devices is at the end of this document."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:127
msgid ""
"In the rest of this (long) manual page we document various aspects of the "
"E<.Nm> and E<.Nm VALE> architecture, features and usage."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:127
#, no-wrap
msgid "ARCHITECTURE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:143
msgid ""
"E<.Nm> supports raw packet I/O through a E<.Em port>, which can be connected "
"to a physical interface E<.Em ( NIC>), to the host stack, or to a E<.Nm "
"VALE> switch.  Ports use preallocated circular queues of buffers E<.Em ( "
"rings>)  residing in an mmapped region.  There is one ring for each "
"transmit/receive queue of a NIC or virtual port.  An additional ring pair "
"connects to the host stack."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:149
msgid ""
"After binding a file descriptor to a port, a E<.Nm> client can send or "
"receive packets in batches through the rings, and possibly implement "
"zero-copy forwarding between ports."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:163
msgid ""
"All NICs operating in E<.Nm> mode use the same memory region, accessible to "
"all processes who own E<.Pa /dev/netmap> file descriptors bound to NICs.  "
"Independent E<.Nm VALE> and E<.Nm netmap pipe> ports by default use separate "
"memory regions, but can be independently configured to share memory."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:163
#, no-wrap
msgid "ENTERING AND EXITING NETMAP MODE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:175
msgid ""
"The following section describes the system calls to create and control E<.Nm "
"netmap> ports (including E<.Nm VALE> and E<.Nm netmap pipe> ports).  "
"Simpler, higher level functions are described in the E<.Sx LIBRARIES> "
"section."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:178
msgid ""
"Ports and rings are created and controlled through a file descriptor, "
"created by opening a special device"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:178
#, no-wrap
msgid "fd = open(\"/dev/netmap\");"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:180
msgid "and then bound to a specific port with an"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:180
#, no-wrap
msgid "ioctl(fd, NIOCREGIF, (struct nmreq *)arg);"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:188
msgid ""
"E<.Nm> has multiple modes of operation controlled by the E<.Vt struct nmreq> "
"argument.  E<.Va arg.nr_name> specifies the netmap port name, as follows:"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:189
#, no-wrap
msgid "Dv OS network interface name (e.g., 'em0', 'eth1', ... )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:193
msgid ""
"the data path of the NIC is disconnected from the host stack, and the file "
"descriptor is bound to the NIC (one or all queues), or to the host stack;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:193
#, no-wrap
msgid "Dv valeSSS:PPP"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:196
msgid ""
"the file descriptor is bound to port PPP of VALE switch SSS.  Switch "
"instances and ports are dynamically created if necessary."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:200
msgid ""
"Both SSS and PPP have the form [0-9a-zA-Z_]+ , the string cannot exceed "
"IFNAMSIZ characters, and PPP cannot be the name of any existing OS network "
"interface."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:208
msgid ""
"On return, E<.Va arg> indicates the size of the shared memory region, and "
"the number, size and location of all the E<.Nm> data structures, which can "
"be accessed by mmapping the memory"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:208
#, no-wrap
msgid "char *mem = mmap(0, arg.nr_memsize, fd);"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:216
msgid ""
"Non-blocking I/O is done with special E<.Xr ioctl 2> E<.Xr select 2> and "
"E<.Xr poll 2> on the file descriptor permit blocking I/O."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:228
msgid ""
"While a NIC is in E<.Nm> mode, the OS will still believe the interface is up "
"and running.  OS-generated packets for that NIC end up into a E<.Nm> ring, "
"and another ring is used to send packets into the OS network stack.  A E<.Xr "
"close 2> on the file descriptor removes the binding, and returns the NIC to "
"normal mode (reconnecting the data path to the host stack), or destroys the "
"virtual port."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:228
#, no-wrap
msgid "DATA STRUCTURES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:230
msgid "The data structures in the mmapped memory region are detailed in"
msgstr ""

#. type: In
#: /usr/src/share/man/man4/netmap.4:230
#, no-wrap
msgid "sys/net/netmap.h ,"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:235
msgid ""
"which is the ultimate reference for the E<.Nm> API.  The main structures and "
"fields are indicated below:"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:236
#, no-wrap
msgid "Dv struct netmap_if (one per interface )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:247
#, no-wrap
msgid ""
"struct netmap_if {\n"
"    ...\n"
"    const uint32_t   ni_flags;      /* properties              */\n"
"    ...\n"
"    const uint32_t   ni_tx_rings;   /* NIC tx rings            */\n"
"    const uint32_t   ni_rx_rings;   /* NIC rx rings            */\n"
"    uint32_t         ni_bufs_head;  /* head of extra bufs list */\n"
"    ...\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:282
msgid ""
"Indicates the number of available rings E<.Pa ( struct netmap_rings>)  and "
"their position in the mmapped region.  The number of tx and rx rings E<.Pa ( "
"ni_tx_rings , ni_rx_rings>)  normally depends on the hardware.  NICs also "
"have an extra tx/rx ring pair connected to the host stack.  E<.Em NIOCREGIF> "
"can also request additional unbound buffers in the same memory space, to be "
"used as temporary storage for packets.  The number of extra buffers is "
"specified in the E<.Va arg.nr_arg3> field.  On success, the kernel writes "
"back to E<.Va arg.nr_arg3> the number of extra buffers actually allocated "
"(they may be less than the amount requested if the memory space ran out of "
"buffers).  E<.Pa ni_bufs_head> contains the index of the first of these "
"extra buffers, which are connected in a list (the first uint32_t of each "
"buffer being the index of the next buffer in the list).  A E<.Dv 0> "
"indicates the end of the list.  The application is free to modify this list "
"and use the buffers (i.e., binding them to the slots of a netmap ring).  "
"When closing the netmap file descriptor, the kernel frees the buffers "
"contained in the list pointed by E<.Pa ni_bufs_head> , irrespectively of the "
"buffers originally provided by the kernel on E<.Em NIOCREGIF>."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:282
#, no-wrap
msgid "Dv struct netmap_ring (one per ring )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:298
#, no-wrap
msgid ""
"struct netmap_ring {\n"
"    ...\n"
"    const uint32_t num_slots;   /* slots in each ring            */\n"
"    const uint32_t nr_buf_size; /* size of each buffer           */\n"
"    ...\n"
"    uint32_t       head;        /* (u) first buf owned by user   */\n"
"    uint32_t       cur;         /* (u) wakeup position           */\n"
"    const uint32_t tail;        /* (k) first buf owned by kernel */\n"
"    ...\n"
"    uint32_t       flags;\n"
"    struct timeval ts;          /* (k) time of last rxsync()     */\n"
"    ...\n"
"    struct netmap_slot slot[0]; /* array of slots                */\n"
"}\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:304
msgid ""
"Implements transmit and receive rings, with read/write pointers, metadata "
"and an array of E<.Em slots> describing the buffers."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:304
#, no-wrap
msgid "Dv struct netmap_slot (one per buffer )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:312
#, no-wrap
msgid ""
"struct netmap_slot {\n"
"    uint32_t buf_idx;           /* buffer index                 */\n"
"    uint16_t len;               /* packet length                */\n"
"    uint16_t flags;             /* buf changed, etc.            */\n"
"    uint64_t ptr;               /* address for indirect buffers */\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:316
msgid ""
"Describes a packet buffer, which normally is identified by an index and "
"resides in the mmapped region."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:316
#, no-wrap
msgid "Dv packet buffers"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:318
msgid "Fixed size (normally 2 KB) packet buffers allocated by the kernel."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:329
msgid ""
"The offset of the E<.Pa struct netmap_if> in the mmapped region is indicated "
"by the E<.Pa nr_offset> field in the structure returned by E<.Dv "
"NIOCREGIF>.  From there, all other objects are reachable through relative "
"references (offsets or indexes).  Macros and functions in"
msgstr ""

#. type: In
#: /usr/src/share/man/man4/netmap.4:329 /usr/src/share/man/man4/netmap.4:755
#, no-wrap
msgid "net/netmap_user.h"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:331
msgid "help converting them into actual pointers:"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:332
#, no-wrap
msgid "struct netmap_if *nifp = NETMAP_IF(mem, arg.nr_offset);"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:333
#, no-wrap
msgid "struct netmap_ring *txr = NETMAP_TXRING(nifp, ring_index);"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:334
#, no-wrap
msgid "struct netmap_ring *rxr = NETMAP_RXRING(nifp, ring_index);"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:336
#, no-wrap
msgid "char *buf = NETMAP_BUF(ring, buffer_index);"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:337
#, no-wrap
msgid "RINGS, BUFFERS AND DATA I/O"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:345
msgid ""
"E<.Va Rings> are circular queues of packets with three indexes/pointers "
"E<.Va ( head , cur , tail>); one slot is always kept empty.  The ring size "
"E<.Va ( num_slots>)  should not be assumed to be a power of two."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:348
msgid "E<.Va head> is the first slot available to userspace;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:355
msgid ""
"E<.Va cur> is the wakeup point: select/poll will unblock when E<.Va tail> "
"passes E<.Va cur>;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:358
msgid "E<.Va tail> is the first slot reserved to the kernel."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:363
msgid "Slot indexes E<.Em must> only move forward; for convenience, the function"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:363
#, no-wrap
msgid "nm_ring_next(ring, index)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:365
msgid "returns the next index modulo the ring size."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:379
msgid ""
"E<.Va head> and E<.Va cur> are only modified by the user program; E<.Va "
"tail> is only modified by the kernel.  The kernel only reads/writes the "
"E<.Vt struct netmap_ring> slots and buffers during the execution of a "
"netmap-related system call.  The only exception are slots (and buffers) in "
"the range E<.Va tail\\ . . . head-1>, that are explicitly assigned to the "
"kernel."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:379
#, no-wrap
msgid "TRANSMIT RINGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:395
msgid ""
"On transmit rings, after a E<.Nm> system call, slots in the range E<.Va "
"head\\ . . . tail-1> are available for transmission.  User code should fill "
"the slots sequentially and advance E<.Va head> and E<.Va cur> past slots "
"ready to transmit.  E<.Va cur> may be moved further ahead if the user code "
"needs more slots before further transmissions (see E<.Sx SCATTER GATHER "
"I/O>)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:403
msgid ""
"At the next NIOCTXSYNC/select()/poll(), slots up to E<.Va head-1> are pushed "
"to the port, and E<.Va tail> may advance if further slots have become "
"available.  Below is an example of the evolution of a TX ring:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:409
#, no-wrap
msgid ""
"    after the syscall, slots between cur and tail are (a)vailable\n"
"              head=cur   tail\n"
"               |          |\n"
"               v          v\n"
"     TX  [.....aaaaaaaaaaa.............]\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:415
#, no-wrap
msgid ""
"    user creates new packets to (T)ransmit\n"
"                head=cur tail\n"
"                    |     |\n"
"                    v     v\n"
"     TX  [.....TTTTTaaaaaa.............]\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:421
#, no-wrap
msgid ""
"    NIOCTXSYNC/poll()/select() sends packets and reports new slots\n"
"                head=cur      tail\n"
"                    |          |\n"
"                    v          v\n"
"     TX  [..........aaaaaaaaaaa........]\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:427
msgid ""
"E<.Fn select> and E<.Fn poll> will block if there is no space in the ring, "
"i.e.,"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:427
#, no-wrap
msgid "ring-E<gt>cur == ring-E<gt>tail"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:429
msgid "and return when new slots have become available."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:432
msgid ""
"High speed applications may want to amortize the cost of system calls by "
"preparing as many packets as possible before issuing them."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:434
msgid "A transmit ring with pending transmissions has"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:434
#, no-wrap
msgid "ring-E<gt>head != ring-E<gt>tail + 1 (modulo the ring size)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:438
msgid "The function E<.Va int nm_tx_pending(ring)> implements this test."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:438
#, no-wrap
msgid "RECEIVE RINGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:453
msgid ""
"On receive rings, after a E<.Nm> system call, the slots in the range E<.Va "
"head\\& . . . tail-1> contain received packets.  User code should process "
"them and advance E<.Va head> and E<.Va cur> past slots it wants to return to "
"the kernel.  E<.Va cur> may be moved further ahead if the user code wants to "
"wait for more packets without returning all the previous slots to the "
"kernel."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:460
msgid ""
"At the next NIOCRXSYNC/select()/poll(), slots up to E<.Va head-1> are "
"returned to the kernel for further receives, and E<.Va tail> may advance to "
"report new incoming packets."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:462
msgid "Below is an example of the evolution of an RX ring:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:468
#, no-wrap
msgid ""
"    after the syscall, there are some (h)eld and some (R)eceived slots\n"
"           head  cur     tail\n"
"            |     |       |\n"
"            v     v       v\n"
"     RX  [..hhhhhhRRRRRRRR..........]\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:474
#, no-wrap
msgid ""
"    user advances head and cur, releasing some slots and holding others\n"
"               head cur  tail\n"
"                 |  |     |\n"
"                 v  v     v\n"
"     RX  [..*****hhhRRRRRR...........]\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:480
#, no-wrap
msgid ""
"    NICRXSYNC/poll()/select() recovers slots and reports new packets\n"
"               head cur        tail\n"
"                 |  |           |\n"
"                 v  v           v\n"
"     RX  [.......hhhRRRRRRRRRRRR....]\n"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:481
#, no-wrap
msgid "SLOTS AND PACKET BUFFERS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:485
msgid ""
"Normally, packets should be stored in the netmap-allocated buffers assigned "
"to slots when ports are bound to a file descriptor.  One packet is fully "
"contained in a single buffer."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:487
msgid "The following flags affect slot and buffer processing:"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:488
#, no-wrap
msgid "NS_BUF_CHANGED"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:496
msgid ""
"E<.Em must> be used when the E<.Va buf_idx> in the slot is changed.  This "
"can be used to implement zero-copy forwarding, see E<.Sx ZERO-COPY "
"FORWARDING>."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:496
#, no-wrap
msgid "NS_REPORT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:504
msgid ""
"reports when this buffer has been transmitted.  Normally, E<.Nm> notifies "
"transmit completions in batches, hence signals can be delayed indefinitely.  "
"This flag helps detect when packets have been sent and a file descriptor can "
"be closed."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:504
#, no-wrap
msgid "NS_FORWARD"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:509
msgid ""
"When a ring is in 'transparent' mode, packets marked with this flag by the "
"user application are forwarded to the other endpoint at the next system "
"call, thus restoring (in a selective way)  the connection between a NIC and "
"the host stack."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:509
#, no-wrap
msgid "NS_NO_LEARN"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:512
msgid ""
"tells the forwarding code that the source MAC address for this packet must "
"not be used in the learning bridge code."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:512
#, no-wrap
msgid "NS_INDIRECT"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:516
msgid ""
"indicates that the packet's payload is in a user-supplied buffer whose user "
"virtual address is in the 'ptr' field of the slot.  The size can reach 65535 "
"bytes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:521
msgid ""
"This is only supported on the transmit ring of E<.Nm VALE> ports, and it "
"helps reducing data copies in the interconnection of virtual machines."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:521
#, no-wrap
msgid "NS_MOREFRAG"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:524
msgid ""
"indicates that the packet continues with subsequent buffers; the last buffer "
"in a packet must have the flag clear."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:525
#, no-wrap
msgid "SCATTER GATHER I/O"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:534
msgid ""
"Packets can span multiple slots if the E<.Va NS_MOREFRAG> flag is set in all "
"but the last slot.  The maximum length of a chain is 64 buffers.  This is "
"normally used with E<.Nm VALE> ports when connecting virtual machines, as "
"they generate large TSO segments that are not split unless they reach a "
"physical device."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:537
msgid ""
"NOTE: The length field always refers to the individual fragment; there is no "
"place with the total length of a packet."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:543
msgid ""
"On receive rings the macro E<.Va NS_RFRAGS(slot)> indicates the remaining "
"number of slots for this packet, including the current one.  Slots with a "
"value greater than 1 also have NS_MOREFRAG set."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:543
#, no-wrap
msgid "IOCTLS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:550
msgid ""
"E<.Nm> uses two ioctls (NIOCTXSYNC, NIOCRXSYNC)  for non-blocking I/O.  They "
"take no argument.  Two more ioctls (NIOCGINFO, NIOCREGIF) are used to query "
"and configure ports, with the following argument:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:568
#, no-wrap
msgid ""
"struct nmreq {\n"
"    char      nr_name[IFNAMSIZ]; /* (i) port name                  */\n"
"    uint32_t  nr_version;        /* (i) API version                */\n"
"    uint32_t  nr_offset;         /* (o) nifp offset in mmap region */\n"
"    uint32_t  nr_memsize;        /* (o) size of the mmap region    */\n"
"    uint32_t  nr_tx_slots;       /* (i/o) slots in tx rings        */\n"
"    uint32_t  nr_rx_slots;       /* (i/o) slots in rx rings        */\n"
"    uint16_t  nr_tx_rings;       /* (i/o) number of tx rings       */\n"
"    uint16_t  nr_rx_rings;       /* (i/o) number of rx rings       */\n"
"    uint16_t  nr_ringid;         /* (i/o) ring(s) we care about    */\n"
"    uint16_t  nr_cmd;            /* (i) special command            */\n"
"    uint16_t  nr_arg1;           /* (i/o) extra arguments          */\n"
"    uint16_t  nr_arg2;           /* (i/o) extra arguments          */\n"
"    uint32_t  nr_arg3;           /* (i/o) extra arguments          */\n"
"    uint32_t  nr_flags           /* (i/o) open mode                */\n"
"    ...\n"
"};\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:574
msgid ""
"A file descriptor obtained through E<.Pa /dev/netmap> also supports the "
"ioctl supported by network devices, see E<.Xr netintro 4>."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:575
#, no-wrap
msgid "Dv NIOCGINFO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:581
msgid ""
"returns EINVAL if the named port does not support netmap.  Otherwise, it "
"returns 0 and (advisory) information about the port.  Note that all the "
"information below can change before the interface is actually put in netmap "
"mode."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:582
#, no-wrap
msgid "Pa nr_memsize"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:592
msgid ""
"indicates the size of the E<.Nm> memory region.  NICs in E<.Nm> mode all "
"share the same memory region, whereas E<.Nm VALE> ports have independent "
"regions for each port."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:592
#, no-wrap
msgid "Pa nr_tx_slots , nr_rx_slots"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:594
msgid "indicate the size of transmit and receive rings."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:594
#, no-wrap
msgid "Pa nr_tx_rings , nr_rx_rings"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:601
msgid ""
"indicate the number of transmit and receive rings.  Both ring number and "
"sizes may be configured at runtime using interface-specific functions (e.g., "
"E<.Xr ethtool 8> )."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:602
#, no-wrap
msgid "Dv NIOCREGIF"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:612
msgid ""
"binds the port named in E<.Va nr_name> to the file descriptor.  For a "
"physical device this also switches it into E<.Nm> mode, disconnecting it "
"from the host stack.  Multiple file descriptors can be bound to the same "
"port, with proper synchronization left to the user."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:621
msgid ""
"The recommended way to bind a file descriptor to a port is to use function "
"E<.Va nm_open(..)> (see E<.Sx LIBRARIES>)  which parses names to access "
"specific port types and enable features.  In the following we document the "
"main features."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:628
msgid ""
"E<.Dv NIOCREGIF can also bind a file descriptor to one endpoint of a> E<.Em "
"netmap pipe>, consisting of two netmap ports with a crossover connection.  A "
"netmap pipe share the same memory space of the parent port, and is meant to "
"enable configuration where a master process acts as a dispatcher towards "
"slave processes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:634
msgid ""
"To enable this function, the E<.Pa nr_arg1> field of the structure can be "
"used as a hint to the kernel to indicate how many pipes we expect to use, "
"and reserve extra space in the memory region."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:642
msgid ""
"On return, it gives the same info as NIOCGINFO, with E<.Pa nr_ringid> and "
"E<.Pa nr_flags> indicating the identity of the rings controlled through the "
"file descriptor."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:653
msgid ""
"E<.Va nr_flags> E<.Va nr_ringid> selects which rings are controlled through "
"this file descriptor.  Possible values of E<.Pa nr_flags> are indicated "
"below, together with the naming schemes that application libraries (such as "
"the E<.Nm nm_open> indicated below) can use to indicate the specific set of "
"rings.  In the example below, \"netmap:foo\" is any valid netmap port name."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:654
#, no-wrap
msgid "NR_REG_ALL_NIC netmap:foo"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:656
msgid "(default) all hardware ring pairs"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:656
#, no-wrap
msgid "NR_REG_SW netmap:foo^"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:658
msgid "the ``host rings'', connecting to the host stack."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:658
#, no-wrap
msgid "NR_REG_NIC_SW netmap:foo+"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:660
msgid "all hardware rings and the host rings"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:660
#, no-wrap
msgid "NR_REG_ONE_NIC netmap:foo-i"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:663
msgid "only the i-th hardware ring pair, where the number is in E<.Pa nr_ringid>;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:663
#, no-wrap
msgid "NR_REG_PIPE_MASTER netmap:foo{i"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:666
msgid ""
"the master side of the netmap pipe whose identifier (i) is in E<.Pa "
"nr_ringid>;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:666
#, no-wrap
msgid "NR_REG_PIPE_SLAVE netmap:foo}i"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:669
msgid ""
"the slave side of the netmap pipe whose identifier (i) is in E<.Pa "
"nr_ringid>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:676
msgid ""
"The identifier of a pipe must be thought as part of the pipe name, and does "
"not need to be sequential.  On return the pipe will only have a single ring "
"pair with index 0, irrespective of the value of E<.Va i>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:695
msgid ""
"By default, a E<.Xr poll 2> or E<.Xr select 2> call pushes out any pending "
"packets on the transmit ring, even if no write events are specified.  The "
"feature can be disabled by or-ing E<.Va NETMAP_NO_TX_POLL> to the value "
"written to E<.Va nr_ringid>.  When this feature is used, packets are "
"transmitted only on E<.Va ioctl(NIOCTXSYNC)> or E<.Va select() /> E<.Va "
"poll()> are called with a write event (POLLOUT/wfdset) or a full ring."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:700
msgid ""
"When registering a virtual interface that is dynamically created to a E<.Xr "
"vale 4> switch, we can specify the desired number of rings (1 by default, "
"and currently up to 16) on it using nr_tx_rings and nr_rx_rings fields."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:700
#, no-wrap
msgid "Dv NIOCTXSYNC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:703
msgid ""
"tells the hardware of new packets to transmit, and updates the number of "
"slots available for transmission."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:703
#, no-wrap
msgid "Dv NIOCRXSYNC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:706
msgid ""
"tells the hardware of consumed packets, and asks for newly available "
"packets."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:707
#, no-wrap
msgid "SELECT, POLL, EPOLL, KQUEUE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:725
msgid ""
"E<.Xr select 2> and E<.Xr poll 2> on a E<.Nm> file descriptor process rings "
"as indicated in E<.Sx TRANSMIT RINGS> and E<.Sx RECEIVE RINGS>, respectively "
"when write (POLLOUT) and read (POLLIN) events are requested.  Both block if "
"no slots are available in the ring E<.Va ( ring-E<gt>cur == "
"ring-E<gt>tail>).  Depending on the platform, E<.Xr epoll 7> and E<.Xr "
"kqueue 2> are supported too."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:748
msgid ""
"Packets in transmit rings are normally pushed out (and buffers reclaimed) "
"even without requesting write events.  Passing the E<.Dv NETMAP_NO_TX_POLL> "
"flag to E<.Em NIOCREGIF> disables this feature.  By default, receive rings "
"are processed only if read events are requested.  Passing the E<.Dv "
"NETMAP_DO_RX_POLL> flag to E<.Em NIOCREGIF updates receive rings even "
"without read events.> Note that on E<.Xr epoll 7> and E<.Xr kqueue 2>, E<.Dv "
"NETMAP_NO_TX_POLL> and E<.Dv NETMAP_DO_RX_POLL> only have an effect when "
"some event is posted for the file descriptor."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:748
#, no-wrap
msgid "LIBRARIES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:753
msgid ""
"The E<.Nm> API is supposed to be used directly, both because of its "
"simplicity and for efficient integration with applications."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:755
msgid "For convenience, the"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:765
msgid ""
"header provides a few macros and functions to ease creating a file "
"descriptor and doing I/O with a E<.Nm> port.  These are loosely modeled "
"after the E<.Xr pcap 3> API, to ease porting of libpcap-based applications "
"to E<.Nm>.  To use these extra functions, programs should"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:765
#, no-wrap
msgid "#define NETMAP_WITH_LIBS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:767
msgid "before"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:767
#, no-wrap
msgid "#include E<lt>net/netmap_user.hE<gt>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:770
msgid "The following functions are available:"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:771
#, no-wrap
msgid ""
"Va struct nm_desc * nm_open(const char *ifname, const struct nmreq *req, "
"uint64_t flags, const struct nm_desc *arg )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:775
msgid "similar to E<.Xr pcap_open_live 3>, binds a file descriptor to a port."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:776
#, no-wrap
msgid "Va ifname"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:780
msgid ""
"is a port name, in the form \"netmap:PPP\" for a NIC and \"valeSSS:PPP\" for "
"a E<.Nm VALE> port."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:780
#, no-wrap
msgid "Va req"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:785
msgid ""
"provides the initial values for the argument to the NIOCREGIF ioctl.  The "
"nm_flags and nm_ringid values are overwritten by parsing ifname and flags, "
"and other fields can be overridden through the other two arguments."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:785
#, no-wrap
msgid "Va arg"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:789
msgid ""
"points to a struct nm_desc containing arguments (e.g., from a previously "
"open file descriptor) that should override the defaults.  The fields are "
"used as described below"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:789
#, no-wrap
msgid "Va flags"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:805
msgid ""
"can be set to a combination of the following flags: E<.Va "
"NETMAP_NO_TX_POLL>, E<.Va NETMAP_DO_RX_POLL> (copied into nr_ringid); E<.Va "
"NM_OPEN_NO_MMAP> (if arg points to the same memory region, avoids the mmap "
"and uses the values from it); E<.Va NM_OPEN_IFNAME> (ignores ifname and uses "
"the values in arg); E<.Va NM_OPEN_ARG1>, E<.Va NM_OPEN_ARG2>, E<.Va "
"NM_OPEN_ARG3> (uses the fields from arg); E<.Va NM_OPEN_RING_CFG> (uses the "
"ring number and sizes from arg)."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:806
#, no-wrap
msgid "Va int nm_close(struct nm_desc *d )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:808
msgid "closes the file descriptor, unmaps memory, frees resources."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:808
#, no-wrap
msgid "Va int nm_inject(struct nm_desc *d, const void *buf, size_t size )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:813
msgid ""
"similar to E<.Va pcap_inject()>, pushes a packet to a ring, returns the size "
"of the packet is successful, or 0 on error;"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:813
#, no-wrap
msgid "Va int nm_dispatch(struct nm_desc *d, int cnt, nm_cb_t cb, u_char *arg )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:817
msgid "similar to E<.Va pcap_dispatch()>, applies a callback to incoming packets"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:817
#, no-wrap
msgid "Va u_char * nm_nextpkt(struct nm_desc *d, struct nm_pkthdr *hdr )"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:821
msgid "similar to E<.Va pcap_next()>, fetches the next packet"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:822
#, no-wrap
msgid "SUPPORTED DEVICES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:825
msgid "E<.Nm> natively supports the following devices:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:836
msgid ""
"On E<.Fx>: E<.Xr cxgbe 4>, E<.Xr em 4>, E<.Xr iflib 4> (providing igb, em "
"and lem), E<.Xr ixgbe 4>, E<.Xr ixl 4>, E<.Xr re 4>, E<.Xr vtnet 4>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:838
msgid ""
"On Linux e1000, e1000e, i40e, igb, ixgbe, ixgbevf, r8169, virtio_net, "
"vmxnet3."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:848
msgid ""
"NICs without native support can still be used in E<.Nm> mode through "
"emulation.  Performance is inferior to native netmap mode but still "
"significantly higher than various raw socket types (bpf, PF_PACKET, etc.).  "
"Note that for slow devices (such as 1 Gbit/s and slower NICs, or several 10 "
"Gbit/s NICs whose hardware is unable to sustain line rate), emulated and "
"native mode will likely have similar or same throughput."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:857
msgid ""
"When emulation is in use, packet sniffer programs such as tcpdump could see "
"received packets before they are diverted by netmap.  This behaviour is not "
"intentional, being just an artifact of the implementation of emulation.  "
"Note that in case the netmap application subsequently moves packets received "
"from the emulated adapter onto the host RX ring, the sniffer will intercept "
"those packets again, since the packets are injected to the host stack as "
"they were received by the network interface."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:863
msgid ""
"Emulation is also available for devices with native netmap support, which "
"can be used for testing or performance comparison.  The sysctl variable "
"E<.Va dev.netmap.admode> globally controls how netmap mode is implemented."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:863
#, no-wrap
msgid "SYSCTL VARIABLES AND MODULE PARAMETERS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:871
msgid ""
"Some aspect of the operation of E<.Nm> are controlled through sysctl "
"variables on E<.Fx> E<.Em ( dev.netmap.*>)  and module parameters on Linux "
"E<.Em ( /sys/module/netmap/parameters/*>):"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:872
#, no-wrap
msgid "Va dev.netmap.admode: 0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:874
msgid "Controls the use of native or emulated adapter mode."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:876
msgid "0 uses the best available option;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:878
msgid "1 forces native mode and fails if not available;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:880
msgid "2 forces emulated hence never fails."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:880
#, no-wrap
msgid "Va dev.netmap.generic_rings: 1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:882
msgid "Number of rings used for emulated netmap mode"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:882
#, no-wrap
msgid "Va dev.netmap.generic_ringsize: 1024"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:884
msgid "Ring size used for emulated netmap mode"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:884
#, no-wrap
msgid "Va dev.netmap.generic_mit: 100000"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:886
msgid "Controls interrupt moderation for emulated mode"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:886
#, no-wrap
msgid "Va dev.netmap.mmap_unreg: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:887
#, no-wrap
msgid "Va dev.netmap.fwd: 0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:889
msgid "Forces NS_FORWARD mode"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:889
#, no-wrap
msgid "Va dev.netmap.flags: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:890
#, no-wrap
msgid "Va dev.netmap.txsync_retry: 2"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:891
#, no-wrap
msgid "Va dev.netmap.no_pendintr: 1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:893
msgid "Forces recovery of transmit buffers on system calls"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:893
#, no-wrap
msgid "Va dev.netmap.mitigate: 1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:895
msgid "Propagates interrupt mitigation to user processes"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:895
#, no-wrap
msgid "Va dev.netmap.no_timestamp: 0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:897
msgid "Disables the update of the timestamp in the netmap ring"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:897
#, no-wrap
msgid "Va dev.netmap.verbose: 0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:899
msgid "Verbose kernel messages"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:899
#, no-wrap
msgid "Va dev.netmap.buf_num: 163840"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:900
#, no-wrap
msgid "Va dev.netmap.buf_size: 2048"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:901
#, no-wrap
msgid "Va dev.netmap.ring_num: 200"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:902
#, no-wrap
msgid "Va dev.netmap.ring_size: 36864"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:903
#, no-wrap
msgid "Va dev.netmap.if_num: 100"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:904
#, no-wrap
msgid "Va dev.netmap.if_size: 1024"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:910
msgid ""
"Sizes and number of objects (netmap_if, netmap_ring, buffers)  for the "
"global memory region.  The only parameter worth modifying is E<.Va "
"dev.netmap.buf_num> as it impacts the total amount of memory used by netmap."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:910
#, no-wrap
msgid "Va dev.netmap.buf_curr_num: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:911
#, no-wrap
msgid "Va dev.netmap.buf_curr_size: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:912
#, no-wrap
msgid "Va dev.netmap.ring_curr_num: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:913
#, no-wrap
msgid "Va dev.netmap.ring_curr_size: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:914
#, no-wrap
msgid "Va dev.netmap.if_curr_num: 0"
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:915
#, no-wrap
msgid "Va dev.netmap.if_curr_size: 0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:917
msgid "Actual values in use."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:917
#, no-wrap
msgid "Va dev.netmap.bridge_batch: 1024"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:923
msgid ""
"Batch size used when moving packets across a E<.Nm VALE> switch.  Values "
"above 64 generally guarantee good performance."
msgstr ""

#. type: It
#: /usr/src/share/man/man4/netmap.4:923
#, no-wrap
msgid "Va dev.netmap.ptnet_vnet_hdr: 1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:925
msgid "Allow ptnet devices to use virtio-net headers"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:926
#, no-wrap
msgid "SYSTEM CALLS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:940
msgid ""
"E<.Nm> uses E<.Xr select 2>, E<.Xr poll 2>, E<.Xr epoll 7> and E<.Xr kqueue "
"2> to wake up processes when significant events occur, and E<.Xr mmap 2> to "
"map memory.  E<.Xr ioctl 2> is used to configure ports and E<.Nm VALE "
"switches>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:948
msgid ""
"Applications may need to create threads and bind them to specific cores to "
"improve performance, using standard OS primitives, see E<.Xr pthread 3>.  In "
"particular, E<.Xr pthread_setaffinity_np 3> may be of use."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:948
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:949
#, no-wrap
msgid "TEST PROGRAMS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:962
msgid ""
"E<.Nm> comes with a few programs that can be used for testing or simple "
"applications.  See the E<.Pa examples/> directory in E<.Nm> distributions, "
"or E<.Pa tools/tools/netmap/> directory in E<.Fx> distributions."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:965
msgid "E<.Xr pkt-gen 8> is a general purpose traffic source/sink."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:967
msgid "As an example"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:967
#, no-wrap
msgid "pkt-gen -i ix0 -f tx -l 60"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:969
msgid "can generate an infinite stream of minimum size packets, and"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:969
#, no-wrap
msgid "pkt-gen -i ix0 -f rx"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:973
msgid ""
"is a traffic sink.  Both print traffic statistics, to help monitor how the "
"system performs."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:977
msgid ""
"E<.Xr pkt-gen 8> has many options can be uses to set packet sizes, "
"addresses, rates, and use multiple send/receive threads and cores."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:984
msgid ""
"E<.Xr bridge 4> is another test program which interconnects two E<.Nm> "
"ports.  It can be used for transparent forwarding between interfaces, as in"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:984
#, no-wrap
msgid "bridge -i netmap:ix0 -i netmap:ix1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:986
msgid "or even connect the NIC to the host stack using netmap"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:986
#, no-wrap
msgid "bridge -i netmap:ix0"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:987
#, no-wrap
msgid "USING THE NATIVE API"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:989
msgid "The following code implements a traffic generator"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:999
#, no-wrap
msgid ""
"#include E<lt>net/netmap_user.hE<gt>\n"
"\\&...\n"
"void sender(void)\n"
"{\n"
"    struct netmap_if *nifp;\n"
"    struct netmap_ring *ring;\n"
"    struct nmreq nmr;\n"
"    struct pollfd fds;\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1021
#, no-wrap
msgid ""
"    fd = open(\"/dev/netmap\", O_RDWR);\n"
"    bzero(&nmr, sizeof(nmr));\n"
"    strcpy(nmr.nr_name, \"ix0\");\n"
"    nmr.nm_version = NETMAP_API;\n"
"    ioctl(fd, NIOCREGIF, &nmr);\n"
"    p = mmap(0, nmr.nr_memsize, fd);\n"
"    nifp = NETMAP_IF(p, nmr.nr_offset);\n"
"    ring = NETMAP_TXRING(nifp, 0);\n"
"    fds.fd = fd;\n"
"    fds.events = POLLOUT;\n"
"    for (;;) {\n"
"\tpoll(&fds, 1, -1);\n"
"\twhile (!nm_ring_empty(ring)) {\n"
"\t    i = ring-E<gt>cur;\n"
"\t    buf = NETMAP_BUF(ring, ring-E<gt>slot[i].buf_index);\n"
"\t    ... prepare packet in buf ...\n"
"\t    ring-E<gt>slot[i].len = ... packet length ...\n"
"\t    ring-E<gt>head = ring-E<gt>cur = nm_ring_next(ring, i);\n"
"\t}\n"
"    }\n"
"}\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:1022
#, no-wrap
msgid "HELPER FUNCTIONS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1024
msgid "A simple receiver can be implemented using the helper functions"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1045
#, no-wrap
msgid ""
"#define NETMAP_WITH_LIBS\n"
"#include E<lt>net/netmap_user.hE<gt>\n"
"\\&...\n"
"void receiver(void)\n"
"{\n"
"    struct nm_desc *d;\n"
"    struct pollfd fds;\n"
"    u_char *buf;\n"
"    struct nm_pkthdr h;\n"
"    ...\n"
"    d = nm_open(\"netmap:ix0\", NULL, 0, 0);\n"
"    fds.fd = NETMAP_FD(d);\n"
"    fds.events = POLLIN;\n"
"    for (;;) {\n"
"\tpoll(&fds, 1, -1);\n"
"        while ( (buf = nm_nextpkt(d, &h)) )\n"
"\t    consume_pkt(buf, h-E<gt>len);\n"
"    }\n"
"    nm_close(d);\n"
"}\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:1046
#, no-wrap
msgid "ZERO-COPY FORWARDING"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1052
msgid ""
"Since physical interfaces share the same memory region, it is possible to do "
"packet forwarding between ports swapping buffers.  The buffer from the "
"transmit ring is used to replenish the receive ring:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1067
#, no-wrap
msgid ""
"    uint32_t tmp;\n"
"    struct netmap_slot *src, *dst;\n"
"    ...\n"
"    src = &src_ring-E<gt>slot[rxr-E<gt>cur];\n"
"    dst = &dst_ring-E<gt>slot[txr-E<gt>cur];\n"
"    tmp = dst-E<gt>buf_idx;\n"
"    dst-E<gt>buf_idx = src-E<gt>buf_idx;\n"
"    dst-E<gt>len = src-E<gt>len;\n"
"    dst-E<gt>flags = NS_BUF_CHANGED;\n"
"    src-E<gt>buf_idx = tmp;\n"
"    src-E<gt>flags = NS_BUF_CHANGED;\n"
"    rxr-E<gt>head = rxr-E<gt>cur = nm_ring_next(rxr, rxr-E<gt>cur);\n"
"    txr-E<gt>head = txr-E<gt>cur = nm_ring_next(txr, txr-E<gt>cur);\n"
"    ...\n"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:1068
#, no-wrap
msgid "ACCESSING THE HOST STACK"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1071
msgid ""
"The host stack is for all practical purposes just a regular ring pair, which "
"you can access with the netmap API (e.g., with"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:1071
#, no-wrap
msgid "nm_open(\"netmap:eth0^\", ... ) ;"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1076
msgid ""
"All packets that the host would send to an interface in E<.Nm> mode end up "
"into the RX ring, whereas all packets queued to the TX ring are send up to "
"the host stack."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:1076
#, no-wrap
msgid "VALE SWITCH"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1081
msgid ""
"A simple way to test the performance of a E<.Nm VALE> switch is to attach a "
"sender and a receiver to it, e.g., running the following in two different "
"terminals:"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:1081
#, no-wrap
msgid "pkt-gen -i vale1:a -f rx # receiver"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:1082
#, no-wrap
msgid "pkt-gen -i vale1:b -f tx # sender"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1085
msgid ""
"The same example can be used to test netmap pipes, by simply changing port "
"names, e.g.,"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:1085
#, no-wrap
msgid "pkt-gen -i vale2:x{3 -f rx # receiver on the master side"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:1086
#, no-wrap
msgid "pkt-gen -i vale2:x}3 -f tx # sender on the slave side"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1090
msgid "The following command attaches an interface and the host stack to a switch:"
msgstr ""

#. type: Dl
#: /usr/src/share/man/man4/netmap.4:1090
#, no-wrap
msgid "vale-ctl -h vale2:em0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1095
msgid ""
"Other E<.Nm> clients attached to the same switch can now communicate with "
"the network card or the host."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:1095
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1102
msgid ""
"E<.Xr vale 4>, E<.Xr vale-ctl 4>, E<.Xr bridge 8>, E<.Xr lb 8>, E<.Xr "
"nmreplay 8>, E<.Xr pkt-gen 8>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1104
msgid "E<.Pa http://info.iet.unipi.it/~luigi/netmap/>"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1107
msgid ""
"Luigi Rizzo, Revisiting network I/O APIs: the netmap framework, "
"Communications of the ACM, 55 (3), pp.45-51, March 2012"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1110
msgid ""
"Luigi Rizzo, netmap: a novel framework for fast packet I/O, Usenix ATC'12, "
"June 2012, Boston"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1114
msgid ""
"Luigi Rizzo, Giuseppe Lettieri, VALE, a switched ethernet for virtual "
"machines, ACM CoNEXT'12, December 2012, Nice"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1118
msgid ""
"Luigi Rizzo, Giuseppe Lettieri, Vincenzo Maffione, Speeding up packet I/O in "
"virtual machines, ACM/IEEE ANCS'13, October 2013, San Jose"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:1118
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1131
msgid ""
"E<.An -nosplit> The E<.Nm> framework has been originally designed and "
"implemented at the Universita` di Pisa in 2011 by E<.An Luigi Rizzo>, and "
"further extended with help from E<.An Matteo Landi>, E<.An Gaetano Catalli>, "
"E<.An Giuseppe Lettieri>, and E<.An Vincenzo Maffione>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1137
msgid ""
"E<.Nm> and E<.Nm VALE> have been funded by the European Commission within "
"FP7 Projects CHANGE (257422) and OPENLAB (287581)."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man4/netmap.4:1137
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1145
msgid ""
"No matter how fast the CPU and OS are, achieving line rate on 10G and faster "
"interfaces requires hardware with sufficient performance.  Several NICs are "
"unable to sustain line rate with small packet sizes.  Insufficient PCIe or "
"memory bandwidth can also cause reduced performance."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1151
msgid ""
"Another frequent reason for low performance is the use of flow control on "
"the link: a slow receiver can limit the transmit speed.  Be sure to disable "
"flow control when running high speed experiments."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man4/netmap.4:1151
#, no-wrap
msgid "SPECIAL NIC FEATURES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1155
msgid ""
"E<.Nm> is orthogonal to some NIC features such as multiqueue, schedulers, "
"packet filters."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1164
msgid ""
"Multiple transmit and receive rings are supported natively and can be "
"configured with ordinary OS tools, such as E<.Xr ethtool 8> or "
"device-specific sysctl variables.  The same goes for Receive Packet Steering "
"(RPS)  and filtering of incoming traffic."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man4/netmap.4:1172
msgid ""
"E<.Nm> E<.Em does not use> features such as E<.Em checksum offloading , TCP "
"segmentation offloading>, E<.Em encryption , VLAN "
"encapsulation/decapsulation>, etc.  When using netmap to exchange packets "
"with the host stack, make sure to disable these features."
msgstr ""
