# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.bin/gprof/gprof.1:31
#, no-wrap
msgid "November 27, 2017"
msgstr ""

#. type: Dt
#: /usr/src/usr.bin/gprof/gprof.1:32
#, no-wrap
msgid "GPROF 1"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:36
msgid "E<.Nm gprof>"
msgstr ""

#. type: Nd
#: /usr/src/usr.bin/gprof/gprof.1:36
#, no-wrap
msgid "display call graph profile data"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:37
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:47
msgid ""
"E<.Nm> E<.Op Fl abKlLsuz> E<.Op Fl C Ar count> E<.Op Fl e Ar name> E<.Op Fl "
"E Ar name> E<.Op Fl f Ar name> E<.Op Fl F Ar name> E<.Op Fl k Ar fromname "
"toname> E<.Op Ar a.out Op Ar a.out.gmon ...>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:47
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:87
msgid ""
"The E<.Nm> utility produces an execution profile of C, Pascal, or Fortran77 "
"programs.  The effect of called routines is incorporated in the profile of "
"each caller.  The profile data is taken from the call graph profile file "
"which is created by programs that are compiled with the E<.Fl pg> option of "
"E<.Xr cc 1>, E<.Xr pc 1>, and E<.Xr f77 1>.  The E<.Fl pg> option also links "
"in versions of the library routines that are compiled for profiling.  By "
"convention these libraries have their name suffixed with E<.Pa _p>, i.e., "
"the profiled version of E<.Pa libc.a> is E<.Pa libc_p.a> and if you specify "
"libraries directly to the compiler or linker you can use E<.Fl l Ns Ar c_p> "
"instead of E<.Fl l Ns Ar c>.  Read the given object file (the default is "
"E<.Pa a.out>)  and establishes the relation between its symbol table and the "
"call graph profile.  The default graph profile file name is the name of the "
"executable with the suffix E<.Pa .gmon> appended.  If more than one profile "
"file is specified, the E<.Nm> output shows the sum of the profile "
"information in the given profile files."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:101
msgid ""
"The E<.Nm> utility calculates the amount of time spent in each routine.  "
"Next, these times are propagated along the edges of the call graph.  Cycles "
"are discovered, and calls into a cycle are made to share the time of the "
"cycle.  The first listing shows the functions sorted according to the time "
"they represent including the time of their call graph descendants.  Below "
"each function entry is shown its (direct) call graph children, and how their "
"times are propagated to this function.  A similar display above the function "
"shows how this function's time and the time of its descendants is propagated "
"to its (direct) call graph parents."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:105
msgid ""
"Cycles are also shown, with an entry for the cycle as a whole and a listing "
"of the members of the cycle and their contributions to the time and call "
"counts of the cycle."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:123
msgid ""
"Second, a flat profile is given, similar to that provided by E<.Xr prof 1>.  "
"This listing gives the total execution times, the call counts, the time that "
"the call spent in the routine itself, and the time that the call spent in "
"the routine itself including its descendants.  The units for the per-call "
"times are normally milliseconds, but they are nanoseconds if the profiling "
"clock frequency is 10 million or larger, and if a function appears to be "
"never called then its total self time is printed as a percentage in the self "
"time per call column.  The very high profiling clock frequencies needed to "
"get sufficient accuracy in the per-call times for short-lived programs are "
"only implemented for E<.Dq high resolution> (non-statistical) kernel "
"profiling."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:125
msgid "Finally, an index of the function names is provided."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:127
msgid "The following options are available:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:128
#, no-wrap
msgid "Fl a"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:135
msgid ""
"Suppress the printing of statically declared functions.  If this option is "
"given, all relevant information about the static function (e.g., time "
"samples, calls to other functions, calls from other functions)  belongs to "
"the function loaded just before the static function in the E<.Pa a.out> "
"file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:135
#, no-wrap
msgid "Fl b"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:137
msgid "Suppress the printing of a description of each field in the profile."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:137
#, no-wrap
msgid "Fl C Ar count"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:145
msgid ""
"Find a minimal set of arcs that can be broken to eliminate all cycles with "
"E<.Ar count> or more members.  Caution: the algorithm used to break cycles "
"is exponential, so using this option may cause E<.Nm> to run for a very long "
"time."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:145
#, no-wrap
msgid "Fl e Ar name"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:158
msgid ""
"Suppress the printing of the graph profile entry for routine E<.Ar name> and "
"all its descendants (unless they have other ancestors that are not "
"suppressed).  More than one E<.Fl e> option may be given.  Only one E<.Ar "
"name> may be given with each E<.Fl e> option."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:158
#, no-wrap
msgid "Fl E Ar name"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:172
msgid ""
"Suppress the printing of the graph profile entry for routine E<.Ar name> "
"(and its descendants) as E<.Fl e>, above, and also excludes the time spent "
"in E<.Ar name> (and its descendants) from the total and percentage time "
"computations.  (For example, E<.Fl E> E<.Ar mcount> E<.Fl E> E<.Ar mcleanup> "
"is the default.)"
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:172
#, no-wrap
msgid "Fl f Ar name"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:184
msgid ""
"Print the graph profile entry of only the specified routine E<.Ar name> and "
"its descendants.  More than one E<.Fl f> option may be given.  Only one "
"E<.Ar name> may be given with each E<.Fl f> option."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:184
#, no-wrap
msgid "Fl F Ar name"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:206
msgid ""
"Print the graph profile entry of only the routine E<.Ar name> and its "
"descendants (as E<.Fl f>, above) and also uses only the times of the printed "
"routines in total time and percentage computations.  More than one E<.Fl F> "
"option may be given.  Only one E<.Ar name> may be given with each E<.Fl F> "
"option.  The E<.Fl F> option overrides the E<.Fl E> option."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:206
#, no-wrap
msgid "Fl k Ar fromname Ar toname"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:218
msgid ""
"Will delete any arcs from routine E<.Ar fromname> to routine E<.Ar toname>.  "
"This can be used to break undesired cycles.  More than one E<.Fl k> option "
"may be given.  Only one pair of routine names may be given with each E<.Fl "
"k> option."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:218
#, no-wrap
msgid "Fl K"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:229
msgid ""
"Gather information about symbols from the currently-running kernel using the "
"E<.Xr sysctl 3> and E<.Xr kldsym 2> interfaces.  This forces the E<.Pa "
"a.out> argument to be ignored, and allows for symbols in E<.Xr kld 4> "
"modules to be used."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:229
#, no-wrap
msgid "Fl l"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:231
msgid "Suppress the printing of the call-graph profile."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:231
#, no-wrap
msgid "Fl L"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:233
msgid "Suppress the printing of the flat profile."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:233
#, no-wrap
msgid "Fl s"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:244
msgid ""
"A profile file E<.Pa gmon.sum> is produced that represents the sum of the "
"profile information in all the specified profile files.  This summary "
"profile file may be given to later executions of gprof (probably also with a "
"E<.Fl s>)  to accumulate profile data across several runs of an E<.Pa a.out> "
"file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:244
#, no-wrap
msgid "Fl u"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:259
msgid ""
"Suppress the printing of functions whose names are not visible to C "
"programs.  For the ELF object format, this means names that contain the "
"E<.Ql .\\&> character.  For the a.out object format, it means names that do "
"not begin with a E<.Ql _> character.  All relevant information about such "
"functions belongs to the (non-suppressed) function with the next lowest "
"address.  This is useful for eliminating \"functions\" that are just labels "
"inside other functions."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:259
#, no-wrap
msgid "Fl z"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:262
msgid ""
"Display routines that have zero usage (as shown by call counts and "
"accumulated time)."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:263
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:265
#, no-wrap
msgid "Pa a.out"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:267
msgid "The namelist and text space."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:267
#, no-wrap
msgid "Pa a.out.gmon"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:269
msgid "Dynamic call graph and profile."
msgstr ""

#. type: It
#: /usr/src/usr.bin/gprof/gprof.1:269
#, no-wrap
msgid "Pa gmon.sum"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:271
msgid "Summarized dynamic call graph and profile."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:272
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#.  .Xr monitor 3 ,
#.  .Xr prof 1
#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:300
msgid ""
"E<.Xr cc 1>, E<.Xr profil 2>, E<.Xr clocks 7>, E<.Xr pmcstat 8> E<.Rs> E<.%T "
"\"An Execution Profiler for Modular Programs\"> E<.%A S. Graham> E<.%A "
"P. Kessler> E<.%A M. McKusick> E<.%J \"Software - Practice and Experience\"> "
"E<.%V 13> E<.%P pp. 671-685> E<.%D 1983> E<.Re> E<.Rs> E<.%T \"gprof: A Call "
"Graph Execution Profiler\"> E<.%A S. Graham> E<.%A P. Kessler> E<.%A "
"M. McKusick> E<.%J \"Proceedings of the SIGPLAN '82 Symposium on Compiler "
"Construction, SIGPLAN Notices\"> E<.%V 17> E<.%N 6> E<.%P pp. 120-126> E<.%D "
"June 1982> E<.Re>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:300
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:306
msgid "The E<.Nm> profiler appeared in E<.Bx 4.2>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/gprof/gprof.1:306
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:315
msgid ""
"The granularity of the sampling is shown, but remains statistical at best.  "
"We assume that the time for each execution of a function can be expressed by "
"the total time for the function divided by the number of times the function "
"is called.  Thus the time propagated along the call graph arcs to the "
"function's parents is directly proportional to the number of times that arc "
"is traversed."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:325
msgid ""
"Parents that are not themselves profiled will have the time of their "
"profiled children propagated to them, but they will appear to be "
"spontaneously invoked in the call graph listing, and will not have their "
"time propagated further.  Similarly, signal catchers, even though profiled, "
"will appear to be spontaneous (although for more obscure reasons).  Any "
"profiled children of signal catchers should have their times propagated "
"properly, unless the signal catcher was invoked during the execution of the "
"profiling routine, in which case all is lost."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/gprof/gprof.1:329
msgid ""
"The profiled program must call E<.Xr exit 3> or return normally for the "
"profiling information to be saved in the graph profile file."
msgstr ""
