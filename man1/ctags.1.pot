# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.bin/ctags/ctags.1:31
#, no-wrap
msgid "June 6, 1993"
msgstr ""

#. type: Dt
#: /usr/src/usr.bin/ctags/ctags.1:32
#, no-wrap
msgid "CTAGS 1"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:36
msgid "E<.Nm ctags>"
msgstr ""

#. type: Nd
#: /usr/src/usr.bin/ctags/ctags.1:36
#, no-wrap
msgid "create a"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:39
msgid "E<.Pa tags> file"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:39
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:44
msgid "E<.Nm> E<.Op Fl BFTaduwvx> E<.Op Fl f Ar tagsfile> E<.Ar>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:44
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:69
msgid ""
"The E<.Nm> utility makes a E<.Pa tags> file for E<.Xr ex 1> from the "
"specified C, Pascal, Fortran, E<.Xr yacc 1>, E<.Xr lex 1>, and Lisp "
"sources.  A tags file gives the locations of specified objects in a group of "
"files.  Each line of the tags file contains the object name, the file in "
"which it is defined, and a search pattern for the object definition, "
"separated by white-space.  Using the E<.Pa tags> file, E<.Xr ex 1> can "
"quickly locate these object definitions.  Depending upon the options "
"provided to E<.Nm>, objects will consist of subroutines, typedefs, defines, "
"structs, enums and unions."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:71
msgid "The following options are available:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:72
#, no-wrap
msgid "Fl B"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:75
msgid "Use backward searching patterns E<.Pq Li ?...?>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:75
#, no-wrap
msgid "Fl F"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:79
msgid "Use forward searching patterns E<.Pq Li /.../> (the default)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:79
#, no-wrap
msgid "Fl T"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:81
msgid "Do not create tags for typedefs, structs, unions, and enums."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:81
#, no-wrap
msgid "Fl a"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:85
msgid "Append to E<.Pa tags> file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:85
#, no-wrap
msgid "Fl d"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:91
msgid ""
"Create tags for E<.Li #defines> that do not take arguments; E<.Li #defines> "
"that take arguments are tagged automatically."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:91
#, no-wrap
msgid "Fl f"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:96
msgid ""
"Place the tag descriptions in a file called E<.Ar tagsfile>.  The default "
"behaviour is to place them in a file called E<.Pa tags>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:96
#, no-wrap
msgid "Fl u"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:106
msgid ""
"Update the specified files in the E<.Pa tags> file, that is, all references "
"to them are deleted, and the new values are appended to the file.  (Beware: "
"this option is implemented in a way which is rather slow; it is usually "
"faster to simply rebuild the E<.Pa tags> file.)"
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:106
#, no-wrap
msgid "Fl v"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:117
msgid ""
"An index of the form expected by E<.Xr vgrind 1> is produced on the standard "
"output.  This listing contains the object name, file name, and page number "
"(assuming 64 line pages).  Since the output will be sorted into "
"lexicographic order, it may be desired to run the output through E<.Xr sort "
"1>.  Sample use:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:120
#, no-wrap
msgid ""
"ctags -v files | sort -f E<gt> index\n"
"vgrind -x index\n"
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:121
#, no-wrap
msgid "Fl w"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:123
msgid "Suppress warning diagnostics."
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:123
#, no-wrap
msgid "Fl x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:131
msgid ""
"E<.Nm> produces a list of object names, the line number and file name on "
"which each is defined, as well as the text of that line and prints this on "
"the standard output.  This is a simple index which can be printed out as an "
"off-line readable function index."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:159
msgid ""
"Files whose names end in E<.Pa .c> or E<.Pa .h> are assumed to be C source "
"files and are searched for C style routine and macro definitions.  Files "
"whose names end in E<.Pa .y> are assumed to be E<.Xr yacc 1> source files.  "
"Files whose names end in E<.Pa .l> are assumed to be Lisp files if their "
"first non-blank character is E<.Ql \\&;>, E<.Ql \\&(>, or E<.Ql \\&[>, "
"otherwise, they are treated as E<.Xr lex 1> files.  Other files are first "
"examined to see if they contain any Pascal or Fortran routine definitions, "
"and, if not, are searched for C style definitions."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:174
msgid ""
"The tag E<.Dq Li main> is treated specially in C programs.  The tag formed "
"is created by prepending E<.Ql M> to the name of the file, with the trailing "
"E<.Pa .c> and any leading pathname components removed.  This makes use of "
"E<.Nm> practical in directories with more than one program."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:190
msgid ""
"The E<.Xr yacc 1> and E<.Xr lex 1> files each have a special tag.  E<.Dq Li "
"yyparse> is the start of the second section of the E<.Xr yacc 1> file, and "
"E<.Dq Li yylex> is the start of the second section of the E<.Xr lex 1> file."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:190
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/usr.bin/ctags/ctags.1:192
#, no-wrap
msgid "Pa tags"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:194
msgid "default output tags file"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:195
#, no-wrap
msgid "EXIT STATUS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:200
msgid ""
"The E<.Nm> utility exits with a value of 1 if an error occurred, 0 "
"otherwise.  Duplicate objects are not considered errors."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:200
#, no-wrap
msgid "COMPATIBILITY"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:207
msgid ""
"The E<.Fl t> option is a no-op for compatibility with previous versions of "
"E<.Nm> that did not create tags for typedefs, enums, structs and unions by "
"default."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:207
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:210
msgid "E<.Xr ex 1>, E<.Xr vi 1>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:210
#, no-wrap
msgid "STANDARDS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:215
msgid "The E<.Nm> utility conforms to E<.St -p1003.1-2001>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:215
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:220
msgid "The E<.Nm> utility appeared in E<.Bx 3.0>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/ctags/ctags.1:220
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:230
msgid ""
"Recognition of functions, subroutines and procedures for Fortran and Pascal "
"is done in a very simpleminded way.  No attempt is made to deal with block "
"structure; if you have two Pascal procedures in different blocks with the "
"same name you lose.  The E<.Nm> utility does not understand about Pascal "
"types."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:234
msgid ""
"The method of deciding whether to look for C, Pascal or Fortran functions is "
"a hack."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/ctags/ctags.1:251
msgid ""
"The E<.Nm> utility relies on the input being well formed, and any "
"syntactical errors will completely confuse it.  It also finds some legal "
"syntax confusing; for example, since it does not understand E<.Li #ifdef Ns "
"'s> (incidentally, that is a feature, not a bug), any code with unbalanced "
"braces inside E<.Li #ifdef Ns 's> will cause it to become somewhat "
"disoriented.  In a similar fashion, multiple line changes within a "
"definition will cause it to enter the last line of the object, rather than "
"the first, as the searching pattern.  The last line of multiple line E<.Li "
"typedef Ns 's> will similarly be noted."
msgstr ""
