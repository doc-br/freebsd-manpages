# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/bin/expr/expr.1:33
#, no-wrap
msgid "October 5, 2016"
msgstr ""

#. type: Dt
#: /usr/src/bin/expr/expr.1:34
#, no-wrap
msgid "EXPR 1"
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:36
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:38
msgid "E<.Nm expr>"
msgstr ""

#. type: Nd
#: /usr/src/bin/expr/expr.1:38
#, no-wrap
msgid "evaluate expression"
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:39
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:43
msgid "E<.Nm> E<.Op Fl e> E<.Ar expression>"
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:43
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:49
msgid ""
"The E<.Nm> utility evaluates E<.Ar expression> and writes the result on "
"standard output."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:60
msgid ""
"All operators and operands must be passed as separate arguments.  Several of "
"the operators have special meaning to command interpreters and must "
"therefore be quoted appropriately.  All integer operands are interpreted in "
"base 10 and must consist of only an optional leading minus sign followed by "
"one or more digits (unless less strict parsing has been enabled for "
"backwards compatibility with prior versions of E<.Nm> in E<.Fx>)."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:68
msgid ""
"Arithmetic operations are performed using signed integer math with a range "
"according to the C E<.Vt intmax_t> data type (the largest signed integral "
"type available).  All conversions and operations are checked for overflow.  "
"Overflow results in program termination with an error message on stdout and "
"with an error status."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:72
msgid ""
"The E<.Fl e> option enables backwards compatible behaviour as detailed "
"below."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:79
msgid ""
"Operators are listed below in order of increasing precedence; all are "
"left-associative.  Operators with equal precedence are grouped within "
"symbols E<.Ql {> and E<.Ql }>."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:80
#, no-wrap
msgid "Ar expr1 Li \\&| Ar expr2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:88
msgid ""
"Return the evaluation of E<.Ar expr1> if it is neither an empty string nor "
"zero; otherwise, returns the evaluation of E<.Ar expr2> if it is not an "
"empty string; otherwise, returns zero."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:88
#, no-wrap
msgid "Ar expr1 Li & Ar expr2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:93
msgid ""
"Return the evaluation of E<.Ar expr1> if neither expression evaluates to an "
"empty string or zero; otherwise, returns zero."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:93
#, no-wrap
msgid "Ar expr1 Bro =, E<gt>, E<gt>=, E<lt>, E<lt>=, != Brc Ar expr2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:99
msgid ""
"Return the results of integer comparison if both arguments are integers; "
"otherwise, returns the results of string comparison using the "
"locale-specific collation sequence.  The result of each comparison is 1 if "
"the specified relation is true, or 0 if the relation is false."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:99
#, no-wrap
msgid "Ar expr1 Bro +, - Brc Ar expr2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:101
msgid "Return the results of addition or subtraction of integer-valued arguments."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:101
#, no-wrap
msgid "Ar expr1 Bro *, /, % Brc Ar expr2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:103
msgid ""
"Return the results of multiplication, integer division, or remainder of "
"integer-valued arguments."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:103
#, no-wrap
msgid "Ar expr1 Li \\&: Ar expr2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:114
msgid ""
"The E<.Dq Li \\&:> operator matches E<.Ar expr1> against E<.Ar expr2>, which "
"must be a basic regular expression.  The regular expression is anchored to "
"the beginning of the string with an implicit E<.Dq Li ^>."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:125
msgid ""
"If the match succeeds and the pattern contains at least one regular "
"expression subexpression E<.Dq Li \"\\e(...\\e)\">, the string corresponding "
"to E<.Dq Li \\e1> is returned; otherwise the matching operator returns the "
"number of characters matched.  If the match fails and the pattern contains a "
"regular expression subexpression the null string is returned; otherwise 0."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:128
msgid "Parentheses are used for grouping in the usual manner."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:136
msgid ""
"The E<.Nm> utility makes no lexical distinction between arguments which may "
"be operators and arguments which may be operands.  An operand which is "
"lexically identical to an operator will be considered a syntax error.  See "
"the examples below for a work-around."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:142
msgid ""
"The syntax of the E<.Nm> command in general is historic and inconvenient.  "
"New applications are advised to use shell arithmetic rather than E<.Nm>."
msgstr ""

#. type: Ss
#: /usr/src/bin/expr/expr.1:142
#, no-wrap
msgid "Compatibility with previous implementations"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:185
msgid ""
"Unless E<.Fx> 4.x compatibility is enabled, this version of E<.Nm> adheres "
"to the E<.Tn POSIX> Utility Syntax Guidelines, which require that a leading "
"argument beginning with a minus sign be considered an option to the "
"program.  The standard E<.Fl Fl> syntax may be used to prevent this "
"interpretation.  However, many historic implementations of E<.Nm>, including "
"the one in previous versions of E<.Fx>, will not permit this syntax.  See "
"the examples below for portable ways to guarantee the correct "
"interpretation.  The E<.Xr check_utility_compat 3> function (with a E<.Fa "
"utility> argument of E<.Dq Li expr>)  is used to determine whether backwards "
"compatibility mode should be enabled.  This feature is intended for use as a "
"transition and debugging aid, when E<.Nm> is used in complex scripts which "
"cannot easily be recast to avoid the non-portable usage.  Enabling backwards "
"compatibility mode also implicitly enables the E<.Fl e> option, since this "
"matches the historic behavior of E<.Nm> in E<.Fx . This option makes number "
"parsing less strict and permits leading> white space and an optional leading "
"plus sign.  In addition, empty operands have an implied value of zero in "
"numeric context.  For historical reasons, defining the environment variable "
"E<.Ev EXPR_COMPAT> also enables backwards compatibility mode."
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:185
#, no-wrap
msgid "ENVIRONMENT"
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:187
#, no-wrap
msgid "Ev EXPR_COMPAT"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:189
msgid "If set, enables backwards compatibility mode."
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:190
#, no-wrap
msgid "EXIT STATUS"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:194
msgid "The E<.Nm> utility exits with one of the following values:"
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:195
#, no-wrap
msgid "0"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:197
msgid "the expression is neither an empty string nor 0."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:197
#, no-wrap
msgid "1"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:199
msgid "the expression is an empty string or 0."
msgstr ""

#. type: It
#: /usr/src/bin/expr/expr.1:199
#, no-wrap
msgid "2"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:201
msgid "the expression is invalid."
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:202
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:209
msgid ""
"The following example (in E<.Xr sh 1> syntax) adds one to the variable E<.Va "
"a>:"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:209
#, no-wrap
msgid "a=$(expr $a + 1)"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:219
msgid ""
"This will fail if the value of E<.Va a> is a negative number.  To protect "
"negative values of E<.Va a> from being interpreted as options to the E<.Nm> "
"command, one might rearrange the expression:"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:219
#, no-wrap
msgid "a=$(expr 1 + $a)"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:222
msgid "More generally, parenthesize possibly-negative values:"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:222
#, no-wrap
msgid "a=$(expr \\e( $a \\e) + 1)"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:225
msgid "With shell arithmetic, no escaping is required:"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:225
#, no-wrap
msgid "a=$((a + 1))"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:238
msgid ""
"This example prints the filename portion of a pathname stored in variable "
"E<.Va a>.  Since E<.Va a> might represent the path E<.Pa />, it is necessary "
"to prevent it from being interpreted as the division operator.  The E<.Li "
"//> characters resolve this ambiguity."
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:238
#, no-wrap
msgid "expr \\*q//$a\\*q \\&: '.*/\\e(.*\\e)'"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:243
msgid "With modern E<.Xr sh 1> syntax,"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:243
#, no-wrap
msgid "\\*q${a##*/}\\*q"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:245
msgid "expands to the same value."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:257
msgid ""
"The following examples output the number of characters in variable E<.Va "
"a>.  Again, if E<.Va a> might begin with a hyphen, it is necessary to "
"prevent it from being interpreted as an option to E<.Nm>, and E<.Va a> might "
"be interpreted as an operator."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:261
msgid "To deal with all of this, a complicated command is required:"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:261
#, no-wrap
msgid "expr \\e( \\*qX$a\\*q \\&: \\*q.*\\*q \\e) - 1"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:266
msgid "With modern E<.Xr sh 1> syntax, this can be done much more easily:"
msgstr ""

#. type: Dl
#: /usr/src/bin/expr/expr.1:266
#, no-wrap
msgid "${#a}"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:268
msgid "expands to the required number."
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:269
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:273
msgid "E<.Xr sh 1>, E<.Xr test 1>, E<.Xr check_utility_compat 3>"
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:273
#, no-wrap
msgid "STANDARDS"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:279
msgid ""
"The E<.Nm> utility conforms to E<.St -p1003.1-2008>, provided that backwards "
"compatibility mode is not enabled."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:281
msgid ""
"Backwards compatibility mode performs less strict checks of numeric "
"arguments:"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:284
msgid "An empty operand string is interpreted as 0."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:289
msgid ""
"Leading white space and/or a plus sign before an otherwise valid positive "
"numeric operand are allowed and will be ignored."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:295
msgid ""
"The extended arithmetic range and overflow checks do not conflict with "
"POSIX's requirement that arithmetic be done using signed longs, since they "
"only make a difference to the result in cases where using signed longs would "
"give undefined behavior."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:308
msgid ""
"According to the E<.Tn POSIX> standard, the use of string arguments E<.Va "
"length>, E<.Va substr>, E<.Va index>, or E<.Va match> produces undefined "
"results.  In this version of E<.Nm>, these arguments are treated just as "
"their respective string values."
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:312
msgid "The E<.Fl e> flag is an extension."
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:312
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:322
msgid ""
"An E<.Nm> utility first appeared in the Programmer's Workbench (PWB/UNIX).  "
"A public domain version of E<.Nm> written by E<.An Pace Willisson Aq Mt "
"pace@blitz.com> appeared in E<.Bx 386 0.1>."
msgstr ""

#. type: Sh
#: /usr/src/bin/expr/expr.1:322
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/bin/expr/expr.1:327
msgid ""
"Initial implementation by E<.An Pace Willisson Aq Mt pace@blitz.com> was "
"largely rewritten by E<.An -nosplit> E<.An J.T. Conklin Aq Mt "
"jtc@FreeBSD.org>."
msgstr ""
