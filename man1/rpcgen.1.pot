# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.bin/rpcgen/rpcgen.1:5
#, no-wrap
msgid "September 2, 2005"
msgstr ""

#. type: Dt
#: /usr/src/usr.bin/rpcgen/rpcgen.1:6
#, no-wrap
msgid "RPCGEN 1"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:8
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:10
msgid "E<.Nm rpcgen>"
msgstr ""

#. type: Nd
#: /usr/src/usr.bin/rpcgen/rpcgen.1:10
#, no-wrap
msgid "an RPC protocol compiler"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:11
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#.  .SH AVAILABILITY
#.  .LP
#.  SUNWcsu
#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:53
msgid ""
"E<.Nm> E<.Ar infile> E<.Nm> E<.Op Fl a> E<.Op Fl b> E<.Op Fl C> E<.Oo> E<.Fl "
"D Ns Ar name Ns Op Ar =value> E<.Oc> E<.Op Fl i Ar size> E<.Op Fl I Fl P Op "
"Fl K Ar seconds> E<.Op Fl L> E<.Op Fl M> E<.Op Fl N> E<.Op Fl T> E<.Op Fl Y "
"Ar pathname> E<.Ar infile> E<.Nm> E<.Oo> E<.Fl c |> E<.Fl h |> E<.Fl l |> "
"E<.Fl m |> E<.Fl t |> E<.Fl \\&Sc |> E<.Fl \\&Ss |> E<.Fl \\&Sm> E<.Oc> "
"E<.Op Fl o Ar outfile> E<.Op Ar infile> E<.Nm> E<.Op Fl s Ar nettype> E<.Op "
"Fl o Ar outfile> E<.Op Ar infile> E<.Nm> E<.Op Fl n Ar netid> E<.Op Fl o Ar "
"outfile> E<.Op Ar infile>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:53
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:64
msgid ""
"The E<.Nm> utility is a tool that generates C code to implement an E<.Tn "
"RPC> protocol.  The input to E<.Nm> is a language similar to C known as "
"E<.Tn RPC> Language (Remote Procedure Call Language)."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:90
msgid ""
"The E<.Nm> utility is normally used as in the first synopsis where it takes "
"an input file and generates three output files.  If the E<.Ar infile> is "
"named E<.Pa proto.x>, then E<.Nm> generates a header in E<.Pa proto.h>, XDR "
"routines in E<.Pa proto_xdr.c>, server-side stubs in E<.Pa proto_svc.c>, and "
"client-side stubs in E<.Pa proto_clnt.c>.  With the E<.Fl T> option, it also "
"generates the E<.Tn RPC> dispatch table in E<.Pa proto_tbl.i>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:114
msgid ""
"The E<.Nm> utility can also generate sample client and server files that can "
"be customized to suit a particular application.  The E<.Fl \\&Sc>, E<.Fl "
"\\&Ss> and E<.Fl \\&Sm> options generate sample client, server and makefile, "
"respectively.  The E<.Fl a> option generates all files, including sample "
"files.  If the E<.Ar infile> is E<.Pa proto.x>, then the client side sample "
"file is written to E<.Pa proto_client.c>, the server side sample file to "
"E<.Pa proto_server.c> and the sample makefile to E<.Pa makefile.proto>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:148
msgid ""
"If option E<.Fl I> is set, the server created can be started both by the "
"port monitors (for example, E<.Xr inetd 8>)  or by itself.  When it is "
"started by a port monitor, it creates servers only for the transport for "
"which the file descriptor E<.Em 0> was passed.  The name of the transport "
"may be specified by setting up the environment variable E<.Ev NLSPROVIDER>.  "
"When the server generated by E<.Nm> is executed, it creates server handles "
"for all the transports specified in E<.Ev NETPATH> environment variable, or "
"if it is unset, it creates server handles for all the visible transports "
"from E<.Pa /etc/netconfig> file.  Note: the transports are chosen at run "
"time and not at compile time.  When the server is self-started, it "
"backgrounds itself by default.  A special define symbol E<.Em RPC_SVC_FG> "
"can be used to run the server process in foreground."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:161
msgid ""
"The second synopsis provides special features which allow for the creation "
"of more sophisticated E<.Tn RPC> servers.  These features include support "
"for user provided E<.Em #defines> and E<.Tn RPC> dispatch tables.  The "
"entries in the E<.Tn RPC> dispatch table contain:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:164
msgid "pointers to the service routine corresponding to that procedure,"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:166
msgid "a pointer to the input and output arguments,"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:168
msgid "the size of these routines."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:173
msgid ""
"A server can use the dispatch table to check authorization and then to "
"execute the service routine; a client library may use it to deal with the "
"details of storage management and XDR data conversion."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:199
msgid ""
"The other three synopses shown above are used when one does not want to "
"generate all the output files, but only a particular one.  See the E<.Sx "
"EXAMPLES> section below for examples of E<.Nm> usage.  When E<.Nm> is "
"executed with the E<.Fl s> option, it creates servers for that particular "
"class of transports.  When executed with the E<.Fl n> option, it creates a "
"server for the transport specified by E<.Ar netid>.  If E<.Ar infile> is not "
"specified, E<.Nm> accepts the standard input."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:209
msgid ""
"The C preprocessor, E<.Em cc -E> is run on the input file before it is "
"actually interpreted by E<.Nm>.  For each type of output file, E<.Nm> "
"defines a special preprocessor symbol for use by the E<.Nm> programmer:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:210
#, no-wrap
msgid "RPC_HDR"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:212
msgid "defined when compiling into headers"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:212
#, no-wrap
msgid "RPC_XDR"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:214
msgid "defined when compiling into XDR routines"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:214
#, no-wrap
msgid "RPC_SVC"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:216
msgid "defined when compiling into server-side stubs"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:216
#, no-wrap
msgid "RPC_CLNT"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:218
msgid "defined when compiling into client-side stubs"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:218
#, no-wrap
msgid "RPC_TBL"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:220
msgid "defined when compiling into RPC dispatch tables"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:230
msgid ""
"Any line beginning with E<.Dq %> is passed directly into the output file, "
"uninterpreted by E<.Nm>.  To specify the path name of the C preprocessor use "
"E<.Fl Y> flag."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:245
msgid ""
"For every data type referred to in E<.Ar infile>, E<.Nm> assumes that there "
"exists a routine with the string E<.Em xdr_> prepended to the name of the "
"data type.  If this routine does not exist in the E<.Tn RPC/XDR> library, it "
"must be provided.  Providing an undefined data type allows customization of "
"E<.Xr xdr 3> routines."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:245
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:247
msgid "The following options are available:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:248
#, no-wrap
msgid "Fl a"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:250
msgid "Generate all files, including sample files."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:250
#, no-wrap
msgid "Fl b"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:256
msgid ""
"Backward compatibility mode.  Generate transport specific E<.Tn RPC> code "
"for older versions of the operating system."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:256
#, no-wrap
msgid "Fl c"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:260
msgid "Compile into E<.Tn XDR> routines."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:260
#, no-wrap
msgid "Fl C"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:263
msgid ""
"Generate ANSI C code.  This is always done, the flag is only provided for "
"backwards compatibility."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:263
#, no-wrap
msgid "Fl D Ns Ar name"
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:264
#, no-wrap
msgid "Fl D Ns Ar name=value"
msgstr ""

#. .It Fl D Ns Ar name Ns Op Ar =value
#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:278
msgid ""
"Define a symbol E<.Ar name>.  Equivalent to the E<.Em #define> directive in "
"the source.  If no E<.Ar value> is given, E<.Ar value> is defined as E<.Em "
"1>.  This option may be specified more than once."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:278
#, no-wrap
msgid "Fl h"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:285
msgid ""
"Compile into C data-definitions (a header).  E<.Fl T> option can be used in "
"conjunction to produce a header which supports E<.Tn RPC> dispatch tables."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:285
#, no-wrap
msgid "Fl i Ar size"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:289
msgid ""
"Size at which to start generating inline code.  This option is useful for "
"optimization.  The default size is 5."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:298
msgid ""
"Note: in order to provide backwards compatibility with the older E<.Nm> on "
"the E<.Fx> platform, the default is actually 0 (which means that inline code "
"generation is disabled by default).  You must specify a non-zero value "
"explicitly to override this default."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:298
#, no-wrap
msgid "Fl I"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:312
msgid ""
"Compile support for E<.Xr inetd 8> in the server side stubs.  Such servers "
"can be self-started or can be started by E<.Xr inetd 8>.  When the server is "
"self-started, it backgrounds itself by default.  A special define symbol "
"E<.Em RPC_SVC_FG> can be used to run the server process in foreground, or "
"the user may simply compile without the E<.Fl I> option."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:324
msgid ""
"If there are no pending client requests, the E<.Xr inetd 8> servers exit "
"after 120 seconds (default).  The default can be changed with the E<.Fl K> "
"option.  All the error messages for E<.Xr inetd 8> servers are always logged "
"with E<.Xr syslog 3>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:331
msgid ""
"Note: Contrary to some systems, in E<.Fx> this option is needed to generate "
"servers that can be invoked through portmonitors and E<.Xr inetd 8>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:331
#, no-wrap
msgid "Fl K Ar seconds"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:345
msgid ""
"By default, services created using E<.Nm> and invoked through port monitors "
"wait 120 seconds after servicing a request before exiting.  That interval "
"can be changed using the E<.Fl K> flag.  To create a server that exits "
"immediately upon servicing a request, use E<.Fl K Ar 0>.  To create a server "
"that never exits, the appropriate argument is E<.Fl K Ar -1>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:356
msgid ""
"When monitoring for a server, some portmonitors E<.Em always> spawn a new "
"process in response to a service request.  If it is known that a server will "
"be used with such a monitor, the server should exit immediately on "
"completion.  For such servers, E<.Nm> should be used with E<.Fl K Ar 0>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:356
#, no-wrap
msgid "Fl l"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:358
msgid "Compile into client-side stubs."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:358
#, no-wrap
msgid "Fl L"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:363
msgid ""
"When the servers are started in foreground, use E<.Xr syslog 3> to log the "
"server errors instead of printing them on the standard error."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:363
#, no-wrap
msgid "Fl m"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:372
msgid ""
"Compile into server-side stubs, but do not generate a E<.Qq main> routine.  "
"This option is useful for doing callback-routines and for users who need to "
"write their own E<.Qq main> routine to do initialization."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:372
#, no-wrap
msgid "Fl M"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:381
msgid ""
"Generate multithread-safe stubs for passing arguments and results between "
"rpcgen generated code and user written code.  This option is useful for "
"users who want to use threads in their code.  However, the E<.Xr "
"rpc_svc_calls 3> functions are not yet MT-safe, which means that rpcgen "
"generated server-side code will not be MT-safe."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:381
#, no-wrap
msgid "Fl N"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:391
msgid ""
"Allow procedures to have multiple arguments.  It also uses the style of "
"parameter passing that closely resembles C.  So, when passing an argument to "
"a remote procedure, you do not have to pass a pointer to the argument, but "
"can pass the argument itself.  This behavior is different from the old style "
"of E<.Nm> generated code.  To maintain backward compatibility, this option "
"is not the default."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:391
#, no-wrap
msgid "Fl n Ar netid"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:401
msgid ""
"Compile into server-side stubs for the transport specified by E<.Ar netid>.  "
"There should be an entry for E<.Ar netid> in the netconfig database.  This "
"option may be specified more than once, so as to compile a server that "
"serves multiple transports."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:401
#, no-wrap
msgid "Fl o Ar outfile"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:417
msgid ""
"Specify the name of the output file.  If none is specified, standard output "
"is used E<.Fl ( c>, E<.Fl h>, E<.Fl l>, E<.Fl m>, E<.Fl n>, E<.Fl s>, E<.Fl "
"\\&Sc>, E<.Fl \\&Sm>, E<.Fl \\&Ss>, and E<.Fl t> modes only)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:417
#, no-wrap
msgid "Fl P"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:421
msgid "Compile support for port monitors in the server side stubs."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:427
msgid ""
"Note: Contrary to some systems, in E<.Fx> this option is needed to generate "
"servers that can be monitored."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:433
msgid ""
"If the E<.Fl I> option has been specified, E<.Fl P> is turned off "
"automatically."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:433
#, no-wrap
msgid "Fl s Ar nettype"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:453
msgid ""
"Compile into server-side stubs for all the transports belonging to the class "
"E<.Ar nettype>.  The supported classes are E<.Em netpath>, E<.Em visible>, "
"E<.Em circuit_n>, E<.Em circuit_v>, E<.Em datagram_n>, E<.Em datagram_v>, "
"E<.Em tcp>, and E<.Em udp> (see E<.Xr rpc 3> for the meanings associated "
"with these classes).  This option may be specified more than once.  Note: "
"the transports are chosen at run time and not at compile time."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:453
#, no-wrap
msgid "Fl \\&Sc"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:455
msgid "Generate sample client code that uses remote procedure calls."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:455
#, no-wrap
msgid "Fl \\&Sm"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:459
msgid ""
"Generate a sample E<.Pa Makefile> which can be used for compiling the "
"application."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:459
#, no-wrap
msgid "Fl \\&Ss"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:461
msgid "Generate sample server code that uses remote procedure calls."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:461
#, no-wrap
msgid "Fl t"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:465
msgid "Compile into E<.Tn RPC> dispatch table."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:465
#, no-wrap
msgid "Fl T"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:469
msgid "Generate the code to support E<.Tn RPC> dispatch tables."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:487
msgid ""
"The options E<.Fl c>, E<.Fl h>, E<.Fl l>, E<.Fl m>, E<.Fl s>, E<.Fl \\&Sc>, "
"E<.Fl \\&Sm>, E<.Fl \\&Ss>, and E<.Fl t> are used exclusively to generate a "
"particular type of file, while the options E<.Fl D> and E<.Fl T> are global "
"and can be used with the other options."
msgstr ""

#. type: It
#: /usr/src/usr.bin/rpcgen/rpcgen.1:487
#, no-wrap
msgid "Fl Y Ar pathname"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:491
msgid ""
"Give the name of the directory where E<.Nm> will start looking for the "
"C-preprocessor."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:492
#, no-wrap
msgid "ENVIRONMENT"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:497
msgid ""
"If the E<.Ev RPCGEN_CPP> environment variable is set, its value is used as "
"the command line of the C preprocessor to be run on the input file."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:497
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:499
msgid "The following example:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/rpcgen/rpcgen.1:499
#, no-wrap
msgid "example% rpcgen -T prot.x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:508
msgid ""
"generates all the five files: E<.Pa prot.h>, E<.Pa prot_clnt.c>, E<.Pa "
"prot_svc.c>, E<.Pa prot_xdr.c> and E<.Pa prot_tbl.i>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:511
msgid ""
"The following example sends the C data-definitions (header)  to the standard "
"output."
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/rpcgen/rpcgen.1:511
#, no-wrap
msgid "example% rpcgen -h prot.x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:519
msgid ""
"To send the test version of the E<.Fl D Ns Ar TEST>, server side stubs for "
"all the transport belonging to the class E<.Ar datagram_n> to standard "
"output, use:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/rpcgen/rpcgen.1:519
#, no-wrap
msgid "example% rpcgen -s datagram_n -DTEST prot.x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:526
msgid ""
"To create the server side stubs for the transport indicated by E<.Ar netid> "
"tcp, use:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/rpcgen/rpcgen.1:526
#, no-wrap
msgid "example% rpcgen -n tcp -o prot_svc.c prot.x"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/rpcgen/rpcgen.1:527
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/rpcgen/rpcgen.1:536
msgid ""
"E<.Xr cc 1>, E<.Xr rpc 3>, E<.Xr rpc_svc_calls 3>, E<.Xr syslog 3>, E<.Xr "
"xdr 3>, E<.Xr inetd 8> E<.Rs> E<.%T The rpcgen chapter in the NETP manual> "
"E<.Re>"
msgstr ""
