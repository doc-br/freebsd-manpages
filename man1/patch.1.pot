# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.bin/patch/patch.1:24
#, no-wrap
msgid "August 15, 2015"
msgstr ""

#. type: Dt
#: /usr/src/usr.bin/patch/patch.1:25
#, no-wrap
msgid "PATCH 1"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:27
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:29
msgid "E<.Nm patch>"
msgstr ""

#. type: Nd
#: /usr/src/usr.bin/patch/patch.1:29
#, no-wrap
msgid "apply a diff file to an original"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:30
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:50
msgid ""
"E<.Nm> E<.Bk -words> E<.Op Fl bCcEeflNnRstuv> E<.Op Fl B Ar backup-prefix> "
"E<.Op Fl D Ar symbol> E<.Op Fl d Ar directory> E<.Op Fl F Ar max-fuzz> E<.Op "
"Fl i Ar patchfile> E<.Op Fl o Ar out-file> E<.Op Fl p Ar strip-count> E<.Op "
"Fl r Ar rej-name> E<.Op Fl V Cm t | nil | never | none> E<.Op Fl x Ar "
"number> E<.Op Fl z Ar backup-ext> E<.Op Fl Fl posix> E<.Op Ar origfile Op Ar "
"patchfile> E<.Ek> E<.Nm> E<.Pf \\*(Lt Ar patchfile>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:50
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:60
msgid ""
"E<.Nm> will take a patch file containing any of the four forms of difference "
"listing produced by the E<.Xr diff 1> program and apply those differences to "
"an original file, producing a patched version.  If E<.Ar patchfile> is "
"omitted, or is a hyphen, the patch will be read from the standard input."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:75
msgid ""
"E<.Nm> will attempt to determine the type of the diff listing, unless "
"overruled by a E<.Fl c>, E<.Fl e>, E<.Fl n>, or E<.Fl u> option.  Context "
"diffs (old-style, new-style, and unified) and normal diffs are applied "
"directly by the E<.Nm> program itself, whereas ed diffs are simply fed to "
"the E<.Xr ed 1> editor via a pipe."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:87
msgid ""
"If the E<.Ar patchfile> contains more than one patch, E<.Nm> will try to "
"apply each of them as if they came from separate patch files.  This means, "
"among other things, that it is assumed that the name of the file to patch "
"must be determined for each diff listing, and that the garbage before each "
"diff listing will be examined for interesting things such as file names and "
"revision level (see the section on E<.Sx Filename Determination> below)."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:89
msgid "The options are as follows:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:90 /usr/src/usr.bin/patch/patch.1:116 /usr/src/usr.bin/patch/patch.1:129 /usr/src/usr.bin/patch/patch.1:148 /usr/src/usr.bin/patch/patch.1:173 /usr/src/usr.bin/patch/patch.1:197 /usr/src/usr.bin/patch/patch.1:202 /usr/src/usr.bin/patch/patch.1:272 /usr/src/usr.bin/patch/patch.1:277 /usr/src/usr.bin/patch/patch.1:298 /usr/src/usr.bin/patch/patch.1:338 /usr/src/usr.bin/patch/patch.1:345
#, no-wrap
msgid "Xo"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:99
msgid ""
"E<.Fl B Ar backup-prefix>, E<.Fl Fl prefix Ar backup-prefix> E<.Xc> Causes "
"the next argument to be interpreted as a prefix to the backup file name.  If "
"this argument is specified, any argument to E<.Fl z> will be ignored."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:99
#, no-wrap
msgid "Fl b , Fl Fl backup"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:110
msgid ""
"Save a backup copy of the file before it is modified.  By default the "
"original file is saved with a backup extension of E<.Qq .orig> unless the "
"file already has a numbered backup, in which case a numbered backup is "
"made.  This is equivalent to specifying E<.Qo Fl V Cm existing Qc>.  This "
"option is currently the default, unless E<.Fl -posix> is specified."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:110
#, no-wrap
msgid "Fl C , Fl Fl check , Fl Fl dry-run"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:112
msgid "Checks that the patch would apply cleanly, but does not modify anything."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:112
#, no-wrap
msgid "Fl c , Fl Fl context"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:116
msgid "Forces E<.Nm> to interpret the patch file as a context diff."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:129
msgid ""
"E<.Fl D Ar symbol>, E<.Fl Fl ifdef Ar symbol> E<.Xc> Causes E<.Nm> to use "
"the E<.Qq #ifdef...#endif> construct to mark changes.  The argument "
"following will be used as the differentiating symbol.  Note that, unlike the "
"C compiler, there must be a space between the E<.Fl D> and the argument."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:137
msgid ""
"E<.Fl d Ar directory>, E<.Fl Fl directory Ar directory> E<.Xc> Causes E<.Nm> "
"to interpret the next argument as a directory, and change the working "
"directory to it before doing anything else."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:137
#, no-wrap
msgid "Fl E , Fl Fl remove-empty-files"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:142
msgid ""
"Causes E<.Nm> to remove output files that are empty after the patches have "
"been applied.  This option is useful when applying patches that create or "
"remove files."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:142
#, no-wrap
msgid "Fl e , Fl Fl ed"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:148
msgid "Forces E<.Nm> to interpret the patch file as an E<.Xr ed 1> script."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:159
msgid ""
"E<.Fl F Ar max-fuzz>, E<.Fl Fl fuzz Ar max-fuzz> E<.Xc> Sets the maximum "
"fuzz factor.  This option only applies to context diffs, and causes E<.Nm> "
"to ignore up to that many lines in looking for places to install a hunk.  "
"Note that a larger fuzz factor increases the odds of a faulty patch.  The "
"default fuzz factor is 2, and it may not be set to more than the number of "
"lines of context in the context diff, ordinarily 3."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:159
#, no-wrap
msgid "Fl f , Fl Fl force"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:173
msgid ""
"Forces E<.Nm> to assume that the user knows exactly what he or she is doing, "
"and to not ask any questions.  It assumes the following: skip patches for "
"which a file to patch cannot be found; patch files even though they have the "
"wrong version for the E<.Qq Prereq:> line in the patch; and assume that "
"patches are not reversed even if they look like they are.  This option does "
"not suppress commentary; use E<.Fl s> for that."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:180
msgid ""
"E<.Fl i Ar patchfile>, E<.Fl Fl input Ar patchfile> E<.Xc> Causes the next "
"argument to be interpreted as the input file name (i.e., a patchfile).  This "
"option may be specified multiple times."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:180
#, no-wrap
msgid "Fl l , Fl Fl ignore-whitespace"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:187
msgid ""
"Causes the pattern matching to be done loosely, in case the tabs and spaces "
"have been munged in your input file.  Any sequence of whitespace in the "
"pattern line will match any sequence in the input file.  Normal characters "
"must still match exactly.  Each line of the context must still match a line "
"in the input file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:187
#, no-wrap
msgid "Fl N , Fl Fl forward"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:193
msgid ""
"Causes E<.Nm> to ignore patches that it thinks are reversed or already "
"applied.  See also E<.Fl R>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:193
#, no-wrap
msgid "Fl n , Fl Fl normal"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:197
msgid "Forces E<.Nm> to interpret the patch file as a normal diff."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:202
msgid ""
"E<.Fl o Ar out-file>, E<.Fl Fl output Ar out-file> E<.Xc> Causes the next "
"argument to be interpreted as the output file name."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:215
msgid ""
"E<.Fl p Ar strip-count>, E<.Fl Fl strip Ar strip-count> E<.Xc> Sets the "
"pathname strip count, which controls how pathnames found in the patch file "
"are treated, in case you keep your files in a different directory than the "
"person who sent out the patch.  The strip count specifies how many slashes "
"are to be stripped from the front of the pathname.  (Any intervening "
"directory names also go away.)  For example, supposing the file name in the "
"patch file was E<.Pa /u/howard/src/blurfl/blurfl.c>:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:219
msgid "Setting E<.Fl p Ns Ar 0> gives the entire pathname unmodified."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:222
msgid "E<.Fl p Ns Ar 1> gives"
msgstr ""

#. type: D1
#: /usr/src/usr.bin/patch/patch.1:223
#, no-wrap
msgid "Pa u/howard/src/blurfl/blurfl.c"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:226
msgid "without the leading slash."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:229
msgid "E<.Fl p Ns Ar 4> gives"
msgstr ""

#. type: D1
#: /usr/src/usr.bin/patch/patch.1:230
#, no-wrap
msgid "Pa blurfl/blurfl.c"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:244
msgid ""
"Not specifying E<.Fl p> at all just gives you E<.Pa blurfl.c>, unless all of "
"the directories in the leading path E<.Pq Pa u/howard/src/blurfl> exist and "
"that path is relative, in which case you get the entire pathname "
"unmodified.  Whatever you end up with is looked for either in the current "
"directory, or the directory specified by the E<.Fl d> option."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:244
#, no-wrap
msgid "Fl R , Fl Fl reverse"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:257
msgid ""
"Tells E<.Nm> that this patch was created with the old and new files "
"swapped.  (Yes, I am afraid that does happen occasionally, human nature "
"being what it is.)  E<.Nm> will attempt to swap each hunk around before "
"applying it.  Rejects will come out in the swapped format.  The E<.Fl R> "
"option will not work with ed diff scripts because there is too little "
"information to reconstruct the reverse operation."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:272
msgid ""
"If the first hunk of a patch fails, E<.Nm> will reverse the hunk to see if "
"it can be applied that way.  If it can, you will be asked if you want to "
"have the E<.Fl R> option set.  If it cannot, the patch will continue to be "
"applied normally.  (Note: this method cannot detect a reversed patch if it "
"is a normal diff and if the first command is an append (i.e., it should have "
"been a delete)  since appends always succeed, due to the fact that a null "
"context will match anywhere.  Luckily, most patches add or change lines "
"rather than delete them, so most reversed normal diffs will begin with a "
"delete, which will fail, triggering the heuristic.)"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:277
msgid ""
"E<.Fl r Ar rej-name>, E<.Fl Fl reject-file Ar rej-name> E<.Xc> Causes the "
"next argument to be interpreted as the reject file name."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:284
msgid ""
"E<.Fl s , Fl Fl quiet>, E<.Fl Fl silent> E<.Xc> Makes E<.Nm> do its work "
"silently, unless an error occurs."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:284
#, no-wrap
msgid "Fl t , Fl Fl batch"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:294
msgid ""
"Similar to E<.Fl f>, in that it suppresses questions, but makes some "
"different assumptions: skip patches for which a file to patch cannot be "
"found (the same as E<.Fl f>); skip patches for which the file has the wrong "
"version for the E<.Qq Prereq:> line in the patch; and assume that patches "
"are reversed if they look like they are."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:294
#, no-wrap
msgid "Fl u , Fl Fl unified"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:298
msgid ""
"Forces E<.Nm> to interpret the patch file as a unified context diff (a "
"unidiff)."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:323
msgid ""
"E<.Fl V Cm t | nil | never | none>, E<.Fl Fl version-control Cm t | nil | "
"never | none> E<.Xc> Causes the next argument to be interpreted as a method "
"for creating backup file names.  The type of backups made can also be given "
"in the E<.Ev PATCH_VERSION_CONTROL> or E<.Ev VERSION_CONTROL> environment "
"variables, which are overridden by this option.  The E<.Fl B> option "
"overrides this option, causing the prefix to always be used for making "
"backup file names.  The values of the E<.Ev PATCH_VERSION_CONTROL> and E<.Ev "
"VERSION_CONTROL> environment variables and the argument to the E<.Fl V> "
"option are like the GNU Emacs E<.Dq version-control> variable; they also "
"recognize synonyms that are more descriptive.  The valid values are (unique "
"abbreviations are accepted):"
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:324
#, no-wrap
msgid "Cm t , numbered"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:326
msgid "Always make numbered backups."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:326
#, no-wrap
msgid "Cm nil , existing"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:329
msgid ""
"Make numbered backups of files that already have them, simple backups of the "
"others."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:329
#, no-wrap
msgid "Cm never , simple"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:331
msgid "Always make simple backups."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:331
#, no-wrap
msgid "Cm none"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:333
msgid "Do not make backups."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:334
#, no-wrap
msgid "Fl v , Fl Fl version"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:338
msgid "Causes E<.Nm> to print out its revision header and patch level."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:345
msgid ""
"E<.Fl x Ar number>, E<.Fl Fl debug Ar number> E<.Xc> Sets internal debugging "
"flags, and is of interest only to E<.Nm> patchers."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:352
msgid ""
"E<.Fl z Ar backup-ext>, E<.Fl Fl suffix Ar backup-ext> E<.Xc> Causes the "
"next argument to be interpreted as the backup extension, to be used in place "
"of E<.Qq .orig>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:352
#, no-wrap
msgid "Fl Fl posix"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:356
msgid "Enables strict E<.St -p1003.1-2008> conformance, specifically:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:361
msgid "Backup files are not created unless the E<.Fl b> option is specified."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:364
msgid ""
"If unspecified, the file name used is the first of the old, new and index "
"files that exists."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/patch/patch.1:366
#, no-wrap
msgid "Patch Application"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:376
msgid ""
"E<.Nm> will try to skip any leading garbage, apply the diff, and then skip "
"any trailing garbage.  Thus you could feed an article or message containing "
"a diff listing to E<.Nm>, and it should work.  If the entire diff is "
"indented by a consistent amount, this will be taken into account."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:397
msgid ""
"With context diffs, and to a lesser extent with normal diffs, E<.Nm> can "
"detect when the line numbers mentioned in the patch are incorrect, and will "
"attempt to find the correct place to apply each hunk of the patch.  As a "
"first guess, it takes the line number mentioned for the hunk, plus or minus "
"any offset used in applying the previous hunk.  If that is not the correct "
"place, E<.Nm> will scan both forwards and backwards for a set of lines "
"matching the context given in the hunk.  First E<.Nm> looks for a place "
"where all lines of the context match.  If no such place is found, and it is "
"a context diff, and the maximum fuzz factor is set to 1 or more, then "
"another scan takes place ignoring the first and last line of context.  If "
"that fails, and the maximum fuzz factor is set to 2 or more, the first two "
"and last two lines of context are ignored, and another scan is made.  E<.Pq "
"The default maximum fuzz factor is 2.>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:409
msgid ""
"If E<.Nm> cannot find a place to install that hunk of the patch, it will put "
"the hunk out to a reject file, which normally is the name of the output file "
"plus E<.Qq .rej>.  (Note that the rejected hunk will come out in context "
"diff form whether the input patch was a context diff or a normal diff.  If "
"the input was a normal diff, many of the contexts will simply be null.)  The "
"line numbers on the hunks in the reject file may be different than in the "
"patch file: they reflect the approximate location patch thinks the failed "
"hunks belong in the new file rather than the old one."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:420
msgid ""
"As each hunk is completed, you will be told whether the hunk succeeded or "
"failed, and which line (in the new file)  E<.Nm> thought the hunk should go "
"on.  If this is different from the line number specified in the diff, you "
"will be told the offset.  A single large offset MAY be an indication that a "
"hunk was installed in the wrong place.  You will also be told if a fuzz "
"factor was used to make the match, in which case you should also be slightly "
"suspicious."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/patch/patch.1:420
#, no-wrap
msgid "Filename Determination"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:432
msgid ""
"If no original file is specified on the command line, E<.Nm> will try to "
"figure out from the leading garbage what the name of the file to edit is.  "
"When checking a prospective file name, pathname components are stripped as "
"specified by the E<.Fl p> option and the file's existence and writability "
"are checked relative to the current working directory (or the directory "
"specified by the E<.Fl d> option)."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:459
msgid ""
"If the diff is a context or unified diff, E<.Nm> is able to determine the "
"old and new file names from the diff header.  For context diffs, the E<.Dq "
"old> file is specified in the line beginning with E<.Qq ***> and the E<.Dq "
"new> file is specified in the line beginning with E<.Qq --->.  For a unified "
"diff, the E<.Dq old> file is specified in the line beginning with E<.Qq ---> "
"and the E<.Dq new> file is specified in the line beginning with E<.Qq +++>.  "
"If there is an E<.Qq Index:> line in the leading garbage (regardless of the "
"diff type), E<.Nm> will use the file name from that line as the E<.Dq index> "
"file."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:463
msgid ""
"E<.Nm> will choose the file name by performing the following steps, with the "
"first match used:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:485
msgid ""
"If E<.Nm> is operating in strict E<.St -p1003.1-2008> mode, the first of the "
"E<.Dq old>, E<.Dq new> and E<.Dq index> file names that exist is used.  "
"Otherwise, E<.Nm> will examine either the E<.Dq old> and E<.Dq new> file "
"names or, for a non-context diff, the E<.Dq index> file name, and choose the "
"file name with the fewest path components, the shortest basename, and the "
"shortest total file name length (in that order)."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:489
msgid ""
"If no suitable file was found to patch, the patch file is a context or "
"unified diff, and the old file was zero length, the new file name is created "
"and used."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:493
msgid ""
"If the file name still cannot be determined, E<.Nm> will prompt the user for "
"the file name to use."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:504
msgid ""
"Additionally, if the leading garbage contains a E<.Qq Prereq:\\ \\&> line, "
"E<.Nm> will take the first word from the prerequisites line (normally a "
"version number) and check the input file to see if that word can be found.  "
"If not, E<.Nm> will ask for confirmation before proceeding."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:507
msgid ""
"The upshot of all this is that you should be able to say, while in a news "
"interface, the following:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/patch/patch.1:508
#, no-wrap
msgid "| patch -d /usr/src/local/blurfl"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:512
msgid ""
"and patch a file in the blurfl directory directly from the article "
"containing the patch."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/patch/patch.1:512
#, no-wrap
msgid "Backup Files"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:525
msgid ""
"By default, the patched version is put in place of the original, with the "
"original file backed up to the same name with the extension E<.Qq .orig>, or "
"as specified by the E<.Fl B>, E<.Fl V>, or E<.Fl z> options.  The extension "
"used for making backup files may also be specified in the E<.Ev "
"SIMPLE_BACKUP_SUFFIX> environment variable, which is overridden by the "
"options above."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:534
msgid ""
"If the backup file is a symbolic or hard link to the original file, E<.Nm> "
"creates a new backup file name by changing the first lowercase letter in the "
"last component of the file's name into uppercase.  If there are no more "
"lowercase letters in the name, it removes the first character from the "
"name.  It repeats this process until it comes up with a backup file that "
"does not already exist or is not linked to the original file."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:538
msgid ""
"You may also specify where you want the output to go with the E<.Fl o> "
"option; if that file already exists, it is backed up first."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/patch/patch.1:538
#, no-wrap
msgid "Notes For Patch Senders"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:541
msgid ""
"There are several things you should bear in mind if you are going to be "
"sending out patches:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:550
msgid ""
"First, you can save people a lot of grief by keeping a E<.Pa patchlevel.h> "
"file which is patched to increment the patch level as the first diff in the "
"patch file you send out.  If you put a E<.Qq Prereq:> line in with the "
"patch, it will not let them apply patches out of order without some warning."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:559
msgid ""
"Second, make sure you have specified the file names right, either in a "
"context diff header, or with an E<.Qq Index:> line.  If you are patching "
"something in a subdirectory, be sure to tell the patch user to specify a "
"E<.Fl p> option as needed."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:564
msgid ""
"Third, you can create a file by sending out a diff that compares a null file "
"to the file you want to create.  This will only work if the file you want to "
"create does not exist already in the target directory."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:567
msgid ""
"Fourth, take care not to send out reversed patches, since it makes people "
"wonder whether they already applied the patch."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:571
msgid ""
"Fifth, while you may be able to get away with putting 582 diff listings into "
"one file, it is probably wiser to group related patches into separate files "
"in case something goes haywire."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:571
#, no-wrap
msgid "ENVIRONMENT"
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:573
#, no-wrap
msgid "Ev POSIXLY_CORRECT"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:579
msgid ""
"When set, E<.Nm> behaves as if the E<.Fl Fl posix> option has been "
"specified."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:579
#, no-wrap
msgid "Ev SIMPLE_BACKUP_SUFFIX"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:582
msgid "Extension to use for backup file names instead of E<.Qq .orig>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:582
#, no-wrap
msgid "Ev TMPDIR"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:585
msgid "Directory to put temporary files in; default is E<.Pa /tmp>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:585
#, no-wrap
msgid "Ev PATCH_VERSION_CONTROL"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:587
msgid "Selects when numbered backup files are made."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:587
#, no-wrap
msgid "Ev VERSION_CONTROL"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:590
msgid "Same as E<.Ev PATCH_VERSION_CONTROL>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:591
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:593
#, no-wrap
msgid "Pa $TMPDIR/patch*"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:596
msgid "E<.Nm> temporary files"
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:596
#, no-wrap
msgid "Pa /dev/tty"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:600
msgid "used to read input when E<.Nm> prompts the user"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:601
#, no-wrap
msgid "EXIT STATUS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:605
msgid "The E<.Nm> utility exits with one of the following values:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:607
#, no-wrap
msgid "0"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:609
msgid "Successful completion."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:609
#, no-wrap
msgid "1"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:611
msgid "One or more lines were written to a reject file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/patch/patch.1:611
#, no-wrap
msgid "\\*(Gt1"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:613
msgid "An error occurred."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:617
msgid ""
"When applying a set of patches in a loop it behooves you to check this exit "
"status so you do not apply a later patch to a partially patched file."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:617
#, no-wrap
msgid "DIAGNOSTICS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:621
msgid ""
"Too many to list here, but generally indicative that E<.Nm> couldn't parse "
"your patch file."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:628
msgid ""
"The message E<.Qq Hmm...> indicates that there is unprocessed text in the "
"patch file and that E<.Nm> is attempting to intuit whether there is a patch "
"in that text and, if so, what kind of patch it is."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:628
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:630
msgid "E<.Xr diff 1>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:630
#, no-wrap
msgid "STANDARDS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:639
msgid ""
"The E<.Nm> utility is compliant with the E<.St -p1003.1-2008> specification, "
"except as detailed above for the E<.Fl -posix> option."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:645
msgid ""
"The flags E<.Op Fl BCEFfstVvxz> and E<.Op Fl -posix> are extensions to that "
"specification."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:645
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:648
msgid "E<.An Larry Wall> with many other contributors."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:648
#, no-wrap
msgid "CAVEATS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:661
msgid ""
"E<.Nm> cannot tell if the line numbers are off in an ed script, and can only "
"detect bad line numbers in a normal diff when it finds a E<.Qq change> or a "
"E<.Qq delete> command.  A context diff using fuzz factor 3 may have the same "
"problem.  Until a suitable interactive interface is added, you should "
"probably do a context diff in these cases to see if the changes made sense.  "
"Of course, compiling without errors is a pretty good indication that the "
"patch worked, but not always."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:668
msgid ""
"E<.Nm> usually produces the correct results, even when it has to do a lot of "
"guessing.  However, the results are guaranteed to be correct only when the "
"patch is applied to exactly the same version of the file that the patch was "
"generated from."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/patch/patch.1:668
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:671
msgid ""
"Could be smarter about partial matches, excessively deviant offsets and "
"swapped code, but that would take an extra pass."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:680
msgid ""
"Check patch mode E<.Pq Fl C> will fail if you try to check several patches "
"in succession that build on each other.  The entire E<.Nm> code would have "
"to be restructured to keep temporary files around so that it can handle this "
"situation."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:686
msgid ""
"If code has been duplicated (for instance with #ifdef OLDCODE ... #else ...  "
"#endif), E<.Nm> is incapable of patching both versions, and, if it works at "
"all, will likely patch the wrong one, and tell you that it succeeded to "
"boot."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/patch/patch.1:690
msgid ""
"If you apply a patch you have already applied, E<.Nm> will think it is a "
"reversed patch, and offer to un-apply the patch.  This could be construed as "
"a feature."
msgstr ""
