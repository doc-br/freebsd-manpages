# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.bin/awk/awk.1:26
#, no-wrap
msgid "$Mdocdate: September 14 2015 $"
msgstr ""

#. type: Dt
#: /usr/src/usr.bin/awk/awk.1:27
#, no-wrap
msgid "AWK 1"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:29
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:31
msgid "E<.Nm awk>"
msgstr ""

#. type: Nd
#: /usr/src/usr.bin/awk/awk.1:31
#, no-wrap
msgid "pattern-directed scanning and processing language"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:32
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:41
msgid ""
"E<.Nm awk> E<.Op Fl safe> E<.Op Fl V> E<.Op Fl d Ns Op Ar n> E<.Op Fl F Ar "
"fs> E<.Op Fl v Ar var Ns = Ns Ar value> E<.Op Ar prog | Fl f Ar progfile> "
"E<.Ar>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:41
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:65
msgid ""
"E<.Nm> scans each input E<.Ar file> for lines that match any of a set of "
"patterns specified literally in E<.Ar prog> or in one or more files "
"specified as E<.Fl f Ar progfile>.  With each pattern there can be an "
"associated action that will be performed when a line of a E<.Ar file> "
"matches the pattern.  Each line is matched against the pattern portion of "
"every pattern-action statement; the associated action is performed for each "
"matched pattern.  The file name E<.Sq -> means the standard input.  Any "
"E<.Ar file> of the form E<.Ar var Ns = Ns Ar value> is treated as an "
"assignment, not a filename, and is executed at the time it would have been "
"opened if it were a filename."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:67
msgid "The options are as follows:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:68
#, no-wrap
msgid "Fl d Ns Op Ar n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:78
msgid ""
"Debug mode.  Set debug level to E<.Ar n>, or 1 if E<.Ar n> is not "
"specified.  A value greater than 1 causes E<.Nm> to dump core on fatal "
"errors."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:78
#, no-wrap
msgid "Fl F Ar fs"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:81
msgid "Define the input field separator to be the regular expression E<.Ar fs>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:81
#, no-wrap
msgid "Fl f Ar progfile"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:85
msgid ""
"Read program code from the specified file E<.Ar progfile> instead of from "
"the command line."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:85
#, no-wrap
msgid "Fl safe"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:104
msgid ""
"Disable file output E<.Pf ( Ic print No E<gt>>, E<.Ic print No E<gt>E<gt>>), "
"process creation E<.Po> E<.Ar cmd | Ic getline>, E<.Ic print |>, E<.Ic "
"system> E<.Pc> and access to the environment E<.Pf ( Va ENVIRON>; see the "
"section on variables below).  This is a first E<.Pq and not very reliable> "
"approximation to a E<.Dq safe> version of E<.Nm>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:104
#, no-wrap
msgid "Fl V"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:108
msgid "Print the version number of E<.Nm> to standard output and exit."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:108
#, no-wrap
msgid "Fl v Ar var Ns = Ns Ar value"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:119
msgid ""
"Assign E<.Ar value> to variable E<.Ar var> before E<.Ar prog> is executed; "
"any number of E<.Fl v> options may be present."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:132
msgid ""
"The input is normally made up of input lines E<.Pq records> separated by "
"newlines, or by the value of E<.Va RS>.  If E<.Va RS> is null, then any "
"number of blank lines are used as the record separator, and newlines are "
"used as field separators (in addition to the value of E<.Va FS>).  This is "
"convenient when working with multi-line records."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:144
msgid ""
"An input line is normally made up of fields separated by whitespace, or by "
"the regular expression E<.Va FS>.  The fields are denoted E<.Va $1 , $2 , "
"...>, while E<.Va $0> refers to the entire line.  If E<.Va FS> is null, the "
"input line is split into one field per character."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:165
msgid ""
"Normally, any number of blanks separate fields.  In order to set the field "
"separator to a single blank, use the E<.Fl F> option with a value of E<.Sq "
"[\\ \\&]>.  If a field separator of E<.Sq t> is specified, E<.Nm> treats it "
"as if E<.Sq \\et> had been specified and uses E<.Aq TAB> as the field "
"separator.  In order to use a literal E<.Sq t> as the field separator, use "
"the E<.Fl F> option with a value of E<.Sq [t]>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:167
msgid "A pattern-action statement has the form"
msgstr ""

#. type: D1
#: /usr/src/usr.bin/awk/awk.1:168
#, no-wrap
msgid "Ar pattern Ic \\&{ Ar action Ic \\&}"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:175
msgid ""
"A missing E<.Ic \\&{ Ar action Ic \\&}> means print the line; a missing "
"pattern always matches.  Pattern-action statements are separated by newlines "
"or semicolons."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:198
msgid ""
"Newlines are permitted after a terminating statement or following a comma "
"E<.Pq Sq ,\\&>, an open brace E<.Pq Sq {>, a logical AND E<.Pq Sq &&>, a "
"logical OR E<.Pq Sq ||>, after the E<.Sq do> or E<.Sq else> keywords, or "
"after the closing parenthesis of an E<.Sq if>, E<.Sq for>, or E<.Sq while> "
"statement.  Additionally, a backslash E<.Pq Sq \\e> can be used to escape a "
"newline between tokens."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:201
msgid ""
"An action is a sequence of statements.  A statement can be one of the "
"following:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:203
#, no-wrap
msgid "Ic if Ar ( expression ) Ar statement Op Ic else Ar statement"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:204
#, no-wrap
msgid "Ic while Ar ( expression ) Ar statement"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:205
#, no-wrap
msgid "Ic for Ar ( expression ; expression ; expression ) statement"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:206
#, no-wrap
msgid "Ic for Ar ( var Ic in Ar array ) statement"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:207
#, no-wrap
msgid "Ic do Ar statement Ic while Ar ( expression )"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:208
#, no-wrap
msgid "Ic break"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:209
#, no-wrap
msgid "Ic continue"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:210
#, no-wrap
msgid "Xo Ic {"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:214
msgid "E<.Op Ar statement ...> E<.Ic }> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:214
#, no-wrap
msgid "Xo Ar expression"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:218
msgid "E<.No # commonly> E<.Ar var No = Ar expression> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:218
#, no-wrap
msgid "Xo Ic print"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:222
msgid "E<.Op Ar expression-list> E<.Op E<gt> Ns Ar expression> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:222
#, no-wrap
msgid "Xo Ic printf Ar format"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:226
msgid "E<.Op Ar ... , expression-list> E<.Op E<gt> Ns Ar expression> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:226
#, no-wrap
msgid "Ic return Op Ar expression"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:227
#, no-wrap
msgid "Xo Ic next"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:230
msgid "E<.No # skip remaining patterns on this input line> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:230
#, no-wrap
msgid "Xo Ic nextfile"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:233
msgid "E<.No # skip rest of this file, open next, start at top> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:233
#, no-wrap
msgid "Xo Ic delete"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:239
msgid ""
"E<.Sm off> E<.Ar array Ic \\&[ Ar expression Ic \\&]> E<.Sm on> E<.No # "
"delete an array element> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:239
#, no-wrap
msgid "Xo Ic delete Ar array"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:242
msgid "E<.No # delete all elements of array> E<.Xc>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:242
#, no-wrap
msgid "Xo Ic exit"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:246
msgid ""
"E<.Op Ar expression> E<.No # exit immediately; status is Ar expression> "
"E<.Xc>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:284
msgid ""
"Statements are terminated by semicolons, newlines or right braces.  An empty "
"E<.Ar expression-list> stands for E<.Ar $0>.  String constants are quoted "
"E<.Li \\&\"\">, with the usual C escapes recognized within (see E<.Xr printf "
"1> for a complete list of these).  Expressions take on string or numeric "
"values as appropriate, and are built using the operators E<.Ic + \\- * / % "
"^> E<.Pq exponentiation>, and concatenation E<.Pq indicated by whitespace>.  "
"The operators E<.Ic \\&! ++ \\-\\- += \\-= *= /= %= ^=> E<.Ic E<gt> E<gt>= "
"E<lt> E<lt>= == != ?:> are also available in expressions.  Variables may be "
"scalars, array elements (denoted E<.Li x[i]>)  or fields.  Variables are "
"initialized to the null string.  Array subscripts may be any string, not "
"necessarily numeric; this allows for a form of associative memory.  Multiple "
"subscripts such as E<.Li [i,j,k]> are permitted; the constituents are "
"concatenated, separated by the value of E<.Va SUBSEP> E<.Pq see the section "
"on variables below>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:307
msgid ""
"The E<.Ic print> statement prints its arguments on the standard output (or "
"on a file if E<.Pf E<gt> Ar file> or E<.Pf E<gt>E<gt> Ar file> is present or "
"on a pipe if E<.Pf |\\ \\& Ar cmd> is present), separated by the current "
"output field separator, and terminated by the output record separator.  "
"E<.Ar file> and E<.Ar cmd> may be literal names or parenthesized "
"expressions; identical string values in different statements denote the same "
"open file.  The E<.Ic printf> statement formats its expression list "
"according to the format (see E<.Xr printf 1>)."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:331
msgid ""
"Patterns are arbitrary Boolean combinations (with E<.Ic \"\\&! || &&\">)  of "
"regular expressions and relational expressions.  E<.Nm> supports extended "
"regular expressions E<.Pq EREs>.  See E<.Xr re_format 7> for more "
"information on regular expressions.  Isolated regular expressions in a "
"pattern apply to the entire line.  Regular expressions may also occur in "
"relational expressions, using the operators E<.Ic ~> and E<.Ic !~>.  E<.Pf / "
"Ar re Ns /> is a constant regular expression; any string (constant or "
"variable) may be used as a regular expression, except in the position of an "
"isolated regular expression in a pattern."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:336
msgid ""
"A pattern may consist of two patterns separated by a comma; in this case, "
"the action is performed for all lines from an occurrence of the first "
"pattern through an occurrence of the second."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:338
msgid "A relational expression is one of the following:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:340
#, no-wrap
msgid "Ar expression matchop regular-expression"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:341
#, no-wrap
msgid "Ar expression relop expression"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:342
#, no-wrap
msgid "Ar expression Ic in Ar array-name"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:343
#, no-wrap
msgid "Xo Ic \\&( Ns"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:347
msgid "E<.Ar expr , expr , \\&... Ns Ic \\&) in> E<.Ar array-name> E<.Xc>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:363
msgid ""
"where a E<.Ar relop> is any of the six relational operators in C, and a "
"E<.Ar matchop> is either E<.Ic ~> (matches)  or E<.Ic !~> (does not match).  "
"A conditional is an arithmetic expression, a relational expression, or a "
"Boolean combination of these."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:374
msgid ""
"The special patterns E<.Ic BEGIN> and E<.Ic END> may be used to capture "
"control before the first input line is read and after the last.  E<.Ic "
"BEGIN> and E<.Ic END> do not combine with other patterns."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:376
msgid "Variable names with special meanings:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:378
#, no-wrap
msgid "Va ARGC"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:380
msgid "Argument count, assignable."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:380
#, no-wrap
msgid "Va ARGV"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:383
msgid "Argument array, assignable; non-null members are taken as filenames."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:383
#, no-wrap
msgid "Va CONVFMT"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:387
msgid "Conversion format when converting numbers (default E<.Qq Li %.6g>)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:387
#, no-wrap
msgid "Va ENVIRON"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:389
msgid "Array of environment variables; subscripts are names."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:389
#, no-wrap
msgid "Va FILENAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:391
msgid "The name of the current input file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:391
#, no-wrap
msgid "Va FNR"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:393
msgid "Ordinal number of the current record in the current file."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:393
#, no-wrap
msgid "Va FS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:397
msgid ""
"Regular expression used to separate fields; also settable by option E<.Fl F "
"Ar fs>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:397
#, no-wrap
msgid "Va NF"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:401
msgid ""
"Number of fields in the current record.  E<.Va $NF> can be used to obtain "
"the value of the last field in the current record."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:401
#, no-wrap
msgid "Va NR"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:403
msgid "Ordinal number of the current record."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:403
#, no-wrap
msgid "Va OFMT"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:406
msgid "Output format for numbers (default E<.Qq Li %.6g>)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:406
#, no-wrap
msgid "Va OFS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:408
msgid "Output field separator (default blank)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:408
#, no-wrap
msgid "Va ORS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:410
msgid "Output record separator (default newline)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:410
#, no-wrap
msgid "Va RLENGTH"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:414
msgid "The length of the string matched by the E<.Fn match> function."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:414
#, no-wrap
msgid "Va RS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:416
msgid "Input record separator (default newline)."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:416
#, no-wrap
msgid "Va RSTART"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:420
msgid "The starting position of the string matched by the E<.Fn match> function."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:420
#, no-wrap
msgid "Va SUBSEP"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:422
msgid "Separates multiple subscripts (default 034)."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:423
#, no-wrap
msgid "FUNCTIONS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:426
msgid ""
"The awk language has a variety of built-in functions: arithmetic, string, "
"input/output, general, and bit-operation."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:429
msgid ""
"Functions may be defined (at the position of a pattern-action statement)  "
"thusly:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/awk/awk.1:430
#, no-wrap
msgid "function foo(a, b, c) { ...; return x }"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:437
msgid ""
"Parameters are passed by value if scalar, and by reference if array name; "
"functions may be called recursively.  Parameters are local to the function; "
"all other variables are global.  Thus local variables may be created by "
"providing excess parameters in the function definition."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/awk/awk.1:437
#, no-wrap
msgid "Arithmetic Functions"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:439
#, no-wrap
msgid "Fn atan2 y x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:443
msgid "Return the arctangent of E<.Fa y Ns / Ns Fa x> in radians."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:443
#, no-wrap
msgid "Fn cos x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:449
msgid "Return the cosine of E<.Fa x>, where E<.Fa x> is in radians."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:449
#, no-wrap
msgid "Fn exp x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:452
msgid "Return the exponential of E<.Fa x>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:452
#, no-wrap
msgid "Fn int x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:456
msgid "Return E<.Fa x> truncated to an integer value."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:456
#, no-wrap
msgid "Fn log x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:459
msgid "Return the natural logarithm of E<.Fa x>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:459
#, no-wrap
msgid "Fn rand"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:466
msgid ""
"Return a random number, E<.Fa n>, such that E<.Sm off> E<.Pf 0 \\*(Le Fa n "
"No \\*(Lt 1>.  E<.Sm on>"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:466
#, no-wrap
msgid "Fn sin x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:472
msgid "Return the sine of E<.Fa x>, where E<.Fa x> is in radians."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:472
#, no-wrap
msgid "Fn sqrt x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:475
msgid "Return the square root of E<.Fa x>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:475
#, no-wrap
msgid "Fn srand expr"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:484
msgid ""
"Sets seed for E<.Fn rand> to E<.Fa expr> and returns the previous seed.  If "
"E<.Fa expr> is omitted, the time of day is used instead."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/awk/awk.1:485
#, no-wrap
msgid "String Functions"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:487
#, no-wrap
msgid "Fn gsub r t s"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:493
msgid ""
"The same as E<.Fn sub> except that all occurrences of the regular expression "
"are replaced.  E<.Fn gsub> returns the number of replacements."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:493
#, no-wrap
msgid "Fn index s t"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:499
msgid ""
"The position in E<.Fa s> where the string E<.Fa t> occurs, or 0 if it does "
"not."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:499
#, no-wrap
msgid "Fn length s"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:506
msgid ""
"The length of E<.Fa s> taken as a string, or of E<.Va $0> if no argument is "
"given."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:506
#, no-wrap
msgid "Fn match s r"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:521
msgid ""
"The position in E<.Fa s> where the regular expression E<.Fa r> occurs, or 0 "
"if it does not.  The variable E<.Va RSTART> is set to the starting position "
"of the matched string E<.Pq which is the same as the returned value> or zero "
"if no match is found.  The variable E<.Va RLENGTH> is set to the length of "
"the matched string, or \\-1 if no match is found."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:521
#, no-wrap
msgid "Fn split s a fs"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:537
msgid ""
"Splits the string E<.Fa s> into array elements E<.Va a[1] , a[2] , ... , "
"a[n]> and returns E<.Va n>.  The separation is done with the regular "
"expression E<.Ar fs> or with the field separator E<.Va FS> if E<.Ar fs> is "
"not given.  An empty string as field separator splits the string into one "
"array element per character."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:537
#, no-wrap
msgid "Fn sprintf fmt expr ..."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:544
msgid ""
"The string resulting from formatting E<.Fa expr , ...> according to the "
"E<.Xr printf 1> format E<.Fa fmt>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:544
#, no-wrap
msgid "Fn sub r t s"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:570
msgid ""
"Substitutes E<.Fa t> for the first occurrence of the regular expression "
"E<.Fa r> in the string E<.Fa s>.  If E<.Fa s> is not given, E<.Va $0> is "
"used.  An ampersand E<.Pq Sq &> in E<.Fa t> is replaced in string E<.Fa s> "
"with regular expression E<.Fa r>.  A literal ampersand can be specified by "
"preceding it with two backslashes E<.Pq Sq \\e\\e>.  A literal backslash can "
"be specified by preceding it with another backslash E<.Pq Sq \\e\\e>.  E<.Fn "
"sub> returns the number of replacements."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:570
#, no-wrap
msgid "Fn substr s m n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:585
msgid ""
"Return at most the E<.Fa n Ns -character> substring of E<.Fa s> that begins "
"at position E<.Fa m> counted from 1.  If E<.Fa n> is omitted, or if E<.Fa n> "
"specifies more characters than are left in the string, the length of the "
"substring is limited by the length of E<.Fa s>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:585
#, no-wrap
msgid "Fn tolower str"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:590
msgid ""
"Returns a copy of E<.Fa str> with all upper-case characters translated to "
"their corresponding lower-case equivalents."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:590
#, no-wrap
msgid "Fn toupper str"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:595
msgid ""
"Returns a copy of E<.Fa str> with all lower-case characters translated to "
"their corresponding upper-case equivalents."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/awk/awk.1:596
#, no-wrap
msgid "Input/Output and General Functions"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:598
#, no-wrap
msgid "Fn close expr"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:603
msgid ""
"Closes the file or pipe E<.Fa expr>.  E<.Fa expr> should match the string "
"that was used to open the file or pipe."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:603
#, no-wrap
msgid "Ar cmd | Ic getline Op Va var"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:623
msgid ""
"Read a record of input from a stream piped from the output of E<.Ar cmd>.  "
"If E<.Va var> is omitted, the variables E<.Va $0> and E<.Va NF> are set.  "
"Otherwise E<.Va var> is set.  If the stream is not open, it is opened.  As "
"long as the stream remains open, subsequent calls will read subsequent "
"records from the stream.  The stream remains open until explicitly closed "
"with a call to E<.Fn close>.  E<.Ic getline> returns 1 for a successful "
"input, 0 for end of file, and \\-1 for an error."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:623
#, no-wrap
msgid "Fn fflush [expr]"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:631
msgid ""
"Flushes any buffered output for the file or pipe E<.Fa expr>, or all open "
"files or pipes if E<.Fa expr> is omitted.  E<.Fa expr> should match the "
"string that was used to open the file or pipe."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:631
#, no-wrap
msgid "Ic getline"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:644
msgid ""
"Sets E<.Va $0> to the next input record from the current input file.  This "
"form of E<.Ic getline> sets the variables E<.Va NF>, E<.Va NR>, and E<.Va "
"FNR>.  E<.Ic getline> returns 1 for a successful input, 0 for end of file, "
"and \\-1 for an error."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:644
#, no-wrap
msgid "Ic getline Va var"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:657
msgid ""
"Sets E<.Va $0> to variable E<.Va var>.  This form of E<.Ic getline> sets the "
"variables E<.Va NR> and E<.Va FNR>.  E<.Ic getline> returns 1 for a "
"successful input, 0 for end of file, and \\-1 for an error."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:657
#, no-wrap
msgid "Xo"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:684
msgid ""
"E<.Ic getline Op Va var> E<.Pf \\ \\&E<lt> Ar file> E<.Xc> Sets E<.Va $0> to "
"the next record from E<.Ar file>.  If E<.Va var> is omitted, the variables "
"E<.Va $0> and E<.Va NF> are set.  Otherwise E<.Va var> is set.  If E<.Ar "
"file> is not open, it is opened.  As long as the stream remains open, "
"subsequent calls will read subsequent records from E<.Ar file>.  E<.Ar file> "
"remains open until explicitly closed with a call to E<.Fn close>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:684
#, no-wrap
msgid "Fn system cmd"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:688
msgid "Executes E<.Fa cmd> and returns its exit status."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/awk/awk.1:689
#, no-wrap
msgid "Bit-Operation Functions"
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:691
#, no-wrap
msgid "Fn compl x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:693
msgid "Returns the bitwise complement of integer argument x."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:693
#, no-wrap
msgid "Fn and v1 v2 ..."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:696
msgid ""
"Performs a bitwise AND on all arguments provided, as integers.  There must "
"be at least two values."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:696
#, no-wrap
msgid "Fn or v1 v2 ..."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:699
msgid ""
"Performs a bitwise OR on all arguments provided, as integers.  There must be "
"at least two values."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:699
#, no-wrap
msgid "Fn xor v1 v2 ..."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:702
msgid ""
"Performs a bitwise Exclusive-OR on all arguments provided, as integers.  "
"There must be at least two values."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:702
#, no-wrap
msgid "Fn lshift x n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:704
msgid "Returns integer argument x shifted by n bits to the left."
msgstr ""

#. type: It
#: /usr/src/usr.bin/awk/awk.1:704
#, no-wrap
msgid "Fn rshift x n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:706
msgid "Returns integer argument x shifted by n bits to the right."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:707
#, no-wrap
msgid "EXIT STATUS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:709
msgid "E<.Ex -std awk>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:713
msgid "But note that the E<.Ic exit> expression can modify the exit status."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:713
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:715
msgid "Print lines longer than 72 characters:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/awk/awk.1:716
#, no-wrap
msgid "length($0) E<gt> 72"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:719
msgid "Print first two fields in opposite order:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/awk/awk.1:720
#, no-wrap
msgid "{ print $2, $1 }"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:723
msgid "Same, with input fields separated by comma and/or blanks and tabs:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:726
#, no-wrap
msgid ""
"BEGIN { FS = \",[ \\et]*|[ \\et]+\" }\n"
"      { print $2, $1 }\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:729
msgid "Add up first column, print sum and average:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:732
#, no-wrap
msgid ""
"{ s += $1 }\n"
"END { print \"sum is\", s, \" average is\", s/NR }\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:735
msgid "Print all lines between start/stop pairs:"
msgstr ""

#. type: Dl
#: /usr/src/usr.bin/awk/awk.1:736
#, no-wrap
msgid "/start/, /stop/"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:739
msgid "Simulate echo(1):"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:744
#, no-wrap
msgid ""
"BEGIN { # Simulate echo(1)\n"
"        for (i = 1; i E<lt> ARGC; i++) printf \"%s \", ARGV[i]\n"
"        printf \"\\en\"\n"
"        exit }\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:747
msgid "Print an error message to standard error:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:749
#, no-wrap
msgid "{ print \"error!\" E<gt> \"/dev/stderr\" }\n"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:750
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:766
msgid ""
"E<.Xr cut 1>, E<.Xr lex 1>, E<.Xr printf 1>, E<.Xr sed 1>, E<.Xr re_format "
"7>, E<.Xr script 7> E<.Rs> E<.%A A. V. Aho> E<.%A B. W. Kernighan> E<.%A "
"P. J. Weinberger> E<.%T The AWK Programming Language> E<.%I Addison-Wesley> "
"E<.%D 1988> E<.%O ISBN 0-201-07981-X> E<.Re>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:766
#, no-wrap
msgid "STANDARDS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:775
msgid ""
"The E<.Nm> utility is compliant with the E<.St -p1003.1-2008> specification, "
"except E<.Nm> does not support {n,m} pattern matching."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:784
msgid ""
"The flags E<.Op Fl \\&dV> and E<.Op Fl safe>, as well as the commands E<.Cm "
"fflush , compl , and , or>, E<.Cm xor , lshift , rshift>, are extensions to "
"that specification."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:784
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:789
msgid "An E<.Nm> utility appeared in E<.At v7>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/awk/awk.1:789
#, no-wrap
msgid "BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:795
msgid ""
"There are no explicit conversions between numbers and strings.  To force an "
"expression to be treated as a number add 0 to it; to force it to be treated "
"as a string concatenate E<.Li \\&\"\"> to it."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/awk/awk.1:797
msgid "The scope rules for variables in functions are a botch; the syntax is worse."
msgstr ""
