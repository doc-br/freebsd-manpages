# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.bin/dc/dc.1:38
#, no-wrap
msgid "December 5, 2017"
msgstr ""

#. type: Dt
#: /usr/src/usr.bin/dc/dc.1:39
#, no-wrap
msgid "DC 1"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:41
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:43
msgid "E<.Nm dc>"
msgstr ""

#. type: Nd
#: /usr/src/usr.bin/dc/dc.1:43
#, no-wrap
msgid "desk calculator"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:44
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:50
msgid ""
"E<.Nm> E<.Op Fl hxV> E<.Op Fl e Ar expression> E<.Op Fl f Ar filename> E<.Op "
"Ar filename>"
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:50
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:69
msgid ""
"E<.Nm> is an arbitrary precision arithmetic package.  The overall structure "
"of E<.Nm> is a stacking (reverse Polish) calculator i.e.\\& numbers are "
"stored on a stack.  Adding a number pushes it onto the stack.  Arithmetic "
"operations pop arguments off the stack and push the results.  See also the "
"E<.Xr bc 1> utility, which is a preprocessor for E<.Nm> providing infix "
"notation and a C-like syntax which implements functions and reasonable "
"control structures for programs.  The options are as follows:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:70
#, no-wrap
msgid "Fl e Ar expr , Fl Fl expression Ar expr"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:76
msgid ""
"Evaluate E<.Ar expression>.  If multiple E<.Fl e> options are specified, "
"they will be processed in the order given."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:76
#, no-wrap
msgid "Fl f Ar filename , Fl Fl file Ar filename"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:81
msgid ""
"Process the content of the given file before further calculations are done.  "
"If multiple E<.Fl f> options are specified, they will be processed in the "
"order given."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:81
#, no-wrap
msgid "Fl h , Fl Fl help"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:83
msgid "Print short usage info."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:83
#, no-wrap
msgid "Fl V , Fl Fl version"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:85
msgid "Print version info."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:85
#, no-wrap
msgid "Fl x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:93
msgid ""
"Enable extended register mode.  This mode is used by E<.Xr bc 1> to allow "
"more than 256 registers.  See E<.Sx Registers> for a more detailed "
"description."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:109
msgid ""
"If neither E<.Ar expression> nor E<.Ar file> are specified on the command "
"line, E<.Nm> reads from the standard input.  Otherwise E<.Ar expression> and "
"E<.Ar file> are processed and E<.Nm> exits."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:118
msgid ""
"Ordinarily, E<.Nm> operates on decimal integers, but one may specify an "
"input base, output base, and a number of fractional digits (scale) to be "
"maintained.  Whitespace is ignored, except where it signals the end of a "
"number, end of a line or when a register name is expected.  The following "
"constructions are recognized:"
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:119
#, no-wrap
msgid "Va number"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:127
msgid ""
"The value of the number is pushed on the stack.  A number is an unbroken "
"string of the digits 0\\-9 and letters A\\-F.  It may be preceded by an "
"underscore E<.Pq Sq _> to input a negative number.  A number may contain a "
"single decimal point.  A number may also contain the characters A\\-F, with "
"the values 10\\-15."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:127
#, no-wrap
msgid "Cm \"+ - / * % ~ ^\""
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:141
msgid ""
"The top two values on the stack are added (+), subtracted (\\-), multiplied "
"(*), divided (/), remaindered (%), divided and remaindered (~), or "
"exponentiated (^).  The two entries are popped off the stack; the result is "
"pushed on the stack in their place.  Any fractional part of an exponent is "
"ignored."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:172
msgid ""
"For addition, subtraction, and remainder, the scale of the result is the "
"maximum of scales of the operands.  For division the scale of the result is "
"defined by the scale set by the E<.Ic k> operation.  For multiplication, the "
"scale is defined by the expression E<.Sy min(a+b,max(a,b,scale))>, where "
"E<.Sy a> and E<.Sy b> are the scales of the operands, and E<.Sy scale> is "
"the scale defined by the E<.Ic k> operation.  For exponentiation with a "
"non-negative exponent, the scale of the result is E<.Sy "
"min(a*b,max(scale,a))>, where E<.Sy a> is the scale of the base, and E<.Sy "
"b> is the E<.Em value> of the exponent.  If the exponent is negative, the "
"scale of the result is the scale defined by the E<.Ic k> operation."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:176
msgid ""
"In the case of the division and modulus operator (~), the resultant quotient "
"is pushed first followed by the remainder.  This is a shorthand for the "
"sequence:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:178
#, no-wrap
msgid "x y / x y %\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:180
msgid "The division and modulus operator is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:180
#, no-wrap
msgid "Ic a"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:188
msgid ""
"Pop the top value from the stack.  If that value is a number, compute the "
"integer part of the number modulo 256.  If the result is zero, push an empty "
"string.  Otherwise push a one character string by interpreting the computed "
"value as an E<.Tn ASCII> character."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:195
msgid ""
"If the top value is a string, push a string containing the first character "
"of the original string.  If the original string is empty, an empty string is "
"pushed back.  The E<.Ic a> operator is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:195
#, no-wrap
msgid "Ic c"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:197
msgid "All values on the stack are popped."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:197
#, no-wrap
msgid "Ic d"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:199
msgid "The top value on the stack is duplicated."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:199
#, no-wrap
msgid "Ic e"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:203
msgid ""
"Equivalent to E<.Ic p>, except that the output is written to the standard "
"error stream."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:203
#, no-wrap
msgid "Ic f"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:205
msgid "All values on the stack are printed, separated by newlines."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:205
#, no-wrap
msgid "Ic G"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:211
msgid ""
"The top two numbers are popped from the stack and compared.  A one is pushed "
"if the top of the stack is equal to the second number on the stack.  A zero "
"is pushed otherwise.  This is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:211
#, no-wrap
msgid "Ic I"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:213
msgid "Pushes the input base on the top of the stack."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:213
#, no-wrap
msgid "Ic i"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:217
msgid ""
"The top value on the stack is popped and used as the base for further "
"input.  The initial input base is 10."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:217
#, no-wrap
msgid "Ic J"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:228
msgid ""
"Pop the top value from the stack.  The recursion level is popped by that "
"value and, following that, the input is skipped until the first occurrence "
"of the E<.Ic M> operator.  The E<.Ic J> operator is a non-portable "
"extension, used by the E<.Xr bc 1> command."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:228
#, no-wrap
msgid "Ic K"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:230
msgid "The current scale factor is pushed onto the stack."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:230
#, no-wrap
msgid "Ic k"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:239
msgid ""
"The top of the stack is popped, and that value is used as a non-negative "
"scale factor: the appropriate number of places are printed on output, and "
"maintained during multiplication, division, and exponentiation.  The "
"interaction of scale factor, input base, and output base will be reasonable "
"if all are changed together."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:239
#, no-wrap
msgid "Ic L Ns Ar x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:243
msgid ""
"Register E<.Ar x> is treated as a stack and its top value is popped onto the "
"main stack."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:243
#, no-wrap
msgid "Ic l Ns Ar x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:252
msgid ""
"The value in register E<.Ar x> is pushed on the stack.  The register E<.Ar "
"x> is not altered.  Initially, all registers contain the value zero."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:252
#, no-wrap
msgid "Ic M"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:261
msgid ""
"Mark used by the E<.Ic J> operator.  The E<.Ic M> operator is a non-portable "
"extensions, used by the E<.Xr bc 1> command."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:261
#, no-wrap
msgid "Ic N"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:266
msgid ""
"The top of the stack is replaced by one if the top of the stack is equal to "
"zero.  If the top of the stack is unequal to zero, it is replaced by zero.  "
"This is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:266
#, no-wrap
msgid "Ic n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:269
msgid ""
"The top value on the stack is popped and printed without a newline.  This is "
"a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:269
#, no-wrap
msgid "Ic O"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:271
msgid "Pushes the output base on the top of the stack."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:271
#, no-wrap
msgid "Ic o"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:275
msgid ""
"The top value on the stack is popped and used as the base for further "
"output.  The initial output base is 10."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:275
#, no-wrap
msgid "Ic P"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:283
msgid ""
"The top of the stack is popped.  If the top of the stack is a string, it is "
"printed without a trailing newline.  If the top of the stack is a number, it "
"is interpreted as a base 256 number, and each digit of this base 256 number "
"is printed as an E<.Tn ASCII> character, without a trailing newline."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:283
#, no-wrap
msgid "Ic p"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:286
msgid ""
"The top value on the stack is printed with a trailing newline.  The top "
"value remains unchanged."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:286
#, no-wrap
msgid "Ic Q"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:289
msgid ""
"The top value on the stack is popped and the string execution level is "
"popped by that value."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:289
#, no-wrap
msgid "Ic q"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:293
msgid ""
"Exits the program.  If executing a string, the recursion level is popped by "
"two."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:293
#, no-wrap
msgid "Ic R"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:296
msgid "The top of the stack is removed (popped).  This is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:296
#, no-wrap
msgid "Ic r"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:299
msgid ""
"The top two values on the stack are reversed (swapped).  This is a "
"non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:299
#, no-wrap
msgid "Ic S Ns Ar x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:304
msgid ""
"Register E<.Ar x> is treated as a stack.  The top value of the main stack is "
"popped and pushed on it."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:304
#, no-wrap
msgid "Ic s Ns Ar x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:309
msgid "The top of the stack is popped and stored into a register named E<.Ar x>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:309
#, no-wrap
msgid "Ic v"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:313
msgid ""
"Replaces the top element on the stack by its square root.  The scale of the "
"result is the maximum of the scale of the argument and the current value of "
"scale."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:313
#, no-wrap
msgid "Ic X"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:316
msgid ""
"Replaces the number on the top of the stack with its scale factor.  If the "
"top of the stack is a string, replace it with the integer 0."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:316
#, no-wrap
msgid "Ic x"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:321
msgid ""
"Treats the top element of the stack as a character string and executes it as "
"a string of E<.Nm> commands."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:321
#, no-wrap
msgid "Ic Z"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:326
msgid ""
"Replaces the number on the top of the stack with its length.  The length of "
"a string is its number of characters.  The length of a number is its number "
"of digits, not counting the minus sign and decimal point."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:326
#, no-wrap
msgid "Ic z"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:328
msgid "The stack level is pushed onto the stack."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:328
#, no-wrap
msgid "Cm \\&[ Ns ... Ns Cm \\&]"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:338
msgid ""
"Puts the bracketed E<.Tn ASCII> string onto the top of the stack.  If the "
"string includes brackets, these must be properly balanced.  The backslash "
"character E<.Pq Sq \\e> may be used as an escape character, making it "
"possible to include unbalanced brackets in strings.  To include a backslash "
"in a string, use a double backslash."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:338 /usr/src/usr.bin/dc/dc.1:351
#, no-wrap
msgid "Xo"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:351
msgid ""
"E<.Cm E<lt> Ns Va x> E<.Cm E<gt> Ns Va x> E<.Cm = Ns Va x> E<.Cm !E<lt> Ns "
"Va x> E<.Cm !E<gt> Ns Va x> E<.Cm != Ns Va x> E<.Xc> The top two elements of "
"the stack are popped and compared.  Register E<.Ar x> is executed if they "
"obey the stated relation."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:369
msgid ""
"E<.Cm E<lt> Ns Va x Ns e Ns Va y> E<.Cm E<gt> Ns Va x Ns e Ns Va y> E<.Cm = "
"Ns Va x Ns e Ns Va y> E<.Cm !E<lt> Ns Va x Ns e Ns Va y> E<.Cm !E<gt> Ns Va "
"x Ns e Ns Va y> E<.Cm != Ns Va x Ns e Ns Va y> E<.Xc> These operations are "
"variants of the comparison operations above.  The first register name is "
"followed by the letter E<.Sq e> and another register name.  Register E<.Ar "
"x> will be executed if the relation is true, and register E<.Ar y> will be "
"executed if the relation is false.  This is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:369
#, no-wrap
msgid "Ic \\&("
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:375
msgid ""
"The top two numbers are popped from the stack and compared.  A one is pushed "
"if the top of the stack is less than the second number on the stack.  A zero "
"is pushed otherwise.  This is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:375
#, no-wrap
msgid "Ic {"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:381
msgid ""
"The top two numbers are popped from the stack and compared.  A one is pushed "
"if the top of stack is less than or equal to the second number on the "
"stack.  A zero is pushed otherwise.  This is a non-portable extension."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:381
#, no-wrap
msgid "Ic \\&!"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:385
msgid "Interprets the rest of the line as a E<.Ux> command."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:385
#, no-wrap
msgid "Ic \\&?"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:388
msgid ""
"A line of input is taken from the input source (usually the terminal)  and "
"executed."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:388
#, no-wrap
msgid "Ic \\&: Ns Ar r"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:393
msgid ""
"Pop two values from the stack.  The second value on the stack is stored into "
"the array E<.Ar r> indexed by the top of stack."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:393
#, no-wrap
msgid "Ic \\&; Ns Ar r"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:398
msgid ""
"Pop a value from the stack.  The value is used as an index into register "
"E<.Ar r>.  The value in this register is pushed onto the stack."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:403
msgid ""
"Array elements initially have the value zero.  Each level of a stacked "
"register has its own array associated with it.  The command sequence"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:405
#, no-wrap
msgid "[first] 0:a [dummy] Sa [second] 0:a 0;a p La 0;a p\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:408
msgid "will print"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:411
#, no-wrap
msgid ""
"second\n"
"first\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:418
msgid ""
"since the string E<.Ql second> is written in an array that is later popped, "
"to reveal the array that stored E<.Ql first>."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:418
#, no-wrap
msgid "Ic #"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:421
msgid "Skip the rest of the line.  This is a non-portable extension."
msgstr ""

#. type: Ss
#: /usr/src/usr.bin/dc/dc.1:422
#, no-wrap
msgid "Registers"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:437
msgid ""
"Registers have a single character name E<.Ar x>, where E<.Ar x> may be any "
"character, including space, tab or any other special character.  If extended "
"register mode is enabled using the E<.Fl x> option and the register "
"identifier E<.Ar x> has the value 255, the next two characters are "
"interpreted as a two-byte register index.  The set of standard single "
"character registers and the set of extended registers do not overlap.  "
"Extended register mode is a non-portable extension."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:437
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:440
msgid "An example which prints the first ten values of E<.Ic n!>:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:444
#, no-wrap
msgid ""
"[la1+dsa*pla10E<gt>y]sy\n"
"0sa1\n"
"lyx\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:447
msgid "Independent of the current input base, the command"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:449
#, no-wrap
msgid "Ai\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:452
msgid "will reset the input base to decimal 10."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:452
#, no-wrap
msgid "DIAGNOSTICS"
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:454
#, no-wrap
msgid "%c (0%o) is unimplemented"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:456
msgid "an undefined operation was called."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:456
#, no-wrap
msgid "stack empty"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:458
msgid "for not enough elements on the stack to do what was asked."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:458
#, no-wrap
msgid "stack register '%c' (0%o) is empty"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:462
msgid "for an E<.Ar L> operation from a stack register that is empty."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:462
#, no-wrap
msgid "Runtime warning: non-zero scale in exponent"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:464
msgid "for a fractional part of an exponent that is being ignored."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:464
#, no-wrap
msgid "divide by zero"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:466
msgid "for trying to divide by zero."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:466
#, no-wrap
msgid "remainder by zero"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:468
msgid "for trying to take a remainder by zero."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:468
#, no-wrap
msgid "square root of negative number"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:470
msgid "for trying to take the square root of a negative number."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:470
#, no-wrap
msgid "index too big"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:472
msgid "for an array index that is larger than 2048."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:472
#, no-wrap
msgid "negative index"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:474
msgid "for a negative array index."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:474
#, no-wrap
msgid "input base must be a number between 2 and 16"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:476
msgid "for trying to set an illegal input base."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:476
#, no-wrap
msgid "output base must be a number greater than 1"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:478
msgid "for trying to set an illegal output base."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:478
#, no-wrap
msgid "scale must be a nonnegative number"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:480
msgid "for trying to set a negative or zero scale."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:480
#, no-wrap
msgid "scale too large"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:483
msgid ""
"for trying to set a scale that is too large.  A scale must be representable "
"as a 32-bit unsigned number."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:483
#, no-wrap
msgid "Q command argument exceeded string execution depth"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:486 /usr/src/usr.bin/dc/dc.1:515
msgid "for trying to pop the recursion level more than the current recursion level."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:486
#, no-wrap
msgid "Q command requires a number E<gt>= 1"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:488
msgid "for trying to pop an illegal number of recursion levels."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:488
#, no-wrap
msgid "recursion too deep"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:490
msgid "for too many levels of nested execution."
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:500
msgid ""
"The recursion level is increased by one if the E<.Ar x> or E<.Ar ?\\&> "
"operation or one of the compare operations resulting in the execution of "
"register is executed.  As an exception, the recursion level is not increased "
"if the operation is executed as the last command of a string.  For example, "
"the commands"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:503
#, no-wrap
msgid ""
"[lax]sa\n"
"1 lax\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:506
msgid "will execute an endless loop, while the commands"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:509
#, no-wrap
msgid ""
"[laxp]sa\n"
"1 lax\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:512
msgid "will terminate because of a too deep recursion level."
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:512
#, no-wrap
msgid "J command argument exceeded string execution depth"
msgstr ""

#. type: It
#: /usr/src/usr.bin/dc/dc.1:515
#, no-wrap
msgid "mark not found"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:519
msgid "for a failed scan for an occurrence of the E<.Ic M> operator."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:520
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:522
msgid "E<.Xr bc 1>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:528
msgid ""
"E<.An -nosplit> E<.An L. L. Cherry>, E<.An R. Morris> \"DC \\- An "
"Interactive Desk Calculator\" E<.Pa /usr/share/doc/usd/05.dc/>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:528
#, no-wrap
msgid "STANDARDS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:536
msgid ""
"The arithmetic operations of the E<.Nm> utility are expected to conform to "
"the definition listed in the E<.Xr bc 1> section of the E<.St -p1003.2> "
"specification."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:536
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:547
msgid ""
"The E<.Nm> command first appeared in E<.At v6>.  A complete rewrite of the "
"E<.Nm> command using the E<.Xr bn 3> big number routines first appeared in "
"E<.Ox 3.5>."
msgstr ""

#. type: Sh
#: /usr/src/usr.bin/dc/dc.1:547
#, no-wrap
msgid "AUTHORS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.bin/dc/dc.1:558
msgid ""
"E<.An -nosplit> The original version of the E<.Nm> command was written by "
"E<.An Robert Morris> and E<.An Lorinda Cherry>.  The current version of the "
"E<.Nm> utility was written by E<.An Otto Moerbeek>."
msgstr ""
