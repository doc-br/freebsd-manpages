# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:31-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/usr.sbin/inetd/inetd.8:31
#, no-wrap
msgid "January 12, 2008"
msgstr ""

#. type: Dt
#: /usr/src/usr.sbin/inetd/inetd.8:32
#, no-wrap
msgid "INETD 8"
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:34
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:36
msgid "E<.Nm inetd>"
msgstr ""

#. type: Nd
#: /usr/src/usr.sbin/inetd/inetd.8:36
#, no-wrap
msgid "internet"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:38
msgid "E<.Dq super-server>"
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:38
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:51
msgid ""
"E<.Nm> E<.Op Fl d> E<.Op Fl l> E<.Op Fl w> E<.Op Fl W> E<.Op Fl c Ar "
"maximum> E<.Op Fl C Ar rate> E<.Op Fl a Ar address | hostname> E<.Op Fl p Ar "
"filename> E<.Op Fl R Ar rate> E<.Op Fl s Ar maximum> E<.Op Ar configuration "
"file>"
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:51
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:74
msgid ""
"The E<.Nm> utility should be run at boot time by E<.Pa /etc/rc> (see E<.Xr "
"rc 8>).  It then listens for connections on certain internet sockets.  When "
"a connection is found on one of its sockets, it decides what service the "
"socket corresponds to, and invokes a program to service the request.  The "
"server program is invoked with the service socket as its standard input, "
"output and error descriptors.  After the program is finished, E<.Nm> "
"continues to listen on the socket (except in some cases which will be "
"described below).  Essentially, E<.Nm> allows running one daemon to invoke "
"several others, reducing load on the system."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:76
msgid "The following options are available:"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:77
#, no-wrap
msgid "Fl d"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:79
msgid "Turn on debugging."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:79
#, no-wrap
msgid "Fl l"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:81
msgid "Turn on logging of successful connections."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:81
#, no-wrap
msgid "Fl w"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:86
msgid ""
"Turn on TCP Wrapping for external services.  See the E<.Sx \"IMPLEMENTATION "
"NOTES\"> section for more information on TCP Wrappers support."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:86
#, no-wrap
msgid "Fl W"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:89
msgid "Turn on TCP Wrapping for internal services which are built in to E<.Nm>."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:89
#, no-wrap
msgid "Fl c Ar maximum"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:95
msgid ""
"Specify the default maximum number of simultaneous invocations of each "
"service; the default is unlimited.  May be overridden on a per-service basis "
"with the \"max-child\" parameter."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:95
#, no-wrap
msgid "Fl C Ar rate"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:100
msgid ""
"Specify the default maximum number of times a service can be invoked from a "
"single IP address in one minute; the default is unlimited.  May be "
"overridden on a per-service basis with the "
"\"max-connections-per-ip-per-minute\" parameter."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:100
#, no-wrap
msgid "Fl R Ar rate"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:104
msgid ""
"Specify the maximum number of times a service can be invoked in one minute; "
"the default is 256.  A rate of 0 allows an unlimited number of invocations."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:104
#, no-wrap
msgid "Fl s Ar maximum"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:110
msgid ""
"Specify the default maximum number of simultaneous invocations of each "
"service from a single IP address; the default is unlimited.  May be "
"overridden on a per-service basis with the \"max-child-per-ip\" parameter."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:110
#, no-wrap
msgid "Fl a"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:122
msgid ""
"Specify one specific IP address to bind to.  Alternatively, a hostname can "
"be specified, in which case the IPv4 or IPv6 address which corresponds to "
"that hostname is used.  Usually a hostname is specified when E<.Nm> is run "
"inside a E<.Xr jail 8>, in which case the hostname corresponds to that of "
"the E<.Xr jail 8> environment."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:142
msgid ""
"When the hostname specification is used and both IPv4 and IPv6 bindings are "
"desired, one entry with the appropriate E<.Em protocol> type for each "
"binding is required for each service in E<.Pa /etc/inetd.conf>.  For "
"example, a TCP-based service would need two entries, one using E<.Dq tcp4> "
"for the E<.Em protocol> and the other using E<.Dq tcp6>.  See the "
"explanation of the E<.Pa /etc/inetd.conf> E<.Em protocol> field below."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:142
#, no-wrap
msgid "Fl p"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:144
msgid "Specify an alternate file in which to store the process ID."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:161
msgid ""
"Upon execution, E<.Nm> reads its configuration information from a "
"configuration file which, by default, is E<.Pa /etc/inetd.conf>.  There must "
"be an entry for each field of the configuration file, with entries for each "
"field separated by a tab or a space.  Comments are denoted by a E<.Dq #> at "
"the beginning of a line.  There must be an entry for each field.  The fields "
"of the configuration file are as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:170
#, no-wrap
msgid ""
"service-name\n"
"socket-type\n"
"protocol\n"
"{wait|nowait}[/max-child[/max-connections-per-ip-per-minute[/max-child-per-ip]]]\n"
"user[:group][/login-class]\n"
"server-program\n"
"server-program-arguments\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:175
msgid ""
"To specify an E<.Tn \"ONC RPC\" Ns -based> service, the entry would contain "
"these fields:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:184
#, no-wrap
msgid ""
"service-name/version\n"
"socket-type\n"
"rpc/protocol\n"
"{wait|nowait}[/max-child[/max-connections-per-ip-per-minute[/max-child-per-ip]]]\n"
"user[:group][/login-class]\n"
"server-program\n"
"server-program-arguments\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:207
msgid ""
"There are two types of services that E<.Nm> can start: standard and TCPMUX.  "
"A standard service has a well-known port assigned to it; it may be a service "
"that implements an official Internet standard or is a E<.Bx Ns -specific> "
"service.  As described in E<.Tn RFC 1078>, TCPMUX services are nonstandard "
"services that do not have a well-known port assigned to them.  They are "
"invoked from E<.Nm> when a program connects to the E<.Dq tcpmux> well-known "
"port and specifies the service name.  This feature is useful for adding "
"locally-developed servers.  TCPMUX requests are only accepted when the "
"multiplexor service itself is enabled, above and beyond and specific "
"TCPMUX-based servers; see the discussion of internal services below."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:248
msgid ""
"The E<.Em service-name> entry is the name of a valid service in the file "
"E<.Pa /etc/services>, or the specification of a E<.Ux> domain socket (see "
"below).  For E<.Dq internal> services (discussed below), the service name "
"should be the official name of the service (that is, the first entry in "
"E<.Pa /etc/services>).  When used to specify an E<.Tn \"ONC RPC\" Ns -based> "
"service, this field is a valid RPC service name listed in the file E<.Pa "
"/etc/rpc>.  The part on the right of the E<.Dq /> is the RPC version "
"number.  This can simply be a single numeric argument or a range of "
"versions.  A range is bounded by the low version to the high version - E<.Dq "
"rusers/1-3>.  For TCPMUX services, the value of the E<.Em service-name> "
"field consists of the string E<.Dq tcpmux> followed by a slash and the "
"locally-chosen service name.  The service names listed in E<.Pa "
"/etc/services> and the name E<.Dq help> are reserved.  Try to choose unique "
"names for your TCPMUX services by prefixing them with your organization's "
"name and suffixing them with a version number."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:262
msgid ""
"The E<.Em socket-type> should be one of E<.Dq stream>, E<.Dq dgram>, E<.Dq "
"raw>, E<.Dq rdm>, or E<.Dq seqpacket>, depending on whether the socket is a "
"stream, datagram, raw, reliably delivered message, or sequenced packet "
"socket.  TCPMUX services must use E<.Dq stream>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:306
msgid ""
"The E<.Em protocol> must be a valid protocol or E<.Dq unix>.  Examples are "
"E<.Dq tcp> or E<.Dq udp>, both of which imply IPv4 for backward "
"compatibility.  The names E<.Dq tcp4> and E<.Dq udp4> specify IPv4 only.  "
"The names E<.Dq tcp6> and E<.Dq udp6> specify IPv6 only.  The names E<.Dq "
"tcp46> and E<.Dq udp46> specify that the entry accepts both IPv4 and IPv6 "
"connections via a wildcard E<.Dv AF_INET6> socket.  Rpc based services are "
"specified with the E<.Dq rpc/tcp> or E<.Dq rpc/udp> service type.  One can "
"use specify IPv4 and/or IPv6 with the 4, 6 or 46 suffix, for example E<.Dq "
"rpc/tcp6> or E<.Dq rpc/udp46>.  TCPMUX services must use E<.Dq tcp>, E<.Dq "
"tcp4>, E<.Dq tcp6> or E<.Dq tcp46>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:347
msgid ""
"The E<.Em wait/nowait> entry specifies whether the server that is invoked by "
"E<.Nm> will take over the socket associated with the service access point, "
"and thus whether E<.Nm> should wait for the server to exit before listening "
"for new service requests.  Datagram servers must use E<.Dq wait>, as they "
"are always invoked with the original datagram socket bound to the specified "
"service address.  These servers must read at least one datagram from the "
"socket before exiting.  If a datagram server connects to its peer, freeing "
"the socket so E<.Nm> can receive further messages on the socket, it is said "
"to be a E<.Dq multi-threaded> server; it should read one datagram from the "
"socket and create a new socket connected to the peer.  It should fork, and "
"the parent should then exit to allow E<.Nm> to check for new service "
"requests to spawn new servers.  Datagram servers which process all incoming "
"datagrams on a socket and eventually time out are said to be E<.Dq "
"single-threaded>.  The E<.Xr comsat 8> and E<.Xr talkd 8> utilities are "
"examples of the latter type of datagram server.  The E<.Xr tftpd 8> utility "
"is an example of a multi-threaded datagram server."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:365
msgid ""
"Servers using stream sockets generally are multi-threaded and use the E<.Dq "
"nowait> entry.  Connection requests for these services are accepted by "
"E<.Nm>, and the server is given only the newly-accepted socket connected to "
"a client of the service.  Most stream-based services operate in this "
"manner.  Stream-based servers that use E<.Dq wait> are started with the "
"listening service socket, and must accept at least one connection request "
"before exiting.  Such a server would normally accept and process incoming "
"connection requests until a timeout.  TCPMUX services must use E<.Dq "
"nowait>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:401
msgid ""
"The maximum number of outstanding child processes (or E<.Dq threads>)  for a "
"E<.Dq nowait> service may be explicitly specified by appending a E<.Dq /> "
"followed by the number to the E<.Dq nowait> keyword.  Normally (or if a "
"value of zero is specified) there is no maximum.  Otherwise, once the "
"maximum is reached, further connection attempts will be queued up until an "
"existing child process exits.  This also works in the case of E<.Dq wait> "
"mode, although a value other than one (the default) might not make sense in "
"some cases.  You can also specify the maximum number of connections per "
"minute for a given IP address by appending a E<.Dq /> followed by the number "
"to the maximum number of outstanding child processes.  Once the maximum is "
"reached, further connections from this IP address will be dropped until the "
"end of the minute.  In addition, you can specify the maximum number of "
"simultaneous invocations of each service from a single IP address by "
"appending a E<.Dq /> followed by the number to the maximum number of "
"outstanding child processes.  Once the maximum is reached, further "
"connections from this IP address will be dropped."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:422
msgid ""
"The E<.Em user> entry should contain the user name of the user as whom the "
"server should run.  This allows for servers to be given less permission than "
"root.  The optional E<.Em group> part separated by E<.Dq \\&:> allows a "
"group name other than the default group for this user to be specified.  The "
"optional E<.Em login-class> part separated by E<.Dq /> allows specification "
"of a login class other than the default E<.Dq daemon> login class."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:434
msgid ""
"The E<.Em server-program> entry should contain the pathname of the program "
"which is to be executed by E<.Nm> when a request is found on its socket.  If "
"E<.Nm> provides this service internally, this entry should be E<.Dq "
"internal>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:446
msgid ""
"The E<.Em server-program-arguments> entry lists the arguments to be passed "
"to the E<.Em server-program>, starting with argv[0], which usually is the "
"name of the program.  If the service is provided internally, the E<.Em "
"service-name> of the service (and any arguments to it) or the word E<.Dq "
"internal> should take the place of this entry."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:452
msgid ""
"Currently, the only internal service to take arguments is E<.Dq auth>.  "
"Without options, the service will always return E<.Dq ERROR\\ : "
"HIDDEN-USER>.  The available arguments to this service that alter its "
"behavior are:"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:453
#, no-wrap
msgid "Fl d Ar fallback"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:471
msgid ""
"Provide a E<.Ar fallback> username.  If the real E<.Dq auth> service is "
"enabled (with the E<.Fl r> option discussed below), return this username "
"instead of an error when lookups fail for either socket credentials or the "
"username.  If the real E<.Dq auth> service is disabled, return this username "
"for every request.  This is primarily useful when running this service on a "
"NAT machine."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:471
#, no-wrap
msgid "Fl g"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:486
msgid ""
"Instead of returning the user's name to the ident requester, report a "
"username made up of random alphanumeric characters, e.g.\\& E<.Dq c0c993>.  "
"The E<.Fl g> flag overrides not only the user names, but also any fallback "
"name, E<.Pa .fakeid> or E<.Pa .noident> files."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:486
#, no-wrap
msgid "Fl t Xo"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:491
msgid ""
"E<.Ar sec Ns Op . Ns Ar usec> E<.Xc> Specify a timeout for the service.  The "
"default timeout is 10.0 seconds."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:491
#, no-wrap
msgid "Fl r"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:496
msgid ""
"Offer a real E<.Dq auth> service, as per RFC 1413.  All the remaining flags "
"apply only in this case."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:496
#, no-wrap
msgid "Fl i"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:498
msgid "Return numeric user IDs instead of usernames."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:498
#, no-wrap
msgid "Fl f"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:512
msgid ""
"If the file E<.Pa .fakeid> exists in the home directory of the identified "
"user, report the username found in that file instead of the real username.  "
"If the username found in E<.Pa .fakeid> is that of an existing user, then "
"the real username is reported.  If the E<.Fl i> flag is also given then the "
"username in E<.Pa .fakeid> is checked against existing user IDs instead."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:512
#, no-wrap
msgid "Fl F"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:518
msgid ""
"same as E<.Fl f> but without the restriction that the username in E<.Pa "
".fakeid> must not match an existing user."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:518
#, no-wrap
msgid "Fl n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:526
msgid ""
"If the file E<.Pa .noident> exists in the home directory of the identified "
"user, return E<.Dq ERROR\\ : HIDDEN-USER>.  This overrides any E<.Pa fakeid> "
"file which might exist."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:526
#, no-wrap
msgid "Fl o Ar osname"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:531
msgid ""
"Use E<.Ar osname> instead of the name of the system as reported by E<.Xr "
"uname 3>."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:558
msgid ""
"The E<.Nm> utility also provides several other E<.Dq trivial> services "
"internally by use of routines within itself.  These services are E<.Dq "
"echo>, E<.Dq discard>, E<.Dq chargen> (character generator), E<.Dq daytime> "
"(human readable time), and E<.Dq time> (machine readable time, in the form "
"of the number of seconds since midnight, January 1, 1900).  All of these "
"services are available in both TCP and UDP versions; the UDP versions will "
"refuse service if the request specifies a reply port corresponding to any "
"internal service.  (This is done as a defense against looping attacks; the "
"remote IP address is logged.)  For details of these services, consult the "
"appropriate E<.Tn RFC> document."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:563
msgid ""
"The TCPMUX-demultiplexing service is also implemented as an internal "
"service.  For any TCPMUX-based service to function, the following line must "
"be included in E<.Pa inetd.conf>:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:565
#, no-wrap
msgid "tcpmux\tstream\ttcp\tnowait\troot\tinternal\n"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:583
msgid ""
"When given the E<.Fl l> option E<.Nm> will log an entry to syslog each time "
"a connection is accepted, noting the service selected and the IP-number of "
"the remote requester if available.  Unless otherwise specified in the "
"configuration file, and in the absence of the E<.Fl W> and E<.Fl w> options, "
"E<.Nm> will log to the E<.Dq daemon> facility."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:598
msgid ""
"The E<.Nm> utility rereads its configuration file when it receives a hangup "
"signal, E<.Dv SIGHUP>.  Services may be added, deleted or modified when the "
"configuration file is reread.  Except when started in debugging mode, or "
"configured otherwise with the E<.Fl p> option, E<.Nm> records its process ID "
"in the file E<.Pa /var/run/inetd.pid> to assist in reconfiguration."
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:598
#, no-wrap
msgid "IMPLEMENTATION NOTES"
msgstr ""

#. type: Ss
#: /usr/src/usr.sbin/inetd/inetd.8:599
#, no-wrap
msgid "TCP Wrappers"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:628
msgid ""
"When given the E<.Fl w> option, E<.Nm> will wrap all services specified as "
"E<.Dq stream nowait> or E<.Dq dgram> except for E<.Dq internal> services.  "
"If the E<.Fl W> option is given, such E<.Dq internal> services will be "
"wrapped.  If both options are given, wrapping for both internal and external "
"services will be enabled.  Either wrapping option will cause failed "
"connections to be logged to the E<.Dq auth> syslog facility.  Adding the "
"E<.Fl l> flag to the wrapping options will include successful connections in "
"the logging to the E<.Dq auth> facility."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:640
msgid ""
"Note that E<.Nm> only wraps requests for a E<.Dq wait> service while no "
"servers are available to service requests.  Once a connection to such a "
"service has been allowed, E<.Nm> has no control over subsequent connections "
"to the service until no more servers are left listening for connection "
"requests."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:655
msgid ""
"When wrapping is enabled, the E<.Pa tcpd> daemon is not required, as that "
"functionality is builtin.  For more information on TCP Wrappers, see the "
"relevant documentation E<.Pq Xr hosts_access 5>.  When reading that "
"document, keep in mind that E<.Dq internal> services have no associated "
"daemon name.  Therefore, the service name as specified in E<.Pa inetd.conf> "
"should be used as the daemon name for E<.Dq internal> services."
msgstr ""

#. type: Ss
#: /usr/src/usr.sbin/inetd/inetd.8:655
#, no-wrap
msgid "TCPMUX"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:670
msgid ""
"E<.Tn RFC 1078> describes the TCPMUX protocol: ``A TCP client connects to a "
"foreign host on TCP port 1.  It sends the service name followed by a "
"carriage-return line-feed E<lt>CRLFE<gt>.  The service name is never case "
"sensitive.  The server replies with a single character indicating positive "
"(+) or negative (\\-)  acknowledgment, immediately followed by an optional "
"message of explanation, terminated with a E<lt>CRLFE<gt>.  If the reply was "
"positive, the selected protocol begins; otherwise the connection is "
"closed.'' The program is passed the TCP connection as file descriptors 0 and "
"1."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:677
msgid ""
"If the TCPMUX service name begins with a E<.Dq +>, E<.Nm> returns the "
"positive reply for the program.  This allows you to invoke programs that use "
"stdin/stdout without putting any special server code in them."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:684
msgid ""
"The special service name E<.Dq help> causes E<.Nm> to list the TCPMUX "
"services which are enabled in E<.Pa inetd.conf>."
msgstr ""

#. type: Ss
#: /usr/src/usr.sbin/inetd/inetd.8:684
#, no-wrap
msgid "IPsec"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:700
msgid ""
"The implementation includes a tiny hack to support IPsec policy settings for "
"each socket.  A special form of comment line, starting with E<.Dq Li #@>, is "
"interpreted as a policy specifier.  Everything after the E<.Dq Li #@> will "
"be used as an IPsec policy string, as described in E<.Xr ipsec_set_policy "
"3>.  Each policy specifier is applied to all the following lines in E<.Pa "
"inetd.conf> until the next policy specifier.  An empty policy specifier "
"resets the IPsec policy."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:707
msgid ""
"If an invalid IPsec policy specifier appears in E<.Pa inetd.conf>, E<.Nm> "
"will provide an error message via the E<.Xr syslog 3> interface and abort "
"execution."
msgstr ""

#. type: Ss
#: /usr/src/usr.sbin/inetd/inetd.8:707
#, no-wrap
msgid "Ux Domain Sockets"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:733
msgid ""
"In addition to running services on IP sockets, E<.Nm> can also manage E<.Ux> "
"domain sockets.  To do this you specify a E<.Em protocol> of E<.Dq unix> and "
"specify the E<.Ux> domain socket as the E<.Em service-name>.  The E<.Em "
"service-type> may be E<.Dq stream> or E<.Dq dgram>.  The specification of "
"the socket must be an absolute path name, optionally prefixed by an owner "
"and mode of the form E<.Em :user:group:mode:>.  The specification:"
msgstr ""

#. type: Dl
#: /usr/src/usr.sbin/inetd/inetd.8:734
#, no-wrap
msgid ":news:daemon:220:/var/run/sock"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:746
msgid ""
"creates a socket owned by user E<.Dq news> in group E<.Dq daemon> with "
"permissions allowing only that user and group to connect.  The default owner "
"is the user that E<.Nm> is running as.  The default mode only allows the "
"socket's owner to connect."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:766
msgid ""
"E<.Sy WARNING>: while creating a E<.Ux> domain socket, E<.Nm> must change "
"the ownership and permissions on the socket.  This can only be done securely "
"if the directory in which the socket is created is writable only by root.  "
"Do E<.Em NOT> use E<.Nm> to create sockets in world writable directories "
"such as E<.Pa /tmp>; use E<.Pa /var/run> or a similar directory instead."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:779
msgid ""
"Internal services may be run on E<.Ux> domain sockets, in the usual way.  In "
"this case the name of the internal service is determined using the last "
"component of the socket's pathname.  For example, specifying a socket named "
"E<.Pa /var/run/chargen> would invoke the E<.Dq chargen> service when a "
"connection is received on that socket."
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:779
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:781
#, no-wrap
msgid "Pa /etc/inetd.conf"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:783
msgid "configuration file"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:783
#, no-wrap
msgid "Pa /etc/netconfig"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:785
msgid "network configuration data base"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:785
#, no-wrap
msgid "Pa /etc/rpc"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:787
msgid "translation of service names to RPC program numbers"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:787
#, no-wrap
msgid "Pa /etc/services"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:789
msgid "translation of service names to port numbers"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:789
#, no-wrap
msgid "Pa /var/run/inetd.pid"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:792
msgid "the pid of the currently running E<.Nm>"
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:793
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:795
msgid "Here are several example service entries for the various types of services:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:807
#, no-wrap
msgid ""
"ftp          stream  tcp   nowait root  /usr/libexec/ftpd        ftpd -l\n"
"ntalk        dgram   udp   wait   root  /usr/libexec/ntalkd      ntalkd\n"
"telnet       stream  tcp6  nowait root  /usr/libexec/telnetd  telnetd\n"
"shell        stream  tcp46  nowait root  /usr/libexec/rshd rshd\n"
"tcpmux/+date stream  tcp   nowait guest /bin/date                date\n"
"tcpmux/phonebook stream tcp nowait guest /usr/local/bin/phonebook "
"phonebook\n"
"rstatd/1-3   dgram   rpc/udp wait root  /usr/libexec/rpc.rstatd  "
"rpc.rstatd\n"
"/var/run/echo stream unix  nowait root\tinternal\n"
"#@ ipsec ah/require\n"
"chargen      stream  tcp   nowait root  internal\n"
"#@\n"
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:808
#, no-wrap
msgid "ERROR MESSAGES"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:815
msgid ""
"The E<.Nm> server logs error messages using E<.Xr syslog 3>.  Important "
"error messages and their explanations are:"
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:817 /usr/src/usr.sbin/inetd/inetd.8:846 /usr/src/usr.sbin/inetd/inetd.8:852 /usr/src/usr.sbin/inetd/inetd.8:870 /usr/src/usr.sbin/inetd/inetd.8:875
#, no-wrap
msgid "Xo"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:826
msgid ""
"E<.Ar service Ns / Ns Ar protocol> E<.No \"server failing (looping), service "
"terminated.\"> E<.Xc> The number of requests for the specified service in "
"the past minute exceeded the limit.  The limit exists to prevent a broken "
"program or a malicious user from swamping the system.  This message may "
"occur for several reasons:"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:829
msgid "There are many hosts requesting the service within a short time period."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:831
msgid "A broken client program is requesting the service too frequently."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:834
msgid ""
"A malicious user is running a program to invoke the service in a "
"denial-of-service attack."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:837
msgid ""
"The invoked service program has an error that causes clients to retry "
"quickly."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:845
msgid ""
"Use the E<.Fl R Ar rate> option, as described above, to change the rate "
"limit.  Once the limit is reached, the service will be reenabled "
"automatically in 10 minutes."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:852
msgid ""
"E<.Ar service Ns / Ns Ar protocol>: E<.No \\&No such user> E<.Ar user>, "
"E<.No service ignored> E<.Xc>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:869
msgid ""
"E<.Ar service Ns / Ns Ar protocol>: E<.No getpwnam>: E<.Ar user>: E<.No "
"\\&No such user> E<.Xc> No entry for E<.Ar user> exists in the E<.Xr passwd "
"5> database.  The first message occurs when E<.Nm> (re)reads the "
"configuration file.  The second message occurs when the service is invoked."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:875
msgid "E<.Ar service>: E<.No can't set uid> E<.Ar uid> E<.Xc>"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:883
msgid ""
"E<.Ar service>: E<.No can't set gid> E<.Ar gid> E<.Xc> The user or group ID "
"for the entry's E<.Ar user> field is invalid."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:884
#, no-wrap
msgid "setsockopt(SO_PRIVSTATE): Operation not supported"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:889
msgid ""
"The E<.Nm> utility attempted to renounce the privileged state associated "
"with a socket but was unable to."
msgstr ""

#. type: It
#: /usr/src/usr.sbin/inetd/inetd.8:890 /usr/src/usr.sbin/inetd/inetd.8:903
#, no-wrap
msgid "Xo unknown"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:902
msgid ""
"E<.Ar rpc/udp> or E<.Ar rpc/tcp> E<.Xc> No entry was found for either E<.Ar "
"udp> or E<.Ar tcp> in the E<.Xr netconfig 5> database."
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:915
msgid ""
"E<.Ar rpc/udp6> or E<.Ar rpc/tcp6> E<.Xc> No entry was found for either "
"E<.Ar udp6> or E<.Ar tcp6> in the E<.Xr netconfig 5> database."
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:916
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:939
msgid ""
"E<.Xr ipsec_set_policy 3>, E<.Xr hosts_access 5>, E<.Xr hosts_options 5>, "
"E<.Xr login.conf 5>, E<.Xr netconfig 5>, E<.Xr passwd 5>, E<.Xr rpc 5>, "
"E<.Xr services 5>, E<.Xr comsat 8>, E<.Xr fingerd 8>, E<.Xr ftpd 8>, E<.Xr "
"rlogind 8>, E<.Xr rpcbind 8>, E<.Xr rshd 8>, E<.Xr talkd 8>, E<.Xr telnetd "
"8>, E<.Xr tftpd 8> E<.Rs> E<.%A Michael C. St. Johns> E<.%T Identification "
"Protocol> E<.%O RFC1413> E<.Re>"
msgstr ""

#. type: Sh
#: /usr/src/usr.sbin/inetd/inetd.8:939
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/usr.sbin/inetd/inetd.8:955
msgid ""
"The E<.Nm> utility appeared in E<.Bx 4.3>.  TCPMUX is based on code and "
"documentation by Mark Lottor.  Support for E<.Tn \"ONC RPC\"> based services "
"is modeled after that provided by E<.Tn SunOS> 4.1.  The IPsec hack was "
"contributed by the KAME project in 1999.  The E<.Fx> TCP Wrappers support "
"first appeared in E<.Fx 3.2>."
msgstr ""
