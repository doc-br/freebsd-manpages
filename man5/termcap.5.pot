# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:29-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/termcap/termcap.5:52
#, no-wrap
msgid "December 13, 2009"
msgstr ""

#. type: Dt
#: /usr/src/share/termcap/termcap.5:53
#, no-wrap
msgid "TERMCAP 5"
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:55
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:57
msgid "E<.Nm termcap>"
msgstr ""

#. type: Nd
#: /usr/src/share/termcap/termcap.5:57
#, no-wrap
msgid "terminal capability data base"
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:58
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:60
msgid "E<.Nm>"
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:60
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:78
msgid ""
"The E<.Nm> file is a data base describing terminals, used, for example, by "
"E<.Xr \\&vi 1> and E<.Xr ncurses 3>.  Terminals are described in E<.Nm> by "
"giving a set of capabilities that they have and by describing how operations "
"are performed.  Padding requirements and initialization sequences are "
"included in E<.Nm>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:90
msgid ""
"Entries in E<.Nm> consist of a number of `:'-separated fields.  The first "
"entry for each terminal gives the names that are known for the terminal, "
"separated by `|' characters.  The first name given is the most common "
"abbreviation for the terminal.  The last name given should be a long name "
"fully identifying the terminal, and all others are understood as synonyms "
"for the terminal name.  All names but the last should be in lower case and "
"contain no blanks; the last name may well contain upper case characters and "
"blanks for readability."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:105
msgid ""
"Terminal names (except for the last, verbose entry)  should be chosen using "
"the following conventions.  The particular piece of hardware making up the "
"terminal should have a root name chosen, thus E<.Dq hp2621> This name should "
"not contain hyphens.  Modes that the hardware can be in or user preferences "
"should be indicated by appending a hyphen and an indicator of the mode.  "
"Therefore, a E<.Dq vt100> in 132-column mode would be E<.Dq vt100-w>.  The "
"following suffixes should be used where possible:"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:114
msgid ""
"E<.Sy \"Suffix\tMeaning\tExample\"> -w\tWide mode (more than 80 "
"columns)\tvt100-w -am\tWith automatic margins (usually default)\tvt100-am "
"-nam\tWithout automatic margins\tvt100-nam E<.Pf \\- Ar n Ta No \"Number of "
"lines on screen\taaa-60\"> -na\tNo arrow keys (leave them in "
"local)\tconcept100-na E<.Pf \\- Ar \\&np Ta No \"Number of pages of "
"memory\tconcept100-4p\"> -rv\tReverse video\tconcept100-rv"
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:115
#, no-wrap
msgid "CAPABILITIES"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:119
msgid ""
"The description field attempts to convey the semantics of the capability.  "
"You may find some codes in the description field:"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:120
#, no-wrap
msgid "(P)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:122
msgid "indicates that padding may be specified."
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:122
#, no-wrap
msgid "#[1-9]"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:128
msgid ""
"in the description field indicates that the string is passed through E<.Xr "
"tparm 3> or E<.Xr tgoto 3> with parms as given (#I<i>)."
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:128
#, no-wrap
msgid "(P*)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:131
msgid ""
"indicates that padding may vary in proportion to the number of lines "
"affected."
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:131
#, no-wrap
msgid "(#\\dI<i>\\u)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:133
msgid "indicates the I<i>\\uth\\d parameter."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:136
msgid "These are the boolean capabilities:"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:181
#, no-wrap
msgid ""
"B<Boolean\t\t\tTCap\tDescription>\n"
"B<Variables\t\tCode>\n"
"auto_left_margin\tbw\tcursor_left wraps from column 0\tto last\n"
"\t\t\t\tcolumn\n"
"auto_right_margin\tam\tterminal has automatic margins\n"
"no_esc_ctlc\t\txb\tbeehive\t(f1=escape, f2=ctrl C)\n"
"ceol_standout_glitch\txs\tstandout not erased by overwriting (hp)\n"
"eat_newline_glitch\txn\tnewline\tignored\tafter 80 cols (concept)\n"
"erase_overstrike\teo\tcan erase overstrikes with a blank\n"
"generic_type\t\tgn\tgeneric\tline type\n"
"hard_copy\t\thc\thardcopy terminal\n"
"has_meta_key\t\tkm\tHas a meta key,\tsets msb high\n"
"has_status_line\t\ths\thas extra status line\n"
"insert_null_glitch\tin\tinsert mode distinguishes nulls\n"
"memory_above\t\tda\tdisplay\tmay be retained\tabove the screen\n"
"memory_below\t\tdb\tdisplay\tmay be retained\tbelow the screen\n"
"move_insert_mode\tmi\tsafe to\tmove while in insert mode\n"
"move_standout_mode\tms\tsafe to\tmove while in standout mode\n"
"over_strike\t\tos\tterminal can overstrike\n"
"status_line_esc_ok\tes\tescape can be used on the status line\n"
"dest_tabs_magic_smso\txt\ttabs destructive, magic\tso char\t(t1061)\n"
"tilde_glitch\t\thz\tcannot print ~'s (hazeltine)\n"
"transparent_underline\tul\tunderline character overstrikes\n"
"xon_xoff\t\txo\tterminal uses xon/xoff handshaking\n"
"needs_xon_xoff\t\tnx\tpadding\twill not work, xon/xoff required\n"
"prtr_silent\t\t5i\tprinter\twill not echo on screen\n"
"hard_cursor\t\tHC\tcursor is hard to see\n"
"non_rev_rmcup\t\tNR\tenter_ca_mode does not reverse exit_ca_mode\n"
"no_pad_char\t\tNP\tpad character does not exist\n"
"non_dest_scroll_region\tND\tscrolling region is non-destructive\n"
"can_change\t\tcc\tterminal can re-define existing\tcolors\n"
"back_color_erase\tut\tscreen erased with background color\n"
"hue_lightness_saturation\thl\tterminal uses only HLS color\n"
"\t\t\t\t\tnotation (tektronix)\n"
"col_addr_glitch\t\tYA\tonly positive motion for column\taddress\tand\n"
"\t\t\t\tmicro_column_address caps\n"
"cr_cancels_micro_mode\tYB\tusing cr turns off micro mode\n"
"has_print_wheel\t\tYC\tprinter\tneeds operator to change character\n"
"\t\t\t\tset\n"
"row_addr_glitch\t\tYD\tonly positive motion for row_address and\n"
"\t\t\t\tmicro_row_address caps\n"
"semi_auto_right_margin\tYE\tprinting in last column\tcauses cr\n"
"cpi_changes_res\t\tYF\tchanging character pitch changes resolution\n"
"lpi_changes_res\t\tYG\tchanging line pitch changes resolution\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:184
msgid "These are the numeric capabilities:"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:234
#, no-wrap
msgid ""
"B<Numeric\t\t\tTCap\tDescription>\n"
"B<Variables\t\tCode>\n"
"columns\t\t\tco\tnumber of columns in aline\n"
"init_tabs\t\tit\ttabs initially every # spaces\n"
"lines\t\t\tli\tnumber of lines\ton screen or page\n"
"lines_of_memory\t\tlm\tlines of memory\tif E<gt> line. 0 =E<gt>\tvaries\n"
"magic_cookie_glitch\tsg\tnumber of blank\tchars left by\n"
"\t\t\t\tenter_standout_mode or exit_standout_mode\n"
"padding_baud_rate\tpb\tlowest baud rate where padding needed\n"
"virtual_terminal\tvt\tvirtual\tterminal number\t(CB/unix)\n"
"width_status_line\tws\tcolumns\tin status line\n"
"num_labels\t\tNl\tnumber of labels on screen\n"
"label_height\t\tlh\trows in\teach label\n"
"label_width\t\tlw\tcolumns\tin each\tlabel\n"
"max_attributes\t\tma\tmaximum\tcombined attributes terminal can\n"
"\t\t\t\thandle\n"
"maximum_windows\t\tMW\tmaximum\tnumber of definable windows\n"
"magic_cookie_glitch_ul\tug\tnumber of blanks left by underline\n"
"#\n"
"# These came in with SVr4's color support\n"
"#\n"
"max_colors\t\tCo\tmaximum\tnumbers\tof colors on screen\n"
"max_pairs\t\tpa\tmaximum\tnumber of color-pairs on the screen\n"
"no_color_video\t\tNC\tvideo attributes that cannot be used with\n"
"\t\t\t\tcolors\n"
"#\n"
"# The following\tnumeric\tcapabilities are present in the\tSVr4.0 term\n"
"# structure, but are not yet documented\tin the man page.\n"
"# They came in with SVr4's printer support.\n"
"#\n"
"buffer_capacity\t\tYa\tnumbers\tof bytes buffered before printing\n"
"dot_vert_spacing\tYb\tspacing\tof pins\tvertically in pins per inch\n"
"dot_horz_spacing\tYc\tspacing\tof dots\thorizontally in\tdots per\n"
"\t\t\t\tinch\n"
"max_micro_address\tYd\tmaximum\tvalue in micro_..._address\n"
"max_micro_jump\t\tYe\tmaximum\tvalue in parm_..._micro\n"
"micro_char_size\t\tYf\tcharacter size when in micro mode\n"
"micro_line_size\t\tYg\tline size when in micro\tmode\n"
"number_of_pins\t\tYh\tnumbers\tof pins\tin print-head\n"
"output_res_char\t\tYi\thorizontal resolution in units per line\n"
"output_res_line\t\tYj\tvertical resolution in units per line\n"
"output_res_horz_inch\tYk\thorizontal resolution in units per inch\n"
"output_res_vert_inch\tYl\tvertical resolution in units per inch\n"
"print_rate\t\tYm\tprint rate in chars per\tsecond\n"
"wide_char_size\t\tYn\tcharacter step size when in double wide\n"
"\t\t\t\tmode\n"
"buttons\t\t\tBT\tnumber of buttons on mouse\n"
"bit_image_entwining\tYo\tnumber of passed for each bit-image row\n"
"bit_image_type\t\tYp\ttype of\tbit-image device\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:237
msgid "These are the string capabilities:"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:663
#, no-wrap
msgid ""
"B<String\t\t\tTCap\tDescription>\n"
"B<Variables\t\tCode>\n"
"back_tab\t\tbt\tback tab (P)\n"
"bell\t\t\tbl\taudible\tsignal (bell) (P)\n"
"carriage_return\t\tcr\tcarriage return\t(P*)\n"
"change_scroll_region\tcs\tchange region to line #1 to line #2 (P)\n"
"clear_all_tabs\t\tct\tclear all tab stops (P)\n"
"clear_screen\t\tcl\tclear screen and home cursor (P*)\n"
"clr_eol\t\t\tce\tclear to end of\tline (P)\n"
"clr_eos\t\t\tcd\tclear to end of\tscreen (P*)\n"
"column_address\t\tch\thorizontal position #1,\tabsolute (P)\n"
"command_character\tCC\tterminal settable cmd character\tin\n"
"\t\t\t\tprototype\n"
"cursor_address\t\tcm\tmove to\trow #1 columns #2\n"
"cursor_down\t\tdo\tdown one line\n"
"cursor_home\t\tho\thome cursor\n"
"cursor_invisible\tvi\tmake cursor invisible\n"
"cursor_left\t\tle\tmove left one space\n"
"cursor_mem_address\tCM\tmemory relative\tcursor addressing\n"
"cursor_normal\t\tve\tmake cursor appear normal (undo\n"
"\t\t\t\tcursor_invisible/cursor_visible)\n"
"cursor_right\t\tnd\tmove right one space\n"
"cursor_to_ll\t\tll\tlast line, first column\n"
"cursor_up\t\tup\tup one line\n"
"cursor_visible\t\tvs\tmake cursor very visible\n"
"delete_character\tdc\tdelete character (P*)\n"
"delete_line\t\tdl\tdelete line (P*)\n"
"dis_status_line\t\tds\tdisable\tstatus line\n"
"down_half_line\t\thd\thalf a line down\n"
"enter_alt_charset_mode\tas\tstart alternate\tcharacter set (P)\n"
"enter_blink_mode\tmb\tturn on\tblinking\n"
"enter_bold_mode\t\tmd\tturn on\tbold (extra bright) mode\n"
"enter_ca_mode\t\tti\tstring to start\tprograms using\n"
"\t\t\t\tcursor_address\n"
"enter_delete_mode\tdm\tenter delete mode\n"
"enter_dim_mode\t\tmh\tturn on\thalf-bright mode\n"
"enter_insert_mode\tim\tenter insert mode\n"
"enter_secure_mode\tmk\tturn on\tblank mode (characters invisible)\n"
"enter_protected_mode\tmp\tturn on\tprotected mode\n"
"enter_reverse_mode\tmr\tturn on\treverse\tvideo mode\n"
"enter_standout_mode\tso\tbegin standout mode\n"
"enter_underline_mode\tus\tbegin underline\tmode\n"
"erase_chars\t\tec\terase #1 characters (P)\n"
"exit_alt_charset_mode\tae\tend alternate character\tset (P)\n"
"exit_attribute_mode\tme\tturn off all attributes\n"
"exit_ca_mode\t\tte\tstrings\tto end programs\tusing cup\n"
"exit_delete_mode\ted\tend delete mode\n"
"exit_insert_mode\tei\texit insert mode\n"
"exit_standout_mode\tse\texit standout mode\n"
"exit_underline_mode\tue\texit underline mode\n"
"flash_screen\t\tvb\tvisible\tbell (may not move cursor)\n"
"form_feed\t\tff\thardcopy terminal page eject (P*)\n"
"from_status_line\tfs\treturn from status line\n"
"init_1string\t\ti1\tinitialization string\n"
"init_2string\t\tis\tinitialization string\n"
"init_3string\t\ti3\tinitialization string\n"
"init_file\t\tif\tname of\tinitialization file\n"
"insert_character\tic\tinsert character (P)\n"
"insert_line\t\tal\tinsert line (P*)\n"
"insert_padding\t\tip\tinsert padding after inserted character\n"
"key_backspace\t\tkb\tbackspace key\n"
"key_catab\t\tka\tclear-all-tabs key\n"
"key_clear\t\tkC\tclear-screen or\terase key\n"
"key_ctab\t\tkt\tclear-tab key\n"
"key_dc\t\t\tkD\tdelete-character key\n"
"key_dl\t\t\tkL\tdelete-line key\n"
"key_down\t\tkd\tdown-arrow key\n"
"key_eic\t\t\tkM\tsent by\trmir or\tsmir in\tinsert mode\n"
"key_eol\t\t\tkE\tclear-to-end-of-line key\n"
"key_eos\t\t\tkS\tclear-to-end-of-screen key\n"
"key_f0\t\t\tk0\tF0 function key\n"
"key_f1\t\t\tk1\tF1 function key\n"
"key_f10\t\t\tk;\tF10 function key\n"
"key_f2\t\t\tk2\tF2 function key\n"
"key_f3\t\t\tk3\tF3 function key\n"
"key_f4\t\t\tk4\tF4 function key\n"
"key_f5\t\t\tk5\tF5 function key\n"
"key_f6\t\t\tk6\tF6 function key\n"
"key_f7\t\t\tk7\tF7 function key\n"
"key_f8\t\t\tk8\tF8 function key\n"
"key_f9\t\t\tk9\tF9 function key\n"
"key_home\t\tkh\thome key\n"
"key_ic\t\t\tkI\tinsert-character key\n"
"key_il\t\t\tkA\tinsert-line key\n"
"key_left\t\tkl\tleft-arrow key\n"
"key_ll\t\t\tkH\tlast-line key\n"
"key_npage\t\tkN\tnext-page key\n"
"key_ppage\t\tkP\tprev-page key\n"
"key_right\t\tkr\tright-arrow key\n"
"key_sf\t\t\tkF\tscroll-forward key\n"
"key_sr\t\t\tkR\tscroll-backward\tkey\n"
"key_stab\t\tkT\tset-tab\tkey\n"
"key_up\t\t\tku\tup-arrow key\n"
"keypad_local\t\tke\tleave 'keyboard_transmit' mode\n"
"keypad_xmit\t\tks\tenter 'keyboard_transmit' mode\n"
"lab_f0\t\t\tl0\tlabel on function key f0 if not\tf0\n"
"lab_f1\t\t\tl1\tlabel on function key f1 if not\tf1\n"
"lab_f10\t\t\tla\tlabel on function key f10 if not f10\n"
"lab_f2\t\t\tl2\tlabel on function key f2 if not\tf2\n"
"lab_f3\t\t\tl3\tlabel on function key f3 if not\tf3\n"
"lab_f4\t\t\tl4\tlabel on function key f4 if not\tf4\n"
"lab_f5\t\t\tl5\tlabel on function key f5 if not\tf5\n"
"lab_f6\t\t\tl6\tlabel on function key f6 if not\tf6\n"
"lab_f7\t\t\tl7\tlabel on function key f7 if not\tf7\n"
"lab_f8\t\t\tl8\tlabel on function key f8 if not\tf8\n"
"lab_f9\t\t\tl9\tlabel on function key f9 if not\tf9\n"
"meta_off\t\tmo\tturn off meta mode\n"
"meta_on\t\t\tmm\tturn on\tmeta mode (8th-bit on)\n"
"newline\t\t\tnw\tnewline\t(behave\tlike cr\tfollowed by lf)\n"
"pad_char\t\tpc\tpadding\tchar (instead of null)\n"
"parm_dch\t\tDC\tdelete #1 chars\t(P*)\n"
"parm_delete_line\tDL\tdelete #1 lines\t(P*)\n"
"parm_down_cursor\tDO\tdown #1\tlines (P*)\n"
"parm_ich\t\tIC\tinsert #1 chars\t(P*)\n"
"parm_index\t\tSF\tscroll forward #1 lines\t(P)\n"
"parm_insert_line\tAL\tinsert #1 lines\t(P*)\n"
"parm_left_cursor\tLE\tmove #1\tchars to the left (P)\n"
"parm_right_cursor\tRI\tmove #1\tchars to the right (P*)\n"
"parm_rindex\t\tSR\tscroll back #1 lines (P)\n"
"parm_up_cursor\t\tUP\tup #1 lines (P*)\n"
"pkey_key\t\tpk\tprogram\tfunction key #1\tto type\tstring #2\n"
"pkey_local\t\tpl\tprogram\tfunction key #1\tto execute\n"
"\t\t\t\tstring #2\n"
"pkey_xmit\t\tpx\tprogram\tfunction key #1\tto transmit\n"
"\t\t\t\tstring #2\n"
"print_screen\t\tps\tprint contents of screen\n"
"prtr_off\t\tpf\tturn off printer\n"
"prtr_on\t\t\tpo\tturn on\tprinter\n"
"repeat_char\t\trp\trepeat char #1 #2 times\t(P*)\n"
"reset_1string\t\tr1\treset string\n"
"reset_2string\t\tr2\treset string\n"
"reset_3string\t\tr3\treset string\n"
"reset_file\t\trf\tname of\treset file\n"
"restore_cursor\t\trc\trestore\tcursor to last position\tof\n"
"\t\t\t\tsave_cursor\n"
"row_address\t\tcv\tvertical position #1 absolute (P)\n"
"save_cursor\t\tsc\tsave current cursor position (P)\n"
"scroll_forward\t\tsf\tscroll text up (P)\n"
"scroll_reverse\t\tsr\tscroll text down (P)\n"
"set_attributes\t\tsa\tdefine video attributes\t#1-#9 (PG9)\n"
"set_tab\t\t\tst\tset a tab in every row,\tcurrent\tcolumns\n"
"set_window\t\twi\tcurrent\twindow is lines\t#1-#2 cols #3-#4\n"
"tab\t\t\tta\ttab to next 8-space hardware tab stop\n"
"to_status_line\t\tts\tmove to\tstatus line\n"
"underline_char\t\tuc\tunderline char and move\tpast it\n"
"up_half_line\t\thu\thalf a line up\n"
"init_prog\t\tiP\tpath name of program for initialization\n"
"key_a1\t\t\tK1\tupper left of keypad\n"
"key_a3\t\t\tK3\tupper right of keypad\n"
"key_b2\t\t\tK2\tcenter of keypad\n"
"key_c1\t\t\tK4\tlower left of keypad\n"
"key_c3\t\t\tK5\tlower right of keypad\n"
"prtr_non\t\tpO\tturn on\tprinter\tfor #1 bytes\n"
"termcap_init2\t\ti2\tsecondary initialization string\n"
"termcap_reset\t\trs\tterminal reset string\n"
"#\n"
"# SVr1 capabilities stop here.\tIBM's version of terminfo is the same as\n"
"# SVr4 up to this point, but has a different set afterwards.\n"
"#\n"
"char_padding\t\trP\tlike insert_padding but\twhen in\tinsert mode\n"
"acs_chars\t\tac\tgraphics charset pairs - def=vt100\n"
"plab_norm\t\tpn\tprogram\tlabel #1 to show string\t#2\n"
"key_btab\t\tkB\tback-tab key\n"
"enter_xon_mode\t\tSX\tturn on\txon/xoff handshaking\n"
"exit_xon_mode\t\tRX\tturn off xon/xoff handshaking\n"
"enter_am_mode\t\tSA\tturn on\tautomatic margins\n"
"exit_am_mode\t\tRA\tturn off automatic margins\n"
"xon_character\t\tXN\tXON character\n"
"xoff_character\t\tXF\tXOFF character\n"
"ena_acs\t\t\teA\tenable alternate char set\n"
"label_on\t\tLO\tturn on\tsoft labels\n"
"label_off\t\tLF\tturn off soft labels\n"
"key_beg\t\t\t@1\tbegin key\n"
"key_cancel\t\t@2\tcancel key\n"
"key_close\t\t@3\tclose key\n"
"key_command\t\t@4\tcommand\tkey\n"
"key_copy\t\t@5\tcopy key\n"
"key_create\t\t@6\tcreate key\n"
"key_end\t\t\t@7\tend key\n"
"key_enter\t\t@8\tenter/send key\n"
"key_exit\t\t@9\texit key\n"
"key_find\t\t@0\tfind key\n"
"key_help\t\t%1\thelp key\n"
"key_mark\t\t%2\tmark key\n"
"key_message\t\t%3\tmessage\tkey\n"
"key_move\t\t%4\tmove key\n"
"key_next\t\t%5\tnext key\n"
"key_open\t\t%6\topen key\n"
"key_options\t\t%7\toptions\tkey\n"
"key_previous\t\t%8\tprevious key\n"
"key_print\t\t%9\tprint key\n"
"key_redo\t\t%0\tredo key\n"
"key_reference\t\t&1\treference key\n"
"key_refresh\t\t&2\trefresh\tkey\n"
"key_replace\t\t&3\treplace\tkey\n"
"key_restart\t\t&4\trestart\tkey\n"
"key_resume\t\t&5\tresume key\n"
"key_save\t\t&6\tsave key\n"
"key_suspend\t\t&7\tsuspend\tkey\n"
"key_undo\t\t&8\tundo key\n"
"key_sbeg\t\t&9\tshifted\tkey\n"
"key_scancel\t\t&0\tshifted\tkey\n"
"key_scommand\t\t*1\tshifted\tkey\n"
"key_scopy\t\t*2\tshifted\tkey\n"
"key_screate\t\t*3\tshifted\tkey\n"
"key_sdc\t\t\t*4\tshifted\tkey\n"
"key_sdl\t\t\t*5\tshifted\tkey\n"
"key_select\t\t*6\tselect key\n"
"key_send\t\t*7\tshifted\tkey\n"
"key_seol\t\t*8\tshifted\tkey\n"
"key_sexit\t\t*9\tshifted\tkey\n"
"key_sfind\t\t*0\tshifted\tkey\n"
"key_shelp\t\t#1\tshifted\tkey\n"
"key_shome\t\t#2\tshifted\tkey\n"
"key_sic\t\t\t#3\tshifted\tkey\n"
"key_sleft\t\t#4\tshifted\tkey\n"
"key_smessage\t\t%a\tshifted\tkey\n"
"key_smove\t\t%b\tshifted\tkey\n"
"key_snext\t\t%c\tshifted\tkey\n"
"key_soptions\t\t%d\tshifted\tkey\n"
"key_sprevious\t\t%e\tshifted\tkey\n"
"key_sprint\t\t%f\tshifted\tkey\n"
"key_sredo\t\t%g\tshifted\tkey\n"
"key_sreplace\t\t%h\tshifted\tkey\n"
"key_sright\t\t%i\tshifted\tkey\n"
"key_srsume\t\t%j\tshifted\tkey\n"
"key_ssave\t\t!1\tshifted\tkey\n"
"key_ssuspend\t\t!2\tshifted\tkey\n"
"key_sundo\t\t!3\tshifted\tkey\n"
"req_for_input\t\tRF\tsend next input\tchar (for ptys)\n"
"key_f11\t\t\tF1\tF11 function key\n"
"key_f12\t\t\tF2\tF12 function key\n"
"key_f13\t\t\tF3\tF13 function key\n"
"key_f14\t\t\tF4\tF14 function key\n"
"key_f15\t\t\tF5\tF15 function key\n"
"key_f16\t\t\tF6\tF16 function key\n"
"key_f17\t\t\tF7\tF17 function key\n"
"key_f18\t\t\tF8\tF18 function key\n"
"key_f19\t\t\tF9\tF19 function key\n"
"key_f20\t\t\tFA\tF20 function key\n"
"key_f21\t\t\tFB\tF21 function key\n"
"key_f22\t\t\tFC\tF22 function key\n"
"key_f23\t\t\tFD\tF23 function key\n"
"key_f24\t\t\tFE\tF24 function key\n"
"key_f25\t\t\tFF\tF25 function key\n"
"key_f26\t\t\tFG\tF26 function key\n"
"key_f27\t\t\tFH\tF27 function key\n"
"key_f28\t\t\tFI\tF28 function key\n"
"key_f29\t\t\tFJ\tF29 function key\n"
"key_f30\t\t\tFK\tF30 function key\n"
"key_f31\t\t\tFL\tF31 function key\n"
"key_f32\t\t\tFM\tF32 function key\n"
"key_f33\t\t\tFN\tF33 function key\n"
"key_f34\t\t\tFO\tF34 function key\n"
"key_f35\t\t\tFP\tF35 function key\n"
"key_f36\t\t\tFQ\tF36 function key\n"
"key_f37\t\t\tFR\tF37 function key\n"
"key_f38\t\t\tFS\tF38 function key\n"
"key_f39\t\t\tFT\tF39 function key\n"
"key_f40\t\t\tFU\tF40 function key\n"
"key_f41\t\t\tFV\tF41 function key\n"
"key_f42\t\t\tFW\tF42 function key\n"
"key_f43\t\t\tFX\tF43 function key\n"
"key_f44\t\t\tFY\tF44 function key\n"
"key_f45\t\t\tFZ\tF45 function key\n"
"key_f46\t\t\tFa\tF46 function key\n"
"key_f47\t\t\tFb\tF47 function key\n"
"key_f48\t\t\tFc\tF48 function key\n"
"key_f49\t\t\tFd\tF49 function key\n"
"key_f50\t\t\tFe\tF50 function key\n"
"key_f51\t\t\tFf\tF51 function key\n"
"key_f52\t\t\tFg\tF52 function key\n"
"key_f53\t\t\tFh\tF53 function key\n"
"key_f54\t\t\tFi\tF54 function key\n"
"key_f55\t\t\tFj\tF55 function key\n"
"key_f56\t\t\tFk\tF56 function key\n"
"key_f57\t\t\tFl\tF57 function key\n"
"key_f58\t\t\tFm\tF58 function key\n"
"key_f59\t\t\tFn\tF59 function key\n"
"key_f60\t\t\tFo\tF60 function key\n"
"key_f61\t\t\tFp\tF61 function key\n"
"key_f62\t\t\tFq\tF62 function key\n"
"key_f63\t\t\tFr\tF63 function key\n"
"clr_bol\t\t\tcb\tClear to beginning of line\n"
"clear_margins\t\tMC\tclear right and\tleft soft margins\n"
"set_left_margin\t\tML\tset left soft margin\n"
"set_right_margin\tMR\tset right soft margin\n"
"label_format\t\tLf\tlabel format\n"
"set_clock\t\tSC\tset clock, #1 hrs #2 mins #3 secs\n"
"display_clock\t\tDK\tdisplay\tclock at (#1,#2)\n"
"remove_clock\t\tRC\tremove clock\n"
"create_window\t\tCW\tdefine a window\t#1 from\t#2, #3 to #4, #5\n"
"goto_window\t\tWG\tgo to window #1\n"
"hangup\t\t\tHU\thang-up\tphone\n"
"dial_phone\t\tDI\tdial number #1\n"
"quick_dial\t\tQD\tdial number #1 without checking\n"
"tone\t\t\tTO\tselect touch tone dialing\n"
"pulse\t\t\tPU\tselect pulse dialling\n"
"flash_hook\t\tfh\tflash switch hook\n"
"fixed_pause\t\tPA\tpause for 2-3 seconds\n"
"wait_tone\t\tWA\twait for dial-tone\n"
"user0\t\t\tu0\tUser string #0\n"
"user1\t\t\tu1\tUser string #1\n"
"user2\t\t\tu2\tUser string #2\n"
"user3\t\t\tu3\tUser string #3\n"
"user4\t\t\tu4\tUser string #4\n"
"user5\t\t\tu5\tUser string #5\n"
"user6\t\t\tu6\tUser string #6\n"
"user7\t\t\tu7\tUser string #7\n"
"user8\t\t\tu8\tUser string #8\n"
"user9\t\t\tu9\tUser string #9\n"
"#\n"
"# SVr4 added these capabilities to support color\n"
"#\n"
"orig_pair\t\top\tSet default pair to its\toriginal value\n"
"orig_colors\t\toc\tSet all\tcolor pairs to the original ones\n"
"initialize_color\tIc\tinitialize color #1 to (#2,#3,#4)\n"
"initialize_pair\t\tIp\tInitialize color pair #1 to fg=(#2,#3,#4),\n"
"\t\t\t\tbg=(#5,#6,#7)\n"
"set_color_pair\t\tsp\tSet current color pair to #1\n"
"set_foreground\t\tSf\tSet foreground color #1\n"
"set_background\t\tSb\tSet background color #1\n"
"#\n"
"# SVr4 added these capabilities to support printers\n"
"#\n"
"change_char_pitch\tZA\tChange number of characters per\tinch\n"
"change_line_pitch\tZB\tChange number of lines per inch\n"
"change_res_horz\t\tZC\tChange horizontal resolution\n"
"change_res_vert\t\tZD\tChange vertical\tresolution\n"
"define_char\t\tZE\tDefine a character\n"
"enter_doublewide_mode\tZF\tEnter double-wide mode\n"
"enter_draft_quality\tZG\tEnter draft-quality mode\n"
"enter_italics_mode\tZH\tEnter italic mode\n"
"enter_leftward_mode\tZI\tStart leftward carriage\tmotion\n"
"enter_micro_mode\tZJ\tStart micro-motion mode\n"
"enter_near_letter_quality\tZK\tEnter NLQ mode\n"
"enter_normal_quality\tZL\tEnter normal-quality mode\n"
"enter_shadow_mode\tZM\tEnter shadow-print mode\n"
"enter_subscript_mode\tZN\tEnter subscript\tmode\n"
"enter_superscript_mode\tZO\tEnter superscript mode\n"
"enter_upward_mode\tZP\tStart upward carriage motion\n"
"exit_doublewide_mode\tZQ\tEnd double-wide\tmode\n"
"exit_italics_mode\tZR\tEnd italic mode\n"
"exit_leftward_mode\tZS\tEnd left-motion\tmode\n"
"exit_micro_mode\t\tZT\tEnd micro-motion mode\n"
"exit_shadow_mode\tZU\tEnd shadow-print mode\n"
"exit_subscript_mode\tZV\tEnd subscript mode\n"
"exit_superscript_mode\tZW\tEnd superscript\tmode\n"
"exit_upward_mode\tZX\tEnd reverse character motion\n"
"micro_column_address\tZY\tLike column_address in micro mode\n"
"micro_down\t\tZZ\tLike cursor_down in micro mode\n"
"micro_left\t\tZa\tLike cursor_left in micro mode\n"
"micro_right\t\tZb\tLike cursor_right in micro mode\n"
"micro_row_address\tZc\tLike row_address in micro mode\n"
"micro_up\t\tZd\tLike cursor_up in micro\tmode\n"
"order_of_pins\t\tZe\tMatch software bits to print-head pins\n"
"parm_down_micro\t\tZf\tLike parm_down_cursor in micro mode\n"
"parm_left_micro\t\tZg\tLike parm_left_cursor in micro mode\n"
"parm_right_micro\tZh\tLike parm_right_cursor in micro\tmode\n"
"parm_up_micro\t\tZi\tLike parm_up_cursor in micro mode\n"
"select_char_set\t\tZj\tSelect character set\n"
"set_bottom_margin\tZk\tSet bottom margin at current line\n"
"set_bottom_margin_parm\tZl\tSet bottom margin at line #1 or\t#2 lines\n"
"\t\t\t\tfrom bottom\n"
"set_left_margin_parm\tZm\tSet left (right) margin\tat column #1 (#2)\n"
"set_right_margin_parm\tZn\tSet right margin at column #1\n"
"set_top_margin\t\tZo\tSet top\tmargin at current line\n"
"set_top_margin_parm\tZp\tSet top\t(bottom) margin\tat row #1 (#2)\n"
"start_bit_image\t\tZq\tStart printing bit image graphics\n"
"start_char_set_def\tZr\tStart character\tset definition\n"
"stop_bit_image\t\tZs\tStop printing bit image\tgraphics\n"
"stop_char_set_def\tZt\tEnd definition of character aet\n"
"subscript_characters\tZu\tList of\tsubscriptible characters\n"
"superscript_characters\tZv\tList of\tsuperscriptible\tcharacters\n"
"these_cause_cr\t\tZw\tPrinting any of\tthese chars causes CR\n"
"zero_motion\t\tZx\tNo motion for subsequent character\n"
"#\n"
"# The following\tstring capabilities are\tpresent\tin the SVr4.0 term\n"
"# structure, but are not documented in the man page.\n"
"#\n"
"char_set_names\t\tZy\tList of\tcharacter set names\n"
"key_mouse\t\tKm\tMouse event has\toccurred\n"
"mouse_info\t\tMi\tMouse status information\n"
"req_mouse_pos\t\tRQ\tRequest\tmouse position\n"
"get_mouse\t\tGm\tCurses should get button events\n"
"set_a_foreground\tAF\tSet ANSI foreground color\n"
"set_a_background\tAB\tSet ANSI background color\n"
"pkey_plab\t\txl\tProgram\tfunction key #1\tto type\tstring #2\n"
"\t\t\t\tand show string\t#3\n"
"device_type\t\tdv\tIndicate language/codeset support\n"
"code_set_init\t\tci\tInit sequence for multiple codesets\n"
"set0_des_seq\t\ts0\tShift to code set 0 (EUC set 0,\tASCII)\n"
"set1_des_seq\t\ts1\tShift to code set 1\n"
"set2_des_seq\t\ts2\tShift to code set 2\n"
"set3_des_seq\t\ts3\tShift to code set 3\n"
"set_lr_margin\t\tML\tSet both left and right\tmargins\tto #1, #2\n"
"set_tb_margin\t\tMT\tSets both top and bottom margins to #1,\t#2\n"
"bit_image_repeat\tXy\tRepeat bit image cell #1 #2 times\n"
"bit_image_newline\tZz\tMove to\tnext row of the\tbit image\n"
"bit_image_carriage_return\tYv\tMove to\tbeginning of same row\n"
"color_names\t\tYw\tGive name for color #1\n"
"define_bit_image_region\tYx\tDefine rectangular bit image region\n"
"end_bit_image_region\tYy\tEnd a bit-image\tregion\n"
"set_color_band\t\tYz\tChange to ribbon color #1\n"
"set_page_length\t\tYZ\tSet page length\tto #1 lines\n"
"#\n"
"# SVr4 added these capabilities for direct PC-clone support\n"
"#\n"
"display_pc_char\t\tS1\tDisplay\tPC character\n"
"enter_pc_charset_mode\tS2\tEnter PC character display mode\n"
"exit_pc_charset_mode\tS3\tExit PC\tcharacter display mode\n"
"enter_scancode_mode\tS4\tEnter PC scancode mode\n"
"exit_scancode_mode\tS5\tExit PC\tscancode mode\n"
"pc_term_options\t\tS6\tPC terminal options\n"
"scancode_escape\t\tS7\tEscape for scancode emulation\n"
"alt_scancode_esc\tS8\tAlternate escape for scancode emulation\n"
"#\n"
"# The XSI Curses standard added\tthese.\n"
"#\n"
"enter_horizontal_hl_mode\tXh\tEnter horizontal highlight mode\n"
"enter_left_hl_mode\tXl\tEnter left highlight mode\n"
"enter_low_hl_mode\tXo\tEnter low highlight mode\n"
"enter_right_hl_mode\tXr\tEnter right highlight mode\n"
"enter_top_hl_mode\tXt\tEnter top highlight mode\n"
"enter_vertical_hl_mode\tXv\tEnter vertical highlight mode\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:667
msgid "Obsolete termcap capabilities.  New software should not rely on them at all."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:682
#, no-wrap
msgid ""
"B<Boolean\t\t\tTCap\tDescription>\n"
"B<Variables\t\tCode>\n"
"linefeed_is_newline\tNL\tmove down with ^J\n"
"even_parity\t\tEP\tterminal requires even parity\n"
"odd_parity\t\tOP\tterminal requires odd parity\n"
"half_duplex\t\tHD\tterminal is half-duplex\n"
"lower_case_only\t\tLC\tterminal has only lower\tcase\n"
"upper_case_only\t\tUC\tterminal has only upper\tcase\n"
"has_hardware_tabs\tpt\thas 8-char tabs\tinvoked\twith ^I\n"
"return_does_clr_eol\txr\treturn clears the line\n"
"tek_4025_insert_line\txx\tTektronix 4025 insert-line glitch\n"
"backspaces_with_bs\tbs\tuses ^H\tto move\tleft\n"
"crt_no_scrolling\tns\tcrt cannot scroll\n"
"no_correctly_working_cr\tnc\tno way to go to\tstart of line\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:693
#, no-wrap
msgid ""
"B<Number\t\t\tTCap\tDescription>\n"
"B<Variables\t\tCode>\n"
"backspace_delay\t\tdB\tpadding\trequired for ^H\n"
"form_feed_delay\t\tdF\tpadding\trequired for ^L\n"
"horizontal_tab_delay\tdT\tpadding\trequired for ^I\n"
"vertical_tab_delay\tdV\tpadding\trequired for ^V\n"
"number_of_function_keys\tkn\tcount of function keys\n"
"carriage_return_delay\tdC\tpad needed for CR\n"
"new_line_delay\t\tdN\tpad needed for LF\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:705
#, no-wrap
msgid ""
"B<String\t\t\tTCap\tDescription>\n"
"B<Variables\t\tCode>\n"
"other_non_function_keys\tko\tlist of\tself-mapped keycaps\n"
"arrow_key_map\t\tma\tmap arrow keys\n"
"memory_lock_above\tml\tlock visible screen memory above the\n"
"\t\t\t\tcurrent\tline\n"
"memory_unlock\t\tmu\tunlock visible screen memory above the\n"
"\t\t\t\tcurrent\tline\n"
"linefeed_if_not_lf\tnl\tuse to move down\n"
"backspace_if_not_bs\tbc\tmove left, if not ^H\n"
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:706
#, no-wrap
msgid "A Sample Entry"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:711
msgid ""
"The following entry, which describes the Concept\\-100, is among the more "
"complex entries in the E<.Nm> file as of this writing."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:724
#, no-wrap
msgid ""
"ca\\||\\|concept100\\||\\|c100\\||\\|concept\\||\\|c104\\||\\|concept100-4p\\||\\|HDS "
"Concept\\-100:\\e\n"
"\t:al=3*\\eE^R:am:bl=^G:cd=16*\\eE^C:ce=16\\eE^U:cl=2*^L:cm=\\eEa%+ %+ "
":\\e\n"
"\t:co#80:.cr=9^M:db:dc=16\\eE^A:dl=3*\\eE^B:do=^J:ei=\\eE\\e200:eo:im=\\eE^P:in:\\e\n"
"\t:ip=16*:is=\\eEU\\eEf\\eE7\\eE5\\eE8\\eEl\\eENH\\eEK\\eE\\e200\\eEo&\\e200\\eEo\\e47\\eE:k1=\\eE5:\\e\n"
"\t:k2=\\eE6:k3=\\eE7:kb=^h:kd=\\eEE<lt>:ke=\\eEx:kh=\\eE?:kl=\\eEE<gt>:kr=\\eE=:ks=\\eEX:\\e\n"
"\t:ku=\\eE;:le=^H:li#24:mb=\\eEC:me=\\eEN\\e200:mh=\\eEE:mi:mk=\\eEH:mp=\\eEI:\\e\n"
"\t:mr=\\eED:nd=\\eE=:pb#9600:rp=0.2*\\eEr%.%+ "
":se=\\eEd\\eEe:sf=^J:so=\\eEE\\eED:\\e\n"
"\t:.ta=8\\et:te=\\eEv    "
"\\e200\\e200\\e200\\e200\\e200\\e200\\eEp\\er\\en:\\e\n"
"\t:ti=\\eEU\\eEv  8p\\eEp\\er:ue=\\eEg:ul:up=\\eE;:us=\\eEG:\\e\n"
"\t:vb=\\eEk\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\e200\\eEK:\\e\n"
"\t:ve=\\eEw:vs=\\eEW:vt#8:xn:\\e\n"
"\t:bs:cr=^M:dC#9:dT#8:nl=^J:ta=^I:pt:\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:732
msgid ""
"Entries may continue onto multiple lines by giving a \\e as the last "
"character of a line, and empty fields may be included for readability (here "
"between the last field on a line and the first field on the next).  Comments "
"may be included on lines beginning with E<.Dq #>."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:732
#, no-wrap
msgid "Types of Capabilities"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:751
msgid ""
"Capabilities in E<.Nm> are of three types: Boolean capabilities, which "
"indicate particular features that the terminal has; numeric capabilities, "
"giving the size of the display or the size of other attributes; and string "
"capabilities, which give character sequences that can be used to perform "
"particular terminal operations.  All capabilities have two-letter codes.  "
"For instance, the fact that the Concept has E<.Em automatic margins> (an "
"automatic return and linefeed when the end of a line is reached) is "
"indicated by the Boolean capability E<.Sy \\&am>.  Hence the description of "
"the Concept includes E<.Sy \\&am>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:757
msgid ""
"Numeric capabilities are followed by the character `#' then the value.  In "
"the example above E<.Sy \\&co>, which indicates the number of columns the "
"display has, gives the value `80' for the Concept."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:785
msgid ""
"Finally, string-valued capabilities, such as E<.Sy \\&ce> "
"(clear-to-end-of-line sequence) are given by the two-letter code, an `=', "
"then a string ending at the next following `:'.  A delay in milliseconds may "
"appear after the `=' in such a capability, which causes padding characters "
"to be supplied by E<.Xr tputs 3> after the remainder of the string is sent "
"to provide this delay.  The delay can be either a number, such as `20', or a "
"number followed by an `*', such as `3*'.  An `*' indicates that the padding "
"required is proportional to the number of lines affected by the operation, "
"and the amount given is the per-affected-line padding required.  (In the "
"case of insert-character, the factor is still the number of E<.Em lines> "
"affected; this is always 1 unless the terminal has E<.Sy \\&in> and the "
"software uses it.)  When an `*' is specified, it is sometimes useful to give "
"a delay of the form `3.5' to specify a delay per line to tenths of "
"milliseconds.  (Only one decimal place is allowed.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:830
msgid ""
"A number of escape sequences are provided in the string-valued capabilities "
"for easy encoding of control characters there.  E<.Sy \\&\\eE> maps to an "
"E<.Dv ESC> character, E<.Sy \\&^X> maps to a control-X for any appropriate "
"X, and the sequences E<.Sy \\&\\en> E<.Sy \\&\\er> E<.Sy \\&\\et> E<.Sy "
"\\&\\eb> E<.Sy \\&\\ef> map to linefeed, return, tab, backspace, and "
"formfeed, respectively.  Finally, characters may be given as three octal "
"digits after a E<.Sy \\&\\e>, and the characters E<.Sy \\&^> and E<.Sy "
"\\&\\e> may be given as E<.Sy \\&\\e^> and E<.Sy \\&\\e\\e>.  If it is "
"necessary to place a E<.Sy \\&:> in a capability it must be escaped as E<.Sy "
"\\e:> or be encoded as E<.Sy \\&\\e072>.  If it is necessary to place a "
"E<.Dv NUL> character in a string capability it must be encoded as E<.Sy "
"\\&\\e200>.  (The routines that deal with E<.Nm> use C strings and strip the "
"high bits of the output very late, so that a E<.Sy \\&\\e200> comes out as a "
"E<.Sy \\&\\e000> would.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:838
msgid ""
"Sometimes individual capabilities must be commented out.  To do this, put a "
"period before the capability name.  For example, see the first E<.Sy \\&cr> "
"and E<.Sy \\&ta> in the example above."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:838
#, no-wrap
msgid "Preparing Descriptions"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:870
msgid ""
"The most effective way to prepare a terminal description is by imitating the "
"description of a similar terminal in E<.Nm> and to build up a description "
"gradually, using partial descriptions with E<.Xr \\&vi 1> to check that they "
"are correct.  Be aware that a very unusual terminal may expose deficiencies "
"in the ability of the E<.Nm> file to describe it or bugs in E<.Xr \\&vi 1>.  "
"To easily test a new terminal description you are working on you can put it "
"in your home directory in a file called E<.Pa .termcap> and programs will "
"look there before looking in E<.Pa /usr/share/misc/termcap>.  You can also "
"set the environment variable E<.Ev TERMPATH> to a list of absolute file "
"pathnames (separated by spaces or colons), one of which contains the "
"description you are working on, and programs will search them in the order "
"listed, and nowhere else.  See E<.Xr termcap 3>.  The E<.Ev TERMCAP> "
"environment variable is usually set to the E<.Nm> entry itself to avoid "
"reading files when starting up a program."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:881
msgid ""
"To get the padding for insert-line right (if the terminal manufacturer did "
"not document it), a severe test is to use E<.Xr \\&vi 1> to edit E<.Pa "
"/etc/passwd> at 9600 baud, delete roughly 16 lines from the middle of the "
"screen, then hit the `u' key several times quickly.  If the display messes "
"up, more padding is usually needed.  A similar test can be used for "
"insert-character."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:881
#, no-wrap
msgid "Basic Capabilities"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:925
msgid ""
"The number of columns on each line of the display is given by the E<.Sy "
"\\&co> numeric capability.  If the display is a E<.Tn CRT>, then the number "
"of lines on the screen is given by the E<.Sy \\&li> capability.  If the "
"display wraps around to the beginning of the next line when the cursor "
"reaches the right margin, then it should have the E<.Sy \\&am> capability.  "
"If the terminal can clear its screen, the code to do this is given by the "
"E<.Sy \\&cl> string capability.  If the terminal overstrikes (rather than "
"clearing the position when a character is overwritten), it should have the "
"E<.Sy \\&os> capability.  If the terminal is a printing terminal, with no "
"soft copy unit, give it both E<.Sy \\&hc> and E<.Sy \\&os>.  E<.Pf ( Sy "
"\\&os> applies to storage scope terminals, such as the Tektronix 4010 "
"series, as well as to hard copy and E<.Tn APL> terminals.)  If there is a "
"code to move the cursor to the left edge of the current row, give this as "
"E<.Sy \\&cr>.  (Normally this will be carriage-return, E<.Sy \\&^M>.)  If "
"there is a code to produce an audible signal (bell, beep, etc.), give this "
"as E<.Sy \\&bl>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:947
msgid ""
"If there is a code (such as backspace)  to move the cursor one position to "
"the left, that capability should be given as E<.Sy \\&le>.  Similarly, codes "
"to move to the right, up, and down should be given as E<.Sy \\&nd>, E<.Sy "
"\\&up>, and E<.Sy \\&do>, respectively.  These E<.Em local cursor motions> "
"should not alter the text they pass over; for example, you would not "
"normally use E<.Dq nd=\\ \\&> unless the terminal has the E<.Sy \\&os> "
"capability, because the space would erase the character moved over."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:959
msgid ""
"A very important point here is that the local cursor motions encoded in "
"E<.Nm> have undefined behavior at the left and top edges of a E<.Tn CRT> "
"display.  Programs should never attempt to backspace around the left edge, "
"unless E<.Sy \\&bw> is given, and never attempt to go up off the top using "
"local cursor motions."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:986
msgid ""
"In order to scroll text up, a program goes to the bottom left corner of the "
"screen and sends the E<.Sy \\&sf> (index) string.  To scroll text down, a "
"program goes to the top left corner of the screen and sends the E<.Sy \\&sr> "
"(reverse index) string.  The strings E<.Sy \\&sf> and E<.Sy \\&sr> have "
"undefined behavior when not on their respective corners of the screen.  "
"Parameterized versions of the scrolling sequences are E<.Sy \\&SF> and E<.Sy "
"\\&SR>, which have the same semantics as E<.Sy \\&sf> and E<.Sy \\&sr> "
"except that they take one parameter and scroll that many lines.  They also "
"have undefined behavior except at the appropriate corner of the screen."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1020
msgid ""
"The E<.Sy \\&am> capability tells whether the cursor sticks at the right "
"edge of the screen when text is output there, but this does not necessarily "
"apply to E<.Sy \\&nd> from the last column.  Leftward local motion is "
"defined from the left edge only when E<.Sy \\&bw> is given; then an E<.Sy "
"\\&le> from the left edge will move to the right edge of the previous row.  "
"This is useful for drawing a box around the edge of the screen, for "
"example.  If the terminal has switch-selectable automatic margins, the "
"E<.Nm> description usually assumes that this feature is on, E<.Em i.e>., "
"E<.Sy \\&am>.  If the terminal has a command that moves to the first column "
"of the next line, that command can be given as E<.Sy \\&nw> (newline).  It "
"is permissible for this to clear the remainder of the current line, so if "
"the terminal has no correctly-working E<.Tn \\&CR> and E<.Tn \\&LF> it may "
"still be possible to craft a working E<.Sy \\&nw> out of one or both of "
"them."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1025
msgid ""
"These capabilities suffice to describe hardcopy and E<.Dq glass-tty> "
"terminals.  Thus the Teletype model 33 is described as"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1028
#, no-wrap
msgid ""
"T3\\||\\|tty33\\||\\|33\\||\\|tty\\||\\|Teletype model 33:\\e\n"
"\t:bl=^G:co#72:cr=^M:do=^J:hc:os:\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1033
msgid "and the Lear Siegler E<.Tn ADM Ns \\-3> is described as"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1036
#, no-wrap
msgid ""
"l3\\||\\|adm3\\||\\|3\\||\\|LSI ADM-3:\\e\n"
":am:bl=^G:cl=^Z:co#80:cr=^M:do=^J:le=^H:li#24:sf=^J:\n"
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1037
#, no-wrap
msgid "Parameterized Strings"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1055
msgid ""
"Cursor addressing and other strings requiring parameters are described by a "
"parameterized string capability, with E<.Xr printf 3 Ns \\-like> escapes "
"E<.Sy \\&%x> in it, while other characters are passed through unchanged.  "
"For example, to address the cursor the E<.Sy \\&cm> capability is given, "
"using two parameters: the row and column to move to.  (Rows and columns are "
"numbered from zero and refer to the physical screen visible to the user, not "
"to any unseen memory.  If the terminal has memory-relative cursor "
"addressing, that can be indicated by an analogous E<.Sy \\&CM> capability.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1059
msgid "The E<.Sy \\&%> encodings have the following meanings:"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1060
#, no-wrap
msgid "%%\toutput `%'"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1061
#, no-wrap
msgid "%d\toutput value as in"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1064
msgid "E<.Xr printf 3> %d"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1064
#, no-wrap
msgid "%2\toutput value as in"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1067
msgid "E<.Xr printf 3> %2d"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1067
#, no-wrap
msgid "%3\toutput value as in"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1070
msgid "E<.Xr printf 3> %3d"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1070
#, no-wrap
msgid "%.\toutput value as in"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1073
msgid "E<.Xr printf 3> %c"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1073
#, no-wrap
msgid "%+ Ns Em x Ta No add"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1076
msgid "E<.Em x> to value, then do %."
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1076
#, no-wrap
msgid "%E<gt> Ns Em \\&xy Ta No if"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1082
msgid "value E<gt> E<.Em x> then add E<.Em y>, no output"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1082
#, no-wrap
msgid "%r\treverse order of two parameters, no output"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1083
#, no-wrap
msgid "%i\tincrement by one, no output"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1084
#, no-wrap
msgid "%n\texclusive-or all parameters with 0140 (Datamedia 2500)"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1085
#, no-wrap
msgid "\\&%B Ta Tn BCD No \"(16*(value/10)) + (value%10), no output\""
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:1086
#, no-wrap
msgid "%D\tReverse coding (value \\- 2*(value%16)), no output (Delta Data)."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1101
msgid ""
"Consider the Hewlett-Packard 2645, which, to get to row 3 and column 12, "
"needs to be sent E<.Dq \\eE&a12c03Y> padded for 6 milliseconds.  Note that "
"the order of the row and column coordinates is reversed here and that the "
"row and column are sent as two-digit integers.  Thus its E<.Sy \\&cm> "
"capability is E<.Dq Li cm=6\\eE&%r%2c%2Y>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1124
msgid ""
"The Datamedia 2500 needs the current row and column sent encoded in binary "
"using E<.Dq \\&%.>.  Terminals that use E<.Dq %.\\&> need to be able to "
"backspace the cursor E<.Pq Sy \\&le> and to move the cursor up one line on "
"the screen E<.Pq Sy \\&up>.  This is necessary because it is not always safe "
"to transmit E<.Sy \\&\\en>, E<.Sy \\&^D>, and E<.Sy \\&\\er>, as the system "
"may change or discard them.  (Programs using E<.Nm> must set terminal modes "
"so that tabs are not expanded, so E<.Sy \\&\\et> is safe to send.  This "
"turns out to be essential for the Ann Arbor 4080.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1130
msgid ""
"A final example is the Lear Siegler E<.Tn ADM Ns \\-3a>, which offsets row "
"and column by a blank character, thus E<.Dq Li cm=\\eE=%+ %+\\ \\&>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1155
msgid ""
"Row or column absolute cursor addressing can be given as single parameter "
"capabilities E<.Sy \\&ch> (horizontal position absolute) and E<.Sy \\&cv> "
"(vertical position absolute).  Sometimes these are shorter than the more "
"general two-parameter sequence (as with the Hewlett-Packard 2645) and can be "
"used in preference to E<.Sy \\&cm>.  If there are parameterized local "
"motions E<.Pf ( Em e.g>., move E<.Ar n> positions to the right)  these can "
"be given as E<.Sy \\&DO>, E<.Sy \\&LE>, E<.Sy \\&RI>, and E<.Sy \\&UP> with "
"a single parameter indicating how many positions to move.  These are "
"primarily useful if the terminal does not have E<.Sy \\&cm>, such as the "
"Tektronix 4025."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1155
#, no-wrap
msgid "Cursor Motions"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1176
msgid ""
"If the terminal has a fast way to home the cursor (to the very upper left "
"corner of the screen), this can be given as E<.Sy \\&ho>.  Similarly, a fast "
"way of getting to the lower left-hand corner can be given as E<.Sy \\&ll>; "
"this may involve going up with E<.Sy \\&up> from the home position, but a "
"program should never do this itself (unless E<.Sy \\&ll> does), because it "
"can make no assumption about the effect of moving up from the home "
"position.  Note that the home position is the same as cursor address (0,0): "
"to the top left corner of the screen, not of memory.  (Therefore, the E<.Dq "
"\\eEH> sequence on Hewlett-Packard terminals cannot be used for E<.Sy "
"\\&ho>.)"
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1176
#, no-wrap
msgid "Area Clears"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1190
msgid ""
"If the terminal can clear from the current position to the end of the line, "
"leaving the cursor where it is, this should be given as E<.Sy \\&ce>.  If "
"the terminal can clear from the current position to the end of the display, "
"this should be given as E<.Sy \\&cd>.  E<.Sy \\&cd> must only be invoked "
"from the first column of a line.  (Therefore, it can be simulated by a "
"request to delete a large number of lines, if a true E<.Sy \\&cd> is not "
"available.)"
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1190
#, no-wrap
msgid "Insert/Delete Line"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1232
msgid ""
"If the terminal can open a new blank line before the line containing the "
"cursor, this should be given as E<.Sy \\&al>; this must be invoked only from "
"the first position of a line.  The cursor must then appear at the left of "
"the newly blank line.  If the terminal can delete the line that the cursor "
"is on, this should be given as E<.Sy \\&dl>; this must only be used from the "
"first position on the line to be deleted.  Versions of E<.Sy \\&al> and "
"E<.Sy \\&dl> which take a single parameter and insert or delete that many "
"lines can be given as E<.Sy \\&AL> and E<.Sy \\&DL>.  If the terminal has a "
"settable scrolling region (like the VT100), the command to set this can be "
"described with the E<.Sy \\&cs> capability, which takes two parameters: the "
"top and bottom lines of the scrolling region.  The cursor position is, alas, "
"undefined after using this command.  It is possible to get the effect of "
"insert or delete line using this command \\(em the E<.Sy \\&sc> and E<.Sy "
"\\&rc> (save and restore cursor) commands are also useful.  Inserting lines "
"at the top or bottom of the screen can also be done using E<.Sy \\&sr> or "
"E<.Sy \\&sf> on many terminals without a true insert/delete line, and is "
"often faster even on terminals with those features."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1244
msgid ""
"If the terminal has the ability to define a window as part of memory which "
"all commands affect, it should be given as the parameterized string E<.Sy "
"\\&wi>.  The four parameters are the starting and ending lines in memory and "
"the starting and ending columns in memory, in that order.  (This E<.Xr "
"terminfo 5> capability is described for completeness.  It is unlikely that "
"any E<.Nm Ns \\-using> program will support it.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1257
msgid ""
"If the terminal can retain display memory above the screen, then the E<.Sy "
"\\&da> capability should be given; if display memory can be retained below, "
"then E<.Sy \\&db> should be given.  These indicate that deleting a line or "
"scrolling may bring non-blank lines up from below or that scrolling back "
"with E<.Sy \\&sr> may bring down non-blank lines."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1257
#, no-wrap
msgid "Insert/Delete Character"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1301
msgid ""
"There are two basic kinds of intelligent terminals with respect to "
"insert/delete character that can be described using E<.Nm>.  The most common "
"insert/delete character operations affect only the characters on the current "
"line and shift characters off the end of the line rigidly.  Other terminals, "
"such as the Concept\\-100 and the Perkin Elmer Owl, make a distinction "
"between typed and untyped blanks on the screen, shifting upon an insert or "
"delete only to an untyped blank on the screen which is either eliminated or "
"expanded to two untyped blanks.  You can determine the kind of terminal you "
"have by clearing the screen then typing text separated by cursor motions.  "
"Type E<.Dq Li abc\\ \\ \\ \\ def> using local cursor motions (not spaces) "
"between the E<.Dq abc> and the E<.Dq def>.  Then position the cursor before "
"the E<.Dq abc> and put the terminal in insert mode.  If typing characters "
"causes the rest of the line to shift rigidly and characters to fall off the "
"end, then your terminal does not distinguish between blanks and untyped "
"positions.  If the E<.Dq abc> shifts over to the E<.Dq def> which then move "
"together around the end of the current line and onto the next as you insert, "
"then you have the second type of terminal and should give the capability "
"E<.Sy \\&in>, which stands for E<.Dq insert null>.  While these are two "
"logically separate attributes (one line E<.Em \\&vs>.  multi-line insert "
"mode, and special treatment of untyped spaces), we have seen no terminals "
"whose insert mode cannot be described with the single attribute."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1348
msgid ""
"The E<.Nm> entries can describe both terminals that have an insert mode and "
"terminals that send a simple sequence to open a blank position on the "
"current line.  Give as E<.Sy \\&im> the sequence to get into insert mode.  "
"Give as E<.Sy \\&ei> the sequence to leave insert mode.  Now give as E<.Sy "
"\\&ic> any sequence that needs to be sent just before each character to be "
"inserted.  Most terminals with a true insert mode will not give E<.Sy "
"\\&ic>; terminals that use a sequence to open a screen position should give "
"it here.  (If your terminal has both, insert mode is usually preferable to "
"E<.Sy \\&ic>.  Do not give both unless the terminal actually requires both "
"to be used in combination.)  If post-insert padding is needed, give this as "
"a number of milliseconds in E<.Sy \\&ip> (a string option).  Any other "
"sequence that may need to be sent after insertion of a single character can "
"also be given in E<.Sy \\&ip>.  If your terminal needs to be placed into an "
"`insert mode' and needs a special code preceding each inserted character, "
"then both E<.Sy \\&im Ns / Sy \\&ei> and E<.Sy \\&ic> can be given, and both "
"will be used.  The E<.Sy \\&IC> capability, with one parameter E<.Em n>, "
"will repeat the effects of E<.Sy \\&ic> E<.Em n> times."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1367
msgid ""
"It is occasionally necessary to move around while in insert mode to delete "
"characters on the same line E<.Pf ( Em e.g>., if there is a tab after the "
"insertion position).  If your terminal allows motion while in insert mode, "
"you can give the capability E<.Sy \\&mi> to speed up inserting in this "
"case.  Omitting E<.Sy \\&mi> will affect only speed.  Some terminals "
"(notably Datamedia's) must not have E<.Sy \\&mi> because of the way their "
"insert mode works."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1385
msgid ""
"Finally, you can specify E<.Sy \\&dc> to delete a single character, E<.Sy "
"\\&DC> with one parameter E<.Em n> to delete E<.Em n> characters, and delete "
"mode by giving E<.Sy \\&dm> and E<.Sy \\&ed> to enter and exit delete mode "
"(which is any mode the terminal needs to be placed in for E<.Sy \\&dc> to "
"work)."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1385
#, no-wrap
msgid "Highlighting, Underlining, and Visible Bells"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1408
msgid ""
"If your terminal has one or more kinds of display attributes, these can be "
"represented in a number of different ways.  You should choose one display "
"form as E<.Em standout mode>, representing a good high-contrast, "
"easy-on-the-eyes format for highlighting error messages and other attention "
"getters.  (If you have a choice, reverse video plus half-bright is good, or "
"reverse video alone.)  The sequences to enter and exit standout mode are "
"given as E<.Sy \\&so> and E<.Sy \\&se>, respectively.  If the code to change "
"into or out of standout mode leaves one or even two blank spaces or garbage "
"characters on the screen, as the E<.Tn TVI> 912 and Teleray 1061 do, then "
"E<.Sy \\&sg> should be given to tell how many characters are left."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1423
msgid ""
"Codes to begin underlining and end underlining can be given as E<.Sy \\&us> "
"and E<.Sy \\&ue>, respectively.  Underline mode change garbage is specified "
"by E<.Sy \\&ug>, similar to E<.Sy \\&sg>.  If the terminal has a code to "
"underline the current character and move the cursor one position to the "
"right, such as the Microterm Mime, this can be given as E<.Sy \\&uc>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1446
msgid ""
"Other capabilities to enter various highlighting modes include E<.Sy \\&mb> "
"(blinking), E<.Sy \\&md> (bold or extra bright), E<.Sy \\&mh> (dim or "
"half-bright), E<.Sy \\&mk> (blanking or invisible text), E<.Sy \\&mp> "
"(protected), E<.Sy \\&mr> (reverse video), E<.Sy \\&me> (turn off E<.Em all> "
"attribute modes), E<.Sy \\&as> (enter alternate character set mode), and "
"E<.Sy \\&ae> (exit alternate character set mode).  Turning on any of these "
"modes singly may or may not turn off other modes."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1463
msgid ""
"If there is a sequence to set arbitrary combinations of mode, this should be "
"given as E<.Sy \\&sa> (set attributes), taking 9 parameters.  Each parameter "
"is either 0 or 1, as the corresponding attributes is on or off.  The 9 "
"parameters are, in order: standout, underline, reverse, blink, dim, bold, "
"blank, protect, and alternate character set.  Not all modes need be "
"supported by E<.Sy \\&sa>, only those for which corresponding attribute "
"commands exist.  (It is unlikely that a E<.Nm Ns \\-using> program will "
"support this capability, which is defined for compatibility with E<.Xr "
"terminfo 5>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1477
msgid ""
"Terminals with the E<.Dq magic cookie> glitches E<.Pf ( Sy \\&sg> and E<.Sy "
"\\&ug>), rather than maintaining extra attribute bits for each character "
"cell, instead deposit special E<.Dq cookies>, or E<.Dq garbage characters>, "
"when they receive mode-setting sequences, which affect the display "
"algorithm."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1490
msgid ""
"Some terminals, such as the Hewlett-Packard 2621, automatically leave "
"standout mode when they move to a new line or when the cursor is addressed.  "
"Programs using standout mode should exit standout mode on such terminals "
"before moving the cursor or sending a newline.  On terminals where this is "
"not a problem, the E<.Sy \\&ms> capability should be present to say that "
"this overhead is unnecessary."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1497
msgid ""
"If the terminal has a way of flashing the screen to indicate an error "
"quietly (a bell replacement), this can be given as E<.Sy \\&vb>; it must not "
"move the cursor."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1510
msgid ""
"If the cursor needs to be made more visible than normal when it is not on "
"the bottom line (to change, for example, a non-blinking underline into an "
"easier-to-find block or blinking underline), give this sequence as E<.Sy "
"\\&vs>.  If there is a way to make the cursor completely invisible, give "
"that as E<.Sy \\&vi>.  The capability E<.Sy \\&ve>, which undoes the effects "
"of both of these modes, should also be given."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1519
msgid ""
"If your terminal correctly displays underlined characters (with no special "
"codes needed)  even though it does not overstrike, then you should give the "
"capability E<.Sy \\&ul>.  If overstrikes are erasable with a blank, this "
"should be indicated by giving E<.Sy \\&eo>."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1519
#, no-wrap
msgid "Keypad"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1602
msgid ""
"If the terminal has a keypad that transmits codes when the keys are pressed, "
"this information can be given.  Note that it is not possible to handle "
"terminals where the keypad only works in local mode (this applies, for "
"example, to the unshifted Hewlett-Packard 2621 keys).  If the keypad can be "
"set to transmit or not transmit, give these codes as E<.Sy \\&ks> and E<.Sy "
"\\&ke>.  Otherwise the keypad is assumed to always transmit.  The codes sent "
"by the left-arrow, right-arrow, up-arrow, down-arrow, and home keys can be "
"given as E<.Sy \\&kl>, E<.Sy \\&kr>, E<.Sy \\&ku>, E<.Sy \\&kd>, and E<.Sy "
"\\&kh>, respectively.  If there are function keys such as f0, f1, ..., f9, "
"the codes they send can be given as E<.Sy \\&k0>, E<.Sy \\&k1>, \\&..., "
"E<.Sy \\&k9>.  If these keys have labels other than the default f0 through "
"f9, the labels can be given as E<.Sy \\&l0>, E<.Sy \\&l1>, \\&..., E<.Sy "
"\\&l9>.  The codes transmitted by certain other special keys can be given: "
"E<.Sy \\&kH> (home down), E<.Sy \\&kb> (backspace), E<.Sy \\&ka> (clear all "
"tabs), E<.Sy \\&kt> (clear the tab stop in this column), E<.Sy \\&kC> (clear "
"screen or erase), E<.Sy \\&kD> (delete character), E<.Sy \\&kL> (delete "
"line), E<.Sy \\&kM> (exit insert mode), E<.Sy \\&kE> (clear to end of line), "
"E<.Sy \\&kS> (clear to end of screen), E<.Sy \\&kI> (insert character or "
"enter insert mode), E<.Sy \\&kA> (insert line), E<.Sy \\&kN> (next page), "
"E<.Sy \\&kP> (previous page), E<.Sy \\&kF> (scroll forward/down), E<.Sy "
"\\&kR> (scroll backward/up), and E<.Sy \\&kT> (set a tab stop in this "
"column).  In addition, if the keypad has a 3 by 3 array of keys including "
"the four arrow keys, then the other five keys can be given as E<.Sy \\&K1>, "
"E<.Sy \\&K2>, E<.Sy \\&K3>, E<.Sy \\&K4>, and E<.Sy \\&K5>.  These keys are "
"useful when the effects of a 3 by 3 directional pad are needed.  The "
"obsolete E<.Sy \\&ko> capability formerly used to describe E<.Dq other> "
"function keys has been completely supplanted by the above capabilities."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1645
msgid ""
"The E<.Sy \\&ma> entry is also used to indicate arrow keys on terminals that "
"have single-character arrow keys.  It is obsolete but still in use in "
"version 2 of E<.Sy \\&vi> which must be run on some minicomputers due to "
"memory limitations.  This field is redundant with E<.Sy \\&kl>, E<.Sy "
"\\&kr>, E<.Sy \\&ku>, E<.Sy \\&kd>, and E<.Sy \\&kh>.  It consists of groups "
"of two characters.  In each group, the first character is what an arrow key "
"sends, and the second character is the corresponding E<.Sy \\&vi> command.  "
"These commands are E<.Ar h> for E<.Sy \\&kl>, E<.Ar j> for E<.Sy \\&kd>, "
"E<.Ar k> for E<.Sy \\&ku>, E<.Ar l> for E<.Sy \\&kr>, and E<.Ar H> for E<.Sy "
"\\&kh>.  For example, the Mime would have E<.Dq Li ma=^Hh^Kj^Zk^Xl> "
"indicating arrow keys left (^H), down (^K), up (^Z), and right (^X).  (There "
"is no home key on the Mime.)"
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1645
#, no-wrap
msgid "Tabs and Initialization"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1662
msgid ""
"If the terminal needs to be in a special mode when running a program that "
"uses these capabilities, the codes to enter and exit this mode can be given "
"as E<.Sy \\&ti> and E<.Sy \\&te>.  This arises, for example, from terminals "
"like the Concept with more than one page of memory.  If the terminal has "
"only memory-relative cursor addressing and not screen-relative cursor "
"addressing, a screen-sized window must be fixed into the display for cursor "
"addressing to work properly.  This is also used for the Tektronix 4025, "
"where E<.Sy \\&ti> sets the command character to be the one used by E<.Nm>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1719
msgid ""
"Other capabilities include E<.Sy \\&is>, an initialization string for the "
"terminal, and E<.Sy \\&if>, the name of a file containing long "
"initialization strings.  These strings are expected to set the terminal into "
"modes consistent with the rest of the E<.Nm> description.  They are normally "
"sent to the terminal by the E<.Xr tset 1> program each time the user logs "
"in.  They will be printed in the following order: E<.Sy \\&is>; setting tabs "
"using E<.Sy \\&ct> and E<.Sy \\&st>; and finally E<.Sy \\&if>.  E<.Pf ( Xr "
"Terminfo> uses E<.Sy \\&i\\&1-i2> instead of E<.Sy \\&is> and runs the "
"program E<.Sy \\&iP> and prints E<.Sy \"\\&i\\&3\"> after the other "
"initializations.)  A pair of sequences that does a harder reset from a "
"totally unknown state can be analogously given as E<.Sy \\&rs> and E<.Sy "
"\\&if>.  These strings are output by the E<.Xr reset 1> program, which is "
"used when the terminal gets into a wedged state.  E<.Pf ( Xr Terminfo> uses "
"E<.Sy \"\\&r1-r3\"> instead of E<.Sy \\&rs>.)  Commands are normally placed "
"in E<.Sy \\&rs> and E<.Sy \\&rf> only if they produce annoying effects on "
"the screen and are not necessary when logging in.  For example, the command "
"to set the VT100 into 80-column mode would normally be part of E<.Sy \\&is>, "
"but it causes an annoying glitch of the screen and is not normally needed "
"since the terminal is usually already in 80-column mode."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1751
msgid ""
"If the terminal has hardware tabs, the command to advance to the next tab "
"stop can be given as E<.Sy \\&ta> (usually E<.Sy \\&^I>).  A E<.Dq backtab> "
"command which moves leftward to the previous tab stop can be given as E<.Sy "
"\\&bt>.  By convention, if the terminal driver modes indicate that tab stops "
"are being expanded by the computer rather than being sent to the terminal, "
"programs should not use E<.Sy \\&ta> or E<.Sy \\&bt> even if they are "
"present, since the user may not have the tab stops properly set.  If the "
"terminal has hardware tabs that are initially set every E<.Ar n> positions "
"when the terminal is powered up, then the numeric parameter E<.Sy \\&it> is "
"given, showing the number of positions between tab stops.  This is normally "
"used by the E<.Xr tset 1> command to determine whether to set the driver "
"mode for hardware tab expansion, and whether to set the tab stops.  If the "
"terminal has tab stops that can be saved in nonvolatile memory, the E<.Nm> "
"description can assume that they are properly set."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1762
msgid ""
"If there are commands to set and clear tab stops, they can be given as E<.Sy "
"\\&ct> (clear all tab stops) and E<.Sy \\&st> (set a tab stop in the current "
"column of every row).  If a more complex sequence is needed to set the tabs "
"than can be described by this, the sequence can be placed in E<.Sy \\&is> or "
"E<.Sy \\&if>."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1762
#, no-wrap
msgid "Delays"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1791
msgid ""
"Certain capabilities control padding in the terminal driver.  These are "
"primarily needed by hardcopy terminals and are used by the E<.Xr tset 1> "
"program to set terminal driver modes appropriately.  Delays embedded in the "
"capabilities E<.Sy \\&cr>, E<.Sy \\&sf>, E<.Sy \\&le>, E<.Sy \\&ff>, and "
"E<.Sy \\&ta> will cause the appropriate delay bits to be set in the terminal "
"driver.  If E<.Sy \\&pb> (padding baud rate) is given, these values can be "
"ignored at baud rates below the value of E<.Sy \\&pb>.  For E<.Bx 4.2> E<.Xr "
"tset 1>, the delays are given as numeric capabilities E<.Sy \\&dC>, E<.Sy "
"\\&dN>, E<.Sy \\&dB>, E<.Sy \\&dF>, and E<.Sy \\&dT> instead."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:1791
#, no-wrap
msgid "Miscellaneous"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1800
msgid ""
"If the terminal requires other than a E<.Dv NUL> (zero) character as a pad, "
"this can be given as E<.Sy \\&pc>.  Only the first character of the E<.Sy "
"\\&pc> string is used."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1806
msgid ""
"If the terminal has commands to save and restore the position of the cursor, "
"give them as E<.Sy \\&sc> and E<.Sy \\&rc>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1851
msgid ""
"If the terminal has an extra E<.Dq status line> that is not normally used by "
"software, this fact can be indicated.  If the status line is viewed as an "
"extra line below the bottom line, then the capability E<.Sy \\&hs> should be "
"given.  Special strings to go to a position in the status line and to return "
"from the status line can be given as E<.Sy \\&ts> and E<.Sy \\&fs>.  E<.Pf ( "
"Sy \\&fs> must leave the cursor position in the same place that it was "
"before E<.Sy \\&ts>.  If necessary, the E<.Sy \\&sc> and E<.Sy \\&rc> "
"strings can be included in E<.Sy \\&ts> and E<.Sy \\&fs> to get this "
"effect.)  The capability E<.Sy \\&ts> takes one parameter, which is the "
"column number of the status line to which the cursor is to be moved.  If "
"escape sequences and other special commands such as tab work while in the "
"status line, the flag E<.Sy \\&es> can be given.  A string that turns off "
"the status line (or otherwise erases its contents)  should be given as E<.Sy "
"\\&ds>.  The status line is normally assumed to be the same width as the "
"rest of the screen, E<.Em i.e>., E<.Sy \\&co>.  If the status line is a "
"different width (possibly because the terminal does not allow an entire line "
"to be loaded), then its width in columns can be indicated with the numeric "
"parameter E<.Sy \\&ws>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1865
msgid ""
"If the terminal can move up or down half a line, this can be indicated with "
"E<.Sy \\&hu> (half-line up) and E<.Sy \\&hd> (half-line down).  This is "
"primarily useful for superscripts and subscripts on hardcopy terminals.  If "
"a hardcopy terminal can eject to the next page (form feed), give this as "
"E<.Sy \\&ff> (usually E<.Sy \\&^L>)."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1876
msgid ""
"If there is a command to repeat a given character a given number of times "
"(to save time transmitting a large number of identical characters), this can "
"be indicated with the parameterized string E<.Sy \\&rp>.  The first "
"parameter is the character to be repeated and the second is the number of "
"times to repeat it.  (This is a E<.Xr terminfo 5> feature that is unlikely "
"to be supported by a program that uses E<.Nm>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1898
msgid ""
"If the terminal has a settable command character, such as the Tektronix "
"4025, this can be indicated with E<.Sy \\&CC>.  A prototype command "
"character is chosen which is used in all capabilities.  This character is "
"given in the E<.Sy \\&CC> capability to identify it.  The following "
"convention is supported on some E<.Ux> systems: The environment is to be "
"searched for a E<.Ev \\&CC> variable, and if found, all occurrences of the "
"prototype character are replaced by the character in the environment "
"variable.  This use of the E<.Ev \\&CC> environment variable is a very bad "
"idea, as it conflicts with E<.Xr make 1>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1913
msgid ""
"Terminal descriptions that do not represent a specific kind of known "
"terminal, such as E<.Em switch>, E<.Em dialup>, E<.Em patch>, and E<.Em "
"network>, should include the E<.Sy \\&gn> (generic) capability so that "
"programs can complain that they do not know how to talk to the terminal.  "
"(This capability does not apply to E<.Em virtual> terminal descriptions for "
"which the escape sequences are known.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1921
msgid ""
"If the terminal uses xoff/xon E<.Pq Tn DC3 Ns / Ns Tn DC1> handshaking for "
"flow control, give E<.Sy \\&xo>.  Padding information should still be "
"included so that routines can make better decisions about costs, but actual "
"pad characters will not be transmitted."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1935
msgid ""
"If the terminal has a E<.Dq meta key> which acts as a shift key, setting the "
"8th bit of any character transmitted, then this fact can be indicated with "
"E<.Sy \\&km>.  Otherwise, software will assume that the 8th bit is parity "
"and it will usually be cleared.  If strings exist to turn this E<.Dq meta "
"mode> on and off, they can be given as E<.Sy \\&mm> and E<.Sy \\&mo>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1941
msgid ""
"If the terminal has more lines of memory than will fit on the screen at "
"once, the number of lines of memory can be indicated with E<.Sy \\&lm>.  An "
"explicit value of 0 indicates that the number of lines is not fixed, but "
"that there is still more memory than fits on the screen."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1947
msgid ""
"If the terminal is one of those supported by the E<.Ux> system virtual "
"terminal protocol, the terminal number can be given as E<.Sy \\&vt>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1970
msgid ""
"Media copy strings which control an auxiliary printer connected to the "
"terminal can be given as E<.Sy \\&ps>: print the contents of the screen; "
"E<.Sy \\&pf>: turn off the printer; and E<.Sy \\&po>: turn on the printer.  "
"When the printer is on, all text sent to the terminal will be sent to the "
"printer.  It is undefined whether the text is also displayed on the terminal "
"screen when the printer is on.  A variation E<.Sy \\&pO> takes one parameter "
"and leaves the printer on for as many characters as the value of the "
"parameter, then turns the printer off.  The parameter should not exceed "
"255.  All text, including E<.Sy \\&pf>, is transparently passed to the "
"printer while E<.Sy \\&pO> is in effect."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:1994
msgid ""
"Strings to program function keys can be given as E<.Sy \\&pk>, E<.Sy \\&pl>, "
"and E<.Sy \\&px>.  Each of these strings takes two parameters: the function "
"key number to program (from 0 to 9) and the string to program it with.  "
"Function key numbers out of this range may program undefined keys in a "
"terminal-dependent manner.  The differences among the capabilities are that "
"E<.Sy \\&pk> causes pressing the given key to be the same as the user typing "
"the given string; E<.Sy \\&pl> causes the string to be executed by the "
"terminal in local mode; and E<.Sy \\&px> causes the string to be transmitted "
"to the computer.  Unfortunately, due to lack of a definition for string "
"parameters in E<.Nm>, only E<.Xr terminfo 5> supports these capabilities."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2013
msgid ""
"For the E<.Xr xterm 1> terminal emulator the traditional behavior in E<.Fx> "
"when exiting a pager such as E<.Xr less 1> or E<.Xr more 1>, or an editor "
"such as E<.Xr vi 1> is E<.Em NOT> to clear the screen after the program "
"exits.  If you prefer to clear the screen there are a number of E<.Dq "
"xterm-clear> entries that add this capability in the E<.Nm> file that you "
"can use directly, or as examples."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:2013
#, no-wrap
msgid "Glitches and Braindamage"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2017
msgid ""
"Hazeltine terminals, which do not allow `~' characters to be displayed, "
"should indicate E<.Sy \\&hz>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2025
msgid ""
"The E<.Sy \\&nc> capability, now obsolete, formerly indicated Datamedia "
"terminals, which echo E<.Sy \\&\\er \\en> for carriage return then ignore a "
"following linefeed."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2030
msgid ""
"Terminals that ignore a linefeed immediately after an E<.Sy \\&am> wrap, "
"such as the Concept, should indicate E<.Sy \\&xn>."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2037
msgid ""
"If E<.Sy \\&ce> is required to get rid of standout (instead of merely "
"writing normal text on top of it), E<.Sy \\&xs> should be given."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2047
msgid ""
"Teleray terminals, where tabs turn all characters moved over to blanks, "
"should indicate E<.Sy \\&xt> (destructive tabs).  This glitch is also taken "
"to mean that it is not possible to position the cursor on top of a E<.Dq "
"magic cookie>, and that to erase standout mode it is necessary to use delete "
"and insert line."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2063
msgid ""
"The Beehive Superbee, which is unable to correctly transmit the E<.Dv ESC> "
"or E<.Sy \\&^C> characters, has E<.Sy \\&xb>, indicating that the E<.Dq "
"\\&f\\&1> key is used for E<.Dv ESC> and E<.Dq \\&f\\&2> for ^C.  (Only "
"certain Superbees have this problem, depending on the E<.Tn ROM>.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2067
msgid ""
"Other specific terminal problems may be corrected by adding more "
"capabilities of the form E<.Sy x Ns Em x>."
msgstr ""

#. type: Ss
#: /usr/src/share/termcap/termcap.5:2067
#, no-wrap
msgid "Similar Terminals"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2090
msgid ""
"If there are two very similar terminals, one can be defined as being just "
"like the other with certain exceptions.  The string capability E<.Sy \\&tc> "
"can be given with the name of the similar terminal.  This capability must be "
"E<.Em last>, and the combined length of the entries must not exceed 1024.  "
"The capabilities given before E<.Sy \\&tc> override those in the terminal "
"type invoked by E<.Sy \\&tc>.  A capability can be canceled by placing E<.Sy "
"\\&xx@> to the left of the E<.Sy \\&tc> invocation, where E<.Sy \\&xx> is "
"the capability.  For example, the entry"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2092
#, no-wrap
msgid "hn\\||\\|2621\\-nl:ks@:ke@:tc=2621:\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2104
msgid ""
"defines a E<.Dq 2621\\-nl> that does not have the E<.Sy \\&ks> or E<.Sy "
"\\&ke> capabilities, hence does not turn on the function key labels when in "
"visual mode.  This is useful for different modes for a terminal, or for "
"different user preferences."
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:2104
#, no-wrap
msgid "FILES"
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:2106
#, no-wrap
msgid "Pa /usr/share/misc/termcap"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2108
msgid "File containing terminal descriptions."
msgstr ""

#. type: It
#: /usr/src/share/termcap/termcap.5:2108
#, no-wrap
msgid "Pa /usr/share/misc/termcap.db"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2111
msgid "Hash database file containing terminal descriptions (see E<.Xr cap_mkdb 1>)."
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:2112
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2124
msgid ""
"E<.Xr cap_mkdb 1>, E<.Xr ex 1>, E<.Xr more 1>, E<.Xr tset 1>, E<.Xr ul 1>, "
"E<.Xr vi 1>, E<.Xr xterm 1>, E<.Xr ncurses 3>, E<.Xr printf 3>, E<.Xr "
"termcap 3>, E<.Xr term 5>"
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:2124
#, no-wrap
msgid "CAVEATS AND BUGS"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2137
msgid ""
"The E<.Em Note>: E<.Nm> functions were replaced by E<.Xr terminfo 5> in "
"E<.At V> Release 2.0.  The transition will be relatively painless if "
"capabilities flagged as E<.Dq obsolete> are avoided."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2142
msgid ""
"Lines and columns are now stored by the kernel as well as in the termcap "
"entry.  Most programs now use the kernel information primarily; the "
"information in this file is used only if the kernel does not have any "
"information."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2151
msgid ""
"The E<.Xr \\&vi 1> program allows only 256 characters for string "
"capabilities, and the routines in E<.Xr termlib 3> do not check for overflow "
"of this buffer.  The total length of a single entry (excluding only escaped "
"newlines)  may not exceed 1024."
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2153
msgid "Not all programs support all entries."
msgstr ""

#. type: Sh
#: /usr/src/share/termcap/termcap.5:2153
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/termcap/termcap.5:2157
msgid "The E<.Nm> file format appeared in E<.Bx 3>."
msgstr ""
