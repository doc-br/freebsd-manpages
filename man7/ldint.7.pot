# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:32-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/contrib/binutils/ld/ldint.7:1
#, no-wrap
msgid "2015-03-02"
msgstr ""

#. type: Dt
#: /usr/src/contrib/binutils/ld/ldint.7:2
#, no-wrap
msgid "LDINT 7"
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/ld/ldint.7:4
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:6
msgid "E<.Nm ldint>"
msgstr ""

#. type: Nd
#: /usr/src/contrib/binutils/ld/ldint.7:6
#, no-wrap
msgid "GNU Linker Internals"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:15
msgid ""
"This file documents the internals of the GNU linker E<.Li ld>.  It is a "
"collection of miscellaneous information with little form at this point.  "
"Mostly, it is a repository into which you can put information about GNU "
"E<.Li ld> as you discover it (or as you design changes to E<.Li ld>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:19
msgid ""
"This document is distributed under the terms of the GNU Free Documentation "
"License. A copy of the license is included in the section entitled \"GNU "
"Free Documentation License\"."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/ld/ldint.7:20
#, no-wrap
msgid "The Pa README File"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:25
msgid ""
"Check the E<.Pa README> file; it often has useful information that does not "
"appear anywhere else in the directory."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/ld/ldint.7:26
#, no-wrap
msgid "How linker emulations are generated"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:31
msgid ""
"Each linker target has an E<.Em emulation>.  The emulation includes the "
"default linker script, and certain emulations also modify certain types of "
"linker behaviour."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:34
msgid ""
"Emulations are created during the build process by the shell script E<.Pa "
"genscripts.sh>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:43
msgid ""
"The E<.Pa genscripts.sh> script starts by reading a file in the E<.Pa "
"emulparams> directory. This is a shell script which sets various shell "
"variables used by E<.Pa genscripts.sh> and the other shell scripts it "
"invokes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:54
msgid ""
"The E<.Pa genscripts.sh> script will invoke a shell script in the E<.Pa "
"scripttempl> directory in order to create default linker scripts written in "
"the linker command language. The E<.Pa scripttempl> script will be invoked 5 "
"(or, in some cases, 6) times, with different assignments to shell variables, "
"to create different default scripts. The choice of script is made based on "
"the command line options."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:63
msgid ""
"After creating the scripts, E<.Pa genscripts.sh> will invoke yet another "
"shell script, this time in the E<.Pa emultempl> directory. That shell script "
"will create the emulation source file, which contains C code. This C code "
"permits the linker emulation to override various linker behaviours. Most "
"targets use the generic emulation code, which is in E<.Pa "
"emultempl/generic.em>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:73
msgid ""
"To summarize, E<.Pa genscripts.sh> reads three shell scripts: an emulation "
"parameters script in the E<.Pa emulparams> directory, a linker script "
"generation script in the E<.Pa scripttempl> directory, and an emulation "
"source file generation script in the E<.Pa emultempl> directory."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:80
msgid ""
"For example, the Sun 4 linker sets up variables in E<.Pa "
"emulparams/sun4.sh>, creates linker scripts using E<.Pa "
"scripttempl/aout.sc>, and creates the emulation code using E<.Pa "
"emultempl/sunos.em>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:87
msgid ""
"Note that the linker can support several emulations simultaneously, "
"depending upon how it is configured. An emulation can be selected with the "
"E<.Li -m> option. The E<.Li -V> option will list all supported emulations."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/ld/ldint.7:88
#, no-wrap
msgid "Pa emulparams scripts"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:98
msgid ""
"Each target selects a particular file in the E<.Pa emulparams> directory by "
"setting the shell variable E<.Li targ_emul> in E<.Pa configure.tgt>.  This "
"shell variable is used by the E<.Pa configure> script to control building an "
"emulation source file."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:128
msgid ""
"Certain conventions are enforced. Suppose the E<.Li targ_emul> variable is "
"set to E<.Va emul> in E<.Pa configure.tgt>.  The name of the emulation shell "
"script will be E<.Pa emulparams/ Va emul.sh>.  The E<.Pa Makefile> must have "
"a target named E<.Pa e Va emul.c>; this target must depend upon E<.Pa "
"emulparams/ Va emul.sh>, as well as the appropriate scripts in the E<.Pa "
"scripttempl> and E<.Pa emultempl> directories. The E<.Pa Makefile> target "
"must invoke E<.Li GENSCRIPTS> with two arguments: E<.Va emul>, and the value "
"of the make variable E<.Li tdir_ Va emul>.  The value of the latter variable "
"will be set by the E<.Pa configure> script, and is used to set the default "
"target directory to search."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:139
msgid ""
"By convention, the E<.Pa emulparams/ Va emul.sh> shell script should only "
"set shell variables. It may set shell variables which are to be interpreted "
"by the E<.Pa scripttempl> and the E<.Pa emultempl> scripts. Certain shell "
"variables are interpreted directly by the E<.Pa genscripts.sh> script."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:147
msgid ""
"Here is a list of shell variables interpreted by E<.Pa genscripts.sh>, as "
"well as some conventional shell variables interpreted by the E<.Pa "
"scripttempl> and E<.Pa emultempl> scripts."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:149
#, no-wrap
msgid "SCRIPT_NAME"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:159
msgid ""
"This is the name of the E<.Pa scripttempl> script to use. If E<.Li "
"SCRIPT_NAME> is set to E<.Va script>, E<.Pa genscripts.sh> will use the "
"script E<.Pa scripttempl/ Va script.sc>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:160
#, no-wrap
msgid "TEMPLATE_NAME"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:172
msgid ""
"This is the name of the E<.Pa emultempl> script to use. If E<.Li "
"TEMPLATE_NAME> is set to E<.Va template>, E<.Pa genscripts.sh> will use the "
"script E<.Pa emultempl/ Va template.em>.  If this variable is not set, the "
"default value is E<.Li generic>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:173
#, no-wrap
msgid "GENERATE_SHLIB_SCRIPT"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:179
msgid ""
"If this is set to a nonempty string, E<.Pa genscripts.sh> will invoke the "
"E<.Pa scripttempl> script an extra time to create a shared library "
"script. linker scripts."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:180
#, no-wrap
msgid "OUTPUT_FORMAT"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:188
msgid ""
"This is normally set to indicate the BFD output format use (e.g., E<.Li "
"\"a.out-sunos-big\">.  The E<.Pa scripttempl> script will normally use it in "
"an E<.Li OUTPUT_FORMAT> expression in the linker script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:189
#, no-wrap
msgid "ARCH"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:197
msgid ""
"This is normally set to indicate the architecture to use (e.g., E<.Li "
"sparc>).  The E<.Pa scripttempl> script will normally use it in an E<.Li "
"OUTPUT_ARCH> expression in the linker script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:198
#, no-wrap
msgid "ENTRY"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:204
msgid ""
"Some E<.Pa scripttempl> scripts use this to set the entry address, in an "
"E<.Li ENTRY> expression in the linker script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:205
#, no-wrap
msgid "TEXT_START_ADDR"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:211
msgid ""
"Some E<.Pa scripttempl> scripts use this to set the start address of the "
"E<.Li .text> section."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:212
#, no-wrap
msgid "NONPAGED_TEXT_START_ADDR"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:225
msgid ""
"If this is defined, the E<.Pa genscripts.sh> script sets E<.Li "
"TEXT_START_ADDR> to its value before running the E<.Pa scripttempl> script "
"for the E<.Li -n> and E<.Li -N> options (see Section E<.Dq linker scripts>)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:226
#, no-wrap
msgid "SEGMENT_SIZE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:234
msgid ""
"The E<.Pa genscripts.sh> script uses this to set the default value of E<.Li "
"DATA_ALIGNMENT> when running the E<.Pa scripttempl> script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:235
#, no-wrap
msgid "TARGET_PAGE_SIZE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:241
msgid ""
"If E<.Li SEGMENT_SIZE> is not defined, the E<.Pa genscripts.sh> script uses "
"this to define it."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:242
#, no-wrap
msgid "ALIGNMENT"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:250
msgid ""
"Some E<.Pa scripttempl> scripts set this to a number to pass to E<.Li ALIGN> "
"to set the required alignment for the E<.Li end> symbol."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/ld/ldint.7:252
#, no-wrap
msgid "Pa scripttempl scripts"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:268
msgid ""
"Each linker target uses a E<.Pa scripttempl> script to generate the default "
"linker scripts. The name of the E<.Pa scripttempl> script is set by the "
"E<.Li SCRIPT_NAME> variable in the E<.Pa emulparams> script. If E<.Li "
"SCRIPT_NAME> is set to E<.Va script>, E<.Li genscripts.sh> will invoke E<.Pa "
"scripttempl/ Va script.sc>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:279
msgid ""
"The E<.Pa genscripts.sh> script will invoke the E<.Pa scripttempl> script 5 "
"to 8 times. Each time it will set the shell variable E<.Li LD_FLAG> to a "
"different value. When the linker is run, the options used will direct it to "
"select a particular script. (Script selection is controlled by the E<.Li "
"get_script> emulation entry point; this describes the conventional "
"behaviour)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:296
msgid ""
"The E<.Pa scripttempl> script should just write a linker script, written in "
"the linker command language, to standard output. If the emulation name--the "
"name of the E<.Pa emulparams> file without the E<.Pa .sc> extension--is "
"E<.Va emul>, then the output will be directed to E<.Pa ldscripts/ Va "
"emul. Va extension> in the build directory, where E<.Va extension> changes "
"each time the E<.Pa scripttempl> script is invoked."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:299
msgid "Here is the list of values assigned to E<.Li LD_FLAG>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:301
#, no-wrap
msgid "(empty)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:305
msgid ""
"The script generated is used by default (when none of the following cases "
"apply). The output has an extension of E<.Pa .x>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:305
#, no-wrap
msgid "n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:310
msgid ""
"The script generated is used when the linker is invoked with the E<.Li -n> "
"option. The output has an extension of E<.Pa .xn>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:310
#, no-wrap
msgid "N"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:315
msgid ""
"The script generated is used when the linker is invoked with the E<.Li -N> "
"option. The output has an extension of E<.Pa .xbn>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:315
#, no-wrap
msgid "r"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:320
msgid ""
"The script generated is used when the linker is invoked with the E<.Li -r> "
"option. The output has an extension of E<.Pa .xr>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:320
#, no-wrap
msgid "u"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:325
msgid ""
"The script generated is used when the linker is invoked with the E<.Li -Ur> "
"option. The output has an extension of E<.Pa .xu>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:325
#, no-wrap
msgid "shared"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:341
msgid ""
"The E<.Pa scripttempl> script is only invoked with E<.Li LD_FLAG> set to "
"this value if E<.Li GENERATE_SHLIB_SCRIPT> is defined in the E<.Pa "
"emulparams> file. The E<.Pa emultempl> script must arrange to use this "
"script at the appropriate time, normally when the linker is invoked with the "
"E<.Li -shared> option. The output has an extension of E<.Pa .xs>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:341
#, no-wrap
msgid "c"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:361
msgid ""
"The E<.Pa scripttempl> script is only invoked with E<.Li LD_FLAG> set to "
"this value if E<.Li GENERATE_COMBRELOC_SCRIPT> is defined in the E<.Pa "
"emulparams> file or if E<.Li SCRIPT_NAME> is E<.Li elf>.  The E<.Pa "
"emultempl> script must arrange to use this script at the appropriate time, "
"normally when the linker is invoked with the E<.Li -z combreloc> option. The "
"output has an extension of E<.Pa .xc>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:361
#, no-wrap
msgid "cshared"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:385
msgid ""
"The E<.Pa scripttempl> script is only invoked with E<.Li LD_FLAG> set to "
"this value if E<.Li GENERATE_COMBRELOC_SCRIPT> is defined in the E<.Pa "
"emulparams> file or if E<.Li SCRIPT_NAME> is E<.Li elf> and E<.Li "
"GENERATE_SHLIB_SCRIPT> is defined in the E<.Pa emulparams> file. The E<.Pa "
"emultempl> script must arrange to use this script at the appropriate time, "
"normally when the linker is invoked with the E<.Li -shared -z combreloc> "
"option. The output has an extension of E<.Pa .xsc>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:396
msgid ""
"Besides the shell variables set by the E<.Pa emulparams> script, and the "
"E<.Li LD_FLAG> variable, the E<.Pa genscripts.sh> script will set certain "
"variables for each run of the E<.Pa scripttempl> script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:398
#, no-wrap
msgid "RELOCATING"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:404
msgid ""
"This will be set to a non-empty string when the linker is doing a final "
"relocation (e.g., all scripts other than E<.Li -r> and E<.Li -Ur>)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:405
#, no-wrap
msgid "CONSTRUCTING"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:409
msgid ""
"This will be set to a non-empty string when the linker is building global "
"constructor and destructor tables (e.g., all scripts other than E<.Li -r>)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:410
#, no-wrap
msgid "DATA_ALIGNMENT"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:418
msgid ""
"This will be set to an E<.Li ALIGN> expression when the output should be "
"page aligned, or to E<.Li>.  when generating the E<.Li -N> script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:419
#, no-wrap
msgid "CREATE_SHLIB"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:423
msgid ""
"This will be set to a non-empty string when generating a E<.Li -shared> "
"script."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:424
#, no-wrap
msgid "COMBRELOC"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:428
msgid ""
"This will be set to a non-empty string when generating E<.Li -z combreloc> "
"scripts to a temporary file name which can be used during script generation."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:439
msgid ""
"The conventional way to write a E<.Pa scripttempl> script is to first set a "
"few shell variables, and then write out a linker script using E<.Li cat> "
"with a here document. The linker script will use variable substitutions, "
"based on the above variables and those set in the E<.Pa emulparams> script, "
"to control its behaviour."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:453
msgid ""
"When there are parts of the E<.Pa scripttempl> script which should only be "
"run when doing a final relocation, they should be enclosed within a variable "
"substitution based on E<.Li RELOCATING>.  For example, on many targets "
"special symbols such as E<.Li _end> should be defined when doing a final "
"link. Naturally, those symbols should not be defined when doing a "
"relocatable link using E<.Li -r>.  The E<.Pa scripttempl> script could use a "
"construct like this to define those symbols:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:455
#, no-wrap
msgid "  ${RELOCATING+ _end = .;}\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:459
msgid ""
"This will do the symbol assignment only if the E<.Li RELOCATING> variable is "
"defined."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:463
msgid ""
"The basic job of the linker script is to put the sections in the correct "
"order, and at the correct memory addresses. For some targets, the linker "
"script may have to do some other operations."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:473
msgid ""
"For example, on most MIPS platforms, the linker is responsible for defining "
"the special symbol E<.Li _gp>, used to initialize the E<.Li $gp> "
"register. It must be set to the start of the small data section plus E<.Li "
"0x8000>.  Naturally, it should only be defined when doing a final "
"relocation. This will typically be done like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:475
#, no-wrap
msgid "  ${RELOCATING+ _gp = ALIGN(16) + 0x8000;}\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:481
msgid ""
"This line would appear just before the sections which compose the small data "
"section ( E<.Li .sdata>, E<.Li .sbss>).  All those sections would be "
"contiguous in memory."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:506
msgid ""
"Many COFF systems build constructor tables in the linker script. The "
"compiler will arrange to output the address of each global constructor in a "
"E<.Li .ctor> section, and the address of each global destructor in a E<.Li "
".dtor> section (this is done by defining E<.Li ASM_OUTPUT_CONSTRUCTOR> and "
"E<.Li ASM_OUTPUT_DESTRUCTOR> in the E<.Li gcc> configuration files). The "
"E<.Li gcc> runtime support routines expect the constructor table to be named "
"E<.Li __CTOR_LIST__>.  They expect it to be a list of words, with the first "
"word being the count of the number of entries. There should be a trailing "
"zero word. (Actually, the count may be -1 if the trailing word is present, "
"and the trailing word may be omitted if the count is correct, but, as the "
"E<.Li gcc> behaviour has changed slightly over the years, it is safest to "
"provide both).  Here is a typical way that might be handled in a E<.Pa "
"scripttempl> file."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:517
#, no-wrap
msgid ""
"    ${CONSTRUCTING+ __CTOR_LIST__ = .;}\n"
"    ${CONSTRUCTING+ LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)}\n"
"    ${CONSTRUCTING+ *(.ctors)}\n"
"    ${CONSTRUCTING+ LONG(0)}\n"
"    ${CONSTRUCTING+ __CTOR_END__ = .;}\n"
"    ${CONSTRUCTING+ __DTOR_LIST__ = .;}\n"
"    ${CONSTRUCTING+ LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)}\n"
"    ${CONSTRUCTING+ *(.dtors)}\n"
"    ${CONSTRUCTING+ LONG(0)}\n"
"    ${CONSTRUCTING+ __DTOR_END__ = .;}\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:523
msgid ""
"The use of E<.Li CONSTRUCTING> ensures that these linker script commands "
"will only appear when the linker is supposed to be building the constructor "
"and destructor tables. This example is written for a target which uses 4 "
"byte pointers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:531
msgid ""
"Embedded systems often need to set a stack address. This is normally best "
"done by using the E<.Li PROVIDE> construct with a default stack "
"address. This permits the user to easily override the stack address using "
"the E<.Li --defsym> option. Here is an example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:533
#, no-wrap
msgid "  ${RELOCATING+ PROVIDE (__stack = 0x80000000);}\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:537
msgid ""
"The value of the symbol E<.Li __stack> would then be used in the startup "
"code to initialize the stack pointer."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/ld/ldint.7:538
#, no-wrap
msgid "Pa emultempl scripts"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:558
msgid ""
"Each linker target uses an E<.Pa emultempl> script to generate the emulation "
"code. The name of the E<.Pa emultempl> script is set by the E<.Li "
"TEMPLATE_NAME> variable in the E<.Pa emulparams> script. If the E<.Li "
"TEMPLATE_NAME> variable is not set, the default is E<.Li generic>.  If the "
"value of E<.Li TEMPLATE_NAME> is E<.Va template>, E<.Pa genscripts.sh> will "
"use E<.Pa emultempl/ Va template.em>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:567
msgid ""
"Most targets use the generic E<.Pa emultempl> script, E<.Pa "
"emultempl/generic.em>.  A different E<.Pa emultempl> script is only needed "
"if the linker must support unusual actions, such as linking against shared "
"libraries."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:576
msgid ""
"The E<.Pa emultempl> script is normally written as a simple invocation of "
"E<.Li cat> with a here document. The document will use a few variable "
"substitutions.  Typically each function names uses a substitution involving "
"E<.Li EMULATION_NAME>, for ease of debugging when the linker supports "
"multiple emulations."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:595
msgid ""
"Every function and variable in the emitted file should be static. The only "
"globally visible object must be named E<.Li ld_ Va "
"EMULATION_NAME_emulation>, where E<.Va EMULATION_NAME> is the name of the "
"emulation set in E<.Pa configure.tgt> (this is also the name of the E<.Pa "
"emulparams> file without the E<.Pa .sh> extension). The E<.Pa genscripts.sh> "
"script will set the shell variable E<.Li EMULATION_NAME> before invoking the "
"E<.Pa emultempl> script."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:610
msgid ""
"The E<.Li ld_ Va EMULATION_NAME_emulation> variable must be a E<.Li struct "
"ld_emulation_xfer_struct>, as defined in E<.Pa ldemul.h>.  It defines a set "
"of function pointers which are invoked by the linker, as well as strings for "
"the emulation name (normally set from the shell variable E<.Li "
"EMULATION_NAME> and the default BFD target name (normally set from the shell "
"variable E<.Li OUTPUT_FORMAT> which is normally set by the E<.Pa emulparams> "
"file)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:626
msgid ""
"The E<.Pa genscripts.sh> script will set the shell variable E<.Li "
"COMPILE_IN> when it invokes the E<.Pa emultempl> script for the default "
"emulation. In this case, the E<.Pa emultempl> script should include the "
"linker scripts directly, and return them from the E<.Li get_scripts> entry "
"point. When the emulation is not the default, the E<.Li get_scripts> entry "
"point should just return a file name. See E<.Pa emultempl/generic.em> for an "
"example of how this is done."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:628
msgid "At some point, the linker emulation entry points should be documented."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/ld/ldint.7:629
#, no-wrap
msgid "A Walkthrough of a Typical Emulation"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:637
msgid ""
"This chapter is to help people who are new to the way emulations interact "
"with the linker, or who are suddenly thrust into the position of having to "
"work with existing emulations. It will discuss the files you need to be "
"aware of. It will tell you when the given \"hooks\" in the emulation will be "
"called.  It will, hopefully, give you enough information about when and how "
"things happen that you'll be able to get by. As always, the source is the "
"definitive reference to this."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:657
msgid ""
"The starting point for the linker is in E<.Pa ldmain.c> where E<.Li main> is "
"defined. The bulk of the code that's emulation specific will initially be in "
"E<.Li emultempl/ Va emulation.em> but will end up in E<.Li e Va emulation.c> "
"when the build is done. Most of the work to select and interface with "
"emulations is in E<.Li ldemul.h> and E<.Li ldemul.c>.  Specifically, E<.Li "
"ldemul.h> defines the E<.Li ld_emulation_xfer_struct> structure your "
"emulation exports."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:672
msgid ""
"Your emulation file exports a symbol E<.Li ld_ Va "
"EMULATION_NAME_emulation>.  If your emulation is selected (it usually is, "
"since usually there's only one), E<.Li ldemul.c> sets the variable E<.Va "
"ld_emulation> to point to it.  E<.Li ldemul.c> also defines a number of API "
"functions that interface to your emulation, like E<.Li ldemul_after_parse> "
"which simply calls your E<.Li ld_ Va EMULATION_emulation.after_parse> "
"function. For the rest of this section, the functions will be mentioned, but "
"you should assume the indirect reference to your emulation also."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:675
msgid ""
"We will also skip or gloss over parts of the link process that don't relate "
"to emulations, like setting up internationalization."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:687
msgid ""
"After initialization, E<.Li main> selects an emulation by pre-scanning the "
"command line arguments. It calls E<.Li ldemul_choose_target> to choose a "
"target. If you set E<.Li choose_target> to E<.Li ldemul_default_target>, it "
"picks your E<.Li target_name> by default."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:700
msgid ""
"E<.Li main> calls E<.Li ldemul_before_parse>, then E<.Li parse_args>.  E<.Li "
"parse_args> calls E<.Li ldemul_parse_args> for each arg, which must update "
"the E<.Li getopt> globals if it recognizes the argument. If the emulation "
"doesn't recognize it, then parse_args checks to see if it recognizes it."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:707
msgid ""
"Now that the emulation has had access to all its command-line options, E<.Li "
"main> calls E<.Li ldemul_set_symbols>.  This can be used for any "
"initialization that may be affected by options. It is also supposed to set "
"up any variables needed by the emulation script."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:736
msgid ""
"E<.Li main> now calls E<.Li ldemul_get_script> to get the emulation script "
"to use (based on arguments, no doubt,see Section E<.Dq Emulations>)  and "
"runs it. While parsing, E<.Li ldgram.y> may call E<.Li ldemul_hll> or E<.Li "
"ldemul_syslib> to handle the E<.Li HLL> or E<.Li SYSLIB> commands. It may "
"call E<.Li ldemul_unrecognized_file> if you asked the linker to link a file "
"it doesn't recognize. It will call E<.Li ldemul_recognized_file> for each "
"file it does recognize, in case the emulation wants to handle some files "
"specially. All the while, it's loading the files (possibly calling E<.Li "
"ldemul_open_dynamic_archive>)  and symbols and stuff. After it's done "
"reading the script, E<.Li main> calls E<.Li ldemul_after_parse>.  Use the "
"after-parse hook to set up anything that depends on stuff the script might "
"have set up, like the entry point."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:750
msgid ""
"E<.Li main> next calls E<.Li lang_process> in E<.Li ldlang.c>.  This appears "
"to be the main core of the linking itself, as far as emulation hooks are "
"concerned(*). It first opens the output file's BFD, calling E<.Li "
"ldemul_set_output_arch>, and calls E<.Li "
"ldemul_create_output_section_statements> in case you need to use other means "
"to find or create object files (i.e. shared libraries found on a path, or "
"fake stub objects). Despite the name, nobody creates output sections here."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:756
msgid ""
"(*) In most cases, the BFD library does the bulk of the actual linking, "
"handling symbol tables, symbol resolution, relocations, and building the "
"final output file. See the BFD reference for all the details. Your emulation "
"is usually concerned more with managing things at the file and section "
"level, like \"put this here, add this section\", etc."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:761
msgid ""
"Next, the objects to be linked are opened and BFDs created for them, and "
"E<.Li ldemul_after_open> is called. At this point, you have all the objects "
"and symbols loaded, but none of the data has been placed yet."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:772
msgid ""
"Next comes the Big Linking Thingy (except for the parts BFD does). All input "
"sections are mapped to output sections according to the script. If a section "
"doesn't get mapped by default, E<.Li ldemul_place_orphan> will get called to "
"figure out where it goes. Next it figures out the offsets for each section, "
"calling E<.Li ldemul_before_allocation> before and E<.Li "
"ldemul_after_allocation> after deciding where each input section ends up in "
"the output sections."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:779
msgid ""
"The last part of E<.Li lang_process> is to figure out all the symbols' "
"values. After assigning final values to the symbols, E<.Li ldemul_finish> is "
"called, and after that, any undefined symbols are turned into fatal errors."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:789
msgid ""
"OK, back to E<.Li main>, which calls E<.Li ldwrite> in E<.Pa ldwrite.c>.  "
"E<.Li ldwrite> calls BFD's final_link, which does all the relocation fixups "
"and writes the output bfd to disk, and we're done."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:791
msgid "In summary,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:797
msgid "E<.Li main()> in E<.Pa ldmain.c>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:800
msgid "E<.Pa emultempl/ Va EMULATION.em> has your code"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:804
msgid "E<.Li ldemul_choose_target> (defaults to your E<.Li target_name>)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:806
msgid "E<.Li ldemul_before_parse>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:810
msgid "Parse argv, calls E<.Li ldemul_parse_args> for each"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:812
msgid "E<.Li ldemul_set_symbols>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:814
msgid "E<.Li ldemul_get_script>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:816
msgid "parse script"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:823
msgid "may call E<.Li ldemul_hll> or E<.Li ldemul_syslib>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:826
msgid "may call E<.Li ldemul_open_dynamic_archive>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:830
msgid "E<.Li ldemul_after_parse>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:834
msgid "E<.Li lang_process()> in E<.Pa ldlang.c>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:839
msgid "create E<.Li output_bfd>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:841
msgid "E<.Li ldemul_set_output_arch>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:843
msgid "E<.Li ldemul_create_output_section_statements>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:845
msgid "read objects, create input bfds - all symbols exist, but have no values"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:848
msgid "may call E<.Li ldemul_unrecognized_file>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:851
msgid "will call E<.Li ldemul_recognized_file>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:853
msgid "E<.Li ldemul_after_open>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:855
msgid "map input sections to output sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:859
msgid "may call E<.Li ldemul_place_orphan> for remaining sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:861
msgid "E<.Li ldemul_before_allocation>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:863
msgid "gives input sections offsets into output sections, places output sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:866
msgid "E<.Li ldemul_after_allocation> - section addresses valid"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:868
msgid "assigns values to symbols"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:871
msgid "E<.Li ldemul_finish> - symbol values valid"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:875
msgid "output bfd is written to disk"
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/ld/ldint.7:877
#, no-wrap
msgid "Some Architecture Specific Notes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:882
msgid ""
"This is the place for notes on the behavior of E<.Li ld> on specific "
"platforms. Currently, only Intel x86 is documented (and of that, only the "
"auto-import behavior for DLLs)."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/ld/ldint.7:883
#, no-wrap
msgid "Intel x86"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:889
msgid ""
"E<.Li ld> can create DLLs that operate with various runtimes available on a "
"common x86 operating system. These runtimes include native (using the mingw "
"\"platform\"), cygwin, and pw."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/ld/ldint.7:890
#, no-wrap
msgid "auto-import from DLLs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:900
msgid ""
"With this feature on, DLL clients can import variables from DLL without any "
"concern from their side (for example, without any source code "
"modifications).  Auto-import can be enabled using the E<.Li "
"--enable-auto-import> flag, or disabled via the E<.Li --disable-auto-import> "
"flag. Auto-import is disabled by default."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:906
msgid ""
"This is done completely in bounds of the PE specification (to be fair, "
"there's a minor violation of the spec at one point, but in practice "
"auto-import works on all known variants of that common x86 operating system) "
"So, the resulting DLL can be used with any other PE compiler/linker."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:911
msgid ""
"Auto-import is fully compatible with standard import method, in which "
"variables are decorated using attribute modifiers. Libraries of either type "
"may be mixed together."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:916
msgid ""
"Overhead (space): 8 bytes per imported symbol, plus 20 for each reference to "
"it; Overhead (load time): negligible; Overhead (virtual/physical memory): "
"should be less than effect of DLL relocation."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:919
msgid "Motivation"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:924
msgid ""
"The obvious and only way to get rid of dllimport insanity is to make client "
"access variable directly in the DLL, bypassing the extra dereference imposed "
"by ordinary DLL runtime linking. I.e., whenever client contains something "
"like"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:926
msgid "E<.Li mov dll_var,%eax,>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:934
msgid ""
"address of dll_var in the command should be relocated to point into loaded "
"DLL. The aim is to make OS loader do so, and than make ld help with that.  "
"Import section of PE made following way: there's a vector of structures each "
"describing imports from particular DLL. Each such structure points to two "
"other parallel vectors: one holding imported names, and one which will hold "
"address of corresponding imported name. So, the solution is de-vectorize "
"these structures, making import locations be sparse and pointing directly "
"into code."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:936
msgid "Implementation"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:961
msgid ""
"For each reference of data symbol to be imported from DLL (to set of which "
"belong symbols with name E<lt>symE<gt>, if __imp_E<lt>symE<gt> is found in "
"implib), the import fixup entry is generated. That entry is of type "
"IMAGE_IMPORT_DESCRIPTOR and stored in .idata$3 subsection. Each fixup entry "
"contains pointer to symbol's address within .text section (marked with "
"__fuN_E<lt>symE<gt> symbol, where N is integer), pointer to DLL name (so, "
"DLL name is referenced by multiple entries), and pointer to symbol name "
"thunk. Symbol name thunk is singleton vector (__nm_th_E<lt>symbolE<gt>)  "
"pointing to IMAGE_IMPORT_BY_NAME structure (__nm_E<lt>symbolE<gt>) directly "
"containing imported name. Here comes that \"om the edge\" problem mentioned "
"above: PE specification rambles that name vector (OriginalFirstThunk) should "
"run in parallel with addresses vector (FirstThunk), i.e. that they should "
"have same number of elements and terminated with zero. We violate this, "
"since FirstThunk points directly into machine code. But in practice, OS "
"loader implemented the sane way: it goes thru OriginalFirstThunk and puts "
"addresses to FirstThunk, not something else. It once again should be noted "
"that dll and symbol name structures are reused across fixup entries and "
"should be there anyway to support standard import stuff, so sustained "
"overhead is 20 bytes per reference. Other question is whether having several "
"IMAGE_IMPORT_DESCRIPTORS for the same DLL is possible.  Answer is yes, it is "
"done even by native compiler/linker (libth32's functions are in fact "
"resident in windows9x kernel32.dll, so if you use it, you have two "
"IMAGE_IMPORT_DESCRIPTORS for kernel32.dll). Yet other question is whether "
"referencing the same PE structures several times is valid. The answer is why "
"not, prohibiting that (detecting violation) would require more work on "
"behalf of loader than not doing it."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/ld/ldint.7:963
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:965
msgid "GNU Free Documentation License Version 1.1, March 2000"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:969
msgid ""
"Copyright (C) 2000 Free Software Foundation, Inc. 51 Franklin Street, Fifth "
"Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and "
"distribute verbatim copies of this license document, but changing it is not "
"allowed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:971
msgid "0. PREAMBLE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:978
msgid ""
"The purpose of this License is to make a manual, textbook, or other written "
"document \"free\" in the sense of freedom: to assure everyone the effective "
"freedom to copy and redistribute it, with or without modifying it, either "
"commercially or noncommercially. Secondarily, this License preserves for the "
"author and publisher a way to get credit for their work, while not being "
"considered responsible for modifications made by others."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:983
msgid ""
"This License is a kind of \"copyleft\", which means that derivative works of "
"the document must themselves be free in the same sense. It complements the "
"GNU General Public License, which is a copyleft license designed for free "
"software."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:991
msgid ""
"We have designed this License in order to use it for manuals for free "
"software, because free software needs free documentation: a free program "
"should come with manuals providing the same freedoms that the software "
"does. But this License is not limited to software manuals; it can be used "
"for any textual work, regardless of subject matter or whether it is "
"published as a printed book. We recommend this License principally for works "
"whose purpose is instruction or reference."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:993
msgid "1. APPLICABILITY AND DEFINITIONS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:998
msgid ""
"This License applies to any manual or other work that contains a notice "
"placed by the copyright holder saying it can be distributed under the terms "
"of this License. The \"Document\", below, refers to any such manual or "
"work. Any member of the public is a licensee, and is addressed as \"you\"."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1002
msgid ""
"A \"Modified Version\" of the Document means any work containing the "
"Document or a portion of it, either copied verbatim, or with modifications "
"and/or translated into another language."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1011
msgid ""
"A \"Secondary Section\" is a named appendix or a front-matter section of the "
"Document that deals exclusively with the relationship of the publishers or "
"authors of the Document to the Document's overall subject (or to related "
"matters)  and contains nothing that could fall directly within that overall "
"subject.  (For example, if the Document is in part a textbook of "
"mathematics, a Secondary Section may not explain any mathematics.) The "
"relationship could be a matter of historical connection with the subject or "
"with related matters, or of legal, commercial, philosophical, ethical or "
"political position regarding them."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1015
msgid ""
"The \"Invariant Sections\" are certain Secondary Sections whose titles are "
"designated, as being those of Invariant Sections, in the notice that says "
"that the Document is released under this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1019
msgid ""
"The \"Cover Texts\" are certain short passages of text that are listed, as "
"Front-Cover Texts or Back-Cover Texts, in the notice that says that the "
"Document is released under this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1030
msgid ""
"A \"Transparent\" copy of the Document means a machine-readable copy, "
"represented in a format whose specification is available to the general "
"public, whose contents can be viewed and edited directly and "
"straightforwardly with generic text editors or (for images composed of "
"pixels) generic paint programs or (for drawings) some widely available "
"drawing editor, and that is suitable for input to text formatters or for "
"automatic translation to a variety of formats suitable for input to text "
"formatters. A copy made in an otherwise Transparent file format whose markup "
"has been designed to thwart or discourage subsequent modification by readers "
"is not Transparent. A copy that is not \"Transparent\" is called \"Opaque\"."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1038
msgid ""
"Examples of suitable formats for Transparent copies include plain ASCII "
"without markup, Texinfo input format, LaTeX input format, SGML or XML using "
"a publicly available DTD, and standard-conforming simple HTML designed for "
"human modification.  Opaque formats include PostScript, PDF, proprietary "
"formats that can be read and edited only by proprietary word processors, "
"SGML or XML for which the DTD and/or processing tools are not generally "
"available, and the machine-generated HTML produced by some word processors "
"for output purposes only."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1045
msgid ""
"The \"Title Page\" means, for a printed book, the title page itself, plus "
"such following pages as are needed to hold, legibly, the material this "
"License requires to appear in the title page. For works in formats which do "
"not have any title page as such, \"Title Page\" means the text near the most "
"prominent appearance of the work's title, preceding the beginning of the "
"body of the text."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1047
msgid "2. VERBATIM COPYING"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1056
msgid ""
"You may copy and distribute the Document in any medium, either commercially "
"or noncommercially, provided that this License, the copyright notices, and "
"the license notice saying this License applies to the Document are "
"reproduced in all copies, and that you add no other conditions whatsoever to "
"those of this License. You may not use technical measures to obstruct or "
"control the reading or further copying of the copies you make or "
"distribute. However, you may accept compensation in exchange for copies. If "
"you distribute a large enough number of copies you must also follow the "
"conditions in section 3."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1059
msgid ""
"You may also lend copies, under the same conditions stated above, and you "
"may publicly display copies."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1061
msgid "3. COPYING IN QUANTITY"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1072
msgid ""
"If you publish printed copies of the Document numbering more than 100, and "
"the Document's license notice requires Cover Texts, you must enclose the "
"copies in covers that carry, clearly and legibly, all these Cover Texts: "
"Front-Cover Texts on the front cover, and Back-Cover Texts on the back "
"cover. Both covers must also clearly and legibly identify you as the "
"publisher of these copies.  The front cover must present the full title with "
"all words of the title equally prominent and visible. You may add other "
"material on the covers in addition.  Copying with changes limited to the "
"covers, as long as they preserve the title of the Document and satisfy these "
"conditions, can be treated as verbatim copying in other respects."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1076
msgid ""
"If the required texts for either cover are too voluminous to fit legibly, "
"you should put the first ones listed (as many as fit reasonably) on the "
"actual cover, and continue the rest onto adjacent pages."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1088
msgid ""
"If you publish or distribute Opaque copies of the Document numbering more "
"than 100, you must either include a machine-readable Transparent copy along "
"with each Opaque copy, or state in or with each Opaque copy a "
"publicly-accessible computer-network location containing a complete "
"Transparent copy of the Document, free of added material, which the general "
"network-using public has access to download anonymously at no charge using "
"public-standard network protocols.  If you use the latter option, you must "
"take reasonably prudent steps, when you begin distribution of Opaque copies "
"in quantity, to ensure that this Transparent copy will remain thus "
"accessible at the stated location until at least one year after the last "
"time you distribute an Opaque copy (directly or through your agents or "
"retailers) of that edition to the public."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1092
msgid ""
"It is requested, but not required, that you contact the authors of the "
"Document well before redistributing any large number of copies, to give them "
"a chance to provide you with an updated version of the Document."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1094
msgid "4. MODIFICATIONS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1101
msgid ""
"You may copy and distribute a Modified Version of the Document under the "
"conditions of sections 2 and 3 above, provided that you release the Modified "
"Version under precisely this License, with the Modified Version filling the "
"role of the Document, thus licensing distribution and modification of the "
"Modified Version to whoever possesses a copy of it. In addition, you must do "
"these things in the Modified Version:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1139
msgid ""
"A. Use in the Title Page (and on the covers, if any) a title distinct from "
"that of the Document, and from those of previous versions (which should, if "
"there were any, be listed in the History section of the Document). You may "
"use the same title as a previous version if the original publisher of that "
"version gives permission. B. List on the Title Page, as authors, one or more "
"persons or entities responsible for authorship of the modifications in the "
"Modified Version, together with at least five of the principal authors of "
"the Document (all of its principal authors, if it has less than five). C.  "
"State on the Title page the name of the publisher of the Modified Version, "
"as the publisher. D. Preserve all the copyright notices of the Document. E.  "
"Add an appropriate copyright notice for your modifications adjacent to the "
"other copyright notices. F. Include, immediately after the copyright "
"notices, a license notice giving the public permission to use the Modified "
"Version under the terms of this License, in the form shown in the Addendum "
"below.  G. Preserve in that license notice the full lists of Invariant "
"Sections and required Cover Texts given in the Document's license "
"notice. H. Include an unaltered copy of this License. I. Preserve the "
"section entitled \"History\", and its title, and add to it an item stating "
"at least the title, year, new authors, and publisher of the Modified Version "
"as given on the Title Page.  If there is no section entitled \"History\" in "
"the Document, create one stating the title, year, authors, and publisher of "
"the Document as given on its Title Page, then add an item describing the "
"Modified Version as stated in the previous sentence. J. Preserve the network "
"location, if any, given in the Document for public access to a Transparent "
"copy of the Document, and likewise the network locations given in the "
"Document for previous versions it was based on. These may be placed in the "
"\"History\" section. You may omit a network location for a work that was "
"published at least four years before the Document itself, or if the original "
"publisher of the version it refers to gives permission.  K. In any section "
"entitled \"Acknowledgements\" or \"Dedications\", preserve the section's "
"title, and preserve in the section all the substance and tone of each of the "
"contributor acknowledgements and/or dedications given therein.  L. Preserve "
"all the Invariant Sections of the Document, unaltered in their text and in "
"their titles. Section numbers or the equivalent are not considered part of "
"the section titles. M. Delete any section entitled \"Endorsements\".  Such a "
"section may not be included in the Modified Version. N. Do not retitle any "
"existing section as \"Endorsements\" or to conflict in title with any "
"Invariant Section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1146
msgid ""
"If the Modified Version includes new front-matter sections or appendices "
"that qualify as Secondary Sections and contain no material copied from the "
"Document, you may at your option designate some or all of these sections as "
"invariant.  To do this, add their titles to the list of Invariant Sections "
"in the Modified Version's license notice. These titles must be distinct from "
"any other section titles."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1151
msgid ""
"You may add a section entitled \"Endorsements\", provided it contains "
"nothing but endorsements of your Modified Version by various parties--for "
"example, statements of peer review or that the text has been approved by an "
"organization as the authoritative definition of a standard."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1160
msgid ""
"You may add a passage of up to five words as a Front-Cover Text, and a "
"passage of up to 25 words as a Back-Cover Text, to the end of the list of "
"Cover Texts in the Modified Version. Only one passage of Front-Cover Text "
"and one of Back-Cover Text may be added by (or through arrangements made by) "
"any one entity. If the Document already includes a cover text for the same "
"cover, previously added by you or by arrangement made by the same entity you "
"are acting on behalf of, you may not add another; but you may replace the "
"old one, on explicit permission from the previous publisher that added the "
"old one."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1164
msgid ""
"The author(s) and publisher(s) of the Document do not by this License give "
"permission to use their names for publicity for or to assert or imply "
"endorsement of any Modified Version."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1166
msgid "5. COMBINING DOCUMENTS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1172
msgid ""
"You may combine the Document with other documents released under this "
"License, under the terms defined in section 4 above for modified versions, "
"provided that you include in the combination all of the Invariant Sections "
"of all of the original documents, unmodified, and list them all as Invariant "
"Sections of your combined work in its license notice."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1181
msgid ""
"The combined work need only contain one copy of this License, and multiple "
"identical Invariant Sections may be replaced with a single copy. If there "
"are multiple Invariant Sections with the same name but different contents, "
"make the title of each such section unique by adding at the end of it, in "
"parentheses, the name of the original author or publisher of that section if "
"known, or else a unique number. Make the same adjustment to the section "
"titles in the list of Invariant Sections in the license notice of the "
"combined work."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1186
msgid ""
"In the combination, you must combine any sections entitled \"History\" in "
"the various original documents, forming one section entitled \"History\"; "
"likewise combine any sections entitled \"Acknowledgements\", and any "
"sections entitled \"Dedications\". You must delete all sections entitled "
"\"Endorsements.\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1188
msgid "6. COLLECTIONS OF DOCUMENTS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1194
msgid ""
"You may make a collection consisting of the Document and other documents "
"released under this License, and replace the individual copies of this "
"License in the various documents with a single copy that is included in the "
"collection, provided that you follow the rules of this License for verbatim "
"copying of each of the documents in all other respects."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1199
msgid ""
"You may extract a single document from such a collection, and distribute it "
"individually under this License, provided you insert a copy of this License "
"into the extracted document, and follow this License in all other respects "
"regarding verbatim copying of that document."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1201
msgid "7. AGGREGATION WITH INDEPENDENT WORKS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1209
msgid ""
"A compilation of the Document or its derivatives with other separate and "
"independent documents or works, in or on a volume of a storage or "
"distribution medium, does not as a whole count as a Modified Version of the "
"Document, provided no compilation copyright is claimed for the "
"compilation. Such a compilation is called an \"aggregate\", and this License "
"does not apply to the other self-contained works thus compiled with the "
"Document, on account of their being thus compiled, if they are not "
"themselves derivative works of the Document."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1215
msgid ""
"If the Cover Text requirement of section 3 is applicable to these copies of "
"the Document, then if the Document is less than one quarter of the entire "
"aggregate, the Document's Cover Texts may be placed on covers that surround "
"only the Document within the aggregate. Otherwise they must appear on covers "
"around the whole aggregate."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1217
msgid "8. TRANSLATION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1227
msgid ""
"Translation is considered a kind of modification, so you may distribute "
"translations of the Document under the terms of section 4. Replacing "
"Invariant Sections with translations requires special permission from their "
"copyright holders, but you may include translations of some or all Invariant "
"Sections in addition to the original versions of these Invariant "
"Sections. You may include a translation of this License provided that you "
"also include the original English version of this License. In case of a "
"disagreement between the translation and the original English version of "
"this License, the original English version will prevail."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1229
msgid "9. TERMINATION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1236
msgid ""
"You may not copy, modify, sublicense, or distribute the Document except as "
"expressly provided for under this License. Any other attempt to copy, "
"modify, sublicense or distribute the Document is void, and will "
"automatically terminate your rights under this License. However, parties who "
"have received copies, or rights, from you under this License will not have "
"their licenses terminated so long as such parties remain in full compliance."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1238
msgid "10. FUTURE REVISIONS OF THIS LICENSE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1243
msgid ""
"The Free Software Foundation may publish new, revised versions of the GNU "
"Free Documentation License from time to time. Such new versions will be "
"similar in spirit to the present version, but may differ in detail to "
"address new problems or concerns. See http://www.gnu.org/copyleft/."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1251
msgid ""
"Each version of the License is given a distinguishing version number. If the "
"Document specifies that a particular numbered version of this License \"or "
"any later version\" applies to it, you have the option of following the "
"terms and conditions either of that specified version or of any later "
"version that has been published (not as a draft) by the Free Software "
"Foundation. If the Document does not specify a version number of this "
"License, you may choose any version ever published (not as a draft) by the "
"Free Software Foundation."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1253
msgid "ADDENDUM: How to use this License for your documents"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1257
msgid ""
"To use this License in a document you have written, include a copy of the "
"License in the document and put the following copyright and license notices "
"just after the title page:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1267
#, no-wrap
msgid ""
"    Copyright (c)  YEAR  YOUR NAME.\n"
"    Permission is granted to copy, distribute and/or modify this document\n"
"    under the terms of the GNU Free Documentation License, Version 1.1\n"
"    or any later version published by the Free Software Foundation;\n"
"    with the Invariant Sections being LIST THEIR TITLES, with the\n"
"    Front-Cover Texts being LIST, and with the Back-Cover Texts being "
"LIST.\n"
"    A copy of the license is included in the section entitled \"GNU\n"
"    Free Documentation License\".\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1273
msgid ""
"If you have no Invariant Sections, write \"with no Invariant Sections\" "
"instead of saying which ones are invariant. If you have no Front-Cover "
"Texts, write \"no Front-Cover Texts\" instead of \"Front-Cover Texts being "
"LIST\"; likewise for Back-Cover Texts."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/ld/ldint.7:1277
msgid ""
"If your document contains nontrivial examples of program code, we recommend "
"releasing these examples in parallel under your choice of free software "
"license, such as the GNU General Public License, to permit their use in free "
"software."
msgstr ""
