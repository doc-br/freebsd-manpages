# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man7/security.7:26
#, no-wrap
msgid "December 25, 2013"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man7/security.7:27
#, no-wrap
msgid "SECURITY 7"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:29
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:31
msgid "E<.Nm security>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man7/security.7:31
#, no-wrap
msgid "introduction to security under FreeBSD"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:32
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:52
msgid ""
"Security is a function that begins and ends with the system administrator.  "
"While all E<.Bx> multi-user systems have some inherent security, the job of "
"building and maintaining additional security mechanisms to keep users E<.Dq "
"honest> is probably one of the single largest undertakings of the sysadmin.  "
"Machines are only as secure as you make them, and security concerns are ever "
"competing with the human necessity for convenience.  E<.Ux> systems, in "
"general, are capable of running a huge number of simultaneous processes and "
"many of these processes operate as servers \\(em meaning that external "
"entities can connect and talk to them.  As yesterday's mini-computers and "
"mainframes become today's desktops, and as computers become networked and "
"internetworked, security becomes an ever bigger issue."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:57
msgid ""
"Security is best implemented through a layered onion approach.  In a "
"nutshell, what you want to do is to create as many layers of security as are "
"convenient and then carefully monitor the system for intrusions."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:63
msgid ""
"System security also pertains to dealing with various forms of attacks, "
"including attacks that attempt to crash or otherwise make a system unusable "
"but do not attempt to break root.  Security concerns can be split up into "
"several categories:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:66
msgid "Denial of Service attacks (DoS)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:68
msgid "User account compromises"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:70
msgid "Root compromise through accessible servers"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:72
msgid "Root compromise via user accounts"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:74
msgid "Backdoor creation"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:93
msgid ""
"A denial of service attack is an action that deprives the machine of needed "
"resources.  Typically, DoS attacks are brute-force mechanisms that attempt "
"to crash or otherwise make a machine unusable by overwhelming its servers or "
"network stack.  Some DoS attacks try to take advantages of bugs in the "
"networking stack to crash a machine with a single packet.  The latter can "
"only be fixed by applying a bug fix to the kernel.  Attacks on servers can "
"often be fixed by properly specifying options to limit the load the servers "
"incur on the system under adverse conditions.  Brute-force network attacks "
"are harder to deal with.  A spoofed-packet attack, for example, is nearly "
"impossible to stop short of cutting your system off from the Internet.  It "
"may not be able to take your machine down, but it can fill up your Internet "
"pipe."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:112
msgid ""
"A user account compromise is even more common than a DoS attack.  Many "
"sysadmins still run standard E<.Xr telnetd 8>, E<.Xr rlogind 8>, E<.Xr rshd "
"8>, and E<.Xr ftpd 8> servers on their machines.  These servers, by default, "
"do not operate over encrypted connections.  The result is that if you have "
"any moderate-sized user base, one or more of your users logging into your "
"system from a remote location (which is the most common and convenient way "
"to log in to a system)  will have his or her password sniffed.  The "
"attentive system administrator will analyze his remote access logs looking "
"for suspicious source addresses even for successful logins."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:123
msgid ""
"One must always assume that once an attacker has access to a user account, "
"the attacker can break root.  However, the reality is that in a well secured "
"and maintained system, access to a user account does not necessarily give "
"the attacker access to root.  The distinction is important because without "
"access to root the attacker cannot generally hide his tracks and may, at "
"best, be able to do nothing more than mess with the user's files or crash "
"the machine.  User account compromises are very common because users tend "
"not to take the precautions that sysadmins take."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:142
msgid ""
"System administrators must keep in mind that there are potentially many ways "
"to break root on a machine.  The attacker may know the root password, the "
"attacker may find a bug in a root-run server and be able to break root over "
"a network connection to that server, or the attacker may know of a bug in an "
"SUID-root program that allows the attacker to break root once he has broken "
"into a user's account.  If an attacker has found a way to break root on a "
"machine, the attacker may not have a need to install a backdoor.  Many of "
"the root holes found and closed to date involve a considerable amount of "
"work by the attacker to clean up after himself, so most attackers do install "
"backdoors.  This gives you a convenient way to detect the attacker.  Making "
"it impossible for an attacker to install a backdoor may actually be "
"detrimental to your security because it will not close off the hole the "
"attacker used to break in originally."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:146
msgid ""
"Security remedies should always be implemented with a multi-layered E<.Dq "
"onion peel> approach and can be categorized as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:149
msgid "Securing root and staff accounts"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:151
msgid "Securing root \\(em root-run servers and SUID/SGID binaries"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:153
msgid "Securing user accounts"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:155
msgid "Securing the password file"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:157
msgid "Securing the kernel core, raw devices, and file systems"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:159
msgid "Quick detection of inappropriate changes made to the system"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:161
msgid "Paranoia"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:162
#, no-wrap
msgid "SECURING THE ROOT ACCOUNT AND SECURING STAFF ACCOUNTS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:197
msgid ""
"Do not bother securing staff accounts if you have not secured the root "
"account.  Most systems have a password assigned to the root account.  The "
"first thing you do is assume that the password is E<.Em always> "
"compromised.  This does not mean that you should remove the password.  The "
"password is almost always necessary for console access to the machine.  What "
"it does mean is that you should not make it possible to use the password "
"outside of the console or possibly even with a E<.Xr su 1> utility.  For "
"example, make sure that your PTYs are specified as being E<.Dq Li insecure> "
"in the E<.Pa /etc/ttys> file so that direct root logins via E<.Xr telnet 1> "
"or E<.Xr rlogin 1> are disallowed.  If using other login services such as "
"E<.Xr sshd 8>, make sure that direct root logins are disabled there as "
"well.  Consider every access method \\(em services such as E<.Xr ftp 1> "
"often fall through the cracks.  Direct root logins should only be allowed "
"via the system console."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:248
msgid ""
"Of course, as a sysadmin you have to be able to get to root, so we open up a "
"few holes.  But we make sure these holes require additional password "
"verification to operate.  One way to make root accessible is to add "
"appropriate staff accounts to the E<.Dq Li wheel> group (in E<.Pa "
"/etc/group>).  The staff members placed in the E<.Li wheel> group are "
"allowed to E<.Xr su 1> to root.  You should never give staff members native "
"E<.Li wheel> access by putting them in the E<.Li wheel> group in their "
"password entry.  Staff accounts should be placed in a E<.Dq Li staff> group, "
"and then added to the E<.Li wheel> group via the E<.Pa /etc/group> file.  "
"Only those staff members who actually need to have root access should be "
"placed in the E<.Li wheel> group.  It is also possible, when using an "
"authentication method such as Kerberos, to use Kerberos's E<.Pa .k5login> "
"file in the root account to allow a E<.Xr ksu 1> to root without having to "
"place anyone at all in the E<.Li wheel> group.  This may be the better "
"solution since the E<.Li wheel> mechanism still allows an intruder to break "
"root if the intruder has gotten hold of your password file and can break "
"into a staff account.  While having the E<.Li wheel> mechanism is better "
"than having nothing at all, it is not necessarily the safest option."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:280
msgid ""
"An indirect way to secure the root account is to secure your staff accounts "
"by using an alternative login access method and *'ing out the crypted "
"password for the staff accounts.  This way an intruder may be able to steal "
"the password file but will not be able to break into any staff accounts or "
"root, even if root has a crypted password associated with it (assuming, of "
"course, that you have limited root access to the console).  Staff members "
"get into their staff accounts through a secure login mechanism such as E<.Xr "
"kerberos 8> or E<.Xr ssh 1> using a private/public key pair.  When you use "
"something like Kerberos you generally must secure the machines which run the "
"Kerberos servers and your desktop workstation.  When you use a "
"public/private key pair with SSH, you must generally secure the machine you "
"are logging in E<.Em from> (typically your workstation), but you can also "
"add an additional layer of protection to the key pair by password protecting "
"the keypair when you create it with E<.Xr ssh-keygen 1>.  Being able to "
"*-out the passwords for staff accounts also guarantees that staff members "
"can only log in through secure access methods that you have set up.  You can "
"thus force all staff members to use secure, encrypted connections for all "
"their sessions which closes an important hole used by many intruders: that "
"of sniffing the network from an unrelated, less secure machine."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:295
msgid ""
"The more indirect security mechanisms also assume that you are logging in "
"from a more restrictive server to a less restrictive server.  For example, "
"if your main box is running all sorts of servers, your workstation should "
"not be running any.  In order for your workstation to be reasonably secure "
"you should run as few servers as possible, up to and including no servers at "
"all, and you should run a password-protected screen blanker.  Of course, "
"given physical access to a workstation, an attacker can break any sort of "
"security you put on it.  This is definitely a problem that you should "
"consider but you should also consider the fact that the vast majority of "
"break-ins occur remotely, over a network, from people who do not have "
"physical access to your workstation or servers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:308
msgid ""
"Using something like Kerberos also gives you the ability to disable or "
"change the password for a staff account in one place and have it immediately "
"affect all the machines the staff member may have an account on.  If a staff "
"member's account gets compromised, the ability to instantly change his "
"password on all machines should not be underrated.  With discrete passwords, "
"changing a password on N machines can be a mess.  You can also impose "
"re-passwording restrictions with Kerberos: not only can a Kerberos ticket be "
"made to timeout after a while, but the Kerberos system can require that the "
"user choose a new password after a certain period of time (say, once a "
"month)."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:308
#, no-wrap
msgid "SECURING ROOT \\(em ROOT-RUN SERVERS AND SUID/SGID BINARIES"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:345
msgid ""
"The prudent sysadmin only runs the servers he needs to, no more, no less.  "
"Be aware that third party servers are often the most bug-prone.  For "
"example, running an old version of E<.Xr imapd 8> or E<.Xr popper 8 Pq Pa "
"ports/mail/popper> is like giving a universal root ticket out to the entire "
"world.  Never run a server that you have not checked out carefully.  Many "
"servers do not need to be run as root.  For example, the E<.Xr talkd 8>, "
"E<.Xr comsat 8>, and E<.Xr fingerd 8> daemons can be run in special user "
"E<.Dq sandboxes>.  A sandbox is not perfect unless you go to a large amount "
"of trouble, but the onion approach to security still stands: if someone is "
"able to break in through a server running in a sandbox, they still have to "
"break out of the sandbox.  The more layers the attacker must break through, "
"the lower the likelihood of his success.  Root holes have historically been "
"found in virtually every server ever run as root, including basic system "
"servers.  If you are running a machine through which people only log in via "
"E<.Xr sshd 8> and never log in via E<.Xr telnetd 8>, E<.Xr rshd 8>, or E<.Xr "
"rlogind 8>, then turn off those services!"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:358
msgid ""
"E<.Fx> now defaults to running E<.Xr talkd 8>, E<.Xr comsat 8>, and E<.Xr "
"fingerd 8> in a sandbox.  Depending on whether you are installing a new "
"system or upgrading an existing system, the special user accounts used by "
"these sandboxes may not be installed.  The prudent sysadmin would research "
"and implement sandboxes for servers whenever possible."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:372
msgid ""
"There are a number of other servers that typically do not run in sandboxes: "
"E<.Xr sendmail 8>, E<.Xr popper 8>, E<.Xr imapd 8>, E<.Xr ftpd 8>, and "
"others.  There are alternatives to some of these, but installing them may "
"require more work than you are willing to put (the convenience factor "
"strikes again).  You may have to run these servers as root and rely on other "
"mechanisms to detect break-ins that might occur through them."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:418
msgid ""
"The other big potential root hole in a system are the SUID-root and SGID "
"binaries installed on the system.  Most of these binaries, such as E<.Xr "
"rlogin 1>, reside in E<.Pa /bin , /sbin , /usr/bin>, or E<.Pa /usr/sbin>.  "
"While nothing is 100% safe, the system-default SUID and SGID binaries can be "
"considered reasonably safe.  Still, root holes are occasionally found in "
"these binaries.  A root hole was found in Xlib in 1998 that made E<.Xr xterm "
"1 Pq Pa ports/x11/xterm> (which is typically SUID)  vulnerable.  It is "
"better to be safe than sorry and the prudent sysadmin will restrict SUID "
"binaries that only staff should run to a special group that only staff can "
"access, and get rid of E<.Pq Dq Li \"chmod 000\"> any SUID binaries that "
"nobody uses.  A server with no display generally does not need an E<.Xr "
"xterm 1> binary.  SGID binaries can be almost as dangerous.  If an intruder "
"can break an SGID-kmem binary the intruder might be able to read E<.Pa "
"/dev/kmem> and thus read the crypted password file, potentially compromising "
"any passworded account.  Alternatively an intruder who breaks group E<.Dq Li "
"kmem> can monitor keystrokes sent through PTYs, including PTYs used by users "
"who log in through secure methods.  An intruder that breaks the E<.Dq Li "
"tty> group can write to almost any user's TTY.  If a user is running a "
"terminal program or emulator with a keyboard-simulation feature, the "
"intruder can potentially generate a data stream that causes the user's "
"terminal to echo a command, which is then run as that user."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:418
#, no-wrap
msgid "SECURING USER ACCOUNTS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:432
msgid ""
"User accounts are usually the most difficult to secure.  While you can "
"impose draconian access restrictions on your staff and *-out their "
"passwords, you may not be able to do so with any general user accounts you "
"might have.  If you do have sufficient control then you may win out and be "
"able to secure the user accounts properly.  If not, you simply have to be "
"more vigilant in your monitoring of those accounts.  Use of SSH and Kerberos "
"for user accounts is more problematic due to the extra administration and "
"technical support required, but still a very good solution compared to a "
"crypted password file."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:432
#, no-wrap
msgid "SECURING THE PASSWORD FILE"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:441
msgid ""
"The only sure fire way is to *-out as many passwords as you can and use SSH "
"or Kerberos for access to those accounts.  Even though the crypted password "
"file E<.Pq Pa /etc/spwd.db> can only be read by root, it may be possible for "
"an intruder to obtain read access to that file even if the attacker cannot "
"obtain root-write access."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:447
msgid ""
"Your security scripts should always check for and report changes to the "
"password file (see E<.Sx CHECKING FILE INTEGRITY> below)."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:447
#, no-wrap
msgid "SECURING THE KERNEL CORE, RAW DEVICES, AND FILE SYSTEMS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:463
msgid ""
"If an attacker breaks root he can do just about anything, but there are "
"certain conveniences.  For example, most modern kernels have a packet "
"sniffing device driver built in.  Under E<.Fx> it is called the E<.Xr bpf 4> "
"device.  An intruder will commonly attempt to run a packet sniffer on a "
"compromised machine.  You do not need to give the intruder the capability "
"and most systems should not have the E<.Xr bpf 4> device compiled in."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:515
msgid ""
"But even if you turn off the E<.Xr bpf 4> device, you still have E<.Pa "
"/dev/mem> and E<.Pa /dev/kmem> to worry about.  For that matter, the "
"intruder can still write to raw disk devices.  Also, there is another kernel "
"feature called the module loader, E<.Xr kldload 8>.  An enterprising "
"intruder can use a KLD module to install his own E<.Xr bpf 4> device or "
"other sniffing device on a running kernel.  To avoid these problems you have "
"to run the kernel at a higher security level, at least level 1.  The "
"security level can be set with a E<.Xr sysctl 8> on the E<.Va "
"kern.securelevel> variable.  Once you have set the security level to 1, "
"write access to raw devices will be denied and special E<.Xr chflags 1> "
"flags, such as E<.Cm schg>, will be enforced.  You must also ensure that the "
"E<.Cm schg> flag is set on critical startup binaries, directories, and "
"script files \\(em everything that gets run up to the point where the "
"security level is set.  This might be overdoing it, and upgrading the system "
"is much more difficult when you operate at a higher security level.  You may "
"compromise and run the system at a higher security level but not set the "
"E<.Cm schg> flag for every system file and directory under the sun.  Another "
"possibility is to simply mount E<.Pa /> and E<.Pa /usr> read-only.  It "
"should be noted that being too draconian in what you attempt to protect may "
"prevent the all-important detection of an intrusion."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:520
msgid ""
"The kernel runs with five different security levels.  Any super-user process "
"can raise the level, but no process can lower it.  The security levels are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/security.7:521
#, no-wrap
msgid "Ic -1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:524
msgid ""
"Permanently insecure mode \\- always run the system in insecure mode.  This "
"is the default initial value."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/security.7:524
#, no-wrap
msgid "Ic 0"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:527
msgid ""
"Insecure mode \\- immutable and append-only flags may be turned off.  All "
"devices may be read or written subject to their permissions."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/security.7:527
#, no-wrap
msgid "Ic 1"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:546
msgid ""
"Secure mode \\- the system immutable and system append-only flags may not be "
"turned off; disks for mounted file systems, E<.Pa /dev/mem> and E<.Pa "
"/dev/kmem> may not be opened for writing; E<.Pa /dev/io> (if your platform "
"has it) may not be opened at all; kernel modules (see E<.Xr kld 4>)  may not "
"be loaded or unloaded.  The kernel debugger may not be entered using the "
"E<.Va debug.kdb.enter> sysctl.  A panic or trap cannot be forced using the "
"E<.Va debug.kdb.panic> and other sysctl's."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/security.7:546
#, no-wrap
msgid "Ic 2"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:555
msgid ""
"Highly secure mode \\- same as secure mode, plus disks may not be opened for "
"writing (except by E<.Xr mount 2>)  whether mounted or not.  This level "
"precludes tampering with file systems by unmounting them, but also inhibits "
"running E<.Xr newfs 8> while the system is multi-user."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:560
msgid ""
"In addition, kernel time changes are restricted to less than or equal to one "
"second.  Attempts to change the time by more than this will log the message "
"E<.Dq Time adjustment clamped to +1 second>."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/security.7:560
#, no-wrap
msgid "Ic 3"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:572
msgid ""
"Network secure mode \\- same as highly secure mode, plus IP packet filter "
"rules (see E<.Xr ipfw 8>, E<.Xr ipfirewall 4> and E<.Xr pfctl 8>)  cannot be "
"changed and E<.Xr dummynet 4> or E<.Xr pf 4> configuration cannot be "
"adjusted."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:576
msgid ""
"The security level can be configured with variables documented in E<.Xr "
"rc.conf 5>."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:576
#, no-wrap
msgid "CHECKING FILE INTEGRITY: BINARIES, CONFIG FILES, ETC"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:598
msgid ""
"When it comes right down to it, you can only protect your core system "
"configuration and control files so much before the convenience factor rears "
"its ugly head.  For example, using E<.Xr chflags 1> to set the E<.Cm schg> "
"bit on most of the files in E<.Pa /> and E<.Pa /usr> is probably "
"counterproductive because while it may protect the files, it also closes a "
"detection window.  The last layer of your security onion is perhaps the most "
"important \\(em detection.  The rest of your security is pretty much useless "
"(or, worse, presents you with a false sense of safety) if you cannot detect "
"potential incursions.  Half the job of the onion is to slow down the "
"attacker rather than stop him in order to give the detection layer a chance "
"to catch him in the act."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:621
msgid ""
"The best way to detect an incursion is to look for modified, missing, or "
"unexpected files.  The best way to look for modified files is from another "
"(often centralized)  limited-access system.  Writing your security scripts "
"on the extra-secure limited-access system makes them mostly invisible to "
"potential attackers, and this is important.  In order to take maximum "
"advantage you generally have to give the limited-access box significant "
"access to the other machines in the business, usually either by doing a "
"read-only NFS export of the other machines to the limited-access box, or by "
"setting up SSH keypairs to allow the limit-access box to SSH to the other "
"machines.  Except for its network traffic, NFS is the least visible method "
"\\(em allowing you to monitor the file systems on each client box virtually "
"undetected.  If your limited-access server is connected to the client boxes "
"through a switch, the NFS method is often the better choice.  If your "
"limited-access server is connected to the client boxes through a hub or "
"through several layers of routing, the NFS method may be too insecure "
"(network-wise) and using SSH may be the better choice even with the "
"audit-trail tracks that SSH lays."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:647
msgid ""
"Once you give a limit-access box at least read access to the client systems "
"it is supposed to monitor, you must write scripts to do the actual "
"monitoring.  Given an NFS mount, you can write scripts out of simple system "
"utilities such as E<.Xr find 1> and E<.Xr md5 1>.  It is best to physically "
"E<.Xr md5 1> the client-box files boxes at least once a day, and to test "
"control files such as those found in E<.Pa /etc> and E<.Pa /usr/local/etc> "
"even more often.  When mismatches are found relative to the base MD5 "
"information the limited-access machine knows is valid, it should scream at a "
"sysadmin to go check it out.  A good security script will also check for "
"inappropriate SUID binaries and for new or deleted files on system "
"partitions such as E<.Pa /> and E<.Pa /usr>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:664
msgid ""
"When using SSH rather than NFS, writing the security script is much more "
"difficult.  You essentially have to E<.Xr scp 1> the scripts to the client "
"box in order to run them, making them visible, and for safety you also need "
"to E<.Xr scp 1> the binaries (such as E<.Xr find 1>)  that those scripts "
"use.  The E<.Xr sshd 8> daemon on the client box may already be "
"compromised.  All in all, using SSH may be necessary when running over "
"unsecure links, but it is also a lot harder to deal with."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:669
msgid ""
"A good security script will also check for changes to user and staff members "
"access configuration files: E<.Pa .rhosts , .shosts , .ssh/authorized_keys> "
"and so forth, files that might fall outside the purview of the MD5 check."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:684
msgid ""
"If you have a huge amount of user disk space it may take too long to run "
"through every file on those partitions.  In this case, setting mount flags "
"to disallow SUID binaries on those partitions is a good idea.  The E<.Cm "
"nosuid> option (see E<.Xr mount 8>)  is what you want to look into.  I would "
"scan them anyway at least once a week, since the object of this layer is to "
"detect a break-in whether or not the break-in is effective."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:694
msgid ""
"Process accounting (see E<.Xr accton 8>)  is a relatively low-overhead "
"feature of the operating system which I recommend using as a post-break-in "
"evaluation mechanism.  It is especially useful in tracking down how an "
"intruder has actually broken into a system, assuming the file is still "
"intact after the break-in occurs."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:704
msgid ""
"Finally, security scripts should process the log files and the logs "
"themselves should be generated in as secure a manner as possible \\(em "
"remote syslog can be very useful.  An intruder tries to cover his tracks, "
"and log files are critical to the sysadmin trying to track down the time and "
"method of the initial break-in.  One way to keep a permanent record of the "
"log files is to run the system console to a serial port and collect the "
"information on a continuing basis through a secure machine monitoring the "
"consoles."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:704
#, no-wrap
msgid "PARANOIA"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:714
msgid ""
"A little paranoia never hurts.  As a rule, a sysadmin can add any number of "
"security features as long as they do not affect convenience, and can add "
"security features that do affect convenience with some added thought.  Even "
"more importantly, a security administrator should mix it up a bit \\(em if "
"you use recommendations such as those given by this manual page verbatim, "
"you give away your methodologies to the prospective attacker who also has "
"access to this manual page."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:714
#, no-wrap
msgid "SPECIAL SECTION ON DoS ATTACKS"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:720
msgid ""
"This section covers Denial of Service attacks.  A DoS attack is typically a "
"packet attack.  While there is not much you can do about modern spoofed "
"packet attacks that saturate your network, you can generally limit the "
"damage by ensuring that the attacks cannot take down your servers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:723
msgid "Limiting server forks"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:725
msgid "Limiting springboard attacks (ICMP response attacks, ping broadcast, etc.)"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:727
msgid "Kernel Route Cache"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:754
msgid ""
"A common DoS attack is against a forking server that attempts to cause the "
"server to eat processes, file descriptors, and memory until the machine "
"dies.  The E<.Xr inetd 8> server has several options to limit this sort of "
"attack.  It should be noted that while it is possible to prevent a machine "
"from going down it is not generally possible to prevent a service from being "
"disrupted by the attack.  Read the E<.Xr inetd 8> manual page carefully and "
"pay specific attention to the E<.Fl c , C>, and E<.Fl R> options.  Note that "
"spoofed-IP attacks will circumvent the E<.Fl C> option to E<.Xr inetd 8>, so "
"typically a combination of options must be used.  Some standalone servers "
"have self-fork-limitation parameters."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:790
msgid ""
"The E<.Xr sendmail 8> daemon has its E<.Fl OMaxDaemonChildren> option which "
"tends to work much better than trying to use E<.Xr sendmail 8 Ns 's> load "
"limiting options due to the load lag.  You should specify a E<.Va "
"MaxDaemonChildren> parameter when you start E<.Xr sendmail 8> high enough to "
"handle your expected load but not so high that the computer cannot handle "
"that number of E<.Nm sendmail Ns 's> without falling on its face.  It is "
"also prudent to run E<.Xr sendmail 8> in E<.Dq queued> mode E<.Pq Fl "
"ODeliveryMode=queued> and to run the daemon E<.Pq Dq Nm sendmail Fl bd> "
"separate from the queue-runs E<.Pq Dq Nm sendmail Fl q15m>.  If you still "
"want real-time delivery you can run the queue at a much lower interval, such "
"as E<.Fl q1m>, but be sure to specify a reasonable E<.Va MaxDaemonChildren> "
"option for that E<.Xr sendmail 8> to prevent cascade failures."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:799
msgid ""
"The E<.Xr syslogd 8> daemon can be attacked directly and it is strongly "
"recommended that you use the E<.Fl s> option whenever possible, and the "
"E<.Fl a> option otherwise."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:805
msgid ""
"You should also be fairly careful with connect-back services such as "
"tcpwrapper's reverse-identd, which can be attacked directly.  You generally "
"do not want to use the reverse-ident feature of tcpwrappers for this reason."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:847
msgid ""
"It is a very good idea to protect internal services from external access by "
"firewalling them off at your border routers.  The idea here is to prevent "
"saturation attacks from outside your LAN, not so much to protect internal "
"services from network-based root compromise.  Always configure an exclusive "
"firewall, i.e., E<.So> firewall everything E<.Em except> ports A, B, C, D, "
"and M-Z E<.Sc>.  This way you can firewall off all of your low ports except "
"for certain specific services such as E<.Xr talkd 8>, E<.Xr sendmail 8>, and "
"other internet-accessible services.  If you try to configure the firewall "
"the other way \\(em as an inclusive or permissive firewall, there is a good "
"chance that you will forget to E<.Dq close> a couple of services or that you "
"will add a new internal service and forget to update the firewall.  You can "
"still open up the high-numbered port range on the firewall to allow "
"permissive-like operation without compromising your low ports.  Also take "
"note that E<.Fx> allows you to control the range of port numbers used for "
"dynamic binding via the various E<.Va net.inet.ip.portrange> sysctl's E<.Pq "
"Dq Li \"sysctl net.inet.ip.portrange\">, which can also ease the complexity "
"of your firewall's configuration.  I usually use a normal first/last range "
"of 4000 to 5000, and a hiport range of 49152 to 65535, then block everything "
"under 4000 off in my firewall (except for certain specific "
"internet-accessible ports, of course)."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:897
msgid ""
"Another common DoS attack is called a springboard attack \\(em to attack a "
"server in a manner that causes the server to generate responses which then "
"overload the server, the local network, or some other machine.  The most "
"common attack of this nature is the ICMP PING BROADCAST attack.  The "
"attacker spoofs ping packets sent to your LAN's broadcast address with the "
"source IP address set to the actual machine they wish to attack.  If your "
"border routers are not configured to stomp on ping's to broadcast addresses, "
"your LAN winds up generating sufficient responses to the spoofed source "
"address to saturate the victim, especially when the attacker uses the same "
"trick on several dozen broadcast addresses over several dozen different "
"networks at once.  Broadcast attacks of over a hundred and twenty megabits "
"have been measured.  A second common springboard attack is against the ICMP "
"error reporting system.  By constructing packets that generate ICMP error "
"responses, an attacker can saturate a server's incoming network and cause "
"the server to saturate its outgoing network with ICMP responses.  This type "
"of attack can also crash the server by running it out of E<.Vt mbuf Ns 's>, "
"especially if the server cannot drain the ICMP responses it generates fast "
"enough.  The E<.Fx> kernel has a new kernel compile option called E<.Dv "
"ICMP_BANDLIM> which limits the effectiveness of these sorts of attacks.  The "
"last major class of springboard attacks is related to certain internal E<.Xr "
"inetd 8> services such as the UDP echo service.  An attacker simply spoofs a "
"UDP packet with the source address being server A's echo port, and the "
"destination address being server B's echo port, where server A and B are "
"both on your LAN.  The two servers then bounce this one packet back and "
"forth between each other.  The attacker can overload both servers and their "
"LANs simply by injecting a few packets in this manner.  Similar problems "
"exist with the internal chargen port.  A competent sysadmin will turn off "
"all of these E<.Xr inetd 8 Ns -internal> test services."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:897
#, no-wrap
msgid "ACCESS ISSUES WITH KERBEROS AND SSH"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:912
msgid ""
"There are a few issues with both Kerberos and SSH that need to be addressed "
"if you intend to use them.  Kerberos5 is an excellent authentication "
"protocol but the kerberized E<.Xr telnet 1> and E<.Xr rlogin 1> suck rocks.  "
"There are bugs that make them unsuitable for dealing with binary streams.  "
"Also, by default Kerberos does not encrypt a session unless you use the "
"E<.Fl x> option.  SSH encrypts everything by default."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:927
msgid ""
"SSH works quite well in every respect except when it is set up to forward "
"encryption keys.  What this means is that if you have a secure workstation "
"holding keys that give you access to the rest of the system, and you E<.Xr "
"ssh 1> to an unsecure machine, your keys become exposed.  The actual keys "
"themselves are not exposed, but E<.Xr ssh 1> installs a forwarding port for "
"the duration of your login and if an attacker has broken root on the "
"unsecure machine he can utilize that port to use your keys to gain access to "
"any other machine that your keys unlock."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:944
msgid ""
"We recommend that you use SSH in combination with Kerberos whenever possible "
"for staff logins.  SSH can be compiled with Kerberos support.  This reduces "
"your reliance on potentially exposable SSH keys while at the same time "
"protecting passwords via Kerberos.  SSH keys should only be used for "
"automated tasks from secure machines (something that Kerberos is unsuited "
"to).  We also recommend that you either turn off key-forwarding in the SSH "
"configuration, or that you make use of the E<.Va from Ns = Ns Ar IP/DOMAIN> "
"option that SSH allows in its E<.Pa authorized_keys> file to make the key "
"only usable to entities logging in from specific machines."
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:944
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:960
msgid ""
"E<.Xr chflags 1>, E<.Xr find 1>, E<.Xr md5 1>, E<.Xr netstat 1>, E<.Xr "
"openssl 1>, E<.Xr ssh 1>, E<.Xr xdm 1 Pq Pa ports/x11/xorg-clients>, E<.Xr "
"group 5>, E<.Xr ttys 5>, E<.Xr accton 8>, E<.Xr init 8>, E<.Xr sshd 8>, "
"E<.Xr sysctl 8>, E<.Xr syslogd 8>, E<.Xr vipw 8>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/security.7:960
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/security.7:968
msgid ""
"The E<.Nm> manual page was originally written by E<.An Matthew Dillon> and "
"first appeared in E<.Fx 3.1>, December 1998."
msgstr ""
