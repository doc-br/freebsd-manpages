# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:33-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/contrib/gperf/doc/gperf.7:1
#, no-wrap
msgid "2015-03-02"
msgstr ""

#. type: Dt
#: /usr/src/contrib/gperf/doc/gperf.7:2
#, no-wrap
msgid "GPERF 7"
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:4
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:6
msgid "E<.Nm gperf>"
msgstr ""

#. type: Nd
#: /usr/src/contrib/gperf/doc/gperf.7:6
#, no-wrap
msgid "Perfect Hash Function Generator"
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:7 /usr/src/contrib/gperf/doc/gperf.7:392
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:12
msgid ""
"This manual documents the GNU E<.Li gperf> perfect hash function generator "
"utility, focusing on its features and how to use them, and how to report "
"bugs."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:13
#, no-wrap
msgid "GNU GENERAL PUBLIC LICENSE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:17
#, no-wrap
msgid ""
"Copyright \\(co 1989, 1991 Free Software Foundation, Inc., 59 Temple Place, "
"Suite\n"
"330, Boston, MA 02111-1307, USA.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:20
#, no-wrap
msgid ""
"Everyone is permitted to copy and distribute verbatim copies of this "
"license\n"
"document, but changing it is not allowed.\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:22
#, no-wrap
msgid "Preamble"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:31
msgid ""
"The licenses for most software are designed to take away your freedom to "
"share and change it. By contrast, the GNU General Public License is intended "
"to guarantee your freedom to share and change free software---to make sure "
"the software is free for all its users. This General Public License applies "
"to most of the Free Software Foundation's software and to any other program "
"whose authors commit to using it. (Some other Free Software Foundation "
"software is covered by the GNU Library General Public License instead.) You "
"can apply it to your programs, too."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:38
msgid ""
"When we speak of free software, we are referring to freedom, not price. Our "
"General Public Licenses are designed to make sure that you have the freedom "
"to distribute copies of free software (and charge for this service if you "
"wish), that you receive source code or can get it if you want it, that you "
"can change the software or use pieces of it in new free programs; and that "
"you know you can do these things."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:43
msgid ""
"To protect your rights, we need to make restrictions that forbid anyone to "
"deny you these rights or to ask you to surrender the rights. These "
"restrictions translate to certain responsibilities for you if you distribute "
"copies of the software, or if you modify it."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:48
msgid ""
"For example, if you distribute copies of such a program, whether gratis or "
"for a fee, you must give the recipients all the rights that you have. You "
"must make sure that they, too, receive or can get the source code. And you "
"must show them these terms so they know their rights."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:52
msgid ""
"We protect your rights with two steps: (1) copyright the software, and (2)  "
"offer you this license which gives you legal permission to copy, distribute "
"and/or modify the software."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:58
msgid ""
"Also, for each author's protection and ours, we want to make certain that "
"everyone understands that there is no warranty for this free software. If "
"the software is modified by someone else and passed on, we want its "
"recipients to know that what they have is not the original, so that any "
"problems introduced by others will not reflect on the original authors' "
"reputations."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:64
msgid ""
"Finally, any free program is threatened constantly by software patents. We "
"wish to avoid the danger that redistributors of a free program will "
"individually obtain patent licenses, in effect making the program "
"proprietary. To prevent this, we have made it clear that any patent must be "
"licensed for everyone's free use or not licensed at all."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:67
msgid ""
"The precise terms and conditions for copying, distribution and modification "
"follow."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:78
msgid ""
"This License applies to any program or other work which contains a notice "
"placed by the copyright holder saying it may be distributed under the terms "
"of this General Public License. The \\(lqProgram\\(rq, below, refers to any "
"such program or work, and a \\(lqwork based on the Program\\(rq means either "
"the Program or any derivative work under copyright law: that is to say, a "
"work containing the Program or a portion of it, either verbatim or with "
"modifications and/or translated into another language. (Hereinafter, "
"translation is included without limitation in the term "
"\\(lqmodification\\(rq.) Each licensee is addressed as \\(lqyou\\(rq."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:85
msgid ""
"Activities other than copying, distribution and modification are not covered "
"by this License; they are outside its scope. The act of running the Program "
"is not restricted, and the output from the Program is covered only if its "
"contents constitute a work based on the Program (independent of having been "
"made by running the Program). Whether that is true depends on what the "
"Program does."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:93
msgid ""
"You may copy and distribute verbatim copies of the Program's source code as "
"you receive it, in any medium, provided that you conspicuously and "
"appropriately publish on each copy an appropriate copyright notice and "
"disclaimer of warranty; keep intact all the notices that refer to this "
"License and to the absence of any warranty; and give any other recipients of "
"the Program a copy of this License along with the Program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:96
msgid ""
"You may charge a fee for the physical act of transferring a copy, and you "
"may at your option offer warranty protection in exchange for a fee."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:102
msgid ""
"You may modify your copy or copies of the Program or any portion of it, thus "
"forming a work based on the Program, and copy and distribute such "
"modifications or work under the terms of Section 1 above, provided that you "
"also meet all of these conditions:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:107
msgid ""
"You must cause the modified files to carry prominent notices stating that "
"you changed the files and the date of any change."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:112
msgid ""
"You must cause any work that you distribute or publish, that in whole or in "
"part contains or is derived from the Program or any part thereof, to be "
"licensed as a whole at no charge to all third parties under the terms of "
"this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:122
msgid ""
"If the modified program normally reads commands interactively when run, you "
"must cause it, when started running for such interactive use in the most "
"ordinary way, to print or display an announcement including an appropriate "
"copyright notice and a notice that there is no warranty (or else, saying "
"that you provide a warranty) and that users may redistribute the program "
"under these conditions, and telling the user how to view a copy of this "
"License. (Exception: if the Program itself is interactive but does not "
"normally print such an announcement, your work based on the Program is not "
"required to print an announcement.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:133
msgid ""
"These requirements apply to the modified work as a whole. If identifiable "
"sections of that work are not derived from the Program, and can be "
"reasonably considered independent and separate works in themselves, then "
"this License, and its terms, do not apply to those sections when you "
"distribute them as separate works. But when you distribute the same sections "
"as part of a whole which is a work based on the Program, the distribution of "
"the whole must be on the terms of this License, whose permissions for other "
"licensees extend to the entire whole, and thus to each and every part "
"regardless of who wrote it."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:138
msgid ""
"Thus, it is not the intent of this section to claim rights or contest your "
"rights to work written entirely by you; rather, the intent is to exercise "
"the right to control the distribution of derivative or collective works "
"based on the Program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:143
msgid ""
"In addition, mere aggregation of another work not based on the Program with "
"the Program (or with a work based on the Program) on a volume of a storage "
"or distribution medium does not bring the other work under the scope of this "
"License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:148
msgid ""
"You may copy and distribute the Program (or a work based on it, under "
"Section 2) in object code or executable form under the terms of Sections 1 "
"and 2 above provided that you also do one of the following:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:154
msgid ""
"Accompany it with the complete corresponding machine-readable source code, "
"which must be distributed under the terms of Sections 1 and 2 above on a "
"medium customarily used for software interchange; or,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:161
msgid ""
"Accompany it with a written offer, valid for at least three years, to give "
"any third party, for a charge no more than your cost of physically "
"performing source distribution, a complete machine-readable copy of the "
"corresponding source code, to be distributed under the terms of Sections 1 "
"and 2 above on a medium customarily used for software interchange; or,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:167
msgid ""
"Accompany it with the information you received as to the offer to distribute "
"corresponding source code. (This alternative is allowed only for "
"noncommercial distribution and only if you received the program in object "
"code or executable form with such an offer, in accord with Subsection b "
"above.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:178
msgid ""
"The source code for a work means the preferred form of the work for making "
"modifications to it. For an executable work, complete source code means all "
"the source code for all modules it contains, plus any associated interface "
"definition files, plus the scripts used to control compilation and "
"installation of the executable. However, as a special exception, the source "
"code distributed need not include anything that is normally distributed (in "
"either source or binary form) with the major components (compiler, kernel, "
"and so on) of the operating system on which the executable runs, unless that "
"component itself accompanies the executable."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:184
msgid ""
"If distribution of executable or object code is made by offering access to "
"copy from a designated place, then offering equivalent access to copy the "
"source code from the same place counts as distribution of the source code, "
"even though third parties are not compelled to copy the source along with "
"the object code."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:192
msgid ""
"You may not copy, modify, sublicense, or distribute the Program except as "
"expressly provided under this License. Any attempt otherwise to copy, "
"modify, sublicense or distribute the Program is void, and will automatically "
"terminate your rights under this License. However, parties who have received "
"copies, or rights, from you under this License will not have their licenses "
"terminated so long as such parties remain in full compliance."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:201
msgid ""
"You are not required to accept this License, since you have not signed it.  "
"However, nothing else grants you permission to modify or distribute the "
"Program or its derivative works. These actions are prohibited by law if you "
"do not accept this License. Therefore, by modifying or distributing the "
"Program (or any work based on the Program), you indicate your acceptance of "
"this License to do so, and all its terms and conditions for copying, "
"distributing or modifying the Program or works based on it."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:209
msgid ""
"Each time you redistribute the Program (or any work based on the Program), "
"the recipient automatically receives a license from the original licensor to "
"copy, distribute or modify the Program subject to these terms and "
"conditions.  You may not impose any further restrictions on the recipients' "
"exercise of the rights granted herein. You are not responsible for enforcing "
"compliance by third parties to this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:222
msgid ""
"If, as a consequence of a court judgment or allegation of patent "
"infringement or for any other reason (not limited to patent issues), "
"conditions are imposed on you (whether by court order, agreement or "
"otherwise) that contradict the conditions of this License, they do not "
"excuse you from the conditions of this License. If you cannot distribute so "
"as to satisfy simultaneously your obligations under this License and any "
"other pertinent obligations, then as a consequence you may not distribute "
"the Program at all. For example, if a patent license would not permit "
"royalty-free redistribution of the Program by all those who receive copies "
"directly or indirectly through you, then the only way you could satisfy both "
"it and this License would be to refrain entirely from distribution of the "
"Program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:226
msgid ""
"If any portion of this section is held invalid or unenforceable under any "
"particular circumstance, the balance of the section is intended to apply and "
"the section as a whole is intended to apply in other circumstances."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:236
msgid ""
"It is not the purpose of this section to induce you to infringe any patents "
"or other property right claims or to contest validity of any such claims; "
"this section has the sole purpose of protecting the integrity of the free "
"software distribution system, which is implemented by public license "
"practices.  Many people have made generous contributions to the wide range "
"of software distributed through that system in reliance on consistent "
"application of that system; it is up to the author/donor to decide if he or "
"she is willing to distribute software through any other system and a "
"licensee cannot impose that choice."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:239
msgid ""
"This section is intended to make thoroughly clear what is believed to be a "
"consequence of the rest of this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:247
msgid ""
"If the distribution and/or use of the Program is restricted in certain "
"countries either by patents or by copyrighted interfaces, the original "
"copyright holder who places the Program under this License may add an "
"explicit geographical distribution limitation excluding those countries, so "
"that distribution is permitted only in or among countries not thus "
"excluded. In such case, this License incorporates the limitation as if "
"written in the body of this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:253
msgid ""
"The Free Software Foundation may publish revised and/or new versions of the "
"General Public License from time to time. Such new versions will be similar "
"in spirit to the present version, but may differ in detail to address new "
"problems or concerns."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:260
msgid ""
"Each version is given a distinguishing version number. If the Program "
"specifies a version number of this License which applies to it and \\(lqany "
"later version\\(rq, you have the option of following the terms and "
"conditions either of that version or of any later version published by the "
"Free Software Foundation. If the Program does not specify a version number "
"of this License, you may choose any version ever published by the Free "
"Software Foundation."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:268
msgid ""
"If you wish to incorporate parts of the Program into other free programs "
"whose distribution conditions are different, write to the author to ask for "
"permission.  For software which is copyrighted by the Free Software "
"Foundation, write to the Free Software Foundation; we sometimes make "
"exceptions for this. Our decision will be guided by the two goals of "
"preserving the free status of all derivatives of our free software and of "
"promoting the sharing and reuse of software generally."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:278
msgid ""
"BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE "
"PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE "
"STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE "
"PROGRAM \\(lqAS IS\\(rq WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR "
"IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF "
"MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO "
"THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM "
"PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR "
"CORRECTION."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:288
msgid ""
"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL "
"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE "
"THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY "
"GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE "
"OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA "
"OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD "
"PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), "
"EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF "
"SUCH DAMAGES."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:290
#, no-wrap
msgid "How to Apply These Terms to Your New Programs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:294
msgid ""
"If you develop a new program, and you want it to be of the greatest possible "
"use to the public, the best way to achieve this is to make it free software "
"which everyone can redistribute and change under these terms."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:299
msgid ""
"To do so, attach the following notices to the program. It is safest to "
"attach them to the start of each source file to most effectively convey the "
"exclusion of warranty; and each file should have at least the "
"\\(lqcopyright\\(rq line and a pointer to where the full notice is found."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:303
#, no-wrap
msgid ""
"one line to give the program's name and an idea of what it does.\n"
"Copyright (C) year  name of author\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:308
#, no-wrap
msgid ""
"This program is free software; you can redistribute it and/or\n"
"modify it under the terms of the GNU General Public License\n"
"as published by the Free Software Foundation; either version 2\n"
"of the License, or (at your option) any later version.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:313
#, no-wrap
msgid ""
"This program is distributed in the hope that it will be useful,\n"
"but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"GNU General Public License for more details.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:317
#, no-wrap
msgid ""
"You should have received a copy of the GNU General Public License\n"
"along with this program; if not, write to the Free Software\n"
"Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:320
msgid "Also add information on how to contact you by electronic and paper mail."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:323
msgid ""
"If the program is interactive, make it output a short notice like this when "
"it starts in an interactive mode:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:330
#, no-wrap
msgid ""
"Gnomovision version 69, Copyright (C) year  name of author\n"
"Gnomovision comes with ABSOLUTELY NO WARRANTY; for details\n"
"type `show w'.  This is free software, and you are welcome\n"
"to redistribute it under certain conditions; type `show c' \n"
"for details.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:342
msgid ""
"The hypothetical commands E<.Li show w> and E<.Li show c> should show the "
"appropriate parts of the General Public License. Of course, the commands you "
"use may be called something other than E<.Li show w> and E<.Li show c> ; "
"they could even be mouse-clicks or menu items---whatever suits your program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:346
msgid ""
"You should also get your employer (if you work as a programmer) or your "
"school, if any, to sign a \\(lqcopyright disclaimer\\(rq for the program, if "
"necessary. Here is a sample; alter the names:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:353
#, no-wrap
msgid ""
"Yoyodyne, Inc., hereby disclaims all copyright\n"
"interest in the program `Gnomovision'\n"
"(which makes passes at compilers) written \n"
"by James Hacker.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:356
#, no-wrap
msgid ""
"signature of Ty Coon, 1 April 1989\n"
"Ty Coon, President of Vice\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:364
msgid ""
"This General Public License does not permit incorporating your program into "
"proprietary programs. If your program is a subroutine library, you may "
"consider it more useful to permit linking proprietary applications with the "
"library.  If this is what you want to do, use the GNU Library General Public "
"License instead of this License."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:365
#, no-wrap
msgid "Contributors to GNU Li gperf Utility"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:377
msgid ""
"The GNU E<.Li gperf> perfect hash function generator utility was written in "
"GNU C++ by Douglas C. Schmidt. The general idea for the perfect hash "
"function generator was inspired by Keith Bostic's algorithm written in C, "
"and distributed to net.sources around 1984. The current program is a heavily "
"modified, enhanced, and extended implementation of Keith's basic idea, "
"created at the University of California, Irvine. Bugs, patches, and "
"suggestions should be reported to E<.Li E<lt>bug-gnu-gperf@gnu.orgE<gt>>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:381
msgid ""
"Special thanks is extended to Michael Tiemann and Doug Lea, for providing a "
"useful compiler, and for giving me a forum to exhibit my creation."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:385
msgid ""
"In addition, Adam de Boor and Nels Olson provided many tips and insights "
"that greatly helped improve the quality and functionality of E<.Li gperf>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:390
msgid ""
"Bruno Haible enhanced and optimized the search algorithm. He also rewrote "
"the input routines and the output routines for better reliability, and added "
"a testsuite."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:427
msgid ""
"E<.Li gperf> is a perfect hash function generator written in C++. It "
"transforms an E<.Va n> element user-specified keyword set E<.Va W> into a "
"perfect hash function E<.Va F>.  E<.Va F> uniquely maps keywords in E<.Va W> "
"onto the range 0..  E<.Va k>, where E<.Va k> E<gt>= E<.Va n-1>.  If E<.Va k> "
"= E<.Va n-1> then E<.Va F> is a E<.Em minimal> perfect hash function.  E<.Li "
"gperf> generates a 0..  E<.Va k> element static lookup table and a pair of C "
"functions. These functions determine whether a given character string E<.Va "
"s> occurs in E<.Va W>, using at most one probe into the lookup table."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:441
msgid ""
"E<.Li gperf> currently generates the reserved keyword recognizer for lexical "
"analyzers in several production and research compilers and language "
"processing tools, including GNU C, GNU C++, GNU Java, GNU Pascal, GNU Modula "
"3, and GNU indent.  Complete C++ source code for E<.Li gperf> is available "
"from E<.Li http://ftp.gnu.org/pub/gnu/gperf/>.  A paper describing E<.Li "
"gperf> \\&'s design and implementation in greater detail is available in the "
"Second USENIX C++ Conference proceedings or from E<.Li "
"http://www.cs.wustl.edu/~schmidt/resume.html>."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:442
#, no-wrap
msgid "Static search structures and GNU Li gperf"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:464
msgid ""
"A E<.Em static search structure> is an Abstract Data Type with certain "
"fundamental operations, e.g., E<.Em initialize>, E<.Em insert>, and E<.Em "
"retrieve>.  Conceptually, all insertions occur before any retrievals. In "
"practice, E<.Li gperf> generates a E<.Em static> array containing search set "
"keywords and any associated attributes specified by the user. Thus, there is "
"essentially no execution-time cost for the insertions.  It is a useful data "
"structure for representing E<.Em static search sets>.  Static search sets "
"occur frequently in software system applications. Typical static search sets "
"include compiler reserved words, assembler instruction opcodes, and built-in "
"shell interpreter commands. Search set members, called E<.Em keywords>, are "
"inserted into the structure only once, usually during program "
"initialization, and are not generally modified at run-time."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:476
msgid ""
"Numerous static search structure implementations exist, e.g., arrays, linked "
"lists, binary search trees, digital search tries, and hash tables. Different "
"approaches offer trade-offs between space utilization and search time "
"efficiency.  For example, an E<.Va n> element sorted array is space "
"efficient, though the average-case time complexity for retrieval operations "
"using binary search is proportional to log E<.Va n>.  Conversely, hash table "
"implementations often locate a table entry in constant time, but typically "
"impose additional memory overhead and exhibit poor worst case performance."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:480
msgid ""
"E<.Em Minimal perfect hash functions> provide an optimal solution for a "
"particular class of static search sets.  A minimal perfect hash function is "
"defined by two properties:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:486
msgid ""
"It allows keyword recognition in a static search set using at most E<.Em "
"one> probe into the hash table. This represents the \\(lqperfect\\(rq "
"property."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:491
msgid ""
"The actual memory allocated to store the keywords is precisely large enough "
"for the keyword set, and E<.Em no larger>.  This is the \\(lqminimal\\(rq "
"property."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:508
msgid ""
"For most applications it is far easier to generate E<.Em perfect> hash "
"functions than E<.Em minimal perfect> hash functions. Moreover, non-minimal "
"perfect hash functions frequently execute faster than minimal ones in "
"practice. This phenomena occurs since searching a sparse keyword table "
"increases the probability of locating a \\(lqnull\\(rq entry, thereby "
"reducing string comparisons.  E<.Li gperf> \\&'s default behavior generates "
"E<.Em near-minimal> perfect hash functions for keyword sets. However, E<.Li "
"gperf> provides many options that permit user control over the degree of "
"minimality and perfection."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:526
msgid ""
"Static search sets often exhibit relative stability over time. For example, "
"Ada's 63 reserved words have remained constant for nearly a decade. It is "
"therefore frequently worthwhile to expend concerted effort building an "
"optimal search structure E<.Em once>, if it subsequently receives heavy use "
"multiple times.  E<.Li gperf> removes the drudgery associated with "
"constructing time- and space-efficient search structures by hand. It has "
"proven a useful and practical tool for serious programming projects. Output "
"from E<.Li gperf> is currently used in several production and research "
"compilers, including GNU C, GNU C++, GNU Java, GNU Pascal, and GNU Modula "
"3. The latter two compilers are not yet part of the official GNU "
"distribution. Each compiler utilizes E<.Li gperf> to automatically generate "
"static search structures that efficiently identify their respective reserved "
"keywords."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:527
#, no-wrap
msgid "High-Level Description of GNU Li gperf"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:541
msgid ""
"The perfect hash function generator E<.Li gperf> reads a set of "
"\\(lqkeywords\\(rq from an input file (or from the standard input by "
"default). It attempts to derive a perfect hashing function that recognizes a "
"member of the E<.Em static keyword set> with at most a single probe into the "
"lookup table. If E<.Li gperf> succeeds in generating such a function it "
"produces a pair of C source code routines that perform hashing and table "
"lookup recognition. All generated C code is directed to the standard "
"output. Command-line options described below allow you to modify the input "
"and output format to E<.Li gperf>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:557
msgid ""
"By default, E<.Li gperf> attempts to produce time-efficient code, with less "
"emphasis on efficient space utilization. However, several options exist that "
"permit trading-off execution time for storage space and vice versa. In "
"particular, expanding the generated table size produces a sparse search "
"structure, generally yielding faster searches.  Conversely, you can direct "
"E<.Li gperf> to utilize a C E<.Li switch> statement scheme that minimizes "
"data space storage size. Furthermore, using a C E<.Li switch> may actually "
"speed up the keyword retrieval time somewhat. Actual results depend on your "
"C compiler, of course."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:567
msgid ""
"In general, E<.Li gperf> assigns values to the bytes it is using for hashing "
"until some set of values gives each keyword a unique value. A helpful "
"heuristic is that the larger the hash value range, the easier it is for "
"E<.Li gperf> to find and generate a perfect hash function. Experimentation "
"is the key to getting the most from E<.Li gperf>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:568
#, no-wrap
msgid "Input Format to Li gperf"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:581
msgid ""
"You can control the input file format by varying certain command-line "
"arguments, in particular the E<.Li -t> option. The input's appearance is "
"similar to GNU utilities E<.Li flex> and E<.Li bison> (or UNIX utilities "
"E<.Li lex> and E<.Li yacc>).  Here's an outline of the general format:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:589
#, no-wrap
msgid ""
"declarations\n"
"%%\n"
"keywords\n"
"%%\n"
"functions\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:598
msgid ""
"E<.Em Unlike> E<.Li flex> or E<.Li bison>, the declarations section and the "
"functions section are optional. The following sections describe the input "
"format for each section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:603
msgid ""
"It is possible to omit the declaration section entirely, if the E<.Li -t> "
"option is not given. In this case the input file begins directly with the "
"first keyword line, e.g.:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:611
#, no-wrap
msgid ""
"january\n"
"february\n"
"march\n"
"april\n"
"\\&...\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:615
msgid "E<.Em Declarations>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:622
msgid ""
"The keyword input file optionally contains a section for including arbitrary "
"C declarations and definitions, E<.Li gperf> declarations that act like "
"command-line options, as well as for providing a user-supplied E<.Li "
"struct>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:624
msgid "E<.No User-supplied Li struct>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:655
msgid ""
"If the E<.Li -t> option (or, equivalently, the E<.Li %struct-type> "
"declaration)  E<.Em is> enabled, you E<.Em must> provide a C E<.Li struct> "
"as the last component in the declaration section from the input file. The "
"first field in this struct must be of type E<.Li char *> or E<.Li const char "
"*> if the E<.Li -P> option is not given, or of type E<.Li int> if the option "
"E<.Li -P> (or, equivalently, the E<.Li %pic> declaration) is enabled. This "
"first field must be called E<.Li name>, although it is possible to modify "
"its name with the E<.Li -K> option (or, equivalently, the E<.Li %define "
"slot-name> declaration) described below."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:658
msgid ""
"Here is a simple example, using months of the year and their attributes as "
"input:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:675
#, no-wrap
msgid ""
"struct month { char *name; int number; int days; int leap_days; };\n"
"%%\n"
"january,   1, 31, 31\n"
"february,  2, 28, 29\n"
"march,     3, 31, 31\n"
"april,     4, 30, 30\n"
"may,       5, 31, 31\n"
"june,      6, 30, 30\n"
"july,      7, 31, 31\n"
"august,    8, 31, 31\n"
"september, 9, 30, 30\n"
"october,  10, 31, 31\n"
"november, 11, 30, 30\n"
"december, 12, 31, 31\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:685
msgid ""
"Separating the E<.Li struct> declaration from the list of keywords and other "
"fields are a pair of consecutive percent signs, E<.Li %%>, appearing left "
"justified in the first column, as in the UNIX utility E<.Li lex>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:690
msgid ""
"If the E<.Li struct> has already been declared in an include file, it can be "
"mentioned in an abbreviated form, like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:697
#, no-wrap
msgid ""
"struct month;\n"
"%%\n"
"january,   1, 31, 31\n"
"\\&...\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:701
msgid "E<.No Gperf Declarations>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:708
msgid ""
"The declaration section can contain E<.Li gperf> declarations. They "
"influence the way E<.Li gperf> works, like command line options do. In fact, "
"every such declaration is equivalent to a command line option. There are "
"three forms of declarations:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:713
msgid "Declarations without argument, like E<.Li %compare-lengths>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:717
msgid "Declarations with an argument, like E<.Li %switch= Va count>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:721
msgid ""
"Declarations of names of entities in the output file, like E<.Li %define "
"lookup-function-name Va name>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:725
msgid ""
"When a declaration is given both in the input file and as a command line "
"option, the command-line option's value prevails."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:729
msgid "The following E<.Li gperf> declarations are available."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:731
#, no-wrap
msgid "%delimiters= Va delimiter-list"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:735
msgid ""
"Allows you to provide a string containing delimiters used to separate "
"keywords from their attributes. The default is \",\". This option is "
"essential if you want to use keywords that have embedded commas or newlines."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:736
#, no-wrap
msgid "%struct-type"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:740
msgid ""
"Allows you to include a E<.Li struct> type declaration for generated code; "
"see above for an example."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:741
#, no-wrap
msgid "%ignore-case"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:745
msgid ""
"Consider upper and lower case ASCII characters as equivalent. The string "
"comparison will use a case insignificant character comparison. Note that "
"locale dependent case mappings are ignored."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:746
#, no-wrap
msgid "%language= Va language-name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:751 /usr/src/contrib/gperf/doc/gperf.7:1363
msgid ""
"Instructs E<.Li gperf> to generate code in the language specified by the "
"option's argument. Languages handled are currently:"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:753 /usr/src/contrib/gperf/doc/gperf.7:1365
#, no-wrap
msgid "KR-C"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:758 /usr/src/contrib/gperf/doc/gperf.7:1370
msgid ""
"Old-style K&R C. This language is understood by old-style C compilers and "
"ANSI C compilers, but ANSI C compilers may flag warnings (or even errors)  "
"because of lacking E<.Li const>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:759 /usr/src/contrib/gperf/doc/gperf.7:1371
#, no-wrap
msgid "C"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:764 /usr/src/contrib/gperf/doc/gperf.7:1376
msgid ""
"Common C. This language is understood by ANSI C compilers, and also by "
"old-style C compilers, provided that you E<.Li #define const> to empty for "
"compilers which don't know about this keyword."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:765 /usr/src/contrib/gperf/doc/gperf.7:1377
#, no-wrap
msgid "ANSI-C"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:767 /usr/src/contrib/gperf/doc/gperf.7:1379
msgid "ANSI C. This language is understood by ANSI C compilers and C++ compilers."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:768 /usr/src/contrib/gperf/doc/gperf.7:1380
#, no-wrap
msgid "C++"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:770 /usr/src/contrib/gperf/doc/gperf.7:1382
msgid "C++. This language is understood by C++ compilers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:773 /usr/src/contrib/gperf/doc/gperf.7:1385
msgid "The default is C."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:774
#, no-wrap
msgid "%define slot-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:785
msgid ""
"This declaration is only useful when option E<.Li -t> (or, equivalently, the "
"E<.Li %struct-type> declaration) has been given. By default, the program "
"assumes the structure component identifier for the keyword is E<.Li name>.  "
"This option allows an arbitrary choice of identifier for this component, "
"although it still must occur as the first field in your supplied E<.Li "
"struct>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:786
#, no-wrap
msgid "%define initializer-suffix Va initializers"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:798
msgid ""
"This declaration is only useful when option E<.Li -t> (or, equivalently, the "
"E<.Li %struct-type> declaration) has been given. It permits to specify "
"initializers for the structure members following E<.Va slot-name> in empty "
"hash table entries. The list of initializers should start with a comma. By "
"default, the emitted code will zero-initialize structure members following "
"E<.Va slot-name>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:799
#, no-wrap
msgid "%define hash-function-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:804 /usr/src/contrib/gperf/doc/gperf.7:1436
msgid ""
"Allows you to specify the name for the generated hash function. Default name "
"is E<.Li hash>.  This option permits the use of two hash tables in the same "
"file."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:805
#, no-wrap
msgid "%define lookup-function-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:811 /usr/src/contrib/gperf/doc/gperf.7:1444
msgid ""
"Allows you to specify the name for the generated lookup function. Default "
"name is E<.Li in_word_set>.  This option permits multiple generated hash "
"functions to be used in the same application."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:812
#, no-wrap
msgid "%define class-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:820 /usr/src/contrib/gperf/doc/gperf.7:1454
msgid ""
"This option is only useful when option E<.Li -L C++> (or, equivalently, the "
"E<.Li %language=C++> declaration) has been given. It allows you to specify "
"the name of generated C++ class. Default name is E<.Li Perfect_Hash>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:821
#, no-wrap
msgid "%7bit"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:834
msgid ""
"This option specifies that all strings that will be passed as arguments to "
"the generated hash function and the generated lookup function will solely "
"consist of 7-bit ASCII characters (bytes in the range 0..127). (Note that "
"the ANSI C functions E<.Li isalnum> and E<.Li isgraph> do E<.Em not> "
"guarantee that a byte is in this range. Only an explicit test like E<.Li c "
"E<gt>= 'A' && c E<lt>= 'Z'> guarantees this.)"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:835
#, no-wrap
msgid "%compare-lengths"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:851
msgid ""
"Compare keyword lengths before trying a string comparison. This option is "
"mandatory for binary comparisons (see Section E<.Dq Binary Strings>).  It "
"also might cut down on the number of string comparisons made during the "
"lookup, since keywords with different lengths are never compared via E<.Li "
"strcmp>.  However, using E<.Li %compare-lengths> might greatly increase the "
"size of the generated C code if the lookup table range is large (which "
"implies that the switch option E<.Li -S> or E<.Li %switch> is not enabled), "
"since the length table contains as many elements as there are entries in the "
"lookup table."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:852
#, no-wrap
msgid "%compare-strncmp"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:857 /usr/src/contrib/gperf/doc/gperf.7:1496
msgid ""
"Generates C code that uses the E<.Li strncmp> function to perform string "
"comparisons. The default action is to use E<.Li strcmp>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:858
#, no-wrap
msgid "%readonly-tables"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:862 /usr/src/contrib/gperf/doc/gperf.7:1502
msgid ""
"Makes the contents of all generated lookup tables constant, i.e., "
"\\(lqreadonly\\(rq.  Many compilers can generate more efficient code for "
"this by putting the tables in readonly memory."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:863
#, no-wrap
msgid "%enum"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:868 /usr/src/contrib/gperf/doc/gperf.7:1509
msgid ""
"Define constant values using an enum local to the lookup function rather "
"than with #defines. This also means that different lookup functions can "
"reside in the same file. Thanks to James Clark E<.Li "
"E<lt>jjc@ai.mit.eduE<gt>>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:869
#, no-wrap
msgid "%includes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:874 /usr/src/contrib/gperf/doc/gperf.7:1516
msgid ""
"Include the necessary system include file, E<.Li E<lt>string.hE<gt>>, at the "
"beginning of the code. By default, this is not done; the user must include "
"this header file himself to allow compilation of the code."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:875
#, no-wrap
msgid "%global-table"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:878 /usr/src/contrib/gperf/doc/gperf.7:1521
msgid ""
"Generate the static table of keywords as a static global variable, rather "
"than hiding it inside of the lookup function (which is the default "
"behavior)."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:879
#, no-wrap
msgid "%pic"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:898
msgid ""
"Optimize the generated table for inclusion in shared libraries. This reduces "
"the startup time of programs using a shared library containing the generated "
"code. If the E<.Li %struct-type> declaration (or, equivalently, the option "
"E<.Li -t>)  is also given, the first field of the user-defined struct must "
"be of type E<.Li int>, not E<.Li char *>, because it will contain offsets "
"into the string pool instead of actual strings.  To convert such an offset "
"to a string, you can use the expression E<.Li stringpool + Va o>, where "
"E<.Va o> is the offset. The string pool name can be changed through the "
"E<.Li %define string-pool-name> declaration."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:899
#, no-wrap
msgid "%define string-pool-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:914
msgid ""
"Allows you to specify the name of the generated string pool created by the "
"declaration E<.Li %pic> (or, equivalently, the option E<.Li -P>).  The "
"default name is E<.Li stringpool>.  This declaration permits the use of two "
"hash tables in the same file, with E<.Li %pic> and even when the E<.Li "
"%global-table> declaration (or, equivalently, the option E<.Li -G>)  is "
"given."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:915
#, no-wrap
msgid "%null-strings"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:921
msgid ""
"Use NULL strings instead of empty strings for empty keyword table entries.  "
"This reduces the startup time of programs using a shared library containing "
"the generated code (but not as much as the declaration E<.Li %pic>), at the "
"expense of one more test-and-branch instruction at run time."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:922
#, no-wrap
msgid "%define word-array-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:932 /usr/src/contrib/gperf/doc/gperf.7:1575
msgid ""
"Allows you to specify the name for the generated array containing the hash "
"table. Default name is E<.Li wordlist>.  This option permits the use of two "
"hash tables in the same file, even when the option E<.Li -G> (or, "
"equivalently, the E<.Li %global-table> declaration) is given."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:933
#, no-wrap
msgid "%define length-table-name Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:943 /usr/src/contrib/gperf/doc/gperf.7:1586
msgid ""
"Allows you to specify the name for the generated array containing the length "
"table. Default name is E<.Li lengthtable>.  This option permits the use of "
"two length tables in the same file, even when the option E<.Li -G> (or, "
"equivalently, the E<.Li %global-table> declaration) is given."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:944
#, no-wrap
msgid "%switch= Va count"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:961 /usr/src/contrib/gperf/doc/gperf.7:1605
msgid ""
"Causes the generated C code to use a E<.Li switch> statement scheme, rather "
"than an array lookup table. This can lead to a reduction in both time and "
"space requirements for some input files. The argument to this option "
"determines how many E<.Li switch> statements are generated. A value of 1 "
"generates 1 E<.Li switch> containing all the elements, a value of 2 "
"generates 2 tables with 1/2 the elements in each E<.Li switch>, etc. This is "
"useful since many C compilers cannot correctly generate code for large E<.Li "
"switch> statements. This option was inspired in part by Keith Bostic's "
"original C program."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:962
#, no-wrap
msgid "%omit-struct-type"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:965 /usr/src/contrib/gperf/doc/gperf.7:1610
msgid ""
"Prevents the transfer of the type declaration to the output file. Use this "
"option if the type is already defined elsewhere."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:968
msgid "E<.No C Code Inclusion>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:980
msgid ""
"Using a syntax similar to GNU utilities E<.Li flex> and E<.Li bison>, it is "
"possible to directly include C source text and comments verbatim into the "
"generated output file. This is accomplished by enclosing the region inside "
"left-justified surrounding E<.Li %{>, E<.Li %}> pairs. Here is an input "
"fragment based on the previous example that illustrates this feature:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:994
#, no-wrap
msgid ""
"%{\n"
"#include E<lt>assert.hE<gt>\n"
"/* This section of code is inserted directly into the output. */\n"
"int return_month_days (struct month *months, int is_leap_year);\n"
"%}\n"
"struct month { char *name; int number; int days; int leap_days; };\n"
"%%\n"
"january,   1, 31, 31\n"
"february,  2, 28, 29\n"
"march,     3, 31, 31\n"
"\\&...\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:998
msgid "E<.Em Format for Keyword Entries>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1008
msgid ""
"The second input file format section contains lines of keywords and any "
"associated attributes you might supply. A line beginning with E<.Li #> in "
"the first column is considered a comment. Everything following the E<.Li #> "
"is ignored, up to and including the following newline. A line beginning with "
"E<.Li %> in the first column is an option declaration and must not occur "
"within the keywords section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1022
msgid ""
"The first field of each non-comment line is always the keyword itself. It "
"can be given in two ways: as a simple name, i.e., without surrounding string "
"quotation marks, or as a string enclosed in double-quotes, in C syntax, "
"possibly with backslash escapes like E<.Li \\e\"> or E<.Li \\e234> or E<.Li "
"\\exa8>.  In either case, it must start right at the beginning of the line, "
"without leading whitespace. In this context, a \\(lqfield\\(rq is considered "
"to extend up to, but not include, the first blank, comma, or newline. Here "
"is a simple example taken from a partial list of C reserved words:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1036
#, no-wrap
msgid ""
"# These are a few C reserved words, see the c.gperf file \n"
"# for a complete list of ANSI C reserved words.\n"
"unsigned\n"
"sizeof\n"
"switch\n"
"signed\n"
"if\n"
"default\n"
"for\n"
"while\n"
"return\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1046
msgid ""
"Note that unlike E<.Li flex> or E<.Li bison> the first E<.Li %%> marker may "
"be elided if the declaration section is empty."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1060
msgid ""
"Additional fields may optionally follow the leading keyword. Fields should "
"be separated by commas, and terminate at the end of line. What these fields "
"mean is entirely up to you; they are used to initialize the elements of the "
"user-defined E<.Li struct> provided by you in the declaration section. If "
"the E<.Li -t> option (or, equivalently, the E<.Li %struct-type> declaration) "
"is E<.Em not> enabled these fields are simply ignored. All previous examples "
"except the last one contain keyword attributes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1062
msgid "E<.Em Including Additional C Functions>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1073
msgid ""
"The optional third section also corresponds closely with conventions found "
"in E<.Li flex> and E<.Li bison>.  All text in this section, starting at the "
"final E<.Li %%> and extending to the end of the input file, is included "
"verbatim into the generated output file. Naturally, it is your "
"responsibility to ensure that the code contained in this section is valid C."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1075
msgid "E<.Em Where to place directives for GNU Li indent.>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1093
msgid ""
"If you want to invoke GNU E<.Li indent> on a E<.Li gperf> input file, you "
"will see that GNU E<.Li indent> doesn't understand the E<.Li %%>, E<.Li %{> "
"and E<.Li %}> directives that control E<.Li gperf> \\&'s interpretation of "
"the input file. Therefore you have to insert some directives for GNU E<.Li "
"indent>.  More precisely, assuming the most general input file structure"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1105
#, no-wrap
msgid ""
"declarations part 1\n"
"%{\n"
"verbatim code\n"
"%}\n"
"declarations part 2\n"
"%%\n"
"keywords\n"
"%%\n"
"functions\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1113
msgid ""
"you would insert E<.Li *INDENT-OFF*> and E<.Li *INDENT-ON*> comments as "
"follows:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1129
#, no-wrap
msgid ""
"/* *INDENT-OFF* */\n"
"declarations part 1\n"
"%{\n"
"/* *INDENT-ON* */\n"
"verbatim code\n"
"/* *INDENT-OFF* */\n"
"%}\n"
"declarations part 2\n"
"%%\n"
"keywords\n"
"%%\n"
"/* *INDENT-ON* */\n"
"functions\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1132
#, no-wrap
msgid "Output Format for Generated C Code with Li gperf"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1146
msgid ""
"Several options control how the generated C code appears on the standard "
"output.  Two C functions are generated. They are called E<.Li hash> and "
"E<.Li in_word_set>, although you may modify their names with a command-line "
"option. Both functions require two arguments, a string, E<.Li char *> E<.Va "
"str>, and a length parameter, E<.Li int> E<.Va len>.  Their default function "
"prototypes are as follows:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1152
msgid ""
"Function: E<.Ft unsigned int> E<.Fo hash> E<.Fa (const char * Va str, "
"unsigned int Va len)> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1176
msgid ""
"By default, the generated E<.Li hash> function returns an integer value "
"created by adding E<.Va len> to several user-specified E<.Va str> byte "
"positions indexed into an E<.Em associated values> table stored in a local "
"static array. The associated values table is constructed internally by E<.Li "
"gperf> and later output as a static local C array called E<.Li hash_table>.  "
"The relevant selected positions (i.e. indices into E<.Va str>)  are "
"specified via the E<.Li -k> option when running E<.Li gperf>, as detailed in "
"the E<.Em Options> section below (see Section E<.Dq Options>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1182
msgid ""
"Function: E<.Ft > E<.Fo in_word_set> E<.Fa (const char * Va str, unsigned "
"int Va len)> E<.Fc>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1193
msgid ""
"If E<.Va str> is in the keyword set, returns a pointer to that keyword. More "
"exactly, if the option E<.Li -t> (or, equivalently, the E<.Li %struct-type> "
"declaration) was given, it returns a pointer to the matching keyword's "
"structure.  Otherwise it returns E<.Li NULL>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1211
msgid ""
"If the option E<.Li -c> (or, equivalently, the E<.Li %compare-strncmp> "
"declaration) is not used, E<.Va str> must be a NUL terminated string of "
"exactly length E<.Va len>.  If E<.Li -c> (or, equivalently, the E<.Li "
"%compare-strncmp> declaration) is used, E<.Va str> must simply be an array "
"of E<.Va len> bytes and does not need to be NUL terminated."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1213
msgid ""
"The code generated for these two functions is affected by the following "
"options:"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1215 /usr/src/contrib/gperf/doc/gperf.7:1326
#, no-wrap
msgid "-t"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1216 /usr/src/contrib/gperf/doc/gperf.7:1327
#, no-wrap
msgid "--struct-type"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1219
msgid "Make use of the user-defined E<.Li struct>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1220 /usr/src/contrib/gperf/doc/gperf.7:1587
#, no-wrap
msgid "-S Va total-switch-statements"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1221 /usr/src/contrib/gperf/doc/gperf.7:1588
#, no-wrap
msgid "--switch= Va total-switch-statements"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1228
msgid ""
"Generate 1 or more C E<.Li switch> statement rather than use a large, (and "
"potentially sparse) static array.  Although the exact time and space savings "
"of this approach vary according to your C compiler's degree of optimization, "
"this method often results in smaller and faster code."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1244
msgid ""
"If the E<.Li -t> and E<.Li -S> options (or, equivalently, the E<.Li "
"%struct-type> and E<.Li %switch> declarations) are omitted, the default "
"action is to generate a E<.Li char *> array containing the keywords, "
"together with additional empty strings used for padding the array. By "
"experimenting with the various input and output options, and timing the "
"resulting C code, you can determine the best option choices for different "
"keyword set characteristics."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1245
#, no-wrap
msgid "Use of NUL bytes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1258
msgid ""
"By default, the code generated by E<.Li gperf> operates on zero terminated "
"strings, the usual representation of strings in C. This means that the "
"keywords in the input file must not contain NUL bytes, and the E<.Va str> "
"argument passed to E<.Li hash> or E<.Li in_word_set> must be NUL terminated "
"and have exactly length E<.Va len>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1274
msgid ""
"If option E<.Li -c> (or, equivalently, the E<.Li %compare-strncmp> "
"declaration) is used, then the E<.Va str> argument does not need to be NUL "
"terminated. The code generated by E<.Li gperf> will only access the first "
"E<.Va len>, not E<.Va len+1>, bytes starting at E<.Va str>.  However, the "
"keywords in the input file still must not contain NUL bytes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1292
msgid ""
"If option E<.Li -l> (or, equivalently, the E<.Li %compare-lengths> "
"declaration) is used, then the hash table performs binary comparison. The "
"keywords in the input file may contain NUL bytes, written in string syntax "
"as E<.Li \\e000> or E<.Li \\ex00>, and the code generated by E<.Li gperf> "
"will treat NUL like any other byte. Also, in this case the E<.Li -c> option "
"(or, equivalently, the E<.Li %compare-strncmp> declaration) is ignored."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:1293
#, no-wrap
msgid "Invoking Li gperf"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1302
msgid ""
"There are E<.Em many> options to E<.Li gperf>.  They were added to make the "
"program more convenient for use with real applications.  \\(lqOn-line\\(rq "
"help is readily available via the E<.Li --help> option. Here is the complete "
"list of options."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1303
#, no-wrap
msgid "Specifying the Location of the Output File"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1305
#, no-wrap
msgid "--output-file= Va file"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1308
msgid ""
"Allows you to specify the name of the file to which the output is written "
"to."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1313
msgid ""
"The results are written to standard output if no output file is specified or "
"if it is E<.Li ->."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1314
#, no-wrap
msgid "Options that affect Interpretation of the Input File"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1317 /usr/src/contrib/gperf/doc/gperf.7:1355
msgid ""
"These options are also available as declarations in the input file (see "
"Section E<.Dq Gperf Declarations>)."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1319
#, no-wrap
msgid "-e Va keyword-delimiter-list"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1320
#, no-wrap
msgid "--delimiters= Va keyword-delimiter-list"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1325
msgid ""
"Allows you to provide a string containing delimiters used to separate "
"keywords from their attributes. The default is \",\". This option is "
"essential if you want to use keywords that have embedded commas or "
"newlines. One useful trick is to use -e'TAB', where TAB is the literal tab "
"character."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1336
msgid ""
"Allows you to include a E<.Li struct> type declaration for generated "
"code. Any text before a pair of consecutive E<.Li %%> is considered part of "
"the type declaration. Keywords and additional fields may follow this, one "
"group of fields per line. A set of examples for generating perfect hash "
"tables and functions for Ada, C, C++, Pascal, Modula 2, Modula 3 and "
"JavaScript reserved words are distributed with this release."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1337
#, no-wrap
msgid "--ignore-case"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1350
msgid ""
"Consider upper and lower case ASCII characters as equivalent. The string "
"comparison will use a case insignificant character comparison. Note that "
"locale dependent case mappings are ignored. This option is therefore not "
"suitable if a properly internationalized or locale aware case mapping should "
"be used. (For example, in a Turkish locale, the upper case equivalent of the "
"lowercase ASCII letter E<.Li i> is the non-ASCII character E<.Li capital i "
"with dot above>.)  For this case, it is better to apply an uppercase or "
"lowercase conversion on the string before passing it to the E<.Li gperf> "
"generated function."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1352
#, no-wrap
msgid "Options to specify the Language for the Output Code"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1357
#, no-wrap
msgid "-L Va generated-language-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1358
#, no-wrap
msgid "--language= Va generated-language-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1386
#, no-wrap
msgid "-a"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1390 /usr/src/contrib/gperf/doc/gperf.7:1395 /usr/src/contrib/gperf/doc/gperf.7:1615
msgid ""
"This option is supported for compatibility with previous releases of E<.Li "
"gperf>.  It does not do anything."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1391
#, no-wrap
msgid "-g"
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1397
#, no-wrap
msgid "Options for fine tuning Details in the Output Code"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1401
msgid ""
"Most of these options are also available as declarations in the input file "
"(see Section E<.Dq Gperf Declarations>)."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1403
#, no-wrap
msgid "-K Va slot-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1404
#, no-wrap
msgid "--slot-name= Va slot-name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1415
msgid ""
"This option is only useful when option E<.Li -t> (or, equivalently, the "
"E<.Li %struct-type> declaration) has been given. By default, the program "
"assumes the structure component identifier for the keyword is E<.Li name>.  "
"This option allows an arbitrary choice of identifier for this component, "
"although it still must occur as the first field in your supplied E<.Li "
"struct>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1416
#, no-wrap
msgid "-F Va initializers"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1417
#, no-wrap
msgid "--initializer-suffix= Va initializers"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1429
msgid ""
"This option is only useful when option E<.Li -t> (or, equivalently, the "
"E<.Li %struct-type> declaration) has been given. It permits to specify "
"initializers for the structure members following E<.Va slot-name> in empty "
"hash table entries. The list of initializers should start with a comma. By "
"default, the emitted code will zero-initialize structure members following "
"E<.Va slot-name>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1430
#, no-wrap
msgid "-H Va hash-function-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1431
#, no-wrap
msgid "--hash-function-name= Va hash-function-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1437
#, no-wrap
msgid "-N Va lookup-function-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1438
#, no-wrap
msgid "--lookup-function-name= Va lookup-function-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1445
#, no-wrap
msgid "-Z Va class-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1446
#, no-wrap
msgid "--class-name= Va class-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1455
#, no-wrap
msgid "-7"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1456
#, no-wrap
msgid "--seven-bit"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1471
msgid ""
"This option specifies that all strings that will be passed as arguments to "
"the generated hash function and the generated lookup function will solely "
"consist of 7-bit ASCII characters (bytes in the range 0..127). (Note that "
"the ANSI C functions E<.Li isalnum> and E<.Li isgraph> do E<.Em not> "
"guarantee that a byte is in this range. Only an explicit test like E<.Li c "
"E<gt>= 'A' && c E<lt>= 'Z'> guarantees this.) This was the default in "
"versions of E<.Li gperf> earlier than 2.7; now the default is to support "
"8-bit and multibyte characters."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1472
#, no-wrap
msgid "-l"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1473
#, no-wrap
msgid "--compare-lengths"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1489
msgid ""
"Compare keyword lengths before trying a string comparison. This option is "
"mandatory for binary comparisons (see Section E<.Dq Binary Strings>).  It "
"also might cut down on the number of string comparisons made during the "
"lookup, since keywords with different lengths are never compared via E<.Li "
"strcmp>.  However, using E<.Li -l> might greatly increase the size of the "
"generated C code if the lookup table range is large (which implies that the "
"switch option E<.Li -S> or E<.Li %switch> is not enabled), since the length "
"table contains as many elements as there are entries in the lookup table."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1490
#, no-wrap
msgid "-c"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1491
#, no-wrap
msgid "--compare-strncmp"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1497
#, no-wrap
msgid "-C"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1498
#, no-wrap
msgid "--readonly-tables"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1503
#, no-wrap
msgid "-E"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1504
#, no-wrap
msgid "--enum"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1510
#, no-wrap
msgid "-I"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1511
#, no-wrap
msgid "--includes"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1517
#, no-wrap
msgid "-G"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1518
#, no-wrap
msgid "--global-table"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1522
#, no-wrap
msgid "-P"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1523
#, no-wrap
msgid "--pic"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1542
msgid ""
"Optimize the generated table for inclusion in shared libraries. This reduces "
"the startup time of programs using a shared library containing the generated "
"code. If the option E<.Li -t> (or, equivalently, the E<.Li %struct-type> "
"declaration) is also given, the first field of the user-defined struct must "
"be of type E<.Li int>, not E<.Li char *>, because it will contain offsets "
"into the string pool instead of actual strings.  To convert such an offset "
"to a string, you can use the expression E<.Li stringpool + Va o>, where "
"E<.Va o> is the offset. The string pool name can be changed through the "
"option E<.Li --string-pool-name>."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1543
#, no-wrap
msgid "-Q Va string-pool-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1544
#, no-wrap
msgid "--string-pool-name= Va string-pool-name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1556
msgid ""
"Allows you to specify the name of the generated string pool created by "
"option E<.Li -P>.  The default name is E<.Li stringpool>.  This option "
"permits the use of two hash tables in the same file, with E<.Li -P> and even "
"when the option E<.Li -G> (or, equivalently, the E<.Li %global-table> "
"declaration) is given."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1557
#, no-wrap
msgid "--null-strings"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1563
msgid ""
"Use NULL strings instead of empty strings for empty keyword table entries.  "
"This reduces the startup time of programs using a shared library containing "
"the generated code (but not as much as option E<.Li -P>), at the expense of "
"one more test-and-branch instruction at run time."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1564
#, no-wrap
msgid "-W Va hash-table-array-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1565
#, no-wrap
msgid "--word-array-name= Va hash-table-array-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1576
#, no-wrap
msgid "--length-table-name= Va length-table-array-name"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1606
#, no-wrap
msgid "-T"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1607
#, no-wrap
msgid "--omit-struct-type"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1611
#, no-wrap
msgid "-p"
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1617
#, no-wrap
msgid "Options for changing the Algorithms employed by Li gperf"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1619
#, no-wrap
msgid "-k Va selected-byte-positions"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1620
#, no-wrap
msgid "--key-positions= Va selected-byte-positions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1633
msgid ""
"Allows selection of the byte positions used in the keywords' hash function.  "
"The allowable choices range between 1-255, inclusive. The positions are "
"separated by commas, e.g., E<.Li -k 9,4,13,14> ; ranges may be used, e.g., "
"E<.Li -k 2-7> ; and positions may occur in any order. Furthermore, the "
"wildcard '*' causes the generated hash function to consider E<.Sy all> byte "
"positions in each keyword, whereas '$' instructs the hash function to use "
"the \\(lqfinal byte\\(rq of a keyword (this is the only way to use a byte "
"position greater than 255, incidentally)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1641
msgid ""
"For instance, the option E<.Li -k 1,2,4,6-10,'$'> generates a hash function "
"that considers positions 1,2,4,6,7,8,9,10, plus the last byte in each "
"keyword (which may be at a different position for each keyword, "
"obviously). Keywords with length less than the indicated byte positions work "
"properly, since selected byte positions exceeding the keyword length are "
"simply not referenced in the hash function."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1646
msgid ""
"This option is not normally needed since version 2.8 of E<.Li gperf> ; the "
"default byte positions are computed depending on the keyword set, through a "
"search that minimizes the number of byte positions."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1647
#, no-wrap
msgid "-D"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1648
#, no-wrap
msgid "--duplicates"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1660
msgid ""
"Handle keywords whose selected byte sets hash to duplicate values. Duplicate "
"hash values can occur if a set of keywords has the same names, but possesses "
"different attributes, or if the selected byte positions are not well "
"chosen.  With the -D option E<.Li gperf> treats all these keywords as part "
"of an equivalence class and generates a perfect hash function with multiple "
"comparisons for duplicate keywords. It is up to you to completely "
"disambiguate the keywords by modifying the generated C code. However, E<.Li "
"gperf> helps you out by organizing the output."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1665
msgid ""
"Using this option usually means that the generated hash function is no "
"longer perfect. On the other hand, it permits E<.Li gperf> to work on "
"keyword sets that it otherwise could not handle."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1666
#, no-wrap
msgid "-m Va iterations"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1667
#, no-wrap
msgid "--multiple-iterations= Va iterations"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1676
msgid ""
"Perform multiple choices of the E<.Li -i> and E<.Li -j> values, and choose "
"the best results. This increases the running time by a factor of E<.Va "
"iterations> but does a good job minimizing the generated table size."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1677
#, no-wrap
msgid "-i Va initial-value"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1678
#, no-wrap
msgid "--initial-asso= Va initial-value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1692
msgid ""
"Provides an initial E<.Va value> for the associate values array. Default is "
"0. Increasing the initial value helps inflate the final table size, possibly "
"leading to more time efficient keyword lookups. Note that this option is not "
"particularly useful when E<.Li -S> (or, equivalently, E<.Li %switch>)  is "
"used. Also, E<.Li -i> is overridden when the E<.Li -r> option is used."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1693
#, no-wrap
msgid "-j Va jump-value"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1694
#, no-wrap
msgid "--jump= Va jump-value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1703
msgid ""
"Affects the \\(lqjump value\\(rq, i.e., how far to advance the associated "
"byte value upon collisions.  E<.Va Jump-value> is rounded up to an odd "
"number, the default is 5. If the E<.Va jump-value> is 0 E<.Li gperf> jumps "
"by random amounts."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1704
#, no-wrap
msgid "-n"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1705
#, no-wrap
msgid "--no-strlen"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1709
msgid ""
"Instructs the generator not to include the length of a keyword when "
"computing its hash value. This may save a few assembly instructions in the "
"generated lookup table."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1710
#, no-wrap
msgid "-r"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1711
#, no-wrap
msgid "--random"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1716
msgid ""
"Utilizes randomness to initialize the associated values table. This "
"frequently generates solutions faster than using deterministic "
"initialization (which starts all associated values at 0). Furthermore, using "
"the randomization option generally increases the size of the table."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1717
#, no-wrap
msgid "-s Va size-multiple"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1718
#, no-wrap
msgid "--size-multiple= Va size-multiple"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1730
msgid ""
"Affects the size of the generated hash table. The numeric argument for this "
"option indicates \\(lqhow many times larger or smaller\\(rq the maximum "
"associated value range should be, in relationship to the number of "
"keywords. It can be written as an integer, a floating-point number or a "
"fraction. For example, a value of 3 means \\(lqallow the maximum associated "
"value to be about 3 times larger than the number of input "
"keywords\\(rq. Conversely, a value of 1/3 means \\(lqallow the maximum "
"associated value to be about 3 times smaller than the number of input "
"keywords\\(rq.  Values smaller than 1 are useful for limiting the overall "
"size of the generated hash table, though the option E<.Li -m> is better at "
"this purpose."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1740
msgid ""
"If `generate switch' option E<.Li -S> (or, equivalently, E<.Li %switch>)  is "
"E<.Em not> enabled, the maximum associated value influences the static array "
"table size, and a larger table should decrease the time required for an "
"unsuccessful search, at the expense of extra table space."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1745
msgid ""
"The default value is 1, thus the default maximum associated value about the "
"same size as the number of keywords (for efficiency, the maximum associated "
"value is always rounded up to a power of 2). The actual table size may vary "
"somewhat, since this technique is essentially a heuristic."
msgstr ""

#. type: Ss
#: /usr/src/contrib/gperf/doc/gperf.7:1747
#, no-wrap
msgid "Informative Output"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1749
#, no-wrap
msgid "-h"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1750
#, no-wrap
msgid "--help"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1753
msgid ""
"Prints a short summary on the meaning of each program option. Aborts further "
"program execution."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1754
#, no-wrap
msgid "-v"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1755
#, no-wrap
msgid "--version"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1757
msgid "Prints out the current version number."
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1758
#, no-wrap
msgid "-d"
msgstr ""

#. type: It
#: /usr/src/contrib/gperf/doc/gperf.7:1759
#, no-wrap
msgid "--debug"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1768
msgid ""
"Enables the debugging option. This produces verbose diagnostics to "
"\\(lqstandard error\\(rq when E<.Li gperf> is executing. It is useful both "
"for maintaining the program and for determining whether a given set of "
"options is actually speeding up the search for a solution.  Some useful "
"information is dumped at the end of the program when the E<.Li -d> option is "
"enabled."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:1770
#, no-wrap
msgid "Known Bugs and Limitations with Li gperf"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1773
msgid "The following are some limitations with the current release of E<.Li gperf>:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1785
msgid ""
"The E<.Li gperf> utility is tuned to execute quickly, and works quickly for "
"small to medium size data sets (around 1000 keywords). It is extremely "
"useful for maintaining perfect hash functions for compiler keyword "
"sets. Several recent enhancements now enable E<.Li gperf> to work "
"efficiently on much larger keyword sets (over 15,000 keywords). When "
"processing large keyword sets it helps greatly to have over 8 megs of RAM."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1800
msgid ""
"The size of the generate static keyword array can get E<.Em extremely> large "
"if the input keyword file is large or if the keywords are quite similar.  "
"This tends to slow down the compilation of the generated C code, and E<.Em "
"greatly> inflates the object code size. If this situation occurs, consider "
"using the E<.Li -S> option to reduce data size, potentially increasing "
"keyword recognition time a negligible amount. Since many C compilers cannot "
"correctly generate code for large switch statements it is important to "
"qualify the E<.Va -S> option with an appropriate numerical argument that "
"controls the number of switch statements generated."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1805
msgid ""
"The maximum number of selected byte positions has an arbitrary limit of "
"255.  This restriction should be removed, and if anyone considers this a "
"problem write me and let me know so I can remove the constraint."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:1807
#, no-wrap
msgid "Things Still Left to Do"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1812
msgid ""
"It should be \\(lqrelatively\\(rq easy to replace the current perfect hash "
"function algorithm with a more exhaustive approach; the perfect hash module "
"is essential independent from other program modules. Additional worthwhile "
"improvements include:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1825
msgid ""
"Another useful extension involves modifying the program to generate "
"\\(lqminimal\\(rq perfect hash functions (under certain circumstances, the "
"current version can be rather extravagant in the generated table size). This "
"is mostly of theoretical interest, since a sparse table often produces "
"faster lookups, and use of the E<.Li -S> E<.Li switch> option can minimize "
"the data size, at the expense of slightly longer lookups (note that the gcc "
"compiler generally produces good code for E<.Li switch> statements, reducing "
"the need for more complex schemes)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1829
msgid ""
"In addition to improving the algorithm, it would also be useful to generate "
"an Ada package as the code output, in addition to the current C and C++ "
"routines."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:1831
#, no-wrap
msgid "Bibliography"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1835
msgid ""
"[1] Chang, C.C.: E<.Em A Scheme for Constructing Ordered Minimal Perfect "
"Hashing Functions> Information Sciences 39(1986), 187-195."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1839
msgid ""
"[2] Cichelli, Richard J.  E<.Em Author's Response to \\(lqOn Cichelli's "
"Minimal Perfect Hash Functions Method\\(rq> Communications of the ACM, 23, "
"12(December 1980), 729."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1843
msgid ""
"[3] Cichelli, Richard J.  E<.Em Minimal Perfect Hash Functions Made Simple> "
"Communications of the ACM, 23, 1(January 1980), 17-19."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1847
msgid ""
"[4] Cook, C. R. and Oldehoeft, R.R.  E<.Em A Letter Oriented Minimal Perfect "
"Hashing Function> SIGPLAN Notices, 17, 9(September 1982), 18-27."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1851
msgid ""
"[5] Cormack, G. V. and Horspool, R. N. S. and Kaiserwerth, M.  E<.Em "
"Practical Perfect Hashing> Computer Journal, 28, 1(January 1985), 54-58."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1855
msgid ""
"[6] Jaeschke, G.  E<.Em Reciprocal Hashing: A Method for Generating Minimal "
"Perfect Hashing Functions> Communications of the ACM, 24, 12(December 1981), "
"829-833."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1859
msgid ""
"[7] Jaeschke, G. and Osterburg, G.  E<.Em On Cichelli's Minimal Perfect Hash "
"Functions Method> Communications of the ACM, 23, 12(December 1980), 728-729."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1863
msgid ""
"[8] Sager, Thomas J.  E<.Em A Polynomial Time Generator for Minimal Perfect "
"Hash Functions> Communications of the ACM, 28, 5(December 1985), 523-532"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1867
msgid ""
"[9] Schmidt, Douglas C.  E<.Em GPERF: A Perfect Hash Function Generator> "
"Second USENIX C++ Conference Proceedings, April 1990."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1871
msgid ""
"[10] Schmidt, Douglas C.  E<.Em GPERF: A Perfect Hash Function Generator> "
"C++ Report, SIGS 10 10 (November/December 1998)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1875
msgid ""
"[11] Sebesta, R.W. and Taylor, M.A.  E<.Em Minimal Perfect Hash Functions "
"for Reserved Word Lists> SIGPLAN Notices, 20, 12(September 1985), 47-53."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1879
msgid ""
"[12] Sprugnoli, R.  E<.Em Perfect Hashing Functions: A Single Probe "
"Retrieving Method for Static Sets> Communications of the ACM, 20 11(November "
"1977), 841-850."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1883
msgid ""
"[13] Stallman, Richard M.  E<.Em Using and Porting GNU CC> Free Software "
"Foundation, 1988."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1887
msgid ""
"[14] Stroustrup, Bjarne E<.Em The C++ Programming Language.> Addison-Wesley, "
"1986."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/gperf/doc/gperf.7:1891
msgid ""
"[15] Tiemann, Michael D.  E<.Em User's Guide to GNU C++> Free Software "
"Foundation, 1989."
msgstr ""

#. type: Sh
#: /usr/src/contrib/gperf/doc/gperf.7:1892
#, no-wrap
msgid "Concept Index"
msgstr ""
