# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:28-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/share/man/man7/arch.7:29
#, no-wrap
msgid "August 5, 2018"
msgstr ""

#. type: Dt
#: /usr/src/share/man/man7/arch.7:30
#, no-wrap
msgid "ARCH 7"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/arch.7:32
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:34
msgid "E<.Nm arch>"
msgstr ""

#. type: Nd
#: /usr/src/share/man/man7/arch.7:34
#, no-wrap
msgid "Architecture-specific details"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/arch.7:35
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:38
msgid "Differences between CPU architectures and platforms supported by E<.Fx>."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:38
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:44
msgid ""
"This document is a quick reference of key ABI details of E<.Fx> architecture "
"ports.  For full details consult the processor-specific ABI supplement "
"documentation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:49
msgid ""
"If not explicitly mentioned, sizes are in bytes.  The architecture details "
"in this document apply to E<.Fx 10.0> and later, unless otherwise noted."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:58
msgid ""
"E<.Fx> uses a flat address space.  Variables of types E<.Vt unsigned long>, "
"E<.Vt uintptr_t>, and E<.Vt size_t> and pointers all have the same "
"representation."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:70
msgid ""
"In order to maximize compatibility with future pointer integrity mechanisms, "
"manipulations of pointers as integers should be performed via E<.Vt "
"uintptr_t> or E<.Vt intptr_t> and no other types.  In particular, E<.Vt "
"long> and E<.Vt ptrdiff_t> should be avoided."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:80
msgid ""
"On some architectures, e.g., E<.Dv sparc64>, E<.Dv powerpc> and AIM variants "
"of E<.Dv powerpc64>, the kernel uses a separate address space.  On other "
"architectures, kernel and a user mode process share a single address space.  "
"The kernel is located at the highest addresses."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:83
msgid ""
"On each architecture, the main user mode thread's stack starts near the "
"highest user address and grows down."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:90
msgid ""
"E<.Fx> architecture support varies by release.  This table shows the first "
"E<.Fx> release to support each architecture, and, for discontinued "
"architectures, the final release."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:92
#, no-wrap
msgid "Sy Architecture Ta Sy Initial Release Ta Sy Final Release"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:93
#, no-wrap
msgid "aarch64 Ta 11.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:94
#, no-wrap
msgid "alpha Ta 3.2 Ta 6.4"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:95
#, no-wrap
msgid "amd64 Ta 5.1"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:96
#, no-wrap
msgid "arm Ta 6.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:97
#, no-wrap
msgid "armeb Ta 8.0 Ta 11.x"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:98
#, no-wrap
msgid "armv6 Ta 10.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:99
#, no-wrap
msgid "armv7 Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:100
#, no-wrap
msgid "ia64 Ta 5.0 Ta 10.4"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:101
#, no-wrap
msgid "i386 Ta 1.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:102
#, no-wrap
msgid "mips Ta 8.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:103
#, no-wrap
msgid "mipsel Ta 9.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:104
#, no-wrap
msgid "mipselhf Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:105
#, no-wrap
msgid "mipshf Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:106
#, no-wrap
msgid "mipsn32 Ta 9.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:107
#, no-wrap
msgid "mips64 Ta 9.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:108
#, no-wrap
msgid "mips64el Ta 9.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:109
#, no-wrap
msgid "mips64elhf Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:110
#, no-wrap
msgid "mips64hf Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:111
#, no-wrap
msgid "pc98 Ta 2.2 Ta 11.x"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:112
#, no-wrap
msgid "powerpc Ta 6.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:113
#, no-wrap
msgid "powerpcspe Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:114
#, no-wrap
msgid "powerpc64 Ta 6.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:115
#, no-wrap
msgid "riscv64 Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:116
#, no-wrap
msgid "riscv64sf Ta 12.0"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:117
#, no-wrap
msgid "sparc64 Ta 5.0"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:119
#, no-wrap
msgid "Type sizes"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:127
msgid ""
"All E<.Fx> architectures use some variant of the ELF (see E<.Xr elf 5>)  "
"E<.Sy Application Binary Interface> (ABI) for the machine processor.  All "
"supported ABIs can be divided into two groups:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:128
#, no-wrap
msgid "Dv ILP32"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:133
msgid ""
"E<.Vt int>, E<.Vt long>, E<.Vt void *> types machine representations all "
"have 4-byte size."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:133
#, no-wrap
msgid "Dv LP64"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:141
msgid ""
"E<.Vt int> type machine representation uses 4 bytes, while E<.Vt long> and "
"E<.Vt void *> are 8 bytes."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:147
msgid ""
"Compilers define the E<.Dv _LP64> symbol when compiling for an E<.Dv LP64> "
"ABI."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:159
msgid ""
"Some machines support more that one E<.Fx> ABI.  Typically these are 64-bit "
"machines, where the E<.Dq native> E<.Dv LP64> execution environment is "
"accompanied by the E<.Dq legacy> E<.Dv ILP32> environment, which was "
"historical 32-bit predecessor for 64-bit evolution.  Examples are:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:160
#, no-wrap
msgid "Sy LP64 Ta Sy ILP32 counterpart"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:161
#, no-wrap
msgid "Dv amd64 Ta Dv i386"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:162
#, no-wrap
msgid "Dv powerpc64 Ta Dv powerpc"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:163
#, no-wrap
msgid "Dv mips64* Ta Dv mips*"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:173
msgid ""
"E<.Dv aarch64> currently does not support execution of E<.Dv armv6> or E<.Dv "
"armv7> binaries, even if the CPU implements E<.Dv AArch32> execution state."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:175
msgid "On all supported architectures:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:176
#, no-wrap
msgid "Sy Type Ta Sy Size"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:177
#, no-wrap
msgid "short Ta 2"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:178
#, no-wrap
msgid "int Ta 4"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:179
#, no-wrap
msgid "long Ta sizeof(void*)"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:180
#, no-wrap
msgid "long long Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:181
#, no-wrap
msgid "float Ta 4"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:182
#, no-wrap
msgid "double Ta 8"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:190
msgid ""
"Integers are represented in two's complement.  Alignment of integer and "
"pointer types is natural, that is, the address of the variable must be "
"congruent to zero modulo the type size.  Most ILP32 ABIs, except E<.Dv arm>, "
"require only 4-byte alignment for 64-bit integers."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:192
msgid "Machine-dependent type sizes:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:193
#, no-wrap
msgid "Sy Architecture Ta Sy void * Ta Sy long double Ta Sy time_t"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:194
#, no-wrap
msgid "aarch64 Ta 8 Ta 16 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:195
#, no-wrap
msgid "amd64 Ta 8 Ta 16 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:196
#, no-wrap
msgid "arm Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:197
#, no-wrap
msgid "armv6 Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:198
#, no-wrap
msgid "i386 Ta 4 Ta 12 Ta 4"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:199
#, no-wrap
msgid "mips Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:200
#, no-wrap
msgid "mipsel Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:201
#, no-wrap
msgid "mipselhf Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:202
#, no-wrap
msgid "mipshf Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:203
#, no-wrap
msgid "mipsn32 Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:204
#, no-wrap
msgid "mips64 Ta 8 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:205
#, no-wrap
msgid "mips64el Ta 8 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:206
#, no-wrap
msgid "mips64elhf Ta 8 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:207
#, no-wrap
msgid "mips64hf Ta 8 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:208
#, no-wrap
msgid "powerpc Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:209
#, no-wrap
msgid "powerpcspe Ta 4 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:210
#, no-wrap
msgid "powerpc64 Ta 8 Ta 8 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:211
#, no-wrap
msgid "riscv64 Ta 8 Ta 16 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:212
#, no-wrap
msgid "riscv64sf Ta 8 Ta 16 Ta 8"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:213
#, no-wrap
msgid "sparc64 Ta 8 Ta 16 Ta 8"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:218
msgid "E<.Sy time_t> is 8 bytes on all supported architectures except i386."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:218
#, no-wrap
msgid "Endianness and Char Signedness"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:220
#, no-wrap
msgid "Sy Architecture Ta Sy Endianness Ta Sy char Signedness"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:221
#, no-wrap
msgid "aarch64 Ta little Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:222
#, no-wrap
msgid "amd64 Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:223
#, no-wrap
msgid "arm Ta little Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:224
#, no-wrap
msgid "armv6 Ta little Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:225
#, no-wrap
msgid "armv7 Ta little Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:226
#, no-wrap
msgid "i386 Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:227
#, no-wrap
msgid "mips Ta big Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:228
#, no-wrap
msgid "mipsel Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:229
#, no-wrap
msgid "mipselhf Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:230
#, no-wrap
msgid "mipshf Ta big Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:231
#, no-wrap
msgid "mipsn32 Ta big Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:232
#, no-wrap
msgid "mips64 Ta big Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:233
#, no-wrap
msgid "mips64el Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:234
#, no-wrap
msgid "mips64elhf Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:235
#, no-wrap
msgid "mips64hf Ta big Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:236
#, no-wrap
msgid "powerpc Ta big Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:237
#, no-wrap
msgid "powerpcspe Ta big Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:238
#, no-wrap
msgid "powerpc64 Ta big Ta unsigned"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:239
#, no-wrap
msgid "riscv64 Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:240
#, no-wrap
msgid "riscv64sf Ta little Ta signed"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:241
#, no-wrap
msgid "sparc64 Ta big Ta signed"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:243
#, no-wrap
msgid "Page Size"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:245
#, no-wrap
msgid "Sy Architecture Ta Sy Page Sizes"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:246
#, no-wrap
msgid "aarch64 Ta 4K, 2M, 1G"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:247
#, no-wrap
msgid "amd64 Ta 4K, 2M, 1G"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:248
#, no-wrap
msgid "arm Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:249
#, no-wrap
msgid "armv6 Ta 4K, 1M"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:250
#, no-wrap
msgid "armv7 Ta 4K, 1M"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:251
#, no-wrap
msgid "i386 Ta 4K, 2M (PAE), 4M"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:252
#, no-wrap
msgid "mips Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:253
#, no-wrap
msgid "mipsel Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:254
#, no-wrap
msgid "mipselhf Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:255
#, no-wrap
msgid "mipshf Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:256
#, no-wrap
msgid "mipsn32 Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:257
#, no-wrap
msgid "mips64 Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:258
#, no-wrap
msgid "mips64el Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:259
#, no-wrap
msgid "mips64elhf Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:260
#, no-wrap
msgid "mips64hf Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:261
#, no-wrap
msgid "powerpc Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:262
#, no-wrap
msgid "powerpcspe Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:263
#, no-wrap
msgid "powerpc64 Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:264
#, no-wrap
msgid "riscv64 Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:265
#, no-wrap
msgid "riscv64sf Ta 4K"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:266
#, no-wrap
msgid "sparc64 Ta 8K"
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:268
#, no-wrap
msgid "Floating Point"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:270
#, no-wrap
msgid "Sy Architecture Ta Sy float, double Ta Sy long double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:271
#, no-wrap
msgid "aarch64 Ta hard Ta soft, quad precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:272
#, no-wrap
msgid "amd64 Ta hard Ta hard, 80 bit"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:273
#, no-wrap
msgid "arm Ta soft Ta soft, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:274
#, no-wrap
msgid "armv6 Ta hard(1) Ta hard, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:275
#, no-wrap
msgid "armv7 Ta hard(1) Ta hard, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:276
#, no-wrap
msgid "i386 Ta hard Ta hard, 80 bit"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:277
#, no-wrap
msgid "mips Ta soft Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:278
#, no-wrap
msgid "mipsel Ta soft Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:279
#, no-wrap
msgid "mipselhf Ta hard Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:280
#, no-wrap
msgid "mipshf Ta hard Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:281
#, no-wrap
msgid "mipsn32 Ta soft Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:282
#, no-wrap
msgid "mips64 Ta soft Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:283
#, no-wrap
msgid "mips64el Ta soft Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:284
#, no-wrap
msgid "mips64elhf Ta hard Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:285
#, no-wrap
msgid "mips64hf Ta hard Ta identical to double"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:286
#, no-wrap
msgid "powerpc Ta hard Ta hard, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:287
#, no-wrap
msgid "powerpcspe Ta hard Ta hard, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:288
#, no-wrap
msgid "powerpc64 Ta hard Ta hard, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:289
#, no-wrap
msgid "riscv64 Ta hard Ta hard, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:290
#, no-wrap
msgid "riscv64sf Ta soft Ta soft, double precision"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:291
#, no-wrap
msgid "sparc64 Ta hard Ta hard, quad precision"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:298
msgid ""
"(1) Prior to E<.Fx 11.0>, armv6 used the softfp ABI even though it supported "
"only processors with a floating point unit."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:298
#, no-wrap
msgid "Predefined Macros"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:303
msgid ""
"The compiler provides a number of predefined macros.  Some of these provide "
"architecture-specific details and are explained below.  Other macros, "
"including those required by the language standard, are not included here."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:305
msgid "The full set of predefined macros can be obtained with this command:"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:307
#, no-wrap
msgid "cc -x c -dM -E /dev/null\n"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:310
msgid "Common type size and endianness macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:311
#, no-wrap
msgid "Sy Macro Ta Sy Meaning"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:312
#, no-wrap
msgid "Dv __LP64__ Ta 64-bit (8-byte) long and pointer, 32-bit (4-byte) int"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:313
#, no-wrap
msgid "Dv __ILP32__ Ta 32-bit (4-byte) int, long and pointer"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:314
#, no-wrap
msgid "Dv BYTE_ORDER Ta Either Dv BIG_ENDIAN or Dv LITTLE_ENDIAN ."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:318
msgid "E<.Dv PDP11_ENDIAN> is not used on E<.Fx>."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:321
msgid "Architecture-specific macros:"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:322
#, no-wrap
msgid "Sy Architecture Ta Sy Predefined macros"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:323
#, no-wrap
msgid "aarch64 Ta Dv __aarch64__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:324
#, no-wrap
msgid "amd64 Ta Dv __amd64__, Dv __x86_64__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:325
#, no-wrap
msgid "arm Ta Dv __arm__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:326
#, no-wrap
msgid "armv6 Ta Dv __arm__, Dv __ARM_ARCH E<gt>= 6"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:327
#, no-wrap
msgid "armv7 Ta Dv __arm__, Dv __ARM_ARCH E<gt>= 7"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:328
#, no-wrap
msgid "i386 Ta Dv __i386__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:329
#, no-wrap
msgid "mips Ta Dv __mips__, Dv __MIPSEB__, Dv __mips_o32"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:330
#, no-wrap
msgid "mipsel Ta Dv __mips__, Dv __mips_o32"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:331
#, no-wrap
msgid "mipselhf Ta Dv __mips__, Dv __mips_o32"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:332
#, no-wrap
msgid "mipshf Ta Dv __mips__, Dv __MIPSEB__, Dv __mips_o32"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:333
#, no-wrap
msgid "mipsn32 Ta Dv __mips__, Dv __MIPSEB__, Dv __mips_n32"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:334
#, no-wrap
msgid "mips64 Ta Dv __mips__, Dv __MIPSEB__, Dv __mips_n64"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:335
#, no-wrap
msgid "mips64el Ta Dv __mips__, Dv __mips_n64"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:336
#, no-wrap
msgid "mips64elhf Ta Dv __mips__, Dv __mips_n64"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:337
#, no-wrap
msgid "mips64hf Ta Dv __mips__, Dv __MIPSEB__, Dv __mips_n64"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:338
#, no-wrap
msgid "powerpc Ta Dv __powerpc__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:339
#, no-wrap
msgid "powerpcspe Ta Dv __powerpc__, Dv __SPE__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:340
#, no-wrap
msgid "powerpc64 Ta Dv __powerpc__, Dv __powerpc64__"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:341
#, no-wrap
msgid "riscv64 Ta Dv __riscv, Dv __riscv_xlen == 64"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:342
#, no-wrap
msgid "riscv64sf Ta Dv __riscv, Dv __riscv_xlen == 64"
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:343
#, no-wrap
msgid "sparc64 Ta Dv __sparc64__"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:349
msgid ""
"Compilers may define additional variants of architecture-specific macros.  "
"The macros above are preferred for use in E<.Fx>."
msgstr ""

#. type: Ss
#: /usr/src/share/man/man7/arch.7:349
#, no-wrap
msgid "Important Xr make 1 variables"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:355
msgid ""
"Most of the externally settable variables are defined in the E<.Xr build 7> "
"man page.  These variables are not otherwise documented and are used "
"extensively in the build system."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:356
#, no-wrap
msgid "Dv \"MACHINE\tRepresent\" the hardware platform."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:391
msgid ""
"This is the same as the native platform's E<.Xr uname 1> E<.Fl m> output.  "
"It defines both the userland / kernel interface, as well as the bootloader / "
"kernel interface.  It should only be used in these contexts.  Each CPU "
"architecture may have multiple hardware platforms it supports where E<.Dv "
"MACHINE> differs among them.  It is used to collect together all the files "
"from E<.Xr config 8> to build the kernel.  It is often the same as E<.Dv "
"MACHINE_ARCH> just as one CPU architecture can be implemented by many "
"different hardware platforms, one hardware platform may support multiple CPU "
"architecture family members, though with different binaries.  For example, "
"E<.Dv MACHINE> of i386 supported the IBM-AT hardware platform while the "
"E<.Dv MACHINE> of pc98 supported the Japanese company NEC's PC-9801 and "
"PC-9821 hardware platforms.  Both of these hardware platforms supported only "
"the E<.Dv MACHINE_ARCH> of i386 where they shared a common ABI, except for "
"certain kernel / userland interfaces relating to underlying hardware "
"platform differences in bus architecture, device enumeration and boot "
"interface.  Generally, E<.Dv MACHINE> should only be used in src/sys and "
"src/stand or in system imagers or installers."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:391
#, no-wrap
msgid "Dv \"MACHINE_ARCH\tRepresents\" the CPU processor architecture."
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:422
msgid ""
"This is the same as the native platforms E<.Xr uname 1> E<.Fl p> output.  It "
"defines the CPU instruction family supported.  It may also encode a "
"variation in the byte ordering of multi-byte integers (endian).  It may also "
"encode a variation in the size of the integer or pointer.  It may also "
"encode a ISA revision.  It may also encode hard versus soft floating point "
"ABI and usage.  It may also encode a variant ABI when the other factors do "
"not uniquely define the ABI (e.g., MIPS' n32 ABI).  It, along with E<.Dv "
"MACHINE>, defines the ABI used by the system.  For example, the MIPS CPU "
"processor family supports 9 different combinations encoding pointer size, "
"endian and hard versus soft float (for 8 combinations) as well as N32 (which "
"only ever had one variation of all these).  Generally, the plain CPU name "
"specifies the most common (or at least first) variant of the CPU.  This is "
"why mips and mips64 imply 'big endian' while 'arm' and 'armv7' imply little "
"endian.  If we ever were to support the so-called x32 ABI (using 32-bit "
"pointers on the amd64 architecture), it would most likely be encoded as "
"amd64-x32.  It is unfortunate that amd64 specifies the 64-bit evolution of "
"the x86 platform (it matches the 'first rule') as everybody else uses "
"x86_64.  There is no standard name for the processor: each OS selects its "
"own conventions."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:422
#, no-wrap
msgid "Dv \"MACHINE_CPUARCH\tRepresents\" the source location for a given"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:434
msgid ""
"E<.Dv MACHINE_ARCH>.  For example, E<.Dv MACHINE_CPUARCH> is defined to be "
"mips for all the flavors of mips that we support since we support them all "
"with a shared set of sources.  While amd64 and i386 are closely related, "
"MACHINE_CPUARCH is not x86 for them.  The FreeBSD source base supports amd64 "
"and i386 with two distinct source bases living in subdirectories named amd64 "
"and i386 (though behind the scenes there's some sharing that fits into this "
"framework)."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:434
#, no-wrap
msgid "Dv \"CPUTYPE\tSets\" the flavor of"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:441
msgid ""
"E<.Dv MACHINE_ARCH> to build.  It is used to optimize the build for a "
"specific CPU / core that the binaries run on.  Generally, this does not "
"change the ABI, though it can be a fine line between optimization for "
"specific cases."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:441
#, no-wrap
msgid "Dv \"TARGET\tUsed\" to set"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:448
msgid ""
"E<.Dv MACHINE> in the top level Makefile for cross building.  Unused outside "
"of that scope.  It is not passed down to the rest of the build.  Makefiles "
"outside of the top level should not use it at all (though some have their "
"own private copy for hysterical raisons)."
msgstr ""

#. type: It
#: /usr/src/share/man/man7/arch.7:448
#, no-wrap
msgid "Dv \"TARGET_ARCH\tUsed\" to set"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:453
msgid ""
"E<.Dv MACHINE_ARCH> by the top level Makefile for cross building.  Like "
"E<.Dv TARGET , it is unused outside of that scope.>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/arch.7:454
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:457
msgid "E<.Xr src.conf 5>, E<.Xr build 7>"
msgstr ""

#. type: Sh
#: /usr/src/share/man/man7/arch.7:457
#, no-wrap
msgid "HISTORY"
msgstr ""

#. type: Plain text
#: /usr/src/share/man/man7/arch.7:461
msgid "An E<.Nm> manual page appeared in E<.Fx 11.1>."
msgstr ""
