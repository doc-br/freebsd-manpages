# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:32-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Dd
#: /usr/src/contrib/binutils/gas/doc/as.7:1
#, no-wrap
msgid "2015-03-02"
msgstr ""

#. type: Dt
#: /usr/src/contrib/binutils/gas/doc/as.7:2
#, no-wrap
msgid "AS 7"
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:4
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6
msgid "E<.Nm as>"
msgstr ""

#. type: Nd
#: /usr/src/contrib/binutils/gas/doc/as.7:6
#, no-wrap
msgid "Using as (machine specific)"
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:7
#, no-wrap
msgid "Using as"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:13
msgid ""
"This file is a user guide to the GNU assembler E<.Xr as> version \"2.17.50 "
"[FreeBSD] 2007-07-03\". This version of the file describes E<.Xr as> "
"configured to generate code for machine specific architectures."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:17
msgid ""
"This document is distributed under the terms of the GNU Free Documentation "
"License. A copy of the license is included in the section entitled \\(lqGNU "
"Free Documentation License\\(rq."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:18
#, no-wrap
msgid "Overview"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:22
msgid ""
"Here is a brief summary of how to invoke E<.Xr as>.  For details, see "
"Invoking,,Command-Line Options."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:35
#, no-wrap
msgid ""
"as [-a[cdhlns][=file]] [--alternate] [-D]\n"
" [--defsym sym=val] [-f] [-g] [--gstabs]\n"
" [--gstabs+] [--gdwarf-2] [--help] [-I dir] [-J]\n"
" [-K] [-L] [--listing-lhs-width=NUM]\n"
" [--listing-lhs-width2=NUM] [--listing-rhs-width=NUM]\n"
" [--listing-cont-lines=NUM] [--keep-locals] [-o\n"
" objfile] [-R] [--reduce-memory-overheads] [--statistics]\n"
" [-v] [-version] [--version] [-W] [--warn]\n"
" [--fatal-warnings] [-w] [-x] [-Z] [@FILE]\n"
" [--target-help] [target-options]\n"
" [--|files ...]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:47
#, no-wrap
msgid ""
"Target ARM options:\n"
"   [-mcpu=processor[+extension...]]\n"
"   [-march=architecture[+extension...]]\n"
"   [-mfpu=floating-point-format]\n"
"   [-mfloat-abi=abi]\n"
"   [-meabi=ver]\n"
"   [-mthumb]\n"
"   [-EB|-EL]\n"
"   [-mapcs-32|-mapcs-26|-mapcs-float|\n"
"    -mapcs-reentrant]\n"
"   [-mthumb-interwork] [-k]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:52
#, no-wrap
msgid ""
"Target i386 options:\n"
"   [--32|--64] [-n]\n"
"   [-march=CPU] [-mtune=CPU] \n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:62
#, no-wrap
msgid ""
"Target IA-64 options:\n"
"   [-mconstant-gp|-mauto-pic]\n"
"   [-milp32|-milp64|-mlp64|-mp64]\n"
"   [-mle|mbe]\n"
"   [-mtune=itanium1|-mtune=itanium2]\n"
"   [-munwind-check=warning|-munwind-check=error]\n"
"   [-mhint.b=ok|-mhint.b=warning|-mhint.b=error]\n"
"   [-x|-xexplicit] [-xauto] [-xdebug]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:84
#, no-wrap
msgid ""
"Target MIPS options:\n"
"   [-nocpp] [-EL] [-EB] [-O[optimization level]]\n"
"   [-g[debug level]] [-G num] [-KPIC] [-call_shared]\n"
"   [-non_shared] [-xgot [-mvxworks-pic]\n"
"   [-mabi=ABI] [-32] [-n32] [-64] [-mfp32] [-mgp32]\n"
"   [-march=CPU] [-mtune=CPU] [-mips1] [-mips2]\n"
"   [-mips3] [-mips4] [-mips5] [-mips32] [-mips32r2]\n"
"   [-mips64] [-mips64r2]\n"
"   [-construct-floats] [-no-construct-floats]\n"
"   [-trap] [-no-break] [-break] [-no-trap]\n"
"   [-mfix7000] [-mno-fix7000]\n"
"   [-mips16] [-no-mips16]\n"
"   [-msmartmips] [-mno-smartmips]\n"
"   [-mips3d] [-no-mips3d]\n"
"   [-mdmx] [-no-mdmx]\n"
"   [-mdsp] [-mno-dsp]\n"
"   [-mdspr2] [-mno-dspr2]\n"
"   [-mmt] [-mno-mt]\n"
"   [-mdebug] [-no-mdebug]\n"
"   [-mpdr] [-mno-pdr]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:95
#, no-wrap
msgid ""
"Target PowerPC options:\n"
"   [-mpwrx|-mpwr2|-mpwr|-m601|-mppc|-mppc32|-m603|-m604|\n"
"    -m403|-m405|-mppc64|-m620|-mppc64bridge|-mbooke|\n"
"    -mbooke32|-mbooke64]\n"
"   [-mcom|-many|-maltivec] [-memb]\n"
"   [-mregnames|-mno-regnames]\n"
"   [-mrelocatable|-mrelocatable-lib]\n"
"   [-mlittle|-mlittle-endian|-mbig|-mbig-endian]\n"
"   [-msolaris|-mno-solaris]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:102
#, no-wrap
msgid ""
"Target SPARC options:\n"
"   [-Av6|-Av7|-Av8|-Asparclet|-Asparclite\n"
"    -Av8plus|-Av8plusa|-Av9|-Av9a]\n"
"   [-xarch=v8plus|-xarch=v8plusa] [-bump]\n"
"   [-32|-64]\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:108
#, no-wrap
msgid "@ Va file"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:117
msgid ""
"Read command-line options from E<.Va file>.  The options read are inserted "
"in place of the original @ E<.Va file> option. If E<.Va file> does not "
"exist, or cannot be read, then the option will be treated literally, and not "
"removed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:128
msgid ""
"Options in E<.Va file> are separated by whitespace. A whitespace character "
"may be included in an option by surrounding the entire option in either "
"single or double quotes.  Any character (including a backslash) may be "
"included by prefixing the character to be included with a backslash. The "
"E<.Va file> may itself contain additional @ E<.Va file> options; any such "
"options will be processed recursively."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:129
#, no-wrap
msgid "-a[cdhlmns]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:131
msgid "Turn on listings, in any of a variety of ways:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:133
#, no-wrap
msgid "-ac"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:135
msgid "omit false conditionals"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:136
#, no-wrap
msgid "-ad"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:138
msgid "omit debugging directives"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:139
#, no-wrap
msgid "-ah"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:141
msgid "include high-level source"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:142
#, no-wrap
msgid "-al"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:144
msgid "include assembly"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:145
#, no-wrap
msgid "-am"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:147
msgid "include macro expansions"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:148
#, no-wrap
msgid "-an"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:150
msgid "omit forms processing"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:151
#, no-wrap
msgid "-as"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:153
msgid "include symbols"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:154
#, no-wrap
msgid "=file"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:156
msgid "set the name of the listing file"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:166
msgid ""
"You may combine these options; for example, use E<.Li -aln> for assembly "
"listing without forms processing. The E<.Li =file> option, if used, must be "
"the last one. By itself, E<.Li -a> defaults to E<.Li -ahls>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:167
#, no-wrap
msgid "--alternate"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:170
msgid "Begin in alternate macro mode.See Section E<.Dq Altmacro>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:171
#, no-wrap
msgid "-D"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:174
msgid ""
"Ignored. This option is accepted for script compatibility with calls to "
"other assemblers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:175
#, no-wrap
msgid "--defsym Va sym= Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:190
msgid ""
"Define the symbol E<.Va sym> to be E<.Va value> before assembling the input "
"file.  E<.Va value> must be an integer constant. As in C, a leading E<.Li "
"0x> indicates a hexadecimal value, and a leading E<.Li 0> indicates an octal "
"value. The value of the symbol can be overridden inside a source file via "
"the use of a E<.Li .set> pseudo-op."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:191
#, no-wrap
msgid "-f"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:194
msgid ""
"\\(lqfast\\(rq---skip whitespace and comment preprocessing (assume source is "
"compiler output)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:195
#, no-wrap
msgid "-g"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:196
#, no-wrap
msgid "--gen-debug"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:200
msgid ""
"Generate debugging information for each assembler source line using "
"whichever debug format is preferred by the target. This currently means "
"either STABS, ECOFF or DWARF2."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:201
#, no-wrap
msgid "--gstabs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:204
msgid ""
"Generate stabs debugging information for each assembler line. This may help "
"debugging assembler code, if the debugger can handle it."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:205
#, no-wrap
msgid "--gstabs+"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:211
msgid ""
"Generate stabs debugging information for each assembler line, with GNU "
"extensions that probably only gdb can handle, and that could make other "
"debuggers crash or refuse to read your program. This may help debugging "
"assembler code. Currently the only GNU extension is the location of the "
"current working directory at assembling time."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:212
#, no-wrap
msgid "--gdwarf-2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:216
msgid ""
"Generate DWARF2 debugging information for each assembler line. This may help "
"debugging assembler code, if the debugger can handle it. Note---this option "
"is only supported by some targets, not all of them."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:217
#, no-wrap
msgid "--help"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:219
msgid "Print a summary of the command line options and exit."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:220
#, no-wrap
msgid "--target-help"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:222
msgid "Print a summary of all target specific options and exit."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:223
#, no-wrap
msgid "-I Va dir"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:229
msgid "Add directory E<.Va dir> to the search list for E<.Li .include> directives."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:230
#, no-wrap
msgid "-J"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:232
msgid "Don't warn about signed overflow."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:233
#, no-wrap
msgid "-K"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:235
msgid "This option is accepted but has no effect on the machine specific family."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:236
#, no-wrap
msgid "-L"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:237
#, no-wrap
msgid "--keep-locals"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:245
msgid ""
"Keep (in the symbol table) local symbols. These symbols start with "
"system-specific local label prefixes, typically E<.Li .L> for ELF systems or "
"E<.Li L> for traditional a.out systems.See Section E<.Dq Symbol Names>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:246
#, no-wrap
msgid "--listing-lhs-width= Va number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:250
msgid ""
"Set the maximum width, in words, of the output data column for an assembler "
"listing to E<.Va number>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:251
#, no-wrap
msgid "--listing-lhs-width2= Va number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:255
msgid ""
"Set the maximum width, in words, of the output data column for continuation "
"lines in an assembler listing to E<.Va number>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:256
#, no-wrap
msgid "--listing-rhs-width= Va number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:261
msgid ""
"Set the maximum width of an input source line, as displayed in a listing, to "
"E<.Va number> bytes."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:262
#, no-wrap
msgid "--listing-cont-lines= Va number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:267
msgid ""
"Set the maximum number of lines printed in a listing for a single line of "
"input to E<.Va number> + 1."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:268
#, no-wrap
msgid "-o Va objfile"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:272
msgid "Name the object-file output from E<.Xr as> E<.Va objfile>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:273
#, no-wrap
msgid "-R"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:275
msgid "Fold the data section into the text section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:282
msgid ""
"Set the default size of GAS's hash tables to a prime number close to E<.Va "
"number>.  Increasing this value can reduce the length of time it takes the "
"assembler to perform its tasks, at the expense of increasing the assembler's "
"memory requirements. Similarly reducing this value can reduce the memory "
"requirements at the expense of speed."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:283
#, no-wrap
msgid "--reduce-memory-overheads"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:288
msgid ""
"This option reduces GAS's memory requirements, at the expense of making the "
"assembly processes slower. Currently this switch is a synonym for E<.Li "
"--hash-size=4051>, but in the future it may have other effects as well."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:289
#, no-wrap
msgid "--statistics"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:291
msgid ""
"Print the maximum space (in bytes) and total time (in seconds) used by "
"assembly."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:292
#, no-wrap
msgid "--strip-local-absolute"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:294
msgid "Remove local absolute symbols from the outgoing symbol table."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:295
#, no-wrap
msgid "-v"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:296
#, no-wrap
msgid "-version"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:300
msgid "Print the E<.Xr as> version."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:301
#, no-wrap
msgid "--version"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:305
msgid "Print the E<.Xr as> version and exit."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:306
#, no-wrap
msgid "-W"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:307
#, no-wrap
msgid "--no-warn"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:309
msgid "Suppress warning messages."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:310
#, no-wrap
msgid "--fatal-warnings"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:312
msgid "Treat warnings as errors."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:313
#, no-wrap
msgid "--warn"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:315
msgid "Don't suppress warning messages or treat them as errors."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:316
#, no-wrap
msgid "-w"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:318 /usr/src/contrib/binutils/gas/doc/as.7:321
msgid "Ignored."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:319 /usr/src/contrib/binutils/gas/doc/as.7:6697
#, no-wrap
msgid "-x"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:322
#, no-wrap
msgid "-Z"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:324
msgid "Generate an object file even after errors."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:325
#, no-wrap
msgid "-- | Va files ..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:327
msgid "Standard input, or source files to assemble."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:331
msgid ""
"The following options are available when as is configured for the ARM "
"processor family."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:333 /usr/src/contrib/binutils/gas/doc/as.7:4862
#, no-wrap
msgid "-mcpu= Va processor[+ Va extension...]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:335
msgid "Specify which ARM processor variant is the target."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:335 /usr/src/contrib/binutils/gas/doc/as.7:4962
#, no-wrap
msgid "-march= Va architecture[+ Va extension...]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:337
msgid "Specify which ARM architecture variant is used by the target."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:337 /usr/src/contrib/binutils/gas/doc/as.7:5006
#, no-wrap
msgid "-mfpu= Va floating-point-format"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:339
msgid "Select which Floating Point architecture is the target."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:339 /usr/src/contrib/binutils/gas/doc/as.7:5072
#, no-wrap
msgid "-mfloat-abi= Va abi"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:341
msgid "Select which floating point ABI is in use."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:341 /usr/src/contrib/binutils/gas/doc/as.7:5042
#, no-wrap
msgid "-mthumb"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:343
msgid "Enable Thumb only instruction decoding."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:343
#, no-wrap
msgid "-mapcs-32 | -mapcs-26 | -mapcs-float | -mapcs-reentrant"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:345
msgid "Select which procedure calling convention is in use."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:345
#, no-wrap
msgid "-EB | -EL"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:347
msgid "Select either big-endian (-EB) or little-endian (-EL) output."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:347 /usr/src/contrib/binutils/gas/doc/as.7:5048
#, no-wrap
msgid "-mthumb-interwork"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:350
msgid ""
"Specify that the code has been generated with interworking between Thumb and "
"ARM code in mind."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:350 /usr/src/contrib/binutils/gas/doc/as.7:5096
#, no-wrap
msgid "-k"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:352
msgid "Specify that PIC code has been generated."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:357
msgid ""
"The following options are available when E<.Xr as> is configured for the "
"SPARC architecture:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:359 /usr/src/contrib/binutils/gas/doc/as.7:7569
#, no-wrap
msgid "-Av6 | -Av7 | -Av8 | -Asparclet | -Asparclite"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:360 /usr/src/contrib/binutils/gas/doc/as.7:7570
#, no-wrap
msgid "-Av8plus | -Av8plusa | -Av9 | -Av9a"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:362
msgid "Explicitly select a variant of the SPARC architecture."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:371
msgid ""
"E<.Li -Av8plus> and E<.Li -Av8plusa> select a 32 bit environment.  E<.Li "
"-Av9> and E<.Li -Av9a> select a 64 bit environment."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:376 /usr/src/contrib/binutils/gas/doc/as.7:7594
msgid ""
"E<.Li -Av8plusa> and E<.Li -Av9a> enable the SPARC V9 instruction set with "
"UltraSPARC extensions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:377 /usr/src/contrib/binutils/gas/doc/as.7:7595
#, no-wrap
msgid "-xarch=v8plus | -xarch=v8plusa"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:380 /usr/src/contrib/binutils/gas/doc/as.7:7598
msgid ""
"For compatibility with the Solaris v9 assembler. These options are "
"equivalent to -Av8plus and -Av8plusa, respectively."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:381 /usr/src/contrib/binutils/gas/doc/as.7:7599
#, no-wrap
msgid "-bump"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:383
msgid "Warn when the assembler switches to another architecture."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:386
msgid ""
"The following options are available when as is configured for a mips "
"processor."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:388 /usr/src/contrib/binutils/gas/doc/as.7:6822
#, no-wrap
msgid "-G Va num"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:394
msgid ""
"This option sets the largest size of an object that can be referenced "
"implicitly with the E<.Li gp> register. It is only accepted for targets that "
"use ECOFF format, such as a DECstation running Ultrix. The default value is "
"8."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:395 /usr/src/contrib/binutils/gas/doc/as.7:5088 /usr/src/contrib/binutils/gas/doc/as.7:6829
#, no-wrap
msgid "-EB"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:397
msgid "Generate \\(lqbig endian\\(rq format output."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:398 /usr/src/contrib/binutils/gas/doc/as.7:5092 /usr/src/contrib/binutils/gas/doc/as.7:6830
#, no-wrap
msgid "-EL"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:400
msgid "Generate \\(lqlittle endian\\(rq format output."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:401 /usr/src/contrib/binutils/gas/doc/as.7:6849
#, no-wrap
msgid "-mips1"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:402 /usr/src/contrib/binutils/gas/doc/as.7:6850
#, no-wrap
msgid "-mips2"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:403 /usr/src/contrib/binutils/gas/doc/as.7:6851
#, no-wrap
msgid "-mips3"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:404 /usr/src/contrib/binutils/gas/doc/as.7:6852
#, no-wrap
msgid "-mips4"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:405 /usr/src/contrib/binutils/gas/doc/as.7:6853
#, no-wrap
msgid "-mips5"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:406 /usr/src/contrib/binutils/gas/doc/as.7:6854
#, no-wrap
msgid "-mips32"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:407 /usr/src/contrib/binutils/gas/doc/as.7:6855
#, no-wrap
msgid "-mips32r2"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:408 /usr/src/contrib/binutils/gas/doc/as.7:6856
#, no-wrap
msgid "-mips64"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:409 /usr/src/contrib/binutils/gas/doc/as.7:6857
#, no-wrap
msgid "-mips64r2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:438
msgid ""
"Generate code for a particular mips Instruction Set Architecture level.  "
"E<.Li -mips1> is an alias for E<.Li -march=r3000>, E<.Li -mips2> is an alias "
"for E<.Li -march=r6000>, E<.Li -mips3> is an alias for E<.Li -march=r4000> "
"and E<.Li -mips4> is an alias for E<.Li -march=r8000>.  E<.Li -mips5>, E<.Li "
"-mips32>, E<.Li -mips32r2>, E<.Li -mips64>, and E<.Li -mips64r2> correspond "
"to generic E<.Li MIPS V>, E<.Li MIPS32>, E<.Li MIPS32 Release 2>, E<.Li "
"MIPS64>, and E<.Li MIPS64 Release 2> ISA processors, respectively."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:439 /usr/src/contrib/binutils/gas/doc/as.7:5598
#, no-wrap
msgid "-march= Va CPU"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:441
msgid "Generate code for a particular mips cpu."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:442 /usr/src/contrib/binutils/gas/doc/as.7:7053
#, no-wrap
msgid "-mtune= Va cpu"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:444
msgid "Schedule and tune for a particular mips cpu."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:445 /usr/src/contrib/binutils/gas/doc/as.7:6973
#, no-wrap
msgid "-mfix7000"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:446 /usr/src/contrib/binutils/gas/doc/as.7:6974
#, no-wrap
msgid "-mno-fix7000"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:449 /usr/src/contrib/binutils/gas/doc/as.7:6977
msgid ""
"Cause nops to be inserted if the read of the destination register of an mfhi "
"or mflo instruction occurs in the following two instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:450
#, no-wrap
msgid "-mdebug"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:451
#, no-wrap
msgid "-no-mdebug"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:454
msgid ""
"Cause stabs-style debugging output to go into an ECOFF-style .mdebug section "
"instead of the standard ELF .stabs sections."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:455 /usr/src/contrib/binutils/gas/doc/as.7:7115
#, no-wrap
msgid "-mpdr"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:456 /usr/src/contrib/binutils/gas/doc/as.7:7116
#, no-wrap
msgid "-mno-pdr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:460
msgid "Control generation of E<.Li .pdr> sections."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:461 /usr/src/contrib/binutils/gas/doc/as.7:6877
#, no-wrap
msgid "-mgp32"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:462 /usr/src/contrib/binutils/gas/doc/as.7:6878
#, no-wrap
msgid "-mfp32"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:469
msgid ""
"The register sizes are normally inferred from the ISA and ABI, but these "
"flags force a certain group of registers to be treated as 32 bits wide at "
"all times.  E<.Li -mgp32> controls the size of general-purpose registers and "
"E<.Li -mfp32> controls the size of floating-point registers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:470 /usr/src/contrib/binutils/gas/doc/as.7:6920
#, no-wrap
msgid "-mips16"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:471 /usr/src/contrib/binutils/gas/doc/as.7:6921
#, no-wrap
msgid "-no-mips16"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:477 /usr/src/contrib/binutils/gas/doc/as.7:6927
msgid ""
"Generate code for the MIPS 16 processor. This is equivalent to putting E<.Li "
".set mips16> at the start of the assembly file.  E<.Li -no-mips16> turns off "
"this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:478 /usr/src/contrib/binutils/gas/doc/as.7:6928
#, no-wrap
msgid "-msmartmips"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:479 /usr/src/contrib/binutils/gas/doc/as.7:6929
#, no-wrap
msgid "-mno-smartmips"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:486
msgid ""
"Enables the SmartMIPS extension to the MIPS32 instruction set. This is "
"equivalent to putting E<.Li .set smartmips> at the start of the assembly "
"file.  E<.Li -mno-smartmips> turns off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:487 /usr/src/contrib/binutils/gas/doc/as.7:6938
#, no-wrap
msgid "-mips3d"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:488 /usr/src/contrib/binutils/gas/doc/as.7:6939
#, no-wrap
msgid "-no-mips3d"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:493 /usr/src/contrib/binutils/gas/doc/as.7:6944
msgid ""
"Generate code for the MIPS-3D Application Specific Extension. This tells the "
"assembler to accept MIPS-3D instructions.  E<.Li -no-mips3d> turns off this "
"option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:494 /usr/src/contrib/binutils/gas/doc/as.7:6945
#, no-wrap
msgid "-mdmx"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:495 /usr/src/contrib/binutils/gas/doc/as.7:6946
#, no-wrap
msgid "-no-mdmx"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:500 /usr/src/contrib/binutils/gas/doc/as.7:6951
msgid ""
"Generate code for the MDMX Application Specific Extension. This tells the "
"assembler to accept MDMX instructions.  E<.Li -no-mdmx> turns off this "
"option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:501 /usr/src/contrib/binutils/gas/doc/as.7:6952
#, no-wrap
msgid "-mdsp"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:502 /usr/src/contrib/binutils/gas/doc/as.7:6953
#, no-wrap
msgid "-mno-dsp"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:507 /usr/src/contrib/binutils/gas/doc/as.7:6958
msgid ""
"Generate code for the DSP Release 1 Application Specific Extension. This "
"tells the assembler to accept DSP Release 1 instructions.  E<.Li -mno-dsp> "
"turns off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:508 /usr/src/contrib/binutils/gas/doc/as.7:6959
#, no-wrap
msgid "-mdspr2"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:509 /usr/src/contrib/binutils/gas/doc/as.7:6960
#, no-wrap
msgid "-mno-dspr2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:514 /usr/src/contrib/binutils/gas/doc/as.7:6965
msgid ""
"Generate code for the DSP Release 2 Application Specific Extension. This "
"option implies -mdsp. This tells the assembler to accept DSP Release 2 "
"instructions.  E<.Li -mno-dspr2> turns off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:515 /usr/src/contrib/binutils/gas/doc/as.7:6966
#, no-wrap
msgid "-mmt"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:516 /usr/src/contrib/binutils/gas/doc/as.7:6967
#, no-wrap
msgid "-mno-mt"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:521 /usr/src/contrib/binutils/gas/doc/as.7:6972
msgid ""
"Generate code for the MT Application Specific Extension. This tells the "
"assembler to accept MT instructions.  E<.Li -mno-mt> turns off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:522 /usr/src/contrib/binutils/gas/doc/as.7:7085
#, no-wrap
msgid "--construct-floats"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:523 /usr/src/contrib/binutils/gas/doc/as.7:7086
#, no-wrap
msgid "--no-construct-floats"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:531
msgid ""
"The E<.Li --no-construct-floats> option disables the construction of double "
"width floating point constants by loading the two halves of the value into "
"the two single width floating point registers that make up the double width "
"register. By default E<.Li --construct-floats> is selected, allowing "
"construction of these floating point constants."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:532
#, no-wrap
msgid "--emulation= Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:558
msgid ""
"This option causes E<.Xr as> to emulate E<.Xr as> configured for some other "
"target, in all respects, including output format (choosing between ELF and "
"ECOFF only), handling of pseudo-opcodes which may generate debugging "
"information or store symbol table information, and default endianness. The "
"available configuration names are: E<.Li mipsecoff>, E<.Li mipself>, E<.Li "
"mipslecoff>, E<.Li mipsbecoff>, E<.Li mipslelf>, E<.Li mipsbelf>.  The first "
"two do not alter the default endianness from that of the primary target for "
"which the assembler was configured; the others change the default to little- "
"or big-endian as indicated by the E<.Li b> or E<.Li l> in the name. Using "
"E<.Li -EB> or E<.Li -EL> will override the endianness selection in any case."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:567
msgid ""
"This option is currently supported only when the primary target E<.Xr as> is "
"configured for is a mips ELF or ECOFF target. Furthermore, the primary "
"target or others specified with E<.Li --enable-targets=...> at configuration "
"time must include support for the other format, if both are to be "
"available. For example, the Irix 5 configuration includes support for both."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:570
msgid ""
"Eventually, this option will support more configurations, with more "
"fine-grained control over the assembler's behavior, and will be supported "
"for more processors."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:571 /usr/src/contrib/binutils/gas/doc/as.7:7077
#, no-wrap
msgid "-nocpp"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:574
msgid ""
"E<.Xr as> ignores this option. It is accepted for compatibility with the "
"native tools."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:575 /usr/src/contrib/binutils/gas/doc/as.7:7100
#, no-wrap
msgid "--trap"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:576 /usr/src/contrib/binutils/gas/doc/as.7:7111
#, no-wrap
msgid "--no-trap"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:577 /usr/src/contrib/binutils/gas/doc/as.7:7110
#, no-wrap
msgid "--break"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:578 /usr/src/contrib/binutils/gas/doc/as.7:7101
#, no-wrap
msgid "--no-break"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:589
msgid ""
"Control how to deal with multiplication overflow and division by zero.  "
"E<.Li --trap> or E<.Li --no-break> (which are synonyms) take a trap "
"exception (and only work for Instruction Set Architecture level 2 and "
"higher); E<.Li --break> or E<.Li --no-trap> (also synonyms, and the default) "
"take a break exception."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:590 /usr/src/contrib/binutils/gas/doc/as.7:5579
#, no-wrap
msgid "-n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:594
msgid ""
"When this option is used, E<.Xr as> will issue a warning every time it "
"generates a nop instruction from a macro."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:596
#, no-wrap
msgid "Structure of this Manual"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:604
msgid ""
"This manual is intended to describe what you need to know to use GNU E<.Xr "
"as>.  We cover the syntax expected in source files, including notation for "
"symbols, constants, and expressions; the directives that E<.Xr as> "
"understands; and of course how to invoke E<.Xr as>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:608
msgid ""
"We also cover special features in the machine specific configuration of "
"E<.Xr as>, including assembler directives."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:617
msgid ""
"On the other hand, this manual is E<.Em not> intended as an introduction to "
"programming in assembly language---let alone programming in general! In a "
"similar vein, we make no attempt to introduce the machine architecture; we "
"do E<.Em not> describe the instruction set, standard mnemonics, registers or "
"addressing modes that are standard to a particular architecture."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:618
#, no-wrap
msgid "The GNU Assembler"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:630
msgid ""
"GNU E<.Xr as> is really a family of assemblers. This manual describes E<.Xr "
"as>, a member of that family which is configured for the machine specific "
"architectures.  If you use (or have used) the GNU assembler on one "
"architecture, you should find a fairly similar environment when you use it "
"on another architecture.  Each version has much in common with the others, "
"including object file formats, most assembler directives (often called E<.Em "
"pseudo-ops>)  and assembler syntax."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:640
msgid ""
"E<.Xr as> is primarily intended to assemble the output of the GNU C compiler "
"E<.Li gcc> for use by the linker E<.Li ld>.  Nevertheless, we've tried to "
"make E<.Xr as> assemble correctly everything that other assemblers for the "
"same machine would assemble."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:648
msgid ""
"Unlike older assemblers, E<.Xr as> is designed to assemble a source program "
"in one pass of the source file. This has a subtle impact on the E<.Li .org> "
"directive (see Section E<.Dq Org>)."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:649
#, no-wrap
msgid "Object File Formats"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:658
msgid ""
"The GNU assembler can be configured to produce several alternative object "
"file formats. For the most part, this does not affect how you write assembly "
"language programs; but directives for debugging symbols are typically "
"different in different file formats.See Section E<.Dq Symbol Attributes>.  "
"For the machine specific target, E<.Xr as> is configured to produce ELF "
"format object files."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:659
#, no-wrap
msgid "Command Line"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:665
msgid ""
"After the program name E<.Xr as>, the command line may contain options and "
"file names. Options may appear in any order, and may be before, after, or "
"between file names. The order of file names is significant."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:671
msgid ""
"E<.Pa --> (two hyphens) by itself names the standard input file explicitly, "
"as one of the files for E<.Xr as> to assemble."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:682
msgid ""
"Except for E<.Li --> any command line argument that begins with a hyphen ( "
"E<.Li ->)  is an option. Each option changes the behavior of E<.Xr as>.  No "
"option changes the way another option works. An option is a E<.Li -> "
"followed by one or more letters; the case of the letter is important. All "
"options are optional."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:687
msgid ""
"Some options expect exactly one file name to follow them. The file name may "
"either immediately follow the option's letter (compatible with older "
"assemblers)  or it may be the next command argument (GNU standard). These "
"two command lines are equivalent:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:691
#, no-wrap
msgid ""
"as -o my-object-file.o mumble.s\n"
"as -omy-object-file.o mumble.s\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:693
#, no-wrap
msgid "Input Files"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:702
msgid ""
"We use the phrase E<.Em source program>, abbreviated E<.Em source>, to "
"describe the program input to one run of E<.Xr as>.  The program may be in "
"one or more files; how the source is partitioned into files doesn't change "
"the meaning of the source."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:705
msgid ""
"The source program is a concatenation of the text in all the files, in the "
"order specified."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:710
msgid ""
"Each time you run E<.Xr as> it assembles exactly one source program. The "
"source program is made up of one or more files. (The standard input is also "
"a file.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:716
msgid ""
"You give E<.Xr as> a command line that has zero or more input file "
"names. The input files are read (from left file name to right). A command "
"line argument (in any position)  that has no special meaning is taken to be "
"an input file name."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:725
msgid ""
"If you give E<.Xr as> no file names it attempts to read one input file from "
"the E<.Xr as> standard input, which is normally your terminal. You may have "
"to type ctl-D to tell E<.Xr as> there is no more program to assemble."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:729
msgid ""
"Use E<.Li --> if you need to explicitly name the standard input file in your "
"command line."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:733
msgid "If the source is empty, E<.Xr as> produces a small, empty object file."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:735
msgid "E<.Em Filenames and Line-numbers>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:740
msgid ""
"There are two ways of locating a line in the input file (or files) and "
"either may be used in reporting error messages. One way refers to a line "
"number in a physical file; the other refers to a line number in a "
"\\(lqlogical\\(rq file.See Section E<.Dq Errors>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:744
msgid ""
"E<.Em Physical files> are those files named in the command line given to "
"E<.Xr as>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:759
msgid ""
"E<.Em Logical files> are simply names declared explicitly by assembler "
"directives; they bear no relation to physical files. Logical file names help "
"error messages reflect the original source file, when E<.Xr as> source is "
"itself synthesized from other files.  E<.Xr as> understands the E<.Li #> "
"directives emitted by the E<.Li gcc> preprocessor. See also File,, E<.Li "
".file> \\&."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:760
#, no-wrap
msgid "Output (Object) File"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:775
msgid ""
"Every time you run E<.Xr as> it produces an output file, which is your "
"assembly language program translated into numbers. This file is the object "
"file. Its default name is E<.Li a.out>.  You can give it another name by "
"using the E<.Op -o> option. Conventionally, object file names end with E<.Pa "
".o>.  The default name is used for historical reasons: older assemblers were "
"capable of assembling self-contained programs directly into a runnable "
"program. (For some formats, this isn't currently possible, but it can be "
"done for the E<.Li a.out> format.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:782
msgid ""
"The object file is meant for input to the linker E<.Li ld>.  It contains "
"assembled program code, information to help E<.Li ld> integrate the "
"assembled program into a runnable file, and (optionally) symbolic "
"information for the debugger."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:783
#, no-wrap
msgid "Error and Warning Messages"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:792
msgid ""
"E<.Xr as> may write warnings and error messages to the standard error file "
"(usually your terminal). This should not happen when a compiler runs E<.Xr "
"as> automatically. Warnings report an assumption made so that E<.Xr as> "
"could keep assembling a flawed program; errors report a grave problem that "
"stops the assembly."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:794
msgid "Warning messages have the format"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:797
#, no-wrap
msgid "file_name:NNN:Warning Message Text\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:807
msgid ""
"(where E<.Sy NNN> is a line number). If a logical file name has been given "
"(see Section E<.Dq File>)  it is used for the filename, otherwise the name "
"of the current input file is used. If a logical line number was given then "
"it is used to calculate the number printed, otherwise the actual line in the "
"current source file is printed.  The message text is intended to be self "
"explanatory (in the grand Unix tradition)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:809
msgid "Error messages have the format"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:811
#, no-wrap
msgid "file_name:NNN:FATAL:Error Message Text\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:815
msgid ""
"The file name and line number are derived as for warning messages. The "
"actual message text may be rather less explanatory because many of them "
"aren't supposed to happen."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:816
#, no-wrap
msgid "Command-Line Options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:821
msgid ""
"This chapter describes command-line options available in E<.Em all> versions "
"of the GNU assembler; see Machine Dependencies, for options specific to the "
"machine specific target."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:830
msgid ""
"If you are invoking E<.Xr as> via the GNU C compiler, you can use the E<.Li "
"-Wa> option to pass arguments through to the assembler. The assembler "
"arguments must be separated from each other (and the E<.Li -Wa>)  by "
"commas. For example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:833
#, no-wrap
msgid "gcc -c -g -O -Wa,-alh,-L file.c\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:840
msgid ""
"This passes two options to the assembler: E<.Li -alh> (emit a listing to "
"standard output with high-level and assembly source) and E<.Li -L> (retain "
"local symbols in the symbol table)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:849
msgid ""
"Usually you do not need to use this E<.Li -Wa> mechanism, since many "
"compiler command-line options are automatically passed to the assembler by "
"the compiler. (You can call the GNU compiler driver with the E<.Li -v> "
"option to see precisely what options it passes to each compilation pass, "
"including the assembler.)"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:850
#, no-wrap
msgid "Enable Listings: Op -a[cdhlns]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:866
msgid ""
"These options enable listing output from the assembler. By itself, E<.Li -a> "
"requests high-level, assembly, and symbols listing. You can use other "
"letters to select specific options for the list: E<.Li -ah> requests a "
"high-level language listing, E<.Li -al> requests an output-program assembly "
"listing, and E<.Li -as> requests a symbol table listing. High-level listings "
"require that a compiler debugging option like E<.Li -g> be used, and that "
"assembly listings ( E<.Li -al>)  be requested also."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:879
msgid ""
"Use the E<.Li -ac> option to omit false conditionals from a listing. Any "
"lines which are not assembled because of a false E<.Li .if> (or E<.Li "
".ifdef>, or any other conditional), or a true E<.Li .if> followed by an "
"E<.Li .else>, will be omitted from the listing."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:883
msgid "Use the E<.Li -ad> option to omit debugging directives from the listing."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:899
msgid ""
"Once you have specified one of these options, you can further control "
"listing output and its appearance using the directives E<.Li .list>, E<.Li "
".nolist>, E<.Li .psize>, E<.Li .eject>, E<.Li .title>, and E<.Li .sbttl>.  "
"The E<.Li -an> option turns off all forms processing. If you do not request "
"listing output with one of the E<.Li -a> options, the listing-control "
"directives have no effect."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:905
msgid ""
"The letters after E<.Li -a> may be combined into one option, E<.Em e.g.>, "
"E<.Li -aln>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:915
msgid ""
"Note if the assembler source is coming from the standard input (e.g., "
"because it is being created by E<.Li gcc> and the E<.Li -pipe> command line "
"switch is being used) then the listing will not contain any comments or "
"preprocessor directives. This is because the listing code buffers input "
"source lines from stdin only after they have been preprocessed by the "
"assembler.  This reduces memory usage and makes the code more efficient."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:916
#, no-wrap
msgid "Op --alternate"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:920
msgid "Begin in alternate macro mode, see Altmacro,, E<.Li .altmacro> \\&."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:921
#, no-wrap
msgid "Op -D"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:925
msgid ""
"This option has no effect whatsoever, but it is accepted to make it more "
"likely that scripts written for other assemblers also work with E<.Xr as>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:926
#, no-wrap
msgid "Work Faster: Op -f"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:933
msgid ""
"E<.Li -f> should only be used when assembling programs written by a "
"(trusted) compiler.  E<.Li -f> stops the assembler from doing whitespace and "
"comment preprocessing on the input file(s) before assembling them.See "
"Section E<.Dq Preprocessing>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:943
msgid ""
"E<.Qo> E<.Em Warning:> if you use E<.Li -f> when the files actually need to "
"be preprocessed (if they contain comments, for example), E<.Xr as> does not "
"work correctly.  E<.Qc>"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:944
#, no-wrap
msgid "Li .include Search Path: Op -I Va path"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:962
msgid ""
"Use this option to add a E<.Va path> to the list of directories E<.Xr as> "
"searches for files specified in E<.Li .include> directives (see Section "
"E<.Dq Include>).  You may use E<.Op -I> as many times as necessary to "
"include a variety of paths. The current working directory is always searched "
"first; after that, E<.Xr as> searches any E<.Li -I> directories in the same "
"order as they were specified (left to right) on the command line."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:963
#, no-wrap
msgid "Difference Tables: Op -K"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:972
msgid ""
"On the machine specific family, this option is allowed, but has no effect.  "
"It is permitted for compatibility with the GNU assembler on other platforms, "
"where it can be used to warn when the assembler alters the machine code "
"generated for E<.Li .word> directives in difference tables. The machine "
"specific family does not have the addressing limitations that sometimes lead "
"to this alteration on other platforms."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:973
#, no-wrap
msgid "Include Local Symbols: Op -L"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:988
msgid ""
"Symbols beginning with system-specific local label prefixes, typically E<.Li "
".L> for ELF systems or E<.Li L> for traditional a.out systems, are called "
"E<.Em local symbols>.  See Section.Dq Symbol Names .  Normally you do not "
"see such symbols when debugging, because they are intended for the use of "
"programs (like compilers) that compose assembler programs, not for your "
"notice. Normally both E<.Xr as> and E<.Li ld> discard such symbols, so you "
"do not normally debug with them."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:995
msgid ""
"This option tells E<.Xr as> to retain those local symbols in the object "
"file. Usually if you do this you also tell the linker E<.Li ld> to preserve "
"those symbols."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:996
#, no-wrap
msgid "Configuring listing output: Op --listing"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1022
msgid ""
"The listing feature of the assembler can be enabled via the command line "
"switch E<.Li -a> (see Section E<.Dq a>).  This feature combines the input "
"source file(s) with a hex dump of the corresponding locations in the output "
"object file, and displays them as a listing file.  The format of this "
"listing can be controlled by directives inside the assembler source (i.e., "
"E<.Li .list> (see Section E<.Dq List>), E<.Li .title> (see Section E<.Dq "
"Title>), E<.Li .sbttl> (see Section E<.Dq Sbttl>), E<.Li .psize> (see "
"Section E<.Dq Psize>), and E<.Li .eject> (see Section E<.Dq Eject>)  and "
"also by the following switches:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1024
#, no-wrap
msgid "--listing-lhs-width= Li number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1027
msgid ""
"Sets the maximum width, in words, of the first line of the hex byte dump.  "
"This dump appears on the left hand side of the listing output."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1028
#, no-wrap
msgid "--listing-lhs-width2= Li number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1034
msgid ""
"Sets the maximum width, in words, of any further lines of the hex byte dump "
"for a given input source line. If this value is not specified, it defaults "
"to being the same as the value specified for E<.Li --listing-lhs-width>.  If "
"neither switch is used the default is to one."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1035
#, no-wrap
msgid "--listing-rhs-width= Li number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1039
msgid ""
"Sets the maximum width, in characters, of the source line that is displayed "
"alongside the hex dump. The default value for this parameter is 100. The "
"source line is displayed on the right hand side of the listing output."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1040
#, no-wrap
msgid "--listing-cont-lines= Li number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1043
msgid ""
"Sets the maximum number of continuation lines of hex dump that will be "
"displayed for a given single line of source input. The default value is 4."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1045
#, no-wrap
msgid "Assemble in MRI Compatibility Mode: Op -M"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1063
msgid ""
"The E<.Op -M> or E<.Op --mri> option selects MRI compatibility mode. This "
"changes the syntax and pseudo-op handling of E<.Xr as> to make it compatible "
"with the E<.Li ASM68K> or the E<.Li ASM960> (depending upon the configured "
"target) assembler from Microtec Research. The exact nature of the MRI syntax "
"will not be documented here; see the MRI manuals for more information. Note "
"in particular that the handling of macros and macro arguments is somewhat "
"different. The purpose of this option is to permit assembling existing MRI "
"assembler code using E<.Xr as>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1068
msgid ""
"The MRI compatibility is not complete. Certain operations of the MRI "
"assembler depend upon its object file format, and can not be supported using "
"other object file formats. Supporting these would require enhancing each "
"object file format individually. These are:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1072
msgid "global symbols in common section"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1079
msgid ""
"The m68k MRI assembler supports common sections which are merged by the "
"linker.  Other object file formats do not support this.  E<.Xr as> handles "
"common sections by treating them as a single common symbol. It permits local "
"symbols to be defined within a common section, but it can not support global "
"symbols, since it has no way to describe them."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1082
msgid "complex relocations"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1086
msgid ""
"The MRI assemblers support relocations against a negated section address, "
"and relocations which combine the start addresses of two or more sections.  "
"These are not support by other object file formats."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1090
msgid "E<.Li END> pseudo-op specifying start address"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1098
msgid ""
"The MRI E<.Li END> pseudo-op permits the specification of a start "
"address. This is not supported by other object file formats. The start "
"address may instead be specified using the E<.Op -e> option to the linker, "
"or in a linker script."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1105
msgid "E<.Li IDNT>, E<.Li .ident> and E<.Li NAME> pseudo-ops"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1113
msgid ""
"The MRI E<.Li IDNT>, E<.Li .ident> and E<.Li NAME> pseudo-ops assign a "
"module name to the output file. This is not supported by other object file "
"formats."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1117
msgid "E<.Li ORG> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1127
msgid ""
"The m68k MRI E<.Li ORG> pseudo-op begins an absolute section at a given "
"address. This differs from the usual E<.Xr as> E<.Li .org> pseudo-op, which "
"changes the location within the current section. Absolute sections are not "
"supported by other object file formats. The address of a section may be "
"assigned within a linker script."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1134
msgid ""
"There are some other features of the MRI assembler which are not supported "
"by E<.Xr as>, typically either because they are difficult or because they "
"seem of little consequence. Some of these may be supported in future "
"releases."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1138
msgid "EBCDIC strings"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1140
msgid "EBCDIC strings are not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1143
msgid "packed binary coded decimal"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1149
msgid ""
"Packed binary coded decimal is not supported. This means that the E<.Li "
"DC.P> and E<.Li DCB.P> pseudo-ops are not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1153
msgid "E<.Li FEQU> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1157
msgid "The m68k E<.Li FEQU> pseudo-op is not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1161
msgid "E<.Li NOOBJ> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1165
msgid "The m68k E<.Li NOOBJ> pseudo-op is not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1169
msgid "E<.Li OPT> branch control options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1183
msgid ""
"The m68k E<.Li OPT> branch control options--- E<.Li B>, E<.Li BRS>, E<.Li "
"BRB>, E<.Li BRL>, and E<.Li BRW> ---are ignored.  E<.Xr as> automatically "
"relaxes all branches, whether forward or backward, to an appropriate size, "
"so these options serve no purpose."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1187
msgid "E<.Li OPT> list control options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1203
msgid ""
"The following m68k E<.Li OPT> list control options are ignored: E<.Li C>, "
"E<.Li CEX>, E<.Li CL>, E<.Li CRE>, E<.Li E>, E<.Li G>, E<.Li I>, E<.Li M>, "
"E<.Li MEX>, E<.Li MC>, E<.Li MD>, E<.Li X>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1208
msgid "other E<.Li OPT> options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1221
msgid ""
"The following m68k E<.Li OPT> options are ignored: E<.Li NEST>, E<.Li O>, "
"E<.Li OLD>, E<.Li OP>, E<.Li P>, E<.Li PCO>, E<.Li PCR>, E<.Li PCS>, E<.Li "
"R>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1226
msgid "E<.Li OPT> E<.Li D> option is default"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1233
msgid ""
"The m68k E<.Li OPT> E<.Li D> option is the default, unlike the MRI "
"assembler.  E<.Li OPT NOD> may be used to turn it off."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1237
msgid "E<.Li XREF> pseudo-op."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1241
msgid "The m68k E<.Li XREF> pseudo-op is ignored."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1245
msgid "E<.Li .debug> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1249
msgid "The i960 E<.Li .debug> pseudo-op is not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1253
msgid "E<.Li .extended> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1257
msgid "The i960 E<.Li .extended> pseudo-op is not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1261
msgid "E<.Li .list> pseudo-op."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1265
msgid "The various options of the i960 E<.Li .list> pseudo-op are not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1269
msgid "E<.Li .optimize> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1273
msgid "The i960 E<.Li .optimize> pseudo-op is not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1277
msgid "E<.Li .output> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1281
msgid "The i960 E<.Li .output> pseudo-op is not supported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1285
msgid "E<.Li .setreal> pseudo-op"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1289
msgid "The i960 E<.Li .setreal> pseudo-op is not supported."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1291
#, no-wrap
msgid "Dependency Tracking: Op --MD"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1297
msgid ""
"E<.Xr as> can generate a dependency file for the file it creates. This file "
"consists of a single rule suitable for E<.Li make> describing the "
"dependencies of the main source file."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1299
msgid "The rule is written to the file named in its argument."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1301
msgid "This feature is used in the automatic updating of makefiles."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1302
#, no-wrap
msgid "Name the Object File: Op -o"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1309
msgid ""
"There is always one object file output when you run E<.Xr as>.  By default "
"it has the name E<.Pa a.out>.  You use this option (which takes exactly one "
"filename) to give the object file a different name."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1313
msgid ""
"Whatever the object file is called, E<.Xr as> overwrites any existing file "
"of the same name."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1314
#, no-wrap
msgid "Join Data and Text Sections: Op -R"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1324
msgid ""
"E<.Op -R> tells E<.Xr as> to write the object file as if all data-section "
"data lives in the text section.  This is only done at the very last moment: "
"your binary data are the same, but data section parts are relocated "
"differently. The data section part of your object file is zero bytes long "
"because all its bytes are appended to the text section. (See Section E<.Dq "
"Sections>.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1334
msgid ""
"When you specify E<.Op -R> it would be possible to generate shorter address "
"displacements (because we do not have to cross between text and data "
"section). We refrain from doing this simply for compatibility with older "
"versions of E<.Xr as>.  In future, E<.Op -R> may work this way."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1342
msgid ""
"When E<.Xr as> is configured for COFF or ELF output, this option is only "
"useful if you use sections named E<.Li .text> and E<.Li .data>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1343
#, no-wrap
msgid "Display Assembly Statistics: Op --statistics"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1350
msgid ""
"Use E<.Li --statistics> to display two statistics about the resources used "
"by E<.Xr as>: the maximum amount of space allocated during the assembly (in "
"bytes), and the total execution time taken for the assembly (in cpu "
"seconds)."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1351
#, no-wrap
msgid "Compatible Output: Op --traditional-format"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1358
msgid ""
"For some targets, the output of E<.Xr as> is different in some ways from the "
"output of some existing assembler. This switch requests E<.Xr as> to use the "
"traditional format instead."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1364
msgid ""
"For example, it disables the exception frame optimizations which E<.Xr as> "
"normally does by default on E<.Li gcc> output."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1365
#, no-wrap
msgid "Announce Version: Op -v"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1371
msgid ""
"You can find out what version of as is running by including the option E<.Li "
"-v> (which you can also spell as E<.Li -version>)  on the command line."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1372
#, no-wrap
msgid "Control Warnings: Op -W, Op --warn, Op --no-warn, Op --fatal-warnings"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1379
msgid ""
"E<.Xr as> should never give a warning or error message when assembling "
"compiler output.  But programs written by people often cause E<.Xr as> to "
"give a warning that a particular assumption was made. All such warnings are "
"directed to the standard error file."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1388
msgid ""
"If you use the E<.Op -W> and E<.Op --no-warn> options, no warnings are "
"issued. This only affects the warning messages: it does not change any "
"particular of how E<.Xr as> assembles your file. Errors, which stop the "
"assembly, are still reported."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1394
msgid ""
"If you use the E<.Op --fatal-warnings> option, E<.Xr as> considers files "
"that generate warnings to be in error."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1398
msgid ""
"You can switch these options off again by specifying E<.Op --warn>, which "
"causes warnings to be output as usual."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1399
#, no-wrap
msgid "Generate Object File in Spite of Errors: Op -Z"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1412
msgid ""
"After an error message, E<.Xr as> normally produces no output. If for some "
"reason you are interested in object file output even after E<.Xr as> gives "
"an error message on your program, use the E<.Li -Z> option. If there are any "
"errors, E<.Xr as> continues anyways, and writes an object file after a final "
"warning message of the form E<.Li Va n errors, Va m warnings, generating bad "
"object file.>"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1413 /usr/src/contrib/binutils/gas/doc/as.7:5101 /usr/src/contrib/binutils/gas/doc/as.7:6719
#, no-wrap
msgid "Syntax"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1419
msgid ""
"This chapter describes the machine-independent syntax allowed in a source "
"file.  E<.Xr as> syntax is similar to what many other assemblers use; it is "
"inspired by the BSD 4.2 assembler."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1420
#, no-wrap
msgid "Preprocessing"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1424
msgid "The E<.Xr as> internal preprocessor:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1429
msgid ""
"adjusts and removes extra whitespace. It leaves one space or tab before the "
"keywords on a line, and turns any other whitespace on the line into a single "
"space."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1433
msgid ""
"removes all comments, replacing them with a single space, or an appropriate "
"number of newlines."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1436
msgid "converts character constants into the appropriate numeric values."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1449
msgid ""
"It does not do macro processing, include file handling, or anything else you "
"may get from your C compiler's preprocessor. You can do include file "
"processing with the E<.Li .include> directive (see Section E<.Dq Include>).  "
"You can use the GNU C compiler driver to get other \\(lqCPP\\(rq style "
"preprocessing by giving the input file a E<.Li .S> suffix.See Section E<.Dq "
"Overall Options>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1452
msgid ""
"Excess whitespace, comments, and character constants cannot be used in the "
"portions of the input text that are not preprocessed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1467
msgid ""
"If the first line of an input file is E<.Li #NO_APP> or if you use the E<.Li "
"-f> option, whitespace and comments are not removed from the input "
"file. Within an input file, you can ask for whitespace and comment removal "
"in specific portions of the by putting a line that says E<.Li #APP> before "
"the text that may contain whitespace or comments, and putting a line that "
"says E<.Li #NO_APP> after this text. This feature is mainly intend to "
"support E<.Li asm> statements in compilers whose output is otherwise free of "
"comments and whitespace."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1468
#, no-wrap
msgid "Whitespace"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1475
msgid ""
"E<.Em Whitespace> is one or more blanks or tabs, in any order. Whitespace is "
"used to separate symbols, and to make programs neater for people to "
"read. Unless within character constants (see Section E<.Dq Characters>), any "
"whitespace means the same as exactly one space."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1476
#, no-wrap
msgid "Comments"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1480
msgid ""
"There are two ways of rendering comments to E<.Xr as>.  In both cases the "
"comment is equivalent to one space."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1486
msgid ""
"Anything from E<.Li /*> through the next E<.Li */> is a comment. This means "
"you may not nest these comments."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1492
#, no-wrap
msgid ""
"/*\n"
"  The only way to include a newline ('\\en') in a comment\n"
"  is to use this sort of comment.\n"
"*/\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1494
#, no-wrap
msgid "/* This sort of comment does not nest. */\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1508
msgid ""
"Anything from the E<.Em line comment> character to the next newline is "
"considered a comment and is ignored. The line comment character is E<.Li @> "
"on the ARM; E<.Li #> on the i386 and x86-64; E<.Li #> for Motorola PowerPC; "
"E<.Li !> on the SPARC; see Machine Dependencies."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1521
msgid ""
"To be compatible with past assemblers, lines that begin with E<.Li #> have a "
"special interpretation. Following the E<.Li #> should be an absolute "
"expression (see Section E<.Dq Expressions>): the logical line number of the "
"E<.Em next> line. Then a string (see Section E<.Dq Strings>)  is allowed: if "
"present it is a new logical file name. The rest of the line, if any, should "
"be whitespace."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1524
msgid ""
"If the first non-whitespace characters on the line are not numeric, the line "
"is ignored. (Just like a comment.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1529
#, no-wrap
msgid ""
"                          # This is an ordinary comment.\n"
"# 42-6 \"new_file_name\"    # New logical file name\n"
"                          # This is logical line # 36.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1532
msgid ""
"This feature is deprecated, and may disappear from future versions of E<.Xr "
"as>."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:1533 /usr/src/contrib/binutils/gas/doc/as.7:2166
#, no-wrap
msgid "Symbols"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1544
msgid ""
"A E<.Em symbol> is one or more characters chosen from the set of all letters "
"(both upper and lower case), digits and the three characters E<.Li _.$>.  No "
"symbol may begin with a digit. Case is significant. There is no length "
"limit: all characters are significant. Symbols are delimited by characters "
"not in that set, or by the beginning of a file (since the source program "
"must end with a newline, the end of a file is not a possible symbol "
"delimiter).See Section E<.Dq Symbols>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1545
#, no-wrap
msgid "Statements"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1555
msgid ""
"A E<.Em statement> ends at a newline character ( E<.Li \\en>)  or at a "
"semicolon ( E<.Li>;).  The newline or semicolon is considered part of the "
"preceding statement. Newlines and semicolons within character constants are "
"an exception: they do not end statements."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1558
msgid ""
"It is an error to end any statement with end-of-file: the last character of "
"any input file should be a newline."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1560
msgid "An empty statement is allowed, and may include whitespace. It is ignored."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1569
msgid ""
"A statement begins with zero or more labels, optionally followed by a key "
"symbol which determines what kind of statement it is. The key symbol "
"determines the syntax of the rest of the statement. If the symbol begins "
"with a dot E<.Li>.  then the statement is an assembler directive: typically "
"valid for any computer.  If the symbol begins with a letter the statement is "
"an assembly language E<.Em instruction>: it assembles into a machine "
"language instruction."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1575
msgid ""
"A label is a symbol immediately followed by a colon ( E<.Li>:).  Whitespace "
"before a label or after a colon is permitted, but you may not have "
"whitespace between a label's symbol and its colon.See Section E<.Dq Labels>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1580
#, no-wrap
msgid ""
"label:     .directive    followed by something\n"
"another_label:           # This is an empty statement.\n"
"           instruction   operand_1, operand_2, ...\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1582
#, no-wrap
msgid "Constants"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1585
msgid ""
"A constant is a number, written so that its value is known by inspection, "
"without knowing any context. Like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1592
#, no-wrap
msgid ""
"\\&.byte  74, 0112, 092, 0x4A, 0X4a, 'J, '\\eJ # All the same value.\n"
"\\&.ascii \"Ring the bell\\e7\"                  # A string constant.\n"
"\\&.octa  0x123456789abcdef0123456789ABCDEF0 # A biGNUm.\n"
"\\&.float 0f-314159265358979323846264338327\\e\n"
"95028841971.693993751E-40                 # - pi, a flonum.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1596
msgid "E<.Em Character Constants>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1604
msgid ""
"There are two kinds of character constants. A E<.Em character> stands for "
"one character in one byte and its value may be used in numeric "
"expressions. String constants (properly called string E<.Em literals>)  are "
"potentially many bytes and their values may not be used in arithmetic "
"expressions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1606
msgid "E<.No Strings>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1625
msgid ""
"A E<.Em string> is written between double-quotes. It may contain "
"double-quotes or null characters.  The way to get special characters into a "
"string is to E<.Em escape> these characters: precede them with a backslash "
"E<.Li \\e> character. For example E<.Li \\e\\e> represents one backslash: "
"the first E<.Li \\e> is an escape which tells E<.Xr as> to interpret the "
"second character literally as a backslash (which prevents E<.Xr as> from "
"recognizing the second E<.Li \\e> as an escape character). The complete list "
"of escapes follows."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1627
#, no-wrap
msgid "\\eb"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1629
msgid "Mnemonic for backspace; for ASCII this is octal code 010."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1630
#, no-wrap
msgid "\\ef"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1632
msgid "Mnemonic for FormFeed; for ASCII this is octal code 014."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1633
#, no-wrap
msgid "\\en"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1635
msgid "Mnemonic for newline; for ASCII this is octal code 012."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1636
#, no-wrap
msgid "\\er"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1638
msgid "Mnemonic for carriage-Return; for ASCII this is octal code 015."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1639
#, no-wrap
msgid "\\et"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1641
msgid "Mnemonic for horizontal Tab; for ASCII this is octal code 011."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1642
#, no-wrap
msgid "\\e Va digit Va digit Va digit"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1649
msgid ""
"An octal character code. The numeric code is 3 octal digits. For "
"compatibility with other Unix systems, 8 and 9 are accepted as digits: for "
"example, E<.Li \\e008> has the value 010, and E<.Li \\e009> the value 011."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1650
#, no-wrap
msgid "\\e Li x Va hex-digits..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1655
msgid ""
"A hex character code. All trailing hex digits are combined. Either upper or "
"lower case E<.Li x> works."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1656
#, no-wrap
msgid "\\e\\e"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1660
msgid "Represents one E<.Li \\e> character."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1661
#, no-wrap
msgid "\\e\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1667
msgid ""
"Represents one E<.Li \"> character. Needed in strings to represent this "
"character, because an unescaped E<.Li \"> would end the string."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1668
#, no-wrap
msgid "\\e Va anything-else"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1679
msgid ""
"Any other character when escaped by E<.Li \\e> gives a warning, but "
"assembles as if the E<.Li \\e> was not present. The idea is that if you used "
"an escape sequence you clearly didn't want the literal interpretation of the "
"following character. However E<.Xr as> has no other interpretation, so E<.Xr "
"as> knows it is giving you the wrong code and warns you of the fact."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1685
msgid ""
"Which characters are escapable, and what those escapes represent, varies "
"widely among assemblers. The current set is what we think the BSD 4.2 "
"assembler recognizes, and is a subset of what most C compilers recognize. If "
"you are in doubt, do not use an escape sequence."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1687
msgid "E<.No Characters>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1708
msgid ""
"A single character may be written as a single quote immediately followed by "
"that character. The same escapes apply to characters as to strings. So if "
"you want to write the character backslash, you must write E<.Li '\\e\\e> "
"where the first E<.Li \\e> escapes the second E<.Li \\e>.  As you can see, "
"the quote is an acute accent, not a grave accent. A newline (or semicolon "
"E<.Li>;)  immediately following an acute accent is taken as a literal "
"character and does not count as the end of a statement. The value of a "
"character constant in a numeric expression is the machine's byte-wide code "
"for that character.  E<.Xr as> assumes your character code is ASCII: E<.Li "
"'A> means 65, E<.Li 'B> means 66, and so on."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1710
msgid "E<.Em Number Constants>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1722
msgid ""
"E<.Xr as> distinguishes three kinds of numbers according to how they are "
"stored in the target machine.  E<.Em Integers> are numbers that would fit "
"into an E<.Li int> in the C language.  E<.Em BiGNUms> are integers, but they "
"are stored in more than 32 bits.  E<.Em Flonums> are floating point numbers, "
"described below."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1724
msgid "E<.No Integers>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1731
msgid ""
"A binary integer is E<.Li 0b> or E<.Li 0B> followed by zero or more of the "
"binary digits E<.Li 01>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1736
msgid ""
"An octal integer is E<.Li 0> followed by zero or more of the octal digits ( "
"E<.Li 01234567>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1740
msgid ""
"A decimal integer starts with a non-zero digit followed by zero or more "
"digits ( E<.Li 0123456789>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1747
msgid ""
"A hexadecimal integer is E<.Li 0x> or E<.Li 0X> followed by one or more "
"hexadecimal digits chosen from E<.Li 0123456789abcdefABCDEF>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1753
msgid ""
"Integers have the usual values. To denote a negative integer, use the prefix "
"operator E<.Li -> discussed under expressions (see Section E<.Dq Prefix "
"Ops>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1755
msgid "E<.No BiGNUms>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1761
msgid ""
"A E<.Em biGNUm> has the same syntax and semantics as an integer except that "
"the number (or its negative) takes more than 32 bits to represent in "
"binary. The distinction is made because in some places integers are "
"permitted while biGNUms are not."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1763
msgid "E<.No Flonums>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1774
msgid ""
"A E<.Em flonum> represents a floating point number. The translation is "
"indirect: a decimal floating point number from the text is converted by "
"E<.Xr as> to a generic binary floating point number of more than sufficient "
"precision.  This generic floating point number is converted to a particular "
"computer's floating point format (or formats) by a portion of E<.Xr as> "
"specialized to that computer."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1776
msgid "A flonum is written by writing (in order)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1780
msgid "The digit E<.Li 0>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1785
msgid "A letter, to tell E<.Xr as> the rest of the number is a flonum."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1791
msgid "An optional sign: either E<.Li +> or E<.Li ->."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1796
msgid "An optional E<.Em integer part>: zero or more decimal digits."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1802
msgid ""
"An optional E<.Em fractional part>: E<.Li>.  followed by zero or more "
"decimal digits."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1805
msgid "An optional exponent, consisting of:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1812
msgid "An E<.Li E> or E<.Li e>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1817
msgid "Optional sign: either E<.Li +> or E<.Li ->."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1819
msgid "One or more decimal digits."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1824
msgid ""
"At least one of the integer part or the fractional part must be present. The "
"floating point number has the usual base-10 value."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1829
msgid ""
"E<.Xr as> does all processing using integers. Flonums are computed "
"independently of any floating point hardware in the computer running E<.Xr "
"as>."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:1830
#, no-wrap
msgid "Sections and Relocation"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1831
#, no-wrap
msgid "Background"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1835
msgid ""
"Roughly, a section is a range of addresses, with no gaps; all data "
"\\(lqin\\(rq those addresses is treated the same for some particular "
"purpose. For example there may be a \\(lqread only\\(rq section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1848
msgid ""
"The linker E<.Li ld> reads many object files (partial programs) and combines "
"their contents to form a runnable program. When E<.Xr as> emits an object "
"file, the partial program is assumed to start at address 0.  E<.Li ld> "
"assigns the final addresses for the partial program, so that different "
"partial programs do not overlap. This is actually an oversimplification, but "
"it suffices to explain how E<.Xr as> uses sections."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1859
msgid ""
"E<.Li ld> moves blocks of bytes of your program to their run-time "
"addresses. These blocks slide to their run-time addresses as rigid units; "
"their length does not change and neither does the order of bytes within "
"them. Such a rigid unit is called a E<.Em section>.  Assigning run-time "
"addresses to sections is called E<.Em relocation>.  It includes the task of "
"adjusting mentions of object-file addresses so they refer to the proper "
"run-time addresses."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1868
msgid ""
"An object file written by E<.Xr as> has at least three sections, any of "
"which may be empty. These are named E<.Em text>, E<.Em data> and E<.Em bss> "
"sections."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1879
msgid ""
"E<.Xr as> can also generate whatever other named sections you specify using "
"the E<.Li .section> directive (see Section E<.Dq Section>).  If you do not "
"use any directives that place output in the E<.Li .text> or E<.Li .data> "
"sections, these sections still exist, but are empty."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1883
msgid ""
"Within the object file, the text section starts at address E<.Li 0>, the "
"data section follows, and the bss section follows the data section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1893
msgid ""
"To let E<.Li ld> know which data changes when the sections are relocated, "
"and how to change that data, E<.Xr as> also writes to the object file "
"details of the relocation needed. To perform relocation E<.Li ld> must know, "
"each time an address in the object file is mentioned:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1896
msgid "Where in the object file is the beginning of this reference to an address?"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1898
msgid "How long (in bytes) is this reference?"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1900
msgid "Which section does the address refer to? What is the numeric value of"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1905
#, no-wrap
msgid ""
"(\n"
"E<.Va address>)\n"
"\\-(\n"
"E<.Va start-address of section ) ?>\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1908
msgid "Is the reference to an address \\(lqProgram-Counter relative\\(rq?"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1913
msgid "In fact, every address E<.Xr as> ever uses is expressed as"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1918
#, no-wrap
msgid ""
"(\n"
"E<.Va section>)\n"
"+ (\n"
"E<.Va offset into section>)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1922
msgid ""
"Further, most expressions E<.Xr as> computes have this section-relative "
"nature."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1931
msgid ""
"In this manual we use the notation { E<.Va secname> E<.Va N> }to mean "
"\\(lqoffset E<.Va N> into section E<.Va secname> \\&.\\(rq"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1950
msgid ""
"Apart from text, data and bss sections you need to know about the E<.Em "
"absolute> section. When E<.Li ld> mixes partial programs, addresses in the "
"absolute section remain unchanged.  For example, address E<.Li {absolute 0}> "
"is \\(lqrelocated\\(rq to run-time address 0 by E<.Li ld>.  Although the "
"linker never arranges two partial programs' data sections with overlapping "
"addresses after linking, E<.Em by definition> their absolute sections must "
"overlap. Address E<.Li {absolute 239}> in one part of a program is always "
"the same address when the program is running as address E<.Li {absolute "
"239}> in any other part of the program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1963
msgid ""
"The idea of sections is extended to the E<.Em undefined> section. Any "
"address whose section is unknown at assembly time is by definition rendered "
"{undefined E<.Va U> }---where E<.Va U> is filled in later. Since numbers are "
"always defined, the only way to generate an undefined address is to mention "
"an undefined symbol. A reference to a named common block would be such a "
"symbol: its value is unknown at assembly time so it has section E<.Em "
"undefined>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1973
msgid ""
"By analogy the word E<.Em section> is used to describe groups of sections in "
"the linked program.  E<.Li ld> puts all partial programs' text sections in "
"contiguous addresses in the linked program. It is customary to refer to the "
"E<.Em text section> of a program, meaning all the addresses of all partial "
"programs' text sections.  Likewise for data and bss sections."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1979
msgid ""
"Some sections are manipulated by E<.Li ld>; others are invented for use of "
"E<.Xr as> and have no meaning except during assembly."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:1980
#, no-wrap
msgid "Linker Sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1983
msgid "E<.Li ld> deals with just four kinds of sections, summarized below."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1985
#, no-wrap
msgid "named sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:1996
msgid ""
"These sections hold your program.  E<.Xr as> and E<.Li ld> treat them as "
"separate but equal sections. Anything you can say of one section is true of "
"another. When the program is running, however, it is customary for the text "
"section to be unalterable. The text section is often shared among processes: "
"it contains instructions, constants and the like. The data section of a "
"running program is usually alterable: for example, C variables would be "
"stored in the data section."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:1997
#, no-wrap
msgid "bss section"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2004
msgid ""
"This section contains zeroed bytes when your program begins running. It is "
"used to hold uninitialized variables or common storage. The length of each "
"partial program's bss section is important, but because it starts out "
"containing zeroed bytes there is no need to store explicit zero bytes in the "
"object file.  The bss section was invented to eliminate those explicit zeros "
"from object files."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2005
#, no-wrap
msgid "absolute section"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2011
msgid ""
"Address 0 of this section is always \\(lqrelocated\\(rq to runtime address "
"0. This is useful if you want to refer to an address that E<.Li ld> must not "
"change when relocating. In this sense we speak of absolute addresses being "
"\\(lqunrelocatable\\(rq: they do not change during relocation."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2012
#, no-wrap
msgid "undefined section"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2015
msgid ""
"This \\(lqsection\\(rq is a catch-all for address references to objects not "
"in the preceding sections."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2023
msgid ""
"An idealized example of three relocatable sections follows. The example uses "
"the traditional section names E<.Li .text> and E<.Li .data>.  Memory "
"addresses are on the horizontal axis."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2028
#, no-wrap
msgid ""
"                      +-----+----+--+\n"
"partial program # 1:  |ttttt|dddd|00|\n"
"                      +-----+----+--+\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2031
#, no-wrap
msgid ""
"                      text   data bss\n"
"                      seg.   seg. seg.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2035
#, no-wrap
msgid ""
"                      +---+---+---+\n"
"partial program # 2:  |TTT|DDD|000|\n"
"                      +---+---+---+\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2039
#, no-wrap
msgid ""
"                      +--+---+-----+--+----+---+-----+~~\n"
"linked program:       |  |TTT|ttttt|  |dddd|DDD|00000|\n"
"                      +--+---+-----+--+----+---+-----+~~\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2041
#, no-wrap
msgid "    addresses:        0 ...\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2043
#, no-wrap
msgid "Assembler Internal Sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2054
msgid ""
"These sections are meant only for the internal use of E<.Xr as>.  They have "
"no meaning at run-time. You do not really need to know about these sections "
"for most purposes; but they can be mentioned in E<.Xr as> warning messages, "
"so it might be helpful to have an idea of their meanings to E<.Xr as>.  "
"These sections are used to permit the value of every expression in your "
"assembly language program to be a section-relative address."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2056
#, no-wrap
msgid "ASSEMBLER-INTERNAL-LOGIC-ERROR!"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2059
msgid ""
"An internal assembler logic error has been found. This means there is a bug "
"in the assembler."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2060
#, no-wrap
msgid "expr section"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2064
msgid ""
"The assembler stores complex expression internally as combinations of "
"symbols.  When it needs to represent an expression as a symbol, it puts it "
"in the expr section."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2066
#, no-wrap
msgid "Sub-Sections"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2083
msgid ""
"You may have separate groups of data in named sections that you want to end "
"up near to each other in the object file, even though they are not "
"contiguous in the assembler source.  E<.Xr as> allows you to use E<.Em "
"subsections> for this purpose. Within each section, there can be numbered "
"subsections with values from 0 to 8192. Objects assembled into the same "
"subsection go into the object file together with other objects in the same "
"subsection. For example, a compiler might want to store constants in the "
"text section, but might not want to have them interspersed with the program "
"being assembled. In this case, the compiler could issue a E<.Li .text 0> "
"before each section of code being output, and a E<.Li .text 1> before each "
"group of constants being output."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2086
msgid ""
"Subsections are optional. If you do not use subsections, everything goes in "
"subsection number zero."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2094
msgid ""
"Subsections appear in your object file in numeric order, lowest numbered to "
"highest. (All this to be compatible with other people's assemblers.) The "
"object file contains no representation of subsections; E<.Li ld> and other "
"programs that manipulate object files see no trace of them. They just see "
"all your text subsections as a text section, and all your data subsections "
"as a data section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2120
msgid ""
"To specify which subsection you want subsequent statements assembled into, "
"use a numeric argument to specify it, in a E<.Li .text Va expression> or a "
"E<.Li .data Va expression> statement. You can also use the E<.Li "
".subsection> directive (see Section E<.Dq SubSection>)  to specify a "
"subsection: E<.Li .subsection Va expression>.  E<.Va Expression> should be "
"an absolute expression (see Section E<.Dq Expressions>).  If you just say "
"E<.Li .text> then E<.Li .text 0> is assumed. Likewise E<.Li .data> means "
"E<.Li .data 0>.  Assembly begins in E<.Li text 0>.  For instance:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2131
#, no-wrap
msgid ""
"\\&.text 0     # The default subsection is text 0 anyway.\n"
"\\&.ascii \"This lives in the first text subsection. *\"\n"
"\\&.text 1\n"
"\\&.ascii \"But this lives in the second text subsection.\"\n"
"\\&.data 0\n"
"\\&.ascii \"This lives in the data section,\"\n"
"\\&.ascii \"in the first data subsection.\"\n"
"\\&.text 0\n"
"\\&.ascii \"This lives in the first text section,\"\n"
"\\&.ascii \"immediately following the asterisk (*).\"\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2146
msgid ""
"Each section has a E<.Em location counter> incremented by one for every byte "
"assembled into that section. Because subsections are merely a convenience "
"restricted to E<.Xr as> there is no concept of a subsection location "
"counter. There is no way to directly manipulate a location counter---but the "
"E<.Li .align> directive changes it, and any label definition captures its "
"current value.  The location counter of the section where statements are "
"being assembled is said to be the E<.Em active> location counter."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2147
#, no-wrap
msgid "bss Section"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2152
msgid ""
"The bss section is used for local common variable storage. You may allocate "
"address space in the bss section, but you may not dictate data to load into "
"it before your program executes. When your program starts running, all the "
"contents of the bss section are zeroed bytes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2158
msgid ""
"The E<.Li .lcomm> pseudo-op defines a symbol in the bss section; see Lcomm,, "
"E<.Li .lcomm> \\&."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2165
msgid ""
"The E<.Li .comm> pseudo-op may be used to declare a common symbol, which is "
"another form of uninitialized symbol; see Comm,, E<.Li .comm> \\&."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2169
msgid ""
"Symbols are a central concept: the programmer uses symbols to name things, "
"the linker uses symbols to link, and the debugger uses symbols to debug."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2176
msgid ""
"E<.Qo> E<.Em Warning:> E<.Xr as> does not place symbols in the object file "
"in the same order they were declared.  This may break some debuggers.  "
"E<.Qc>"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2177
#, no-wrap
msgid "Labels"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2186
msgid ""
"A E<.Em label> is written as a symbol immediately followed by a colon "
"E<.Li>:.  The symbol then represents the current value of the active "
"location counter, and is, for example, a suitable instruction operand. You "
"are warned if you use the same symbol to represent two different locations: "
"the first definition overrides any other definitions."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2187
#, no-wrap
msgid "Giving Symbols Other Values"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2204
msgid ""
"A symbol can be given an arbitrary value by writing a symbol, followed by an "
"equals sign E<.Li =>, followed by an expression (see Section E<.Dq "
"Expressions>).  This is equivalent to using the E<.Li .set> directive.See "
"Section E<.Dq Set>.  In the same way, using a double equals sign E<.Li => "
"E<.Li => here represents an equivalent of the E<.Li .eqv> directive.See "
"Section E<.Dq Eqv>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2205
#, no-wrap
msgid "Symbol Names"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2213
msgid ""
"Symbol names begin with a letter or with one of E<.Li ._>.  On most "
"machines, you can also use E<.Li $> in symbol names; exceptions are noted in "
"Machine Dependencies. That character may be followed by any string of "
"digits, letters, dollar signs (unless otherwise noted for a particular "
"target machine), and underscores."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2218
msgid ""
"Case of letters is significant: E<.Li foo> is a different symbol name than "
"E<.Li Foo>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2222
msgid ""
"Each symbol has exactly one name. Each name in an assembly language program "
"refers to exactly one symbol. You may use that symbol name any number of "
"times in a program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2224
msgid "E<.Em Local Symbol Names>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2232
msgid ""
"A local symbol is any symbol beginning with certain local label prefixes.  "
"By default, the local label prefix is E<.Li .L> for ELF systems or E<.Li L> "
"for traditional a.out systems, but each target may have its own set of local "
"label prefixes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2240
msgid ""
"Local symbols are defined and used within the assembler, but they are "
"normally not saved in object files. Thus, they are not visible when "
"debugging. You may use the E<.Li -L> option (see Section E<.Dq L>)  to "
"retain the local symbols in the object files."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2242
msgid "E<.Em Local Labels>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2261
msgid ""
"Local labels help compilers and programmers use names temporarily. They "
"create symbols which are guaranteed to be unique over the entire scope of "
"the input source code and which can be referred to by a simple notation. To "
"define a local label, write a label of the form E<.Li Sy N:> (where E<.Sy N> "
"represents any positive integer). To refer to the most recent previous "
"definition of that label write E<.Li Sy Nb>, using the same number as when "
"you defined the label. To refer to the next definition of a local label, "
"write E<.Li Sy Nf> ---the E<.Li b> stands for \\(lqbackwards\\(rq and the "
"E<.Li f> stands for \\(lqforwards\\(rq."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2273
msgid ""
"There is no restriction on how you can use these labels, and you can reuse "
"them too. So that it is possible to repeatedly define the same local label "
"(using the same number E<.Li Sy N>), although you can only refer to the most "
"recently defined local label of that number (for a backwards reference) or "
"the next definition of a specific local label for a forward reference. It is "
"also worth noting that the first 10 local labels ( E<.Li Sy 0:> \\&....Li Sy "
"9: )  are implemented in a slightly more efficient manner than the others."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2275
msgid "Here is an example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2281
#, no-wrap
msgid ""
"1:        branch 1f\n"
"2:        branch 1b\n"
"1:        branch 2f\n"
"2:        branch 1b\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2284
msgid "Which is the equivalent of:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2290
#, no-wrap
msgid ""
"label_1:  branch label_3\n"
"label_2:  branch label_1\n"
"label_3:  branch label_4\n"
"label_4:  branch label_3\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2296
msgid ""
"Local label names are only a notational device. They are immediately "
"transformed into more conventional symbol names before the assembler uses "
"them. The symbol names are stored in the symbol table, appear in error "
"messages, and are optionally emitted to the object file. The names are "
"constructed using these parts:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2298
#, no-wrap
msgid "Em local label prefix"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2312
msgid ""
"All local symbols begin with the system-specific local label "
"prefix. Normally both E<.Xr as> and E<.Li ld> forget symbols that start with "
"the local label prefix. These labels are used for symbols you are never "
"intended to see. If you use the E<.Li -L> option then E<.Xr as> retains "
"these symbols in the object file. If you also instruct E<.Li ld> to retain "
"these symbols, you may use them in debugging."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2313
#, no-wrap
msgid "Va number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2319
msgid ""
"This is the number that was used in the local label definition. So if the "
"label is written E<.Li 55:> then the number is E<.Li 55>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2320
#, no-wrap
msgid "Li C-B"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2325
msgid ""
"This unusual character is included so you do not accidentally invent a "
"symbol of the same name. The character has ASCII value of E<.Li \\e002> "
"(control-B)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2326
#, no-wrap
msgid "Em ordinal number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2343
msgid ""
"This is a serial number to keep the labels distinct. The first definition of "
"E<.Li 0:> gets the number E<.Li 1>.  The 15th definition of E<.Li 0:> gets "
"the number E<.Li 15>, and so on. Likewise the first definition of E<.Li 1:> "
"gets the number E<.Li 1> and its 15th definition gets E<.Li 15> as well."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2353
msgid ""
"So for example, the first E<.Li 1:> may be named E<.Li .L1 Li C-B1>, and the "
"44th E<.Li 3:> may be named E<.Li .L3 Li C-B44>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2355
msgid "E<.Em Dollar Local Labels>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2363
msgid ""
"E<.Li as> also supports an even more local form of local labels called "
"dollar labels.  These labels go out of scope (i.e., they become undefined) "
"as soon as a non-local label is defined. Thus they remain valid for only a "
"small region of the input source code. Normal local labels, by contrast, "
"remain in scope for the entire file, or until they are redefined by another "
"occurrence of the same local label."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2368
msgid ""
"Dollar labels are defined in exactly the same way as ordinary local labels, "
"except that instead of being terminated by a colon, they are terminated by a "
"dollar sign, e.g., E<.Li Sy 55$>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2377
msgid ""
"They can also be distinguished from ordinary local labels by their "
"transformed names which use ASCII character E<.Li \\e001> (control-A) as the "
"magic character to distinguish them from ordinary labels.  For example, the "
"fifth definition of E<.Li 6$> may be named E<.Li .L6 Li C-A5>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2378
#, no-wrap
msgid "The Special Dot Symbol"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2395
msgid ""
"The special symbol E<.Li>.  refers to the current address that E<.Xr as> is "
"assembling into. Thus, the expression E<.Li melvin: .long>.  defines E<.Li "
"melvin> to contain its own address. Assigning a value to E<.Li>.  is treated "
"the same as a E<.Li .org> directive. Thus, the expression E<.Li .=.+4> is "
"the same as saying E<.Li .space 4>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2396
#, no-wrap
msgid "Symbol Attributes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2401
msgid ""
"Every symbol has, as well as its name, the attributes \\(lqValue\\(rq and "
"\\(lqType\\(rq. Depending on output format, symbols can also have auxiliary "
"attributes. The detailed definitions are in E<.Pa a.out.h>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2407
msgid ""
"If you use a symbol without defining it, E<.Xr as> assumes zero for all "
"these attributes, and probably won't warn you. This makes the symbol an "
"externally defined symbol, which is generally what you would want."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2409
msgid "E<.Em Value>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2417
msgid ""
"The value of a symbol is (usually) 32 bits. For a symbol which labels a "
"location in the text, data, bss or absolute sections the value is the number "
"of addresses from the start of that section to the label. Naturally for "
"text, data and bss sections the value of a symbol changes as E<.Li ld> "
"changes section base addresses during linking. Absolute symbols' values do "
"not change during linking: that is why they are called absolute."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2427
msgid ""
"The value of an undefined symbol is treated in a special way. If it is 0 "
"then the symbol is not defined in this assembler source file, and E<.Li ld> "
"tries to determine its value from other files linked into the same program.  "
"You make this kind of symbol simply by mentioning a symbol name without "
"defining it. A non-zero value represents a E<.Li .comm> common "
"declaration. The value is how much common storage to reserve, in bytes "
"(addresses). The symbol refers to the first address of the allocated "
"storage."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2429
msgid "E<.Em Type>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2434
msgid ""
"The type attribute of a symbol contains relocation (section) information, "
"any flag settings indicating that a symbol is external, and (optionally), "
"other information for linkers and debuggers. The exact format depends on the "
"object-code output format in use."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:2435
#, no-wrap
msgid "Expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2440
msgid ""
"An E<.Em expression> specifies an address or numeric value. Whitespace may "
"precede and/or follow an expression."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2450
msgid ""
"The result of an expression must be an absolute number, or else an offset "
"into a particular section. If an expression is not absolute, and there is "
"not enough information when E<.Xr as> sees the expression to know its "
"section, a second pass over the source program might be necessary to "
"interpret the expression---but the second pass is currently not "
"implemented.  E<.Xr as> aborts with an error message in this situation."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2451
#, no-wrap
msgid "Empty Expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2456
msgid ""
"An empty expression has no value: it is just whitespace or null. Wherever an "
"absolute expression is required, you may omit the expression, and E<.Xr as> "
"assumes a value of (absolute) 0. This is compatible with other assemblers."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2457
#, no-wrap
msgid "Integer Expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2464
msgid ""
"An E<.Em integer expression> is one or more E<.Em arguments> delimited by "
"E<.Em operators>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2466
msgid "E<.Em Arguments>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2473
msgid ""
"E<.Em Arguments> are symbols, numbers or subexpressions. In other contexts "
"arguments are sometimes called \\(lqarithmetic operands\\(rq. In this "
"manual, to avoid confusing them with the \\(lqinstruction operands\\(rq of "
"the machine language, we use the term \\(lqargument\\(rq to refer to parts "
"of expressions only, reserving the word \\(lqoperand\\(rq to refer only to "
"machine instruction operands."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2482
msgid ""
"Symbols are evaluated to yield { E<.Va section> E<.Va NNN> }where E<.Va "
"section> is one of text, data, bss, absolute, or undefined.  E<.Va NNN> is a "
"signed, 2's complement 32 bit integer."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2484
msgid "Numbers are usually integers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2490
msgid ""
"A number can be a flonum or biGNUm. In this case, you are warned that only "
"the low order 32 bits are used, and E<.Xr as> pretends these 32 bits are an "
"integer. You may write integer-manipulating instructions that act on exotic "
"constants, compatible with other assemblers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2496
msgid ""
"Subexpressions are a left parenthesis E<.Li (> followed by an integer "
"expression, followed by a right parenthesis E<.Li>); or a prefix operator "
"followed by an argument."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2498
msgid "E<.Em Operators>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2506
msgid ""
"E<.Em Operators> are arithmetic functions, like E<.Li +> or E<.Li %>.  "
"Prefix operators are followed by an argument. Infix operators appear between "
"their arguments. Operators may be preceded and/or followed by whitespace."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2508
msgid "E<.Em Prefix Operator>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2513
msgid ""
"E<.Xr as> has the following E<.Em prefix operators>.  They each take one "
"argument, which must be absolute."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2515 /usr/src/contrib/binutils/gas/doc/as.7:2587
#, no-wrap
msgid "-"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2518
msgid "E<.Em Negation>.  Two's complement negation."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2518
#, no-wrap
msgid "~"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2521
msgid "E<.Em Complementation>.  Bitwise not."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2524
msgid "E<.Em Infix Operators>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2532
msgid ""
"E<.Em Infix operators> take two arguments, one on either side. Operators "
"have precedence, but operations with equal precedence are performed left to "
"right. Apart from E<.Li +> or E<.Op ->, both arguments must be absolute, and "
"the result is absolute."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2536
msgid "Highest Precedence"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2538
#, no-wrap
msgid "*"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2540
msgid "E<.Em Multiplication>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2541
#, no-wrap
msgid "/"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2545
msgid "E<.Em Division>.  Truncation is the same as the C operator E<.Li />"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2546
#, no-wrap
msgid "%"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2548
msgid "E<.Em Remainder>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2549
#, no-wrap
msgid "E<lt>E<lt>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2553
msgid "E<.Em Shift Left>.  Same as the C operator E<.Li E<lt>E<lt>>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2554
#, no-wrap
msgid "E<gt>E<gt>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2558
msgid "E<.Em Shift Right>.  Same as the C operator E<.Li E<gt>E<gt>>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2562
msgid "Intermediate precedence"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2564
#, no-wrap
msgid "|"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2567
msgid "E<.Em Bitwise Inclusive Or>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2568
#, no-wrap
msgid "&"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2570
msgid "E<.Em Bitwise And>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2571
#, no-wrap
msgid "^"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2573
msgid "E<.Em Bitwise Exclusive Or>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2574
#, no-wrap
msgid "!"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2576
msgid "E<.Em Bitwise Or Not>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2580
msgid "Low Precedence"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2582
#, no-wrap
msgid "+"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2586
msgid ""
"E<.Em Addition>.  If either argument is absolute, the result has the section "
"of the other argument.  You may not add together arguments from different "
"sections."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2592
msgid ""
"E<.Em Subtraction>.  If the right argument is absolute, the result has the "
"section of the left argument. If both arguments are in the same section, the "
"result is absolute.  You may not subtract arguments from different sections."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2593
#, no-wrap
msgid "=="
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2595
msgid "E<.Em Is Equal To>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2595
#, no-wrap
msgid "E<lt>E<gt>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2596
#, no-wrap
msgid "!="
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2598
msgid "E<.Em Is Not Equal To>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2598
#, no-wrap
msgid "E<lt>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2600
msgid "E<.Em Is Less Than>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2600
#, no-wrap
msgid "E<gt>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2602
msgid "E<.Em Is Greater Than>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2602
#, no-wrap
msgid "E<gt>="
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2604
msgid "E<.Em Is Greater Than Or Equal To>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2604
#, no-wrap
msgid "E<lt>="
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2606
msgid "E<.Em Is Less Than Or Equal To>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2610
msgid ""
"The comparison operators can be used as infix operators. A true results has "
"a value of -1 whereas a false result has a value of 0. Note, these operators "
"perform signed comparisons."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2614
msgid "Lowest Precedence"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2616
#, no-wrap
msgid "&&"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2618
msgid "E<.Em Logical And>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2619
#, no-wrap
msgid "||"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2621
msgid "E<.Em Logical Or>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2626
msgid ""
"These two logical operations can be used to combine the results of sub "
"expressions.  Note, unlike the comparison operators a true result returns a "
"value of 1 but a false results does still return 0. Also note that the "
"logical or operator has a slightly lower precedence than logical and."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2632
msgid ""
"In short, it's only meaningful to add or subtract the E<.Em offsets> in an "
"address; you can only have a defined section in one of the two arguments."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:2633
#, no-wrap
msgid "Assembler Directives"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2637
msgid ""
"All assembler directives have names that begin with a period ( E<.Li>.).  "
"The rest of the name is letters, usually in lower case."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2640
msgid ""
"This chapter discusses directives that are available regardless of the "
"target machine configuration for the GNU assembler."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2641
#, no-wrap
msgid "Li .abort"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2650
msgid ""
"This directive stops the assembly immediately. It is for compatibility with "
"other assemblers. The original idea was that the assembly language source "
"would be piped into the assembler. If the sender of the source quit, it "
"could use this directive tells E<.Xr as> to quit also. One day E<.Li .abort> "
"will not be supported."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2651
#, no-wrap
msgid "Li .align Va abs-expr, Va abs-expr, Va abs-expr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2655
msgid ""
"Pad the location counter (in the current subsection) to a particular storage "
"boundary. The first expression (which must be absolute) is the alignment "
"required, as described below."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2661 /usr/src/contrib/binutils/gas/doc/as.7:2722 /usr/src/contrib/binutils/gas/doc/as.7:4028
msgid ""
"The second expression (also absolute) gives the fill value to be stored in "
"the padding bytes. It (and the comma) may be omitted. If it is omitted, the "
"padding bytes are normally zero. However, on some systems, if the section is "
"marked as containing code and the fill value is omitted, the space is filled "
"with no-op instructions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2669 /usr/src/contrib/binutils/gas/doc/as.7:2730 /usr/src/contrib/binutils/gas/doc/as.7:4036
msgid ""
"The third expression is also absolute, and is also optional. If it is "
"present, it is the maximum number of bytes that should be skipped by this "
"alignment directive. If doing the alignment would require skipping more "
"bytes than the specified maximum, then the alignment is not done at all. You "
"can omit the fill value (the second argument) entirely by simply using two "
"commas after the required alignment; this can be useful if you want the "
"alignment to be filled with no-op instructions when appropriate."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2678
msgid ""
"The way the required alignment is specified varies from system to system.  "
"For the arc, hppa, i386 using ELF, i860, iq2000, m68k, or32, s390, sparc, "
"tic4x, tic80 and xtensa, the first expression is the alignment request in "
"bytes. For example E<.Li .align 8> advances the location counter until it is "
"a multiple of 8. If the location counter is already a multiple of 8, no "
"change is needed. For the tic54x, the first expression is the alignment "
"request in words."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2685
msgid ""
"For other systems, including the i386 using a.out format, and the arm and "
"strongarm, it is the number of low-order zero bits the location counter must "
"have after advancement. For example E<.Li .align 3> advances the location "
"counter until it a multiple of 8. If the location counter is already a "
"multiple of 8, no change is needed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2693
msgid ""
"This inconsistency is due to the different behaviors of the various native "
"assemblers for these systems which GAS must emulate. GAS also provides E<.Li "
".balign> and E<.Li .p2align> directives, described later, which have a "
"consistent behavior across all architectures (but are specific to GAS)."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2694
#, no-wrap
msgid "Li .ascii \" Va string\" ..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2700
msgid ""
"E<.Li .ascii> expects zero or more string literals (see Section E<.Dq "
"Strings>)  separated by commas. It assembles each string (with no automatic "
"trailing zero byte) into consecutive addresses."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2701
#, no-wrap
msgid "Li .asciz \" Va string\" ..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2708
msgid ""
"E<.Li .asciz> is just like E<.Li .ascii>, but each string is followed by a "
"zero byte. The \\(lqz\\(rq in E<.Li .asciz> stands for \\(lqzero\\(rq."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2709
#, no-wrap
msgid "Li .balign[wl] Va abs-expr, Va abs-expr, Va abs-expr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2716
msgid ""
"Pad the location counter (in the current subsection) to a particular storage "
"boundary. The first expression (which must be absolute) is the alignment "
"request in bytes. For example E<.Li .balign 8> advances the location counter "
"until it is a multiple of 8. If the location counter is already a multiple "
"of 8, no change is needed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2747
msgid ""
"The E<.Li .balignw> and E<.Li .balignl> directives are variants of the E<.Li "
".balign> directive. The E<.Li .balignw> directive treats the fill pattern as "
"a two byte word value. The E<.Li .balignl> directives treats the fill "
"pattern as a four byte longword value. For example, E<.Li .balignw 4,0x368d> "
"will align to a multiple of 4. If it skips two bytes, they will be filled in "
"with the value 0x368d (the exact placement of the bytes depends upon the "
"endianness of the processor). If it skips 1 or 3 bytes, the fill value is "
"undefined."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2748
#, no-wrap
msgid "Li .byte Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2752
msgid ""
"E<.Li .byte> expects zero or more expressions, separated by commas. Each "
"expression is assembled into the next byte."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2753
#, no-wrap
msgid "Li .comm Va symbol , Va length"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2769
msgid ""
"E<.Li .comm> declares a common symbol named E<.Va symbol>.  When linking, a "
"common symbol in one object file may be merged with a defined or common "
"symbol of the same name in another object file. If E<.Li ld> does not see a "
"definition for the symbol--just one or more common symbols--then it will "
"allocate E<.Va length> bytes of uninitialized memory.  E<.Va length> must be "
"an absolute expression. If E<.Li ld> sees multiple common symbols with the "
"same name, and they do not all have the same size, it will allocate space "
"using the largest size."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2783
msgid ""
"When using ELF, the E<.Li .comm> directive takes an optional third "
"argument. This is the desired alignment of the symbol, specified as a byte "
"boundary (for example, an alignment of 16 means that the least significant 4 "
"bits of the address should be zero).  The alignment must be an absolute "
"expression, and it must be a power of two.  If E<.Li ld> allocates "
"uninitialized memory for the common symbol, it will use the alignment when "
"placing the symbol. If no alignment is specified, E<.Xr as> will set the "
"alignment to the largest power of two less than or equal to the size of the "
"symbol, up to a maximum of 16."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2784
#, no-wrap
msgid "Li .cfi_startproc [simple]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2791
msgid ""
"E<.Li .cfi_startproc> is used at the beginning of each function that should "
"have an entry in E<.Li .eh_frame>.  It initializes some internal data "
"structures. Don't forget to close the function by E<.Li .cfi_endproc>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2797
msgid ""
"Unless E<.Li .cfi_startproc> is used along with parameter E<.Li simple> it "
"also emits some architecture dependent initial CFI instructions."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2797
#, no-wrap
msgid "Li .cfi_endproc"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2804
msgid ""
"E<.Li .cfi_endproc> is used at the end of a function where it closes its "
"unwind entry previously opened by E<.Li .cfi_startproc>, and emits it to "
"E<.Li .eh_frame>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2805
#, no-wrap
msgid "Li .cfi_personality Va encoding [, Va exp]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2820
msgid ""
"E<.Li .cfi_personality> defines personality routine and its encoding.  E<.Va "
"encoding> must be a constant determining how the personality should be "
"encoded. If it is 255 ( E<.Li DW_EH_PE_omit>), second argument is not "
"present, otherwise second argument should be a constant or a symbol "
"name. When using indirect encodings, the symbol provided should be the "
"location where personality can be loaded from, not the personality routine "
"itself. The default after E<.Li .cfi_startproc> is E<.Li .cfi_personality "
"0xff>, no personality routine."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2821
#, no-wrap
msgid "Li .cfi_lsda Va encoding [, Va exp]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2834
msgid ""
"E<.Li .cfi_lsda> defines LSDA and its encoding.  E<.Va encoding> must be a "
"constant determining how the LSDA should be encoded. If it is 255 ( E<.Li "
"DW_EH_PE_omit>), second argument is not present, otherwise second argument "
"should be a constant or a symbol name. The default after E<.Li "
".cfi_startproc> is E<.Li .cfi_lsda 0xff>, no LSDA."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2835
#, no-wrap
msgid "Li .cfi_def_cfa Va register, Va offset"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2839
msgid ""
"E<.Li .cfi_def_cfa> defines a rule for computing CFA as: E<.Em take address "
"from Va register and add Va offset to it>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2840
#, no-wrap
msgid "Li .cfi_def_cfa_register Va register"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2845
msgid ""
"E<.Li .cfi_def_cfa_register> modifies a rule for computing CFA. From now on "
"E<.Va register> will be used instead of the old one. Offset remains the "
"same."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2846
#, no-wrap
msgid "Li .cfi_def_cfa_offset Va offset"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2852
msgid ""
"E<.Li .cfi_def_cfa_offset> modifies a rule for computing CFA. Register "
"remains the same, but E<.Va offset> is new. Note that it is the absolute "
"offset that will be added to a defined register to compute CFA address."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2853
#, no-wrap
msgid "Li .cfi_adjust_cfa_offset Va offset"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2859
msgid ""
"Same as E<.Li .cfi_def_cfa_offset> but E<.Va offset> is a relative value "
"that is added/substracted from the previous offset."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2860
#, no-wrap
msgid "Li .cfi_offset Va register, Va offset"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2866
msgid "Previous value of E<.Va register> is saved at offset E<.Va offset> from CFA."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2867
#, no-wrap
msgid "Li .cfi_rel_offset Va register, Va offset"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2876
msgid ""
"Previous value of E<.Va register> is saved at offset E<.Va offset> from the "
"current CFA register. This is transformed to E<.Li .cfi_offset> using the "
"known displacement of the CFA register from the CFA. This is often easier to "
"use, because the number will match the code it's annotating."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2877
#, no-wrap
msgid "Li .cfi_register Va register1, Va register2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2882
msgid "Previous value of E<.Va register1> is saved in register E<.Va register2>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2883
#, no-wrap
msgid "Li .cfi_restore Va register"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2891
msgid ""
"E<.Li .cfi_restore> says that the rule for E<.Va register> is now the same "
"as it was at the beginning of the function, after all initial instruction "
"added by E<.Li .cfi_startproc> were executed."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2892
#, no-wrap
msgid "Li .cfi_undefined Va register"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2896
msgid "From now on the previous value of E<.Va register> can't be restored anymore."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2897
#, no-wrap
msgid "Li .cfi_same_value Va register"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2901
msgid ""
"Current value of E<.Va register> is the same like in the previous frame, "
"i.e. no restoration needed."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2902
#, no-wrap
msgid "Li .cfi_remember_state,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2910
msgid ""
"First save all current rules for all registers by E<.Li "
".cfi_remember_state>, then totally screw them up by subsequent E<.Li .cfi_*> "
"directives and when everything is hopelessly bad, use E<.Li "
".cfi_restore_state> to restore the previous saved state."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2911
#, no-wrap
msgid "Li .cfi_return_column Va register"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2918
msgid ""
"Change return column E<.Va register>, i.e. the return address is either "
"directly in E<.Va register> or can be accessed by rules for E<.Va register>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2919
#, no-wrap
msgid "Li .cfi_signal_frame"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2921
msgid "Mark current function as signal trampoline."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2922
#, no-wrap
msgid "Li .cfi_window_save"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2924
msgid "SPARC register window has been saved."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2925
#, no-wrap
msgid "Li .cfi_escape Va expression[, ...]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2929
msgid ""
"Allows the user to add arbitrary bytes to the unwind info. One might use "
"this to add OS-specific CFI opcodes, or generic CFI opcodes that GAS does "
"not yet support."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2930
#, no-wrap
msgid "Li .file Va fileno Va filename"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2941
msgid ""
"When emitting dwarf2 line number information E<.Li .file> assigns filenames "
"to the E<.Li .debug_line> file name table. The E<.Va fileno> operand should "
"be a unique positive integer to use as the index of the entry in the "
"table. The E<.Va filename> operand is a C string literal."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2947
msgid ""
"The detail of filename indices is exposed to the user because the filename "
"table is shared with the E<.Li .debug_info> section of the dwarf2 debugging "
"information, and thus the user must know the exact indices that table "
"entries will have."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:2948
#, no-wrap
msgid "Li .loc Va fileno Va lineno [ Va column] [ Va options]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2962
msgid ""
"The E<.Li .loc> directive will add row to the E<.Li .debug_line> line number "
"matrix corresponding to the immediately following assembly instruction.  The "
"E<.Va fileno>, E<.Va lineno>, and optional E<.Va column> arguments will be "
"applied to the E<.Li .debug_line> state machine before the row is added."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2966
msgid "The E<.Va options> are a sequence of the following tokens in any order:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2968
#, no-wrap
msgid "basic_block"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2975
msgid ""
"This option will set the E<.Li basic_block> register in the E<.Li "
".debug_line> state machine to E<.Li true>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2976
#, no-wrap
msgid "prologue_end"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2983
msgid ""
"This option will set the E<.Li prologue_end> register in the E<.Li "
".debug_line> state machine to E<.Li true>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2984
#, no-wrap
msgid "epilogue_begin"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:2991
msgid ""
"This option will set the E<.Li epilogue_begin> register in the E<.Li "
".debug_line> state machine to E<.Li true>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:2992
#, no-wrap
msgid "is_stmt Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3000
msgid ""
"This option will set the E<.Li is_stmt> register in the E<.Li .debug_line> "
"state machine to E<.Li value>, which must be either 0 or 1."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3001
#, no-wrap
msgid "isa Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3009
msgid ""
"This directive will set the E<.Li isa> register in the E<.Li .debug_line> "
"state machine to E<.Va value>, which must be an unsigned integer."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3011
#, no-wrap
msgid "Li .loc_mark_blocks Va enable"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3021
msgid ""
"The E<.Li .loc_mark_blocks> directive makes the assembler emit an entry to "
"the E<.Li .debug_line> line number matrix with the E<.Li basic_block> "
"register in the state machine set whenever a code label is seen. The E<.Va "
"enable> argument should be either 1 or 0, to enable or disable this function "
"respectively."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3022
#, no-wrap
msgid "Li .data Va subsection"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3031
msgid ""
"E<.Li .data> tells E<.Xr as> to assemble the following statements onto the "
"end of the data subsection numbered E<.Va subsection> (which is an absolute "
"expression). If E<.Va subsection> is omitted, it defaults to zero."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3032
#, no-wrap
msgid "Li .double Va flonums"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3036
msgid ""
"E<.Li .double> expects zero or more flonums, separated by commas. It "
"assembles floating point numbers."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3037
#, no-wrap
msgid "Li .eject"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3039
msgid "Force a page break at this point, when generating assembly listings."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3040
#, no-wrap
msgid "Li .else"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3050
msgid ""
"E<.Li .else> is part of the E<.Xr as> support for conditional assembly; see "
"If,, E<.Li .if> \\&. It marks the beginning of a section of code to be "
"assembled if the condition for the preceding E<.Li .if> was false."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3051
#, no-wrap
msgid "Li .elseif"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3062
msgid ""
"E<.Li .elseif> is part of the E<.Xr as> support for conditional assembly; "
"see If,, E<.Li .if> \\&. It is shorthand for beginning a new E<.Li .if> "
"block that would otherwise fill the entire E<.Li .else> section."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3063
#, no-wrap
msgid "Li .end"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3070
msgid ""
"E<.Li .end> marks the end of the assembly file.  E<.Xr as> does not process "
"anything in the file past the E<.Li .end> directive."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3071
#, no-wrap
msgid "Li .endfunc"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3075
msgid "E<.Li .endfunc> marks the end of a function specified with E<.Li .func>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3076
#, no-wrap
msgid "Li .endif"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3083
msgid ""
"E<.Li .endif> is part of the E<.Xr as> support for conditional assembly; it "
"marks the end of a block of code that is only assembled conditionally.See "
"Section E<.Dq If>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3084
#, no-wrap
msgid "Li .equ Va symbol, Va expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3094
msgid ""
"This directive sets the value of E<.Va symbol> to E<.Va expression>.  It is "
"synonymous with E<.Li .set>; see Set,, E<.Li .set> \\&."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3095
#, no-wrap
msgid "Li .equiv Va symbol, Va expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3106
msgid ""
"The E<.Li .equiv> directive is like E<.Li .equ> and E<.Li .set>, except that "
"the assembler will signal an error if E<.Va symbol> is already defined. Note "
"a symbol which has been referenced but not actually defined is considered to "
"be undefined."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3108
msgid "Except for the contents of the error message, this is roughly equivalent to"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3113
#, no-wrap
msgid ""
"\\&.ifdef SYM\n"
"\\&.err\n"
"\\&.endif\n"
"\\&.equ SYM,VAL\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3115
msgid "plus it protects the symbol from later redefinition."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3116
#, no-wrap
msgid "Li .eqv Va symbol, Va expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3124
msgid ""
"The E<.Li .eqv> directive is like E<.Li .equiv>, but no attempt is made to "
"evaluate the expression or any part of it immediately.  Instead each time "
"the resulting symbol is used in an expression, a snapshot of its current "
"value is taken."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3125
#, no-wrap
msgid "Li .err"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3134
msgid ""
"If E<.Xr as> assembles a E<.Li .err> directive, it will print an error "
"message and, unless the E<.Op -Z> option was used, it will not generate an "
"object file. This can be used to signal an error in conditionally compiled "
"code."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3135
#, no-wrap
msgid "Li .error \" Va string\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3142
msgid ""
"Similarly to E<.Li .err>, this directive emits an error, but you can specify "
"a string that will be emitted as the error message. If you don't specify the "
"message, it defaults to E<.Li \".error directive invoked in source file\">.  "
"See Section.Dq Errors ."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3145
#, no-wrap
msgid " .error \"This code has not been assembled and tested.\"\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3147
#, no-wrap
msgid "Li .exitm"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3150
msgid "Exit early from the current macro definition.See Section E<.Dq Macro>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3151
#, no-wrap
msgid "Li .extern"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3157
msgid ""
"E<.Li .extern> is accepted in the source program---for compatibility with "
"other assemblers---but it is ignored.  E<.Xr as> treats all undefined "
"symbols as external."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3158
#, no-wrap
msgid "Li .fail Va expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3169
msgid ""
"Generates an error or a warning. If the value of the E<.Va expression> is "
"500 or more, E<.Xr as> will print a warning message. If the value is less "
"than 500, E<.Xr as> will print an error message. The message will include "
"the value of E<.Va expression>.  This can occasionally be useful inside "
"complex nested macros or conditional assembly."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3170
#, no-wrap
msgid "Li .file Va string"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3185
msgid ""
"E<.Li .file> tells E<.Xr as> that we are about to start a new logical file.  "
"E<.Va string> is the new file name. In general, the filename is recognized "
"whether or not it is surrounded by quotes E<.Li \">; but if you wish to "
"specify an empty file name, you must give the quotes-- E<.Li \"\">.  This "
"statement may go away in future: it is only recognized to be compatible with "
"old E<.Xr as> programs."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3186
#, no-wrap
msgid "Li .fill Va repeat , Va size , Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3213
msgid ""
"E<.Va repeat>, E<.Va size> and E<.Va value> are absolute expressions. This "
"emits E<.Va repeat> copies of E<.Va size> bytes.  E<.Va Repeat> may be zero "
"or more.  E<.Va Size> may be zero or more, but if it is more than 8, then it "
"is deemed to have the value 8, compatible with other people's "
"assemblers. The contents of each E<.Va repeat> bytes is taken from an 8-byte "
"number. The highest order 4 bytes are zero.  The lowest order 4 bytes are "
"E<.Va value> rendered in the byte-order of an integer on the computer E<.Xr "
"as> is assembling for. Each E<.Va size> bytes in a repetition is taken from "
"the lowest order E<.Va size> bytes of this number. Again, this bizarre "
"behavior is compatible with other people's assemblers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3224
msgid ""
"E<.Va size> and E<.Va value> are optional. If the second comma and E<.Va "
"value> are absent, E<.Va value> is assumed zero. If the first comma and "
"following tokens are absent, E<.Va size> is assumed to be 1."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3225
#, no-wrap
msgid "Li .float Va flonums"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3229
msgid ""
"This directive assembles zero or more flonums, separated by commas. It has "
"the same effect as E<.Li .single>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3230
#, no-wrap
msgid "Li .func Va name[, Va label]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3251
msgid ""
"E<.Li .func> emits debugging information to denote function E<.Va name>, and "
"is ignored unless the file is assembled with debugging enabled. Only E<.Li "
"--gstabs[+]> is currently supported.  E<.Va label> is the entry point of the "
"function and if omitted E<.Va name> prepended with the E<.Li leading char> "
"is used.  E<.Li leading char> is usually E<.Li _> or nothing, depending on "
"the target. All functions are currently defined to have E<.Li void> return "
"type. The function must be terminated with E<.Li .endfunc>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3252
#, no-wrap
msgid "Li .global Va symbol, Li .globl Va symbol"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3263
msgid ""
"E<.Li .global> makes the symbol visible to E<.Li ld>.  If you define E<.Va "
"symbol> in your partial program, its value is made available to other "
"partial programs that are linked with it. Otherwise, E<.Va symbol> takes its "
"attributes from a symbol of the same name from another file linked into the "
"same program."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3269
msgid ""
"Both spellings ( E<.Li .globl> and E<.Li .global>)  are accepted, for "
"compatibility with other assemblers."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3270
#, no-wrap
msgid "Li .hidden Va names"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3279
msgid ""
"This is one of the ELF visibility directives. The other two are E<.Li "
".internal> (see Section E<.Dq Internal>)  and E<.Li .protected> (see Section "
"E<.Dq Protected>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3288
msgid ""
"This directive overrides the named symbols default visibility (which is set "
"by their binding: local, global or weak). The directive sets the visibility "
"to E<.Li hidden> which means that the symbols are not visible to other "
"components. Such symbols are always considered to be E<.Li protected> as "
"well."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3289
#, no-wrap
msgid "Li .hword Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3293 /usr/src/contrib/binutils/gas/doc/as.7:4445
msgid ""
"This expects zero or more E<.Va expressions>, and emits a 16 bit number for "
"each."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3296
msgid "This directive is a synonym for E<.Li .short>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3297
#, no-wrap
msgid "Li .ident"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3312
msgid ""
"This directive is used by some assemblers to place tags in object files. The "
"behavior of this directive varies depending on the target. When using the "
"a.out object file format, E<.Xr as> simply accepts the directive for "
"source-file compatibility with existing assemblers, but does not emit "
"anything for it. When using COFF, comments are emitted to the E<.Li "
".comment> or E<.Li .rdata> section, depending on the target. When using ELF, "
"comments are emitted to the E<.Li .comment> section."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3313
#, no-wrap
msgid "Li .if Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3331
msgid ""
"E<.Li .if> marks the beginning of a section of code which is only considered "
"part of the source program being assembled if the argument (which must be an "
"E<.Va absolute expression>)  is non-zero. The end of the conditional section "
"of code must be marked by E<.Li .endif> (see Section E<.Dq Endif>); "
"optionally, you may include code for the alternative condition, flagged by "
"E<.Li .else> (see Section E<.Dq Else>).  If you have several conditions to "
"check, E<.Li .elseif> may be used to avoid nesting blocks if/else within "
"each subsequent E<.Li .else> block."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3335
msgid "The following variants of E<.Li .if> are also supported:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3336
#, no-wrap
msgid ".ifdef Va symbol"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3341
msgid ""
"Assembles the following section of code if the specified E<.Va symbol> has "
"been defined. Note a symbol which has been referenced but not yet defined is "
"considered to be undefined."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3342
#, no-wrap
msgid ".ifb Va text"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3344
msgid "Assembles the following section of code if the operand is blank (empty)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3345
#, no-wrap
msgid ".ifc Va string1, Va string2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3351
msgid ""
"Assembles the following section of code if the two strings are the same. The "
"strings may be optionally quoted with single quotes. If they are not quoted, "
"the first string stops at the first comma, and the second string stops at "
"the end of the line. Strings which contain whitespace should be quoted. The "
"string comparison is case sensitive."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3352
#, no-wrap
msgid ".ifeq Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3354
msgid "Assembles the following section of code if the argument is zero."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3355
#, no-wrap
msgid ".ifeqs Va string1, Va string2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3359
msgid ""
"Another form of E<.Li .ifc>.  The strings must be quoted using double "
"quotes."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3360
#, no-wrap
msgid ".ifge Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3363
msgid ""
"Assembles the following section of code if the argument is greater than or "
"equal to zero."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3364
#, no-wrap
msgid ".ifgt Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3366
msgid ""
"Assembles the following section of code if the argument is greater than "
"zero."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3367
#, no-wrap
msgid ".ifle Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3370
msgid ""
"Assembles the following section of code if the argument is less than or "
"equal to zero."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3371
#, no-wrap
msgid ".iflt Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3373
msgid "Assembles the following section of code if the argument is less than zero."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3374
#, no-wrap
msgid ".ifnb Va text"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3379
msgid ""
"Like E<.Li .ifb>, but the sense of the test is reversed: this assembles the "
"following section of code if the operand is non-blank (non-empty)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3380
#, no-wrap
msgid ".ifnc Va string1, Va string2."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3385
msgid ""
"Like E<.Li .ifc>, but the sense of the test is reversed: this assembles the "
"following section of code if the two strings are not the same."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3386
#, no-wrap
msgid ".ifndef Va symbol"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3387
#, no-wrap
msgid ".ifnotdef Va symbol"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3392
msgid ""
"Assembles the following section of code if the specified E<.Va symbol> has "
"not been defined. Both spelling variants are equivalent. Note a symbol which "
"has been referenced but not yet defined is considered to be undefined."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3393
#, no-wrap
msgid ".ifne Va absolute expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3397
msgid ""
"Assembles the following section of code if the argument is not equal to zero "
"(in other words, this is equivalent to E<.Li .if>)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3398
#, no-wrap
msgid ".ifnes Va string1, Va string2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3403
msgid ""
"Like E<.Li .ifeqs>, but the sense of the test is reversed: this assembles "
"the following section of code if the two strings are not the same."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3405
#, no-wrap
msgid "Li .incbin \" Va file\" [, Va skip[, Va count]]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3417
msgid ""
"The E<.Li incbin> directive includes E<.Va file> verbatim at the current "
"location. You can control the search paths used with the E<.Li -I> "
"command-line option (see Section E<.Dq Invoking>).  Quotation marks are "
"required around E<.Va file>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3429
msgid ""
"The E<.Va skip> argument skips a number of bytes from the start of the E<.Va "
"file>.  The E<.Va count> argument indicates the maximum number of bytes to "
"read. Note that the data is not aligned in any way, so it is the user's "
"responsibility to make sure that proper alignment is provided both before "
"and after the E<.Li incbin> directive."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3430
#, no-wrap
msgid "Li .include \" Va file\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3443
msgid ""
"This directive provides a way to include supporting files at specified "
"points in your source program. The code from E<.Va file> is assembled as if "
"it followed the point of the E<.Li .include>; when the end of the included "
"file is reached, assembly of the original file continues. You can control "
"the search paths used with the E<.Li -I> command-line option (see Section "
"E<.Dq Invoking>).  Quotation marks are required around E<.Va file>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3444
#, no-wrap
msgid "Li .int Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3450
msgid ""
"Expect zero or more E<.Va expressions>, of any section, separated by "
"commas. For each expression, emit a number that, at run time, is the value "
"of that expression. The byte order and bit size of the number depends on "
"what kind of target the assembly is for."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3451
#, no-wrap
msgid "Li .internal Va names"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3460
msgid ""
"This is one of the ELF visibility directives. The other two are E<.Li "
".hidden> (see Section E<.Dq Hidden>)  and E<.Li .protected> (see Section "
"E<.Dq Protected>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3469
msgid ""
"This directive overrides the named symbols default visibility (which is set "
"by their binding: local, global or weak). The directive sets the visibility "
"to E<.Li internal> which means that the symbols are considered to be E<.Li "
"hidden> (i.e., not visible to other components), and that some extra, "
"processor specific processing must also be performed upon the symbols as "
"well."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3470
#, no-wrap
msgid "Li .irp Va symbol, Va values..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3490
msgid ""
"Evaluate a sequence of statements assigning different values to E<.Va "
"symbol>.  The sequence of statements starts at the E<.Li .irp> directive, "
"and is terminated by an E<.Li .endr> directive. For each E<.Va value>, E<.Va "
"symbol> is set to E<.Va value>, and the sequence of statements is "
"assembled. If no E<.Va value> is listed, the sequence of statements is "
"assembled once, with E<.Va symbol> set to the null string. To refer to E<.Va "
"symbol> within the sequence of statements, use E<.Va \\esymbol>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3492 /usr/src/contrib/binutils/gas/doc/as.7:3531 /usr/src/contrib/binutils/gas/doc/as.7:4213
msgid "For example, assembling"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3497
#, no-wrap
msgid ""
"        .irp    param,1,2,3\n"
"        move    d\\eparam,sp@-\n"
"        .endr\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3500 /usr/src/contrib/binutils/gas/doc/as.7:3539 /usr/src/contrib/binutils/gas/doc/as.7:4221
msgid "is equivalent to assembling"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3505 /usr/src/contrib/binutils/gas/doc/as.7:3544
#, no-wrap
msgid ""
"        move    d1,sp@-\n"
"        move    d2,sp@-\n"
"        move    d3,sp@-\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3510
msgid "For some caveats with the spelling of E<.Va symbol>, see also Macro."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3511
#, no-wrap
msgid "Li .irpc Va symbol, Va values..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3529
msgid ""
"Evaluate a sequence of statements assigning different values to E<.Va "
"symbol>.  The sequence of statements starts at the E<.Li .irpc> directive, "
"and is terminated by an E<.Li .endr> directive. For each character in E<.Va "
"value>, E<.Va symbol> is set to the character, and the sequence of "
"statements is assembled. If no E<.Va value> is listed, the sequence of "
"statements is assembled once, with E<.Va symbol> set to the null string. To "
"refer to E<.Va symbol> within the sequence of statements, use E<.Va "
"\\esymbol>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3536
#, no-wrap
msgid ""
"        .irpc    param,123\n"
"        move    d\\eparam,sp@-\n"
"        .endr\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3550
msgid ""
"For some caveats with the spelling of E<.Va symbol>, see also the discussion "
"atSee Section E<.Dq Macro>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3551
#, no-wrap
msgid "Li .lcomm Va symbol , Va length"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3565
msgid ""
"Reserve E<.Va length> (an absolute expression) bytes for a local common "
"denoted by E<.Va symbol>.  The section and value of E<.Va symbol> are those "
"of the new local common. The addresses are allocated in the bss section, so "
"that at run-time the bytes start off zeroed.  E<.Va Symbol> is not declared "
"global (see Section E<.Dq Global>), so is normally not visible to E<.Li ld>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3566
#, no-wrap
msgid "Li .lflags"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3570
msgid ""
"E<.Xr as> accepts this directive, for compatibility with other assemblers, "
"but ignores it."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3571
#, no-wrap
msgid "Li .line Va line-number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3588
msgid ""
"Even though this is a directive associated with the E<.Li a.out> or E<.Li "
"b.out> object-code formats, E<.Xr as> still recognizes it when producing "
"COFF output, and treats E<.Li .line> as though it were the COFF E<.Li .ln> "
"E<.Em if> it is found outside a E<.Li .def> / E<.Li .endef> pair."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3594
msgid ""
"Inside a E<.Li .def>, E<.Li .line> is, instead, one of the directives used "
"by compilers to generate auxiliary symbol information for debugging."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3595
#, no-wrap
msgid "Li .linkonce [ Va type]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3603
msgid ""
"Mark the current section so that the linker only includes a single copy of "
"it. This may be used to include the same section in several different object "
"files, but ensure that the linker will only include it once in the final "
"output file. The E<.Li .linkonce> pseudo-op must be used for each instance "
"of the section. Duplicate sections are detected based on the section name, "
"so it should be unique."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3607
msgid ""
"This directive is only supported by a few object file formats; as of this "
"writing, the only object file format which supports it is the Portable "
"Executable format used on Windows NT."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3612
msgid ""
"The E<.Va type> argument is optional. If specified, it must be one of the "
"following strings.  For example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3614
#, no-wrap
msgid "\\&.linkonce same_size\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3616
msgid "Not all types may be supported on all object file formats."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3618
#, no-wrap
msgid "discard"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3620
msgid "Silently discard duplicate sections. This is the default."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3621
#, no-wrap
msgid "one_only"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3623
msgid "Warn if there are duplicate sections, but still keep only one copy."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3624
#, no-wrap
msgid "same_size"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3626
msgid "Warn if any of the duplicates have different sizes."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3627
#, no-wrap
msgid "same_contents"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3629
msgid "Warn if any of the duplicates do not have exactly the same contents."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3631
#, no-wrap
msgid "Li .ln Va line-number"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3635
msgid "E<.Li .ln> is a synonym for E<.Li .line>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3636
#, no-wrap
msgid "Li .mri Va val"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3649
msgid ""
"If E<.Va val> is non-zero, this tells E<.Xr as> to enter MRI mode. If E<.Va "
"val> is zero, this tells E<.Xr as> to exit MRI mode. This change affects "
"code assembled until the next E<.Li .mri> directive, or until the end of the "
"file.See Section E<.Dq M>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3650
#, no-wrap
msgid "Li .list"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3660
msgid ""
"Control (in conjunction with the E<.Li .nolist> directive) whether or not "
"assembly listings are generated. These two directives maintain an internal "
"counter (which is zero initially).  E<.Li .list> increments the counter, and "
"E<.Li .nolist> decrements it. Assembly listings are generated whenever the "
"counter is greater than zero."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3666
msgid ""
"By default, listings are disabled. When you enable them (with the E<.Li -a> "
"command line option;see Section E<.Dq Invoking>), the initial value of the "
"listing counter is one."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3667
#, no-wrap
msgid "Li .long Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3672
msgid "E<.Li .long> is the same as E<.Li .int>.  See Section.Dq Int ."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3673
#, no-wrap
msgid "Li .macro"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3682
msgid ""
"The commands E<.Li .macro> and E<.Li .endm> allow you to define macros that "
"generate assembly output. For example, this definition specifies a macro "
"E<.Li sum> that puts a sequence of numbers into memory:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3690
#, no-wrap
msgid ""
"        .macro  sum from=0, to=5\n"
"        .long   \\efrom\n"
"        .if     \\eto-\\efrom\n"
"        sum     \"(\\efrom+1)\",\\eto\n"
"        .endif\n"
"        .endm\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3695
msgid "With that definition, E<.Li SUM 0,5> is equivalent to this assembly input:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3703
#, no-wrap
msgid ""
"        .long   0\n"
"        .long   1\n"
"        .long   2\n"
"        .long   3\n"
"        .long   4\n"
"        .long   5\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3706
#, no-wrap
msgid ".macro Va macname"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3707
#, no-wrap
msgid ".macro Va macname Va macargs ..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3728
msgid ""
"Begin the definition of a macro called E<.Va macname>.  If your macro "
"definition requires arguments, specify their names after the macro name, "
"separated by commas or spaces. You can qualify the macro argument to "
"indicate whether all invocations must specify a non-blank value (through "
"E<.Li : Li req>), or whether it takes all of the remaining arguments "
"(through E<.Li : Li vararg>).  You can supply a default value for any macro "
"argument by following the name with E<.Li = Va deflt>.  You cannot define "
"two macros with the same E<.Va macname> unless it has been subject to the "
"E<.Li .purgem> directive (see Section E<.Dq Purgem>)  between the two "
"definitions. For example, these are all valid E<.Li .macro> statements:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3730
#, no-wrap
msgid ".macro comm"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3734
msgid ""
"Begin the definition of a macro called E<.Li comm>, which takes no "
"arguments."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3735
#, no-wrap
msgid ".macro plus1 p, p1"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3736
#, no-wrap
msgid ".macro plus1 p p1"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3744
msgid ""
"Either statement begins the definition of a macro called E<.Li plus1>, which "
"takes two arguments; within the macro definition, write E<.Li \\ep> or E<.Li "
"\\ep1> to evaluate the arguments."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3745
#, no-wrap
msgid ".macro reserve_str p1=0 p2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3769
msgid ""
"Begin the definition of a macro called E<.Li reserve_str>, with two "
"arguments. The first argument has a default value, but not the second.  "
"After the definition is complete, you can call the macro either as E<.Li "
"reserve_str Va a, Va b> (with E<.Li \\ep1> evaluating to E<.Va a> and E<.Li "
"\\ep2> evaluating to E<.Va b>), or as E<.Li reserve_str , Va b> (with E<.Li "
"\\ep1> evaluating as the default, in this case E<.Li 0>, and E<.Li \\ep2> "
"evaluating to E<.Va b>)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3770
#, no-wrap
msgid ".macro m p1:req, p2=0, p3:vararg"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3776
msgid ""
"Begin the definition of a macro called E<.Li m>, with at least three "
"arguments. The first argument must always have a value specified, but not "
"the second, which instead has a default value. The third formal will get "
"assigned all remaining arguments specified at invocation time."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3782
msgid ""
"When you call a macro, you can specify the argument values either by "
"position, or by keyword. For example, E<.Li sum 9,17> is equivalent to E<.Li "
"sum to=17, from=9>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3797
msgid ""
"Note that since each of the E<.Va macargs> can be an identifier exactly as "
"any other one permitted by the target architecture, there may be occasional "
"problems if the target hand-crafts special meanings to certain characters "
"when they occur in a special position. For example, if the colon ( E<.Li>:)  "
"is generally permitted to be part of a symbol name, but the architecture "
"specific code special-cases it when occurring as the final character of a "
"symbol (to denote a label), then the macro parameter replacement code will "
"have no way of knowing that and consider the whole construct (including the "
"colon) an identifier, and check only this identifier for being the subject "
"to parameter substitution. So for example this macro definition:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3802
#, no-wrap
msgid ""
"\t.macro label l\n"
"\\el:\n"
"\t.endm\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3812
msgid ""
"might not work as expected. Invoking E<.Li label foo> might not create a "
"label called E<.Li foo> but instead just insert the text E<.Li \\el:> into "
"the assembler source, probably generating an error about an unrecognised "
"identifier."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3818
msgid ""
"Similarly problems might occur with the period character ( E<.Li>.)  which "
"is often allowed inside opcode names (and hence identifier names). So for "
"example constructing a macro to build an opcode from a base name and a "
"length specifier like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3823
#, no-wrap
msgid ""
"\t.macro opcode base length\n"
"        \\ebase.\\elength\n"
"\t.endm\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3832
msgid ""
"and invoking it as E<.Li opcode store l> will not create a E<.Li store.l> "
"instruction but instead generate some kind of error as the assembler tries "
"to interpret the text E<.Li \\ebase.\\elength>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3834
msgid "There are several possible ways around this problem:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3836
#, no-wrap
msgid "Insert white space"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3839
msgid ""
"If it is possible to use white space characters then this is the simplest "
"solution. eg:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3844
#, no-wrap
msgid ""
"\t.macro label l\n"
"\\el :\n"
"\t.endm\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3846
#, no-wrap
msgid "Use Li \\e()"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3851
msgid ""
"The string E<.Li \\e()> can be used to separate the end of a macro argument "
"from the following text.  eg:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3856
#, no-wrap
msgid ""
"\t.macro opcode base length\n"
"        \\ebase\\e().\\elength\n"
"\t.endm\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3858
#, no-wrap
msgid "Use the alternate macro syntax mode"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3862
msgid ""
"In the alternative macro syntax mode the ampersand character ( E<.Li &>)  "
"can be used as a separator. eg:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3868
#, no-wrap
msgid ""
"\t.altmacro\n"
"\t.macro label l\n"
"l&:\n"
"\t.endm\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3881
msgid ""
"Note: this problem of correctly identifying string parameters to pseudo ops "
"also applies to the identifiers used in E<.Li .irp> (see Section E<.Dq Irp>)  "
"and E<.Li .irpc> (see Section E<.Dq Irpc>)  as well."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3882
#, no-wrap
msgid ".endm"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3884
msgid "Mark the end of a macro definition."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3885
#, no-wrap
msgid ".exitm"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3887
msgid "Exit early from the current macro definition."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3888
#, no-wrap
msgid "\\e@"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3895
msgid ""
"E<.Xr as> maintains a counter of how many macros it has executed in this "
"pseudo-variable; you can copy that number to your output with E<.Li \\e@>, "
"but E<.Em only within a macro definition>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3896 /usr/src/contrib/binutils/gas/doc/as.7:3905
#, no-wrap
msgid "LOCAL Va name [ , ... ]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3899
msgid ""
"E<.Em Warning: Li LOCAL is only available if you select \\(lqalternate macro "
"syntax\\(rq with Li --alternate or Li .altmacro.> See Section.Dq Altmacro ."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3901
#, no-wrap
msgid "Li .altmacro"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3903
msgid "Enable alternate macro mode, enabling:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3917
msgid ""
"One additional directive, E<.Li LOCAL>, is available. It is used to generate "
"a string replacement for each of the E<.Va name> arguments, and replace any "
"instances of E<.Va name> in each macro expansion. The replacement string is "
"unique in the assembly, and different for each separate macro expansion.  "
"E<.Li LOCAL> allows you to write macros that define symbols, without fear of "
"conflict between separate macro expansions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3918
#, no-wrap
msgid "String delimiters"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3921
msgid ""
"You can write strings delimited in these other ways besides E<.Li \" Va "
"string\">:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3923
#, no-wrap
msgid "' Va string'"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3925
msgid "You can delimit strings with single-quote characters."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3926
#, no-wrap
msgid "E<lt> Va stringE<gt>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3928
msgid "You can delimit strings with matching angle brackets."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3930
#, no-wrap
msgid "single-character string escape"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3938
msgid ""
"To include any single character literally in a string (even if the character "
"would otherwise have some special meaning), you can prefix the character "
"with E<.Li !> (an exclamation mark). For example, you can write E<.Li "
"E<lt>4.3 !E<gt> 5.4!!E<gt>> to get the literal text E<.Li 4.3 E<gt> 5.4!>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:3939
#, no-wrap
msgid "Expression results as strings"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3945
msgid ""
"You can write E<.Li % Va expr> to evaluate the expression E<.Va expr> and "
"use the result as a string."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3947
#, no-wrap
msgid "Li .noaltmacro"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3950
msgid "Disable alternate macro mode.See Section E<.Dq Altmacro>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3951
#, no-wrap
msgid "Li .nolist"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3961
msgid ""
"Control (in conjunction with the E<.Li .list> directive) whether or not "
"assembly listings are generated. These two directives maintain an internal "
"counter (which is zero initially).  E<.Li .list> increments the counter, and "
"E<.Li .nolist> decrements it. Assembly listings are generated whenever the "
"counter is greater than zero."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3962
#, no-wrap
msgid "Li .octa Va biGNUms"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3965
msgid ""
"This directive expects zero or more biGNUms, separated by commas. For each "
"biGNUm, it emits a 16-byte integer."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3969
msgid ""
"The term \\(lqocta\\(rq comes from contexts in which a \\(lqword\\(rq is two "
"bytes; hence E<.Em octa> -word for 16 bytes."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:3970
#, no-wrap
msgid "Li .org Va new-lc , Va fill"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3989
msgid ""
"Advance the location counter of the current section to E<.Va new-lc>.  E<.Va "
"new-lc> is either an absolute expression or an expression with the same "
"section as the current subsection. That is, you can't use E<.Li .org> to "
"cross sections: if E<.Va new-lc> has the wrong section, the E<.Li .org> "
"directive is ignored. To be compatible with former assemblers, if the "
"section of E<.Va new-lc> is absolute, E<.Xr as> issues a warning, then "
"pretends the section of E<.Va new-lc> is the same as the current subsection."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:3995
msgid ""
"E<.Li .org> may only increase the location counter, or leave it unchanged; "
"you cannot use E<.Li .org> to move the location counter backwards."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4002
msgid ""
"Because E<.Xr as> tries to assemble programs in one pass, E<.Va new-lc> may "
"not be undefined. If you really detest this restriction we eagerly await a "
"chance to share your improved assembler."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4005
msgid ""
"Beware that the origin is relative to the start of the section, not to the "
"start of the subsection. This is compatible with other people's assemblers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4014
msgid ""
"When the location counter (of the current subsection) is advanced, the "
"intervening bytes are filled with E<.Va fill> which should be an absolute "
"expression. If the comma and E<.Va fill> are omitted, E<.Va fill> defaults "
"to zero."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4015
#, no-wrap
msgid "Li .p2align[wl] Va abs-expr, Va abs-expr, Va abs-expr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4022
msgid ""
"Pad the location counter (in the current subsection) to a particular storage "
"boundary. The first expression (which must be absolute) is the number of "
"low-order zero bits the location counter must have after advancement. For "
"example E<.Li .p2align 3> advances the location counter until it a multiple "
"of 8. If the location counter is already a multiple of 8, no change is "
"needed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4053
msgid ""
"The E<.Li .p2alignw> and E<.Li .p2alignl> directives are variants of the "
"E<.Li .p2align> directive. The E<.Li .p2alignw> directive treats the fill "
"pattern as a two byte word value. The E<.Li .p2alignl> directives treats the "
"fill pattern as a four byte longword value. For example, E<.Li .p2alignw "
"2,0x368d> will align to a multiple of 4. If it skips two bytes, they will be "
"filled in with the value 0x368d (the exact placement of the bytes depends "
"upon the endianness of the processor). If it skips 1 or 3 bytes, the fill "
"value is undefined."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4054
#, no-wrap
msgid "Li .previous"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4069
msgid ""
"This is one of the ELF section stack manipulation directives. The others are "
"E<.Li .section> (see Section E<.Dq Section>), E<.Li .subsection> (see "
"Section E<.Dq SubSection>), E<.Li .pushsection> (see Section E<.Dq "
"PushSection>), and E<.Li .popsection> (see Section E<.Dq PopSection>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4074
msgid ""
"This directive swaps the current section (and subsection) with most recently "
"referenced section (and subsection) prior to this one. Multiple E<.Li "
".previous> directives in a row will flip between two sections (and their "
"subsections)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4077
msgid ""
"In terms of the section stack, this directive swaps the current section with "
"the top section on the section stack."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4078
#, no-wrap
msgid "Li .popsection"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4093
msgid ""
"This is one of the ELF section stack manipulation directives. The others are "
"E<.Li .section> (see Section E<.Dq Section>), E<.Li .subsection> (see "
"Section E<.Dq SubSection>), E<.Li .pushsection> (see Section E<.Dq "
"PushSection>), and E<.Li .previous> (see Section E<.Dq Previous>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4097
msgid ""
"This directive replaces the current section (and subsection) with the top "
"section (and subsection) on the section stack. This section is popped off "
"the stack."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4098
#, no-wrap
msgid "Li .print Va string"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4105
msgid ""
"E<.Xr as> will print E<.Va string> on the standard output during "
"assembly. You must put E<.Va string> in double quotes."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4106
#, no-wrap
msgid "Li .protected Va names"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4115
msgid ""
"This is one of the ELF visibility directives. The other two are E<.Li "
".hidden> (see Section E<.Dq Hidden>)  and E<.Li .internal> (see Section "
"E<.Dq Internal>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4123
msgid ""
"This directive overrides the named symbols default visibility (which is set "
"by their binding: local, global or weak). The directive sets the visibility "
"to E<.Li protected> which means that any references to the symbols from "
"within the components that defines them must be resolved to the definition "
"in that component, even if a definition in another component would normally "
"preempt this."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4124
#, no-wrap
msgid "Li .psize Va lines , Va columns"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4127
msgid ""
"Use this directive to declare the number of lines---and, optionally, the "
"number of columns---to use for each page, when generating listings."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4133
msgid ""
"If you do not use E<.Li .psize>, listings use a default line-count of "
"60. You may omit the comma and E<.Va columns> specification; the default "
"width is 200 columns."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4138
msgid ""
"E<.Xr as> generates formfeeds whenever the specified number of lines is "
"exceeded (or whenever you explicitly request one, using E<.Li .eject>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4145
msgid ""
"If you specify E<.Va lines> as E<.Li 0>, no formfeeds are generated save "
"those explicitly specified with E<.Li .eject>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4146
#, no-wrap
msgid "Li .purgem Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4151
msgid ""
"Undefine the macro E<.Va name>, so that later uses of the string will not be "
"expanded.See Section E<.Dq Macro>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4152
#, no-wrap
msgid "Li .pushsection Va name , Va subsection"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4167
msgid ""
"This is one of the ELF section stack manipulation directives. The others are "
"E<.Li .section> (see Section E<.Dq Section>), E<.Li .subsection> (see "
"Section E<.Dq SubSection>), E<.Li .popsection> (see Section E<.Dq "
"PopSection>), and E<.Li .previous> (see Section E<.Dq Previous>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4173
msgid ""
"This directive pushes the current section (and subsection) onto the top of "
"the section stack, and then replaces the current section and subsection with "
"E<.Li name> and E<.Li subsection>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4174
#, no-wrap
msgid "Li .quad Va biGNUms"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4179
msgid ""
"E<.Li .quad> expects zero or more biGNUms, separated by commas. For each "
"bignum, it emits an 8-byte integer. If the biGNUm won't fit in 8 bytes, it "
"prints a warning message; and just takes the lowest order 8 bytes of the "
"biGNUm."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4183
msgid ""
"The term \\(lqquad\\(rq comes from contexts in which a \\(lqword\\(rq is two "
"bytes; hence E<.Em quad> -word for 8 bytes."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4184
#, no-wrap
msgid "Li .reloc Va offset, Va reloc_name[, Va expression]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4202
msgid ""
"Generate a relocation at E<.Va offset> of type E<.Va reloc_name> with value "
"E<.Va expression>.  If E<.Va offset> is a number, the relocation is "
"generated in the current section. If E<.Va offset> is an expression that "
"resolves to a symbol plus offset, the relocation is generated in the given "
"symbol's section.  E<.Va expression>, if present, must resolve to a symbol "
"plus addend or to an absolute value, but note that not all targets support "
"an addend. e.g. ELF REL targets such as i386 store an addend in the section "
"contents rather than in the relocation.  This low level interface does not "
"support addends stored in the section."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4203
#, no-wrap
msgid "Li .rept Va count"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4211
msgid ""
"Repeat the sequence of lines between the E<.Li .rept> directive and the next "
"E<.Li .endr> directive E<.Va count> times."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4218
#, no-wrap
msgid ""
"        .rept   3\n"
"        .long   0\n"
"        .endr\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4226
#, no-wrap
msgid ""
"        .long   0\n"
"        .long   0\n"
"        .long   0\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4228
#, no-wrap
msgid "Li .sbttl \" Va subheading\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4233
msgid ""
"Use E<.Va subheading> as the title (third line, immediately after the title "
"line) when generating assembly listings."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4236 /usr/src/contrib/binutils/gas/doc/as.7:4725
msgid ""
"This directive affects subsequent pages, as well as the current page if it "
"appears within ten lines of the top of a page."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4237
#, no-wrap
msgid "Li .section Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4242
msgid ""
"Use the E<.Li .section> directive to assemble the following code into a "
"section named E<.Va name>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4249
msgid ""
"This directive is only supported for targets that actually support "
"arbitrarily named sections; on E<.Li a.out> targets, for example, it is not "
"accepted, even with a standard E<.Li a.out> section name."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4264
msgid ""
"This is one of the ELF section stack manipulation directives. The others are "
"E<.Li .subsection> (see Section E<.Dq SubSection>), E<.Li .pushsection> (see "
"Section E<.Dq PushSection>), E<.Li .popsection> (see Section E<.Dq "
"PopSection>), and E<.Li .previous> (see Section E<.Dq Previous>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4268
msgid "For ELF targets, the E<.Li .section> directive is used like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4271
#, no-wrap
msgid "\\&.section name [, \"flags\"[, @type[,flag_specific_arguments]]]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4277
msgid ""
"The optional E<.Va flags> argument is a quoted string which may contain any "
"combination of the following characters:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4278
#, no-wrap
msgid "a"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4280 /usr/src/contrib/binutils/gas/doc/as.7:4404
msgid "section is allocatable"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4280
#, no-wrap
msgid "w"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4282 /usr/src/contrib/binutils/gas/doc/as.7:4406
msgid "section is writable"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4282
#, no-wrap
msgid "x"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4284 /usr/src/contrib/binutils/gas/doc/as.7:4408
msgid "section is executable"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4284
#, no-wrap
msgid "M"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4286
msgid "section is mergeable"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4286
#, no-wrap
msgid "S"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4288
msgid "section contains zero terminated strings"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4288
#, no-wrap
msgid "G"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4290
msgid "section is a member of a section group"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4290
#, no-wrap
msgid "T"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4292
msgid "section is used for thread-local-storage"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4297
msgid ""
"The optional E<.Va type> argument may contain one of the following "
"constants:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4298
#, no-wrap
msgid "@progbits"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4300
msgid "section contains data"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4300
#, no-wrap
msgid "@nobits"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4302
msgid "section does not contain data (i.e., section only occupies space)"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4302
#, no-wrap
msgid "@note"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4304
msgid "section contains data which is used by things other than the program"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4304
#, no-wrap
msgid "@init_array"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4306
msgid "section contains an array of pointers to init functions"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4306
#, no-wrap
msgid "@fini_array"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4308
msgid "section contains an array of pointers to finish functions"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4308
#, no-wrap
msgid "@preinit_array"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4310
msgid "section contains an array of pointers to pre-init functions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4313
msgid "Many targets only support the first three section types."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4320
msgid ""
"Note on targets where the E<.Li @> character is the start of a comment (eg "
"ARM) then another character is used instead. For example the ARM port uses "
"the E<.Li %> character."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4330
msgid ""
"If E<.Va flags> contains the E<.Li M> symbol then the E<.Va type> argument "
"must be specified as well as an extra argument--- E<.Va entsize> ---like "
"this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4333
#, no-wrap
msgid "\\&.section name , \"flags\"M, @type, entsize\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4351
msgid ""
"Sections with the E<.Li M> flag but not E<.Li S> flag must contain fixed "
"size constants, each E<.Va entsize> octets long. Sections with both E<.Li M> "
"and E<.Li S> must contain zero terminated strings where each character is "
"E<.Va entsize> bytes long. The linker may remove duplicates within sections "
"with the same name, same entity size and same flags.  E<.Va entsize> must be "
"an absolute expression."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4359
msgid ""
"If E<.Va flags> contains the E<.Li G> symbol then the E<.Va type> argument "
"must be present along with an additional field like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4362
#, no-wrap
msgid "\\&.section name , \"flags\"G, @type, GroupName[, linkage]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4368
msgid ""
"The E<.Va GroupName> field specifies the name of the section group to which "
"this particular section belongs. The optional linkage field can contain:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4369
#, no-wrap
msgid "comdat"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4371
msgid "indicates that only one copy of this section should be retained"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4371
#, no-wrap
msgid ".GNU.linkonce"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4373
msgid "an alias for comdat"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4381
msgid ""
"Note: if both the E<.Va M> and E<.Va G> flags are present then the fields "
"for the Merge flag should come first, like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4384
#, no-wrap
msgid "\\&.section name , \"flags\"MG, @type, entsize, GroupName[, linkage]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4390
msgid ""
"If no flags are specified, the default flags depend upon the section name.  "
"If the section name is not recognized, the default will be for the section "
"to have none of the above flags: it will not be allocated in memory, nor "
"writable, nor executable. The section will contain data."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4394
msgid ""
"For ELF targets, the assembler supports another type of E<.Li .section> "
"directive for compatibility with the Solaris assembler:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4397
#, no-wrap
msgid "\\&.section \"name\"[, flags...]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4401
msgid ""
"Note that the section name is quoted. There may be a sequence of comma "
"separated flags:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4402
#, no-wrap
msgid "#alloc"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4404
#, no-wrap
msgid "#write"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4406
#, no-wrap
msgid "#execinstr"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4408
#, no-wrap
msgid "#tls"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4410
msgid "section is used for thread local storage"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4417
msgid ""
"This directive replaces the current section and subsection. See the contents "
"of the gas testsuite directory E<.Li gas/testsuite/gas/elf> for some "
"examples of how this directive and the other section stack directives work."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4418
#, no-wrap
msgid "Li .set Va symbol, Va expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4431
msgid ""
"Set the value of E<.Va symbol> to E<.Va expression>.  This changes E<.Va "
"symbol> \\&'s value and type to conform to E<.Va expression>.  If E<.Va "
"symbol> was flagged as external, it remains flagged (see Section E<.Dq "
"Symbol Attributes>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4435
msgid "You may E<.Li .set> a symbol many times in the same assembly."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4440
msgid ""
"If you E<.Li .set> a global symbol, the value stored in the object file is "
"the last value stored into it."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4441
#, no-wrap
msgid "Li .short Va expressions"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4446
#, no-wrap
msgid "Li .single Va flonums"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4450
msgid ""
"This directive assembles zero or more flonums, separated by commas. It has "
"the same effect as E<.Li .float>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4451
#, no-wrap
msgid "Li .size"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4453
msgid "This directive is used to set the size associated with a symbol."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4457
msgid "For ELF targets, the E<.Li .size> directive is used like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4460
#, no-wrap
msgid "\\&.size name , expression\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4468
msgid ""
"This directive sets the size associated with a symbol E<.Va name>.  The size "
"in bytes is computed from E<.Va expression> which can make use of label "
"arithmetic. This directive is typically used to set the size of function "
"symbols."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4469
#, no-wrap
msgid "Li .sleb128 Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4474
msgid ""
"E<.Va sleb128> stands for \\(lqsigned little endian base 128.\\(rq This is a "
"compact, variable length representation of numbers used by the DWARF "
"symbolic debugging format.See Section E<.Dq Uleb128>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4475
#, no-wrap
msgid "Li .skip Va size , Va fill"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4490
msgid ""
"This directive emits E<.Va size> bytes, each of value E<.Va fill>.  Both "
"E<.Va size> and E<.Va fill> are absolute expressions. If the comma and E<.Va "
"fill> are omitted, E<.Va fill> is assumed to be zero. This is the same as "
"E<.Li .space>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4491
#, no-wrap
msgid "Li .space Va size , Va fill"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4506
msgid ""
"This directive emits E<.Va size> bytes, each of value E<.Va fill>.  Both "
"E<.Va size> and E<.Va fill> are absolute expressions. If the comma and E<.Va "
"fill> are omitted, E<.Va fill> is assumed to be zero. This is the same as "
"E<.Li .skip>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4507
#, no-wrap
msgid "Li .stabd, .stabn, .stabs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4516
msgid ""
"There are three directives that begin E<.Li .stab>.  All emit symbols (see "
"Section E<.Dq Symbols>), for use by symbolic debuggers. The symbols are not "
"entered in the E<.Xr as> hash table: they cannot be referenced elsewhere in "
"the source file. Up to five fields are required:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4518
#, no-wrap
msgid "string"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4523
msgid ""
"This is the symbol's name. It may contain any character except E<.Li "
"\\e000>, so is more general than ordinary symbol names. Some debuggers used "
"to code arbitrarily complex structures into symbol names using this field."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4524
#, no-wrap
msgid "type"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4529
msgid ""
"An absolute expression. The symbol's type is set to the low 8 bits of this "
"expression. Any bit pattern is permitted, but E<.Li ld> and debuggers choke "
"on silly bit patterns."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4530
#, no-wrap
msgid "other"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4533
msgid ""
"An absolute expression. The symbol's \\(lqother\\(rq attribute is set to the "
"low 8 bits of this expression."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4534
#, no-wrap
msgid "desc"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4537
msgid ""
"An absolute expression. The symbol's descriptor is set to the low 16 bits of "
"this expression."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4538
#, no-wrap
msgid "value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4540
msgid "An absolute expression which becomes the symbol's value."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4549
msgid ""
"If a warning is detected while reading a E<.Li .stabd>, E<.Li .stabn>, or "
"E<.Li .stabs> statement, the symbol has probably already been created; you "
"get a half-formed symbol in your object file. This is compatible with "
"earlier assemblers!"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4551
#, no-wrap
msgid ".stabd Va type , Va other , Va desc"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4556
msgid ""
"The \\(lqname\\(rq of the symbol generated is not even an empty string. It "
"is a null pointer, for compatibility. Older assemblers used a null pointer "
"so they didn't waste space in object files with empty strings."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4562
msgid ""
"The symbol's value is set to the location counter, relocatably. When your "
"program is linked, the value of this symbol is the address of the location "
"counter when the E<.Li .stabd> was assembled."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4563
#, no-wrap
msgid ".stabn Va type , Va other , Va desc , Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4566
msgid "The name of the symbol is set to the empty string E<.Li \"\">."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4567
#, no-wrap
msgid ".stabs Va string , Va type , Va other , Va desc , Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4569
msgid "All five fields are specified."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4571
#, no-wrap
msgid "Li .string \" Va str\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4578
msgid ""
"Copy the characters in E<.Va str> to the object file. You may specify more "
"than one string to copy, separated by commas. Unless otherwise specified for "
"a particular machine, the assembler marks the end of each string with a 0 "
"byte. You can use any of the escape sequences described in Strings,,Strings."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4579
#, no-wrap
msgid "Li .struct Va expression"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4583
msgid ""
"Switch to the absolute section, and set the section offset to E<.Va "
"expression>, which must be an absolute expression. You might use this as "
"follows:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4590
#, no-wrap
msgid ""
"        .struct 0\n"
"field1:\n"
"        .struct field1 + 4\n"
"field2:\n"
"        .struct field2 + 4\n"
"field3:\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4601
msgid ""
"This would define the symbol E<.Li field1> to have the value 0, the symbol "
"E<.Li field2> to have the value 4, and the symbol E<.Li field3> to have the "
"value 8. Assembly would be left in the absolute section, and you would need "
"to use a E<.Li .section> directive of some sort to change to some other "
"section before further assembly."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4602
#, no-wrap
msgid "Li .subsection Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4617
msgid ""
"This is one of the ELF section stack manipulation directives. The others are "
"E<.Li .section> (see Section E<.Dq Section>), E<.Li .pushsection> (see "
"Section E<.Dq PushSection>), E<.Li .popsection> (see Section E<.Dq "
"PopSection>), and E<.Li .previous> (see Section E<.Dq Previous>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4622
msgid ""
"This directive replaces the current subsection with E<.Li name>.  The "
"current section is not changed. The replaced subsection is put onto the "
"section stack in place of the then current top of stack subsection."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4623
#, no-wrap
msgid "Li .symver"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4631
msgid ""
"Use the E<.Li .symver> directive to bind symbols to specific version nodes "
"within a source file.  This is only supported on ELF platforms, and is "
"typically used when assembling files to be linked into a shared "
"library. There are cases where it may make sense to use this in objects to "
"be bound into an application itself so as to override a versioned symbol "
"from a shared library."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4635
msgid "For ELF targets, the E<.Li .symver> directive can be used like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4637
#, no-wrap
msgid "\\&.symver name, name2@nodename\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4662
msgid ""
"If the symbol E<.Va name> is defined within the file being assembled, the "
"E<.Li .symver> directive effectively creates a symbol alias with the name "
"E<.Va name2@nodename>, and in fact the main reason that we just don't try "
"and create a regular alias is that the E<.Va @> character isn't permitted in "
"symbol names. The E<.Va name2> part of the name is the actual name of the "
"symbol by which it will be externally referenced. The name E<.Va name> "
"itself is merely a name of convenience that is used so that it is possible "
"to have definitions for multiple versions of a function within a single "
"source file, and so that the compiler can unambiguously know which version "
"of a function is being mentioned. The E<.Va nodename> portion of the alias "
"should be the name of a node specified in the version script supplied to the "
"linker when building a shared library. If you are attempting to override a "
"versioned symbol from a shared library, then E<.Va nodename> should "
"correspond to the nodename of the symbol you are trying to override."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4674
msgid ""
"If the symbol E<.Va name> is not defined within the file being assembled, "
"all references to E<.Va name> will be changed to E<.Va name2@nodename>.  If "
"no reference to E<.Va name> is made, E<.Va name2@nodename> will be removed "
"from the symbol table."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4678
msgid "Another usage of the E<.Li .symver> directive is:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4680
#, no-wrap
msgid "\\&.symver name, name2@@nodename\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4690
msgid ""
"In this case, the symbol E<.Va name> must exist and be defined within the "
"file being assembled. It is similar to E<.Va name2@nodename>.  The "
"difference is E<.Va name2@@nodename> will also be used to resolve references "
"to E<.Va name2> by the linker."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4694
msgid "The third usage of the E<.Li .symver> directive is:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4696
#, no-wrap
msgid "\\&.symver name, name2@@@nodename\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4707
msgid ""
"When E<.Va name> is not defined within the file being assembled, it is "
"treated as E<.Va name2@nodename>.  When E<.Va name> is defined within the "
"file being assembled, the symbol name, E<.Va name>, will be changed to E<.Va "
"name2@@nodename>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4708
#, no-wrap
msgid "Li .text Va subsection"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4716
msgid ""
"Tells E<.Xr as> to assemble the following statements onto the end of the "
"text subsection numbered E<.Va subsection>, which is an absolute "
"expression. If E<.Va subsection> is omitted, subsection number zero is used."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4717
#, no-wrap
msgid "Li .title \" Va heading\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4722
msgid ""
"Use E<.Va heading> as the title (second line, immediately after the source "
"file name and pagenumber)  when generating assembly listings."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4726
#, no-wrap
msgid "Li .type"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4728
msgid "This directive is used to set the type of a symbol."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4732
msgid "For ELF targets, the E<.Li .type> directive is used like this:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4735
#, no-wrap
msgid "\\&.type name , type description\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4743
msgid ""
"This sets the type of symbol E<.Va name> to be either a function symbol or "
"an object symbol. There are five different syntaxes supported for the E<.Va "
"type description> field, in order to provide compatibility with various "
"other assemblers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4752
msgid ""
"Because some of the characters used in these syntaxes (such as E<.Li @> and "
"E<.Li #>)  are comment characters for some architectures, some of the "
"syntaxes below do not work on all architectures. The first variant will be "
"accepted by the GNU assembler on all architectures so that variant should be "
"used for maximum portability, if you do not need to assemble your code with "
"other assemblers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4754
msgid "The syntaxes supported are:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4758
#, no-wrap
msgid ""
"  .type E<lt>nameE<gt> STT_FUNCTION\n"
"  .type E<lt>nameE<gt> STT_OBJECT\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4761
#, no-wrap
msgid ""
"  .type E<lt>nameE<gt>,#function\n"
"  .type E<lt>nameE<gt>,#object\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4764
#, no-wrap
msgid ""
"  .type E<lt>nameE<gt>,@function\n"
"  .type E<lt>nameE<gt>,@object\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4767
#, no-wrap
msgid ""
"  .type E<lt>nameE<gt>,%function\n"
"  .type E<lt>nameE<gt>,%object\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4770
#, no-wrap
msgid ""
"  .type E<lt>nameE<gt>,\"function\"\n"
"  .type E<lt>nameE<gt>,\"object\"\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4772
#, no-wrap
msgid "Li .uleb128 Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4777
msgid ""
"E<.Va uleb128> stands for \\(lqunsigned little endian base 128.\\(rq This is "
"a compact, variable length representation of numbers used by the DWARF "
"symbolic debugging format.See Section E<.Dq Sleb128>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4778
#, no-wrap
msgid "Li .version \" Va string\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4784
msgid ""
"This directive creates a E<.Li .note> section and places into it an ELF "
"formatted note of type NT_VERSION. The note's name is set to E<.Li string>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4785
#, no-wrap
msgid "Li .vtable_entry Va table, Va offset"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4792
msgid ""
"This directive finds or creates a symbol E<.Li table> and creates a E<.Li "
"VTABLE_ENTRY> relocation for it with an addend of E<.Li offset>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4793
#, no-wrap
msgid "Li .vtable_inherit Va child, Va parent"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4806
msgid ""
"This directive finds the symbol E<.Li child> and finds or creates the symbol "
"E<.Li parent> and then creates a E<.Li VTABLE_INHERIT> relocation for the "
"parent whose addend is the value of the child symbol. As a special case the "
"parent name of E<.Li 0> is treated as referring to the E<.Li *ABS*> section."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4807
#, no-wrap
msgid "Li .warning \" Va string\""
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4813
msgid ""
"Similar to the directive E<.Li .error> (see Section E<.Dq Error>), but just "
"emits a warning."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4814
#, no-wrap
msgid "Li .weak Va names"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4818
msgid ""
"This directive sets the weak attribute on the comma separated list of symbol "
"E<.Li names>.  If the symbols do not already exist, they will be created."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4823
msgid ""
"On COFF targets other than PE, weak symbols are a GNU extension. This "
"directive sets the weak attribute on the comma separated list of symbol "
"E<.Li names>.  If the symbols do not already exist, they will be created."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4827
msgid ""
"On the PE target, weak symbols are supported natively as weak aliases. When "
"a weak symbol is created that is not an alias, GAS creates an alternate "
"symbol to hold the default value."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4828
#, no-wrap
msgid "Li .weakref Va alias, Va target"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4834
msgid ""
"This directive creates an alias to the target symbol that enables the symbol "
"to be referenced with weak-symbol semantics, but without actually making it "
"weak. If direct references or definitions of the symbol are present, then "
"the symbol will not be weak, but if all references to it are through weak "
"references, the symbol will be marked as weak in the symbol table."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4840
msgid ""
"The effect is equivalent to moving all references to the alias to a separate "
"assembly source file, renaming the alias to the symbol in it, declaring the "
"symbol as weak there, and running a reloadable link to merge the object "
"files resulting from the assembly of the new source file and the old source "
"file that had the references to the alias removed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4843
msgid ""
"The alias itself never makes to the symbol table, and is entirely handled "
"within the assembler."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4844
#, no-wrap
msgid "Li .word Va expressions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4850
msgid ""
"This directive expects zero or more E<.Va expressions>, of any section, "
"separated by commas. For each expression, E<.Xr as> emits a 32-bit number."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4851
#, no-wrap
msgid "Deprecated Directives"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4854
msgid ""
"One day these directives won't work. They are included for compatibility "
"with older assemblers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4855
#, no-wrap
msgid ".abort"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:4856
#, no-wrap
msgid ".line"
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:4859
#, no-wrap
msgid "ARM Dependent Features"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:4860 /usr/src/contrib/binutils/gas/doc/as.7:5564 /usr/src/contrib/binutils/gas/doc/as.7:6623 /usr/src/contrib/binutils/gas/doc/as.7:7429 /usr/src/contrib/binutils/gas/doc/as.7:7548
#, no-wrap
msgid "Options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4949
msgid ""
"This option specifies the target processor. The assembler will issue an "
"error message if an attempt is made to assemble an instruction which will "
"not execute on the target processor. The following processor names are "
"recognized: E<.Li arm1>, E<.Li arm2>, E<.Li arm250>, E<.Li arm3>, E<.Li "
"arm6>, E<.Li arm60>, E<.Li arm600>, E<.Li arm610>, E<.Li arm620>, E<.Li "
"arm7>, E<.Li arm7m>, E<.Li arm7d>, E<.Li arm7dm>, E<.Li arm7di>, E<.Li "
"arm7dmi>, E<.Li arm70>, E<.Li arm700>, E<.Li arm700i>, E<.Li arm710>, E<.Li "
"arm710t>, E<.Li arm720>, E<.Li arm720t>, E<.Li arm740t>, E<.Li arm710c>, "
"E<.Li arm7100>, E<.Li arm7500>, E<.Li arm7500fe>, E<.Li arm7t>, E<.Li "
"arm7tdmi>, E<.Li arm7tdmi-s>, E<.Li arm8>, E<.Li arm810>, E<.Li strongarm>, "
"E<.Li strongarm1>, E<.Li strongarm110>, E<.Li strongarm1100>, E<.Li "
"strongarm1110>, E<.Li arm9>, E<.Li arm920>, E<.Li arm920t>, E<.Li arm922t>, "
"E<.Li arm940t>, E<.Li arm9tdmi>, E<.Li arm9e>, E<.Li arm926e>, E<.Li "
"arm926ej-s>, E<.Li arm946e-r0>, E<.Li arm946e>, E<.Li arm946e-s>, E<.Li "
"arm966e-r0>, E<.Li arm966e>, E<.Li arm966e-s>, E<.Li arm968e-s>, E<.Li "
"arm10t>, E<.Li arm10tdmi>, E<.Li arm10e>, E<.Li arm1020>, E<.Li arm1020t>, "
"E<.Li arm1020e>, E<.Li arm1022e>, E<.Li arm1026ej-s>, E<.Li arm1136j-s>, "
"E<.Li arm1136jf-s>, E<.Li arm1156t2-s>, E<.Li arm1156t2f-s>, E<.Li "
"arm1176jz-s>, E<.Li arm1176jzf-s>, E<.Li mpcore>, E<.Li mpcorenovfp>, E<.Li "
"cortex-a8>, E<.Li cortex-r4>, E<.Li cortex-m3>, E<.Li ep9312> (ARM920 with "
"Cirrus Maverick coprocessor), E<.Li i80200> (Intel XScale processor)  E<.Li "
"iwmmxt> (Intel(r) XScale processor with Wireless MMX(tm) technology "
"coprocessor) and E<.Li xscale>.  The special name E<.Li all> may be used to "
"allow the assembler to accept instructions valid for any ARM processor."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:4961
msgid ""
"In addition to the basic instruction set, the assembler can be told to "
"accept various extension mnemonics that extend the processor using the "
"co-processor instruction space. For example, E<.Li -mcpu=arm920+maverick> is "
"equivalent to specifying E<.Li -mcpu=ep9312>.  The following extensions are "
"currently supported: E<.Li +maverick> E<.Li +iwmmxt> and E<.Li +xscale>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5000
msgid ""
"This option specifies the target architecture. The assembler will issue an "
"error message if an attempt is made to assemble an instruction which will "
"not execute on the target architecture. The following architecture names are "
"recognized: E<.Li armv1>, E<.Li armv2>, E<.Li armv2a>, E<.Li armv2s>, E<.Li "
"armv3>, E<.Li armv3m>, E<.Li armv4>, E<.Li armv4xm>, E<.Li armv4t>, E<.Li "
"armv4txm>, E<.Li armv5>, E<.Li armv5t>, E<.Li armv5txm>, E<.Li armv5te>, "
"E<.Li armv5texp>, E<.Li armv6>, E<.Li armv6j>, E<.Li armv6k>, E<.Li armv6z>, "
"E<.Li armv6zk>, E<.Li armv7>, E<.Li armv7-a>, E<.Li armv7-r>, E<.Li "
"armv7-m>, E<.Li iwmmxt> and E<.Li xscale>.  If both E<.Li -mcpu> and E<.Li "
"-march> are specified, the assembler will use the setting for E<.Li -mcpu>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5005
msgid ""
"The architecture option can be extended with the same instruction set "
"extension options as the E<.Li -mcpu> option."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5032
msgid ""
"This option specifies the floating point format to assemble for. The "
"assembler will issue an error message if an attempt is made to assemble an "
"instruction which will not execute on the target floating point unit. The "
"following format options are recognized: E<.Li softfpa>, E<.Li fpe>, E<.Li "
"fpe2>, E<.Li fpe3>, E<.Li fpa>, E<.Li fpa10>, E<.Li fpa11>, E<.Li "
"arm7500fe>, E<.Li softvfp>, E<.Li softvfp+vfp>, E<.Li vfp>, E<.Li vfp10>, "
"E<.Li vfp10-r0>, E<.Li vfp9>, E<.Li vfpxd>, E<.Li arm1020t>, E<.Li "
"arm1020e>, E<.Li arm1136jf-s> and E<.Li maverick>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5037
msgid ""
"In addition to determining which instructions are assembled, this option "
"also affects the way in which the E<.Li .double> assembler directive behaves "
"when assembling little-endian code."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5041
msgid ""
"The default is dependent on the processor selected. For Architecture 5 or "
"later, the default is to assembler for VFP instructions; for earlier "
"architectures the default is to assemble for FPA instructions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5047
msgid ""
"This option specifies that the assembler should start assembling Thumb "
"instructions; that is, it should behave as though the file starts with a "
"E<.Li .code 16> directive."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5051
msgid ""
"This option specifies that the output generated by the assembler should be "
"marked as supporting interworking."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5052
#, no-wrap
msgid "-mapcs Li [26|32]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5055
msgid ""
"This option specifies that the output generated by the assembler should be "
"marked as supporting the indicated version of the Arm Procedure. Calling "
"Standard."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5056
#, no-wrap
msgid "-matpcs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5062
msgid ""
"This option specifies that the output generated by the assembler should be "
"marked as supporting the Arm/Thumb Procedure Calling Standard. If enabled "
"this option will cause the assembler to create an empty debugging section in "
"the object file called .arm.atpcs. Debuggers can use this to determine the "
"ABI being used by."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5063
#, no-wrap
msgid "-mapcs-float"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5067
msgid ""
"This indicates the floating point variant of the APCS should be used. In "
"this variant floating point arguments are passed in FP registers rather than "
"integer registers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5068
#, no-wrap
msgid "-mapcs-reentrant"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5071
msgid ""
"This indicates that the reentrant variant of the APCS should be used. This "
"variant supports position independent code."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5079
msgid ""
"This option specifies that the output generated by the assembler should be "
"marked as using specified floating point ABI. The following values are "
"recognized: E<.Li soft>, E<.Li softfp> and E<.Li hard>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5080
#, no-wrap
msgid "-meabi= Va ver"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5087
msgid ""
"This option specifies which EABI version the produced object files should "
"conform to. The following values are recognized: E<.Li GNU>, E<.Li 4> and "
"E<.Li 5>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5091
msgid ""
"This option specifies that the output generated by the assembler should be "
"marked as being encoded for a big-endian processor."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5095
msgid ""
"This option specifies that the output generated by the assembler should be "
"marked as being encoded for a little-endian processor."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5099
msgid ""
"This option specifies that the output of the assembler should be marked as "
"position-independent code (PIC)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5103 /usr/src/contrib/binutils/gas/doc/as.7:6724
msgid "E<.Em Special Characters>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5110
msgid ""
"The presence of a E<.Li @> on a line indicates the start of a comment that "
"extends to the end of the current line. If a E<.Li #> appears as the first "
"character of a line, the whole line is treated as a comment."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5114
msgid ""
"The E<.Li>; character can be used instead of a newline to separate "
"statements."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5120
msgid "Either E<.Li #> or E<.Li $> can be used to indicate immediate operands."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5122
msgid "*TODO* Explain about /data modifier on symbols."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5124 /usr/src/contrib/binutils/gas/doc/as.7:6732
msgid "E<.Em Register Names>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5126
msgid "*TODO* Explain about ARM register naming, and the predefined names."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5128
msgid "E<.Em ARM relocation generation>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5131
msgid ""
"Specific data relocations can be generated by putting the relocation name in "
"parentheses after the symbol name. For example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5134
#, no-wrap
msgid "        .word foo(TARGET1)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5152
msgid ""
"This will generate an E<.Li R_ARM_TARGET1> relocation against the symbol "
"E<.Va foo>.  The following relocations are supported: E<.Li GOT>, E<.Li "
"GOTOFF>, E<.Li TARGET1>, E<.Li TARGET2>, E<.Li SBREL>, E<.Li TLSGD>, E<.Li "
"TLSLDM>, E<.Li TLSLDO>, E<.Li GOTTPOFF> and E<.Li TPOFF>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5158
msgid ""
"For compatibility with older toolchains the assembler also accepts E<.Li "
"(PLT)> after branch targets. This will generate the deprecated E<.Li "
"R_ARM_PLT32> relocation."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5168
msgid ""
"Relocations for E<.Li MOVW> and E<.Li MOVT> instructions can be generated by "
"prefixing the value with E<.Li #:lower16:> and E<.Li #:upper16> "
"respectively. For example to load the 32-bit address of foo into r0:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5172
#, no-wrap
msgid ""
"        MOVW r0, #:lower16:foo\n"
"        MOVT r0, #:upper16:foo\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5174 /usr/src/contrib/binutils/gas/doc/as.7:6332 /usr/src/contrib/binutils/gas/doc/as.7:7631
#, no-wrap
msgid "Floating Point"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5176
msgid "The ARM family uses ieee floating-point numbers."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5177
#, no-wrap
msgid "ARM Machine Directives"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5179
#, no-wrap
msgid ".align Va expression [, Va expression]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5186
msgid ""
"This is the generic E<.Va .align> directive. For the ARM however if the "
"first argument is zero (ie no alignment is needed) the assembler will behave "
"as if the argument had been 2 (ie pad to the next four byte boundary). This "
"is for compatibility with ARM's own assembler."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5187
#, no-wrap
msgid "Va name .req Va register name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5193
msgid ""
"This creates an alias for E<.Va register name> called E<.Va name>.  For "
"example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5196
#, no-wrap
msgid "        foo .req r0\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5198
#, no-wrap
msgid ".unreq Va alias-name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5205
msgid ""
"This undefines a register alias which was previously defined using the E<.Li "
"req>, E<.Li dn> or E<.Li qn> directives. For example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5209
#, no-wrap
msgid ""
"        foo .req r0\n"
"        .unreq foo\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5214
msgid ""
"An error occurs if the name is undefined. Note - this pseudo op can be used "
"to delete builtin in register name aliases (eg 'r0'). This should only be "
"done if it is really necessary."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5215
#, no-wrap
msgid "Va name .dn Va register name [ Va .type] [ Va [index]]"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5216
#, no-wrap
msgid "Va name .qn Va register name [ Va .type] [ Va [index]]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5226
msgid ""
"The E<.Li dn> and E<.Li qn> directives are used to create typed and/or "
"indexed register aliases for use in Advanced SIMD Extension (Neon) "
"instructions. The former should be used to create aliases of "
"double-precision registers, and the latter to create aliases of "
"quad-precision registers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5230
msgid ""
"If these directives are used to create typed aliases, those aliases can be "
"used in Neon instructions instead of writing types after the mnemonic or "
"after each operand. For example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5236
#, no-wrap
msgid ""
"        x .dn d2.f32\n"
"        y .dn d3.f32\n"
"        z .dn d4.f32[1]\n"
"        vmul x,y,z\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5239
msgid "This is equivalent to writing the following:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5242
#, no-wrap
msgid "        vmul.f32 d2,d3,d4[1]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5250
msgid ""
"Aliases created using E<.Li dn> or E<.Li qn> can be destroyed using E<.Li "
"unreq>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5251
#, no-wrap
msgid ".code Li [16|32]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5254
msgid ""
"This directive selects the instruction set being generated. The value 16 "
"selects Thumb, with the value 32 selecting ARM."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5255
#, no-wrap
msgid ".thumb"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5258
msgid "This performs the same action as E<.Va .code 16>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5259
#, no-wrap
msgid ".arm"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5262
msgid "This performs the same action as E<.Va .code 32>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5263
#, no-wrap
msgid ".force_thumb"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5266
msgid ""
"This directive forces the selection of Thumb instructions, even if the "
"target processor does not support those instructions"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5267
#, no-wrap
msgid ".thumb_func"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5274
msgid ""
"This directive specifies that the following symbol is the name of a Thumb "
"encoded function. This information is necessary in order to allow the "
"assembler and linker to generate correct code for interworking between Arm "
"and Thumb instructions and should be used even if interworking is not going "
"to be performed.  The presence of this directive also implies E<.Li .thumb>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5277
msgid ""
"This directive is not neccessary when generating EABI objects. On these "
"targets the encoding is implicit when generating Thumb code."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5278
#, no-wrap
msgid ".thumb_set"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5287
msgid ""
"This performs the equivalent of a E<.Li .set> directive in that it creates a "
"symbol which is an alias for another symbol (possibly not yet defined). This "
"directive also has the added property in that it marks the aliased symbol as "
"being a thumb function entry point, in the same way that the E<.Li "
".thumb_func> directive does."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5288
#, no-wrap
msgid ".ltorg"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5298
msgid ""
"This directive causes the current contents of the literal pool to be dumped "
"into the current section (which is assumed to be the .text section) at the "
"current location (aligned to a word boundary).  E<.Li GAS> maintains a "
"separate literal pool for each section and each sub-section. The E<.Li "
".ltorg> directive will only affect the literal pool of the current section "
"and sub-section.  At the end of assembly all remaining, un-empty literal "
"pools will automatically be dumped."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5304
msgid ""
"Note - older versions of E<.Li GAS> would dump the current literal pool any "
"time a section change occurred. This is no longer done, since it prevents "
"accurate control of the placement of literal pools."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5305
#, no-wrap
msgid ".pool"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5307
msgid "This is a synonym for .ltorg."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5308
#, no-wrap
msgid ".unwind_fnstart"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5310
msgid "Marks the start of a function with an unwind table entry."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5311
#, no-wrap
msgid ".unwind_fnend"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5314
msgid ""
"Marks the end of a function with an unwind table entry. The unwind index "
"table entry is created when this directive is processed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5317
msgid ""
"If no personality routine has been specified then standard personality "
"routine 0 or 1 will be used, depending on the number of unwind opcodes "
"required."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5318
#, no-wrap
msgid ".cantunwind"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5321
msgid ""
"Prevents unwinding through the current function. No personality routine or "
"exception table data is required or permitted."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5322
#, no-wrap
msgid ".personality Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5325
msgid "Sets the personality routine for the current function to E<.Va name>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5326
#, no-wrap
msgid ".personalityindex Va index"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5330
msgid ""
"Sets the personality routine for the current function to the EABI standard "
"routine number E<.Va index>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5331
#, no-wrap
msgid ".handlerdata"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5336
msgid ""
"Marks the end of the current function, and the start of the exception table "
"entry for that function. Anything between this directive and the E<.Li "
".fnend> directive will be added to the exception table entry."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5342
msgid ""
"Must be preceded by a E<.Li .personality> or E<.Li .personalityindex> "
"directive."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5343
#, no-wrap
msgid ".save Va reglist"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5349
msgid ""
"Generate unwinder annotations to restore the registers in E<.Va reglist>.  "
"The format of E<.Va reglist> is the same as the corresponding store-multiple "
"instruction."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5365
#, no-wrap
msgid ""
"  .save {r4, r5, r6, lr}\n"
"  stmfd sp!, {r4, r5, r6, lr}\n"
"  .save f4, 2\n"
"  sfmfd f4, 2, [sp]!\n"
"  .save {d8, d9, d10}\n"
"  fstmdx sp!, {d8, d9, d10}\n"
"  .save {wr10, wr11}\n"
"  wstrd wr11, [sp, #-8]!\n"
"  wstrd wr10, [sp, #-8]!\n"
"or\n"
"  .save wr11\n"
"  wstrd wr11, [sp, #-8]!\n"
"  .save wr10\n"
"  wstrd wr10, [sp, #-8]!\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5367
#, no-wrap
msgid ".vsave Va vfp-reglist"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5374
msgid ""
"Generate unwinder annotations to restore the VFP registers in E<.Va "
"vfp-reglist> using FLDMD. Also works for VFPv3 registers that are to be "
"restored using VLDM. The format of E<.Va vfp-reglist> is the same as the "
"corresponding store-multiple instruction."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5380
#, no-wrap
msgid ""
"  .vsave {d8, d9, d10}\n"
"  fstmdd sp!, {d8, d9, d10}\n"
"  .vsave {d15, d16, d17}\n"
"  vstm sp!, {d15, d16, d17}\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5386
msgid ""
"Since FLDMX and FSTMX are now deprecated, this directive should be used in "
"favour of E<.Li .save> for saving VFP registers for ARMv6 and above."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5387
#, no-wrap
msgid ".pad # Va count"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5392
msgid ""
"Generate unwinder annotations for a stack adjustment of E<.Va count> "
"bytes. A positive value indicates the function prologue allocated stack "
"space by decrementing the stack pointer."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5393
#, no-wrap
msgid ".movsp Va reg [, # Va offset]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5399
msgid ""
"Tell the unwinder that E<.Va reg> contains an offset from the current stack "
"pointer. If E<.Va offset> is not specified then it is assumed to be zero."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5400
#, no-wrap
msgid ".setfp Va fpreg, Va spreg [, # Va offset]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5403
msgid ""
"Make all unwinder annotations relaive to a frame pointer. Without this the "
"unwinder will use offsets from the stack pointer."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5415
msgid ""
"The syntax of this directive is the same as the E<.Li sub> or E<.Li mov> "
"instruction used to set the frame pointer.  E<.Va spreg> must be either "
"E<.Li sp> or mentioned in a previous E<.Li .movsp> directive."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5422
#, no-wrap
msgid ""
"\\&.movsp ip\n"
"mov ip, sp\n"
"\\&...\n"
"\\&.setfp fp, ip, #4\n"
"sub fp, ip, #4\n"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5424
#, no-wrap
msgid ".raw Va offset, Va byte1, ..."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5429
msgid ""
"Insert one of more arbitary unwind opcode bytes, which are known to adjust "
"the stack pointer by E<.Va offset> bytes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5434
msgid ""
"For example E<.Li .unwind_raw 4, 0xb1, 0x01> is equivalent to E<.Li .save "
"{r0}>"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5435
#, no-wrap
msgid ".cpu Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5441
msgid ""
"Select the target processor. Valid values for E<.Va name> are the same as "
"for the E<.Op -mcpu> commandline option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5442
#, no-wrap
msgid ".arch Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5448
msgid ""
"Select the target architecture. Valid values for E<.Va name> are the same as "
"for the E<.Op -march> commandline option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5449
#, no-wrap
msgid ".object_arch Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5457
msgid ""
"Override the architecture recorded in the EABI object attribute "
"section. Valid values for E<.Va name> are the same as for the E<.Li .arch> "
"directive. Typically this is useful when code uses runtime detection of CPU "
"features."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5458
#, no-wrap
msgid ".fpu Va name"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5464
msgid ""
"Select the floating point unit to assemble for. Valid values for E<.Va name> "
"are the same as for the E<.Op -mfpu> commandline option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5465
#, no-wrap
msgid ".eabi_attribute Va tag, Va value"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5476
msgid ""
"Set the EABI object attribute number E<.Va tag> to E<.Va value>.  The value "
"is either a E<.Li number>, E<.Li \"string\">, or E<.Li number, \"string\"> "
"depending on the tag."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5478 /usr/src/contrib/binutils/gas/doc/as.7:6802
#, no-wrap
msgid "Opcodes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5482
msgid ""
"E<.Li as> implements all the standard ARM opcodes. It also implements "
"several pseudo opcodes, including several synthetic load instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5484
#, no-wrap
msgid "NOP"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5487
#, no-wrap
msgid "  nop\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5491
msgid ""
"This pseudo op will always evaluate to a legal ARM instruction that does "
"nothing.  Currently it will evaluate to MOV r0, r0."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5492
#, no-wrap
msgid "LDR"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5495
#, no-wrap
msgid "  ldr E<lt>registerE<gt> , = E<lt>expressionE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5502
msgid ""
"If expression evaluates to a numeric constant then a MOV or MVN instruction "
"will be used in place of the LDR instruction, if the constant can be "
"generated by either of these instructions. Otherwise the constant will be "
"placed into the nearest literal pool (if it not already there) and a PC "
"relative LDR instruction will be generated."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5503
#, no-wrap
msgid "ADR"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5506
#, no-wrap
msgid "  adr E<lt>registerE<gt> E<lt>labelE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5515
msgid ""
"This instruction will load the address of E<.Va label> into the indicated "
"register. The instruction will evaluate to a PC relative ADD or SUB "
"instruction depending upon where the label is located. If the label is out "
"of range, or if it is not defined in the same file (and section) as the ADR "
"instruction, then an error will be generated. This instruction will not make "
"use of the literal pool."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5516
#, no-wrap
msgid "ADRL"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5519
#, no-wrap
msgid "  adrl E<lt>registerE<gt> E<lt>labelE<gt>\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5527
msgid ""
"This instruction will load the address of E<.Va label> into the indicated "
"register. The instruction will evaluate to one or two PC relative ADD or SUB "
"instructions depending upon where the label is located.  If a second "
"instruction is not needed a NOP instruction will be generated in its place, "
"so that this instruction is always 8 bytes long."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5531
msgid ""
"If the label is out of range, or if it is not defined in the same file (and "
"section) as the ADRL instruction, then an error will be generated. This "
"instruction will not make use of the literal pool."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5536
msgid ""
"For information on the ARM or Thumb instruction sets, see E<.Em ARM Software "
"Development Toolkit Reference Manual>, Advanced RISC Machines Ltd."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5537
#, no-wrap
msgid "Mapping Symbols"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5540
msgid ""
"The ARM ELF specification requires that special symbols be inserted into "
"object files to mark certain features:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5542
#, no-wrap
msgid "$a"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5544
msgid "At the start of a region of code containing ARM instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5545
#, no-wrap
msgid "$t"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5547
msgid "At the start of a region of code containing THUMB instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5548
#, no-wrap
msgid "$d"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5550
msgid "At the start of a region of data."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5557
msgid ""
"The assembler will automatically insert these symbols for you - there is no "
"need to code them yourself. Support for tagging symbols ($b, $f, $p and $m)  "
"which is also mentioned in the current ARM ELF specification is not "
"implemented.  This is because they have been dropped from the new EABI and "
"so tools cannot rely upon their presence."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:5558
#, no-wrap
msgid "80386 Dependent Features"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5563
msgid ""
"The i386 version E<.Li as> supports both the original Intel 386 architecture "
"in both 16 and 32-bit mode as well as AMD x86-64 architecture extending the "
"Intel architecture to 64-bits."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5568
msgid "The i386 version of E<.Li as> has a few machine dependent options:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5570
#, no-wrap
msgid "--32 | --64"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5573
msgid ""
"Select the word size, either 32 bits or 64 bits. Selecting 32-bit implies "
"Intel i386 architecture, while 64-bit implies AMD x86-64 architecture."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5578
msgid ""
"These options are only available with the ELF object file format, and "
"require that the necessary BFD support has been included (on a 32-bit "
"platform you have to add --enable-64-bit-bfd to configure enable 64-bit "
"usage and use x86-64 as target platform)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5583
msgid ""
"By default, x86 GAS replaces multiple nop instructions used for alignment "
"within code sections with multi-byte nop instructions such as leal "
"0(%esi,1),%esi.  This switch disables the optimization."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5584
#, no-wrap
msgid "--divide"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5597
msgid ""
"On SVR4-derived platforms, the character E<.Li /> is treated as a comment "
"character, which means that it cannot be used in expressions.  The E<.Li "
"--divide> option turns E<.Li /> into a normal character. This does not "
"disable E<.Li /> at the beginning of a line starting a comment, or affect "
"using E<.Li #> for starting a comment."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5626
msgid ""
"This option specifies an instruction set architecture for generating "
"instructions.  The following architectures are recognized: E<.Li i8086>, "
"E<.Li i186>, E<.Li i286>, E<.Li i386>, E<.Li i486>, E<.Li i586>, E<.Li "
"i686>, E<.Li pentium>, E<.Li pentiumpro>, E<.Li pentiumii>, E<.Li "
"pentiumiii>, E<.Li pentium4>, E<.Li prescott>, E<.Li nocona>, E<.Li core>, "
"E<.Li core2>, E<.Li k6>, E<.Li k6_2>, E<.Li athlon>, E<.Li sledgehammer>, "
"E<.Li opteron>, E<.Li k8>, E<.Li generic32> and E<.Li generic64>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5630
msgid ""
"This option only affects instructions generated by the assembler. The E<.Li "
".arch> directive will take precedent."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:5631
#, no-wrap
msgid "-mtune= Va CPU"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5638
msgid ""
"This option specifies a processor to optimize for. When used in conjunction "
"with the E<.Op -march> option, only instructions of the processor specified "
"by the E<.Op -march> option will be generated."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5643
msgid "Valid E<.Va CPU> values are identical to E<.Op -march= Va CPU>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5645
#, no-wrap
msgid "AT&T Syntax versus Intel Syntax"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5662
msgid ""
"E<.Li as> now supports assembly using Intel assembler syntax.  E<.Li "
".intel_syntax> selects Intel mode, and E<.Li .att_syntax> switches back to "
"the usual AT&T mode for compatibility with the output of E<.Li gcc>.  Either "
"of these directives may have an optional argument, E<.Li prefix>, or E<.Li "
"noprefix> specifying whether registers require a E<.Li %> prefix. AT&T "
"System V/386 assembler syntax is quite different from Intel syntax.  We "
"mention these differences because almost all 80386 documents use Intel "
"syntax. Notable differences between the two syntaxes are:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5677
msgid ""
"AT&T immediate operands are preceded by E<.Li $>; Intel immediate operands "
"are undelimited (Intel E<.Li push 4> is AT&T E<.Li pushl $4>).  AT&T "
"register operands are preceded by E<.Li %>; Intel register operands are "
"undelimited. AT&T absolute (as opposed to PC relative)  jump/call operands "
"are prefixed by E<.Li *>; they are undelimited in Intel syntax."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5692
msgid ""
"AT&T and Intel syntax use the opposite order for source and destination "
"operands.  Intel E<.Li add eax, 4> is E<.Li addl $4, %eax>.  The E<.Li "
"source, dest> convention is maintained for compatibility with previous Unix "
"assemblers.  Note that instructions with more than one source operand, such "
"as the E<.Li enter> instruction, do E<.Em not> have reversed "
"order. i386-Bugs."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5716
msgid ""
"In AT&T syntax the size of memory operands is determined from the last "
"character of the instruction mnemonic. Mnemonic suffixes of E<.Li b>, E<.Li "
"w>, E<.Li l> and E<.Li q> specify byte (8-bit), word (16-bit), long (32-bit) "
"and quadruple word (64-bit)  memory references. Intel syntax accomplishes "
"this by prefixing memory operands ( E<.Em not> the instruction mnemonics) "
"with E<.Li byte ptr>, E<.Li word ptr>, E<.Li dword ptr> and E<.Li qword "
"ptr>.  Thus, Intel E<.Li mov al, byte ptr Va foo> is E<.Li movb Va foo, %al> "
"in AT&T syntax."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5726
msgid ""
"Immediate form long jumps and calls are E<.Li lcall/ljmp $ Va section, $ Va "
"offset> in AT&T syntax; the Intel syntax is E<.Li call/jmp far Va section: "
"Va offset>.  Also, the far return instruction is E<.Li lret $ Va "
"stack-adjust> in AT&T syntax; Intel syntax is E<.Li ret far Va "
"stack-adjust>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5730
msgid ""
"The AT&T assembler does not provide support for multiple section programs.  "
"Unix style systems expect all programs to be single sections."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5732
#, no-wrap
msgid "Instruction Naming"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5756
msgid ""
"Instruction mnemonics are suffixed with one character modifiers which "
"specify the size of operands. The letters E<.Li b>, E<.Li w>, E<.Li l> and "
"E<.Li q> specify byte, word, long and quadruple word operands. If no suffix "
"is specified by an instruction then E<.Li as> tries to fill in the missing "
"suffix based on the destination register operand (the last one by "
"convention). Thus, E<.Li mov %ax, %bx> is equivalent to E<.Li movw %ax, "
"%bx>; also, E<.Li mov $1, %bx> is equivalent to E<.Li movw $1, bx>.  Note "
"that this is incompatible with the AT&T Unix assembler which assumes that a "
"missing mnemonic suffix implies long operand size. (This incompatibility "
"does not affect compiler output since compilers always explicitly specify "
"the mnemonic suffix.)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5796
msgid ""
"Almost all instructions have the same names in AT&T and Intel format. There "
"are a few exceptions. The sign extend and zero extend instructions need two "
"sizes to specify them. They need a size to sign/zero extend E<.Em from> and "
"a size to zero extend E<.Em to>.  This is accomplished by using two "
"instruction mnemonic suffixes in AT&T syntax.  Base names for sign extend "
"and zero extend are E<.Li movs...> and E<.Li movz...> in AT&T syntax ( E<.Li "
"movsx> and E<.Li movzx> in Intel syntax). The instruction mnemonic suffixes "
"are tacked on to this base name, the E<.Em from> suffix before the E<.Em to> "
"suffix. Thus, E<.Li movsbl %al, %edx> is AT&T syntax for \\(lqmove sign "
"extend E<.Em from> %al E<.Em to> %edx.\\(rq Possible suffixes, thus, are "
"E<.Li bl> (from byte to long), E<.Li bw> (from byte to word), E<.Li wl> "
"(from word to long), E<.Li bq> (from byte to quadruple word), E<.Li wq> "
"(from word to quadruple word), and E<.Li lq> (from long to quadruple word)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5798
msgid "The Intel-syntax conversion instructions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5806
msgid "E<.Li cbw> --- sign-extend byte in E<.Li %al> to word in E<.Li %ax>,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5813
msgid "E<.Li cwde> --- sign-extend word in E<.Li %ax> to long in E<.Li %eax>,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5820
msgid "E<.Li cwd> --- sign-extend word in E<.Li %ax> to long in E<.Li %dx:%ax>,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5827
msgid "E<.Li cdq> --- sign-extend dword in E<.Li %eax> to quad in E<.Li %edx:%eax>,"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5835
msgid ""
"E<.Li cdqe> --- sign-extend dword in E<.Li %eax> to quad in E<.Li %rax> "
"(x86-64 only),"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5843
msgid ""
"E<.Li cqo> --- sign-extend quad in E<.Li %rax> to octuple in E<.Li "
"%rdx:%rax> (x86-64 only),"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5856
msgid ""
"are called E<.Li cbtw>, E<.Li cwtl>, E<.Li cwtd>, E<.Li cltd>, E<.Li cltq>, "
"and E<.Li cqto> in AT&T naming.  E<.Li as> accepts either naming for these "
"instructions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5866
msgid ""
"Far call/jump instructions are E<.Li lcall> and E<.Li ljmp> in AT&T syntax, "
"but are E<.Li call far> and E<.Li jump far> in Intel convention."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:5867
#, no-wrap
msgid "Register Naming"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5871
msgid ""
"Register operands are always prefixed with E<.Li %>.  The 80386 registers "
"consist of"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5886
msgid ""
"the 8 32-bit registers E<.Li %eax> (the accumulator), E<.Li %ebx>, E<.Li "
"%ecx>, E<.Li %edx>, E<.Li %edi>, E<.Li %esi>, E<.Li %ebp> (the frame "
"pointer), and E<.Li %esp> (the stack pointer)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5898
msgid ""
"the 8 16-bit low-ends of these: E<.Li %ax>, E<.Li %bx>, E<.Li %cx>, E<.Li "
"%dx>, E<.Li %di>, E<.Li %si>, E<.Li %bp>, and E<.Li %sp>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5916
msgid ""
"the 8 8-bit registers: E<.Li %ah>, E<.Li %al>, E<.Li %bh>, E<.Li %bl>, E<.Li "
"%ch>, E<.Li %cl>, E<.Li %dh>, and E<.Li %dl> (These are the high-bytes and "
"low-bytes of E<.Li %ax>, E<.Li %bx>, E<.Li %cx>, and E<.Li %dx>)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5929
msgid ""
"the 6 section registers E<.Li %cs> (code section), E<.Li %ds> (data "
"section), E<.Li %ss> (stack section), E<.Li %es>, E<.Li %fs>, and E<.Li "
"%gs>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5936
msgid "the 3 processor control registers E<.Li %cr0>, E<.Li %cr2>, and E<.Li %cr3>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5946
msgid ""
"the 6 debug registers E<.Li %db0>, E<.Li %db1>, E<.Li %db2>, E<.Li %db3>, "
"E<.Li %db6>, and E<.Li %db7>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5952
msgid "the 2 test registers E<.Li %tr6> and E<.Li %tr7>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5976
msgid ""
"the 8 floating point register stack E<.Li %st> or equivalently E<.Li "
"%st(0)>, E<.Li %st(1)>, E<.Li %st(2)>, E<.Li %st(3)>, E<.Li %st(4)>, E<.Li "
"%st(5)>, E<.Li %st(6)>, and E<.Li %st(7)>.  These registers are overloaded "
"by 8 MMX registers E<.Li %mm0>, E<.Li %mm1>, E<.Li %mm2>, E<.Li %mm3>, E<.Li "
"%mm4>, E<.Li %mm5>, E<.Li %mm6> and E<.Li %mm7>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5988
msgid ""
"the 8 SSE registers registers E<.Li %xmm0>, E<.Li %xmm1>, E<.Li %xmm2>, "
"E<.Li %xmm3>, E<.Li %xmm4>, E<.Li %xmm5>, E<.Li %xmm6> and E<.Li %xmm7>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:5991
msgid "The AMD x86-64 architecture extends the register set by:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6006
msgid ""
"enhancing the 8 32-bit registers to 64-bit: E<.Li %rax> (the accumulator), "
"E<.Li %rbx>, E<.Li %rcx>, E<.Li %rdx>, E<.Li %rdi>, E<.Li %rsi>, E<.Li %rbp> "
"(the frame pointer), E<.Li %rsp> (the stack pointer)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6012
msgid "the 8 extended registers E<.Li %r8> -- E<.Li %r15>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6018
msgid "the 8 32-bit low ends of the extended registers: E<.Li %r8d> -- E<.Li %r15d>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6024
msgid "the 8 16-bit low ends of the extended registers: E<.Li %r8w> -- E<.Li %r15w>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6030
msgid "the 8 8-bit low ends of the extended registers: E<.Li %r8b> -- E<.Li %r15b>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6037
msgid "the 4 8-bit registers: E<.Li %sil>, E<.Li %dil>, E<.Li %bpl>, E<.Li %spl>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6043
msgid "the 8 debug registers: E<.Li %db8> -- E<.Li %db15>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6049
msgid "the 8 SSE registers: E<.Li %xmm8> -- E<.Li %xmm15>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6051
#, no-wrap
msgid "Instruction Prefixes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6060
msgid ""
"Instruction prefixes are used to modify the following instruction. They are "
"used to repeat string instructions, to provide section overrides, to perform "
"bus lock operations, and to change operand and address sizes. (Most "
"instructions that normally operate on 32-bit operands will use 16-bit "
"operands if the instruction has an \\(lqoperand size\\(rq prefix.) "
"Instruction prefixes are best written on the same line as the instruction "
"they act upon. For example, the E<.Li scas> (scan string) instruction is "
"repeated with:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6063
#, no-wrap
msgid "        repne scas %es:(%edi),%al\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6069
msgid ""
"You may also place prefixes on the lines immediately preceding the "
"instruction, but this circumvents checks that E<.Li as> does with prefixes, "
"and will not work with all prefixes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6071
msgid "Here is a list of instruction prefixes:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6086
msgid ""
"Section override prefixes E<.Li cs>, E<.Li ds>, E<.Li ss>, E<.Li es>, E<.Li "
"fs>, E<.Li gs>.  These are automatically added by specifying using the E<.Va "
"section> : E<.Va memory-operand> form for memory references."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6104
msgid ""
"Operand/Address size prefixes E<.Li data16> and E<.Li addr16> change 32-bit "
"operands/addresses into 16-bit operands/addresses, while E<.Li data32> and "
"E<.Li addr32> change 16-bit ones (in a E<.Li .code16> section) into 32-bit "
"operands/addresses. These prefixes E<.Em must> appear on the same line of "
"code as the instruction they modify. For example, in a 16-bit E<.Li .code16> "
"section, you might write:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6107
#, no-wrap
msgid "        addr32 jmpl *(%ebx)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6114
msgid ""
"The bus lock prefix E<.Li lock> inhibits interrupts during execution of the "
"instruction it precedes. (This is only valid with certain instructions; see "
"a 80386 manual for details)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6120
msgid ""
"The wait for coprocessor prefix E<.Li wait> waits for the coprocessor to "
"complete the current instruction. This should never be needed for the "
"80386/80387 combination."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6132
msgid ""
"The E<.Li rep>, E<.Li repe>, and E<.Li repne> prefixes are added to string "
"instructions to make them repeat E<.Li %ecx> times ( E<.Li %cx> times if the "
"current address size is 16-bits)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6142
msgid ""
"The E<.Li rex> family of prefixes is used by x86-64 to encode extensions to "
"i386 instruction set. The E<.Li rex> prefix has four bits --- an operand "
"size overwrite ( E<.Li 64>)  used to change operand size from 32-bit to "
"64-bit and X, Y and Z extensions bits used to extend the register set."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6158
msgid ""
"You may write the E<.Li rex> prefixes directly. The E<.Li rex64xyz> "
"instruction emits E<.Li rex> prefix with all the bits set. By omitting the "
"E<.Li 64>, E<.Li x>, E<.Li y> or E<.Li z> you may write other prefixes as "
"well. Normally, there is no need to write the prefixes explicitly, since gas "
"will automatically generate them based on the instruction operands."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6160
#, no-wrap
msgid "Memory References"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6162
msgid "An Intel syntax indirect memory reference of the form"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6165
#, no-wrap
msgid "section:[base + index*scale + disp]\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6168
msgid "is translated into the AT&T syntax"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6171
#, no-wrap
msgid "section:disp(base, index, scale)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6203
msgid ""
"where E<.Va base> and E<.Va index> are the optional 32-bit base and index "
"registers, E<.Va disp> is the optional displacement, and E<.Va scale>, "
"taking the values 1, 2, 4, and 8, multiplies E<.Va index> to calculate the "
"address of the operand. If no E<.Va scale> is specified, E<.Va scale> is "
"taken to be 1.  E<.Va section> specifies the optional section register for "
"the memory operand, and may override the default section register (see a "
"80386 manual for section register defaults).  Note that section overrides in "
"AT&T syntax E<.Em must> be preceded by a E<.Li %>.  If you specify a section "
"override which coincides with the default section register, E<.Li as> does "
"E<.Em not> output any section register override prefixes to assemble the "
"given instruction.  Thus, section overrides can be specified to emphasize "
"which section register is used for a given memory operand."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6205
msgid "Here are some examples of Intel and AT&T style memory references:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6207
#, no-wrap
msgid "AT&T: Li -4(%ebp), Intel: Li [ebp - 4]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6223
msgid ""
"E<.Va base> is E<.Li %ebp>; E<.Va disp> is E<.Li -4>.  E<.Va section> is "
"missing, and the default section is used ( E<.Li %ss> for addressing with "
"E<.Li %ebp> as the base register).  E<.Va index>, E<.Va scale> are both "
"missing."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6224
#, no-wrap
msgid "AT&T: Li foo(,%eax,4), Intel: Li [foo + eax*4]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6236
msgid ""
"E<.Va index> is E<.Li %eax> (scaled by a E<.Va scale> 4); E<.Va disp> is "
"E<.Li foo>.  All other fields are missing. The section register here "
"defaults to E<.Li %ds>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6237
#, no-wrap
msgid "AT&T: Li foo(,1); Intel Li [foo]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6248
msgid ""
"This uses the value pointed to by E<.Li foo> as a memory operand. Note that "
"E<.Va base> and E<.Va index> are both missing, but there is only E<.Em one> "
"E<.Li>,.  This is a syntactic exception."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6249
#, no-wrap
msgid "AT&T: Li %gs:foo; Intel Li gs:foo"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6256
msgid ""
"This selects the contents of the variable E<.Li foo> with section register "
"E<.Va section> being E<.Li %gs>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6266
msgid ""
"Absolute (as opposed to PC relative) call and jump operands must be prefixed "
"with E<.Li *>.  If no E<.Li *> is specified, E<.Li as> always chooses PC "
"relative addressing for jump/call labels."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6277
msgid ""
"Any instruction that has a memory operand, but no register operand, E<.Em "
"must> specify its size (byte, word, long, or quadruple) with an instruction "
"mnemonic suffix ( E<.Li b>, E<.Li w>, E<.Li l> or E<.Li q>, respectively)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6282
msgid ""
"The x86-64 architecture adds an RIP (instruction pointer relative) "
"addressing.  This addressing mode is specified by using E<.Li rip> as a base "
"register. Only constant offsets are valid. For example:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6284
#, no-wrap
msgid "AT&T: Li 1234(%rip), Intel: Li [rip + 1234]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6286
msgid "Points to the address 1234 bytes past the end of the current instruction."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6287
#, no-wrap
msgid "AT&T: Li symbol(%rip), Intel: Li [rip + symbol]"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6291
msgid ""
"Points to the E<.Li symbol> in RIP relative way, this is shorter than the "
"default absolute addressing."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6295
msgid ""
"Other addressing modes remain unchanged in x86-64 architecture, except "
"registers used are 64-bit instead of 32-bit."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6296
#, no-wrap
msgid "Handling of Jump Instructions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6307
msgid ""
"Jump instructions are always optimized to use the smallest possible "
"displacements.  This is accomplished by using byte (8-bit) displacement "
"jumps whenever the target is sufficiently close. If a byte displacement is "
"insufficient a long displacement is used. We do not support word (16-bit) "
"displacement jumps in 32-bit mode (i.e. prefixing the jump instruction with "
"the E<.Li data16> instruction prefix), since the 80386 insists upon masking "
"E<.Li %eip> to 16 bits after the word displacement is added. (See alsosee "
"Section E<.Dq i386-Arch>)"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6324
msgid ""
"Note that the E<.Li jcxz>, E<.Li jecxz>, E<.Li loop>, E<.Li loopz>, E<.Li "
"loope>, E<.Li loopnz> and E<.Li loopne> instructions only come in byte "
"displacements, so that if you use these instructions ( E<.Li gcc> does not "
"use them) you may get an error message (and incorrect code). The AT&T 80386 "
"assembler tries to get around this problem by expanding E<.Li jcxz foo> to"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6330
#, no-wrap
msgid ""
"         jcxz cx_zero\n"
"         jmp cx_nonzero\n"
"cx_zero: jmp foo\n"
"cx_nonzero:\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6340
msgid ""
"All 80387 floating point types except packed BCD are supported. (BCD support "
"may be added without much difficulty). These data types are 16-, 32-, and "
"64- bit integers, and single (32-bit), double (64-bit), and extended "
"(80-bit)  precision floating point. Each supported type has an instruction "
"mnemonic suffix and a constructor associated with it. Instruction mnemonic "
"suffixes specify the operand's data type. Constructors build these data "
"types into memory."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6363
msgid ""
"Floating point constructors are E<.Li .float> or E<.Li .single>, E<.Li "
".double>, and E<.Li .tfloat> for 32-, 64-, and 80-bit formats. These "
"correspond to instruction mnemonic suffixes E<.Li s>, E<.Li l>, and E<.Li "
"t>.  E<.Li t> stands for 80-bit (ten byte) real. The 80387 only supports "
"this format via the E<.Li fldt> (load 80-bit real to stack top) and E<.Li "
"fstpt> (store 80-bit real and pop stack) instructions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6386
msgid ""
"Integer constructors are E<.Li .word>, E<.Li .long> or E<.Li .int>, and "
"E<.Li .quad> for the 16-, 32-, and 64-bit integer formats. The corresponding "
"instruction mnemonic suffixes are E<.Li s> (single), E<.Li l> (long), and "
"E<.Li q> (quad). As with the 80-bit real format, the 64-bit E<.Li q> format "
"is only present in the E<.Li fildq> (load quad integer to stack top) and "
"E<.Li fistpq> (store quad integer and pop stack) instructions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6400
msgid ""
"Register to register operations should not use instruction mnemonic "
"suffixes.  E<.Li fstl %st, %st(1)> will give a warning, and be assembled as "
"if you wrote E<.Li fst %st, %st(1)>, since all register to register "
"operations use 80-bit floating point operands.  (Contrast this with E<.Li "
"fstl %st, mem>, which converts E<.Li %st> from 80-bit to 64-bit floating "
"point format, then stores the result in the 4 byte location E<.Li mem>)"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6401
#, no-wrap
msgid "Intel's MMX and AMD's 3DNow! SIMD Operations"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6408
msgid ""
"E<.Li as> supports Intel's MMX instruction set (SIMD instructions for "
"integer data), available on Intel's Pentium MMX processors and Pentium II "
"processors, AMD's K6 and K6-2 processors, Cyrix' M2 processor, and probably "
"others. It also supports AMD's 3DNow! instruction set (SIMD instructions for "
"32-bit floating point data) available on AMD's K6-2 processor and possibly "
"others in the future."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6412
msgid ""
"Currently, E<.Li as> does not support Intel's floating point SIMD, Katmai "
"(KNI)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6421
msgid ""
"The eight 64-bit MMX operands, also used by 3DNow!, are called E<.Li %mm0>, "
"E<.Li %mm1>, \\&...  E<.Li %mm7>.  They contain eight 8-bit integers, four "
"16-bit integers, two 32-bit integers, one 64-bit integer, or two 32-bit "
"floating point values. The MMX registers cannot be used at the same time as "
"the floating point stack."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6424
msgid ""
"See Intel and AMD documentation, keeping in mind that the operand order in "
"instructions is reversed from the Intel syntax."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6425
#, no-wrap
msgid "Writing 16-bit Code"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6440
msgid ""
"While E<.Li as> normally writes only \\(lqpure\\(rq 32-bit i386 code or "
"64-bit x86-64 code depending on the default configuration, it also supports "
"writing code to run in real mode or in 16-bit protected mode code "
"segments. To do this, put a E<.Li .code16> or E<.Li .code16gcc> directive "
"before the assembly language instructions to be run in 16-bit mode.  You can "
"switch E<.Li as> back to writing normal 32-bit code with the E<.Li .code32> "
"directive."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6463
msgid ""
"E<.Li .code16gcc> provides experimental support for generating 16-bit code "
"from gcc, and differs from E<.Li .code16> in that E<.Li call>, E<.Li ret>, "
"E<.Li enter>, E<.Li leave>, E<.Li push>, E<.Li pop>, E<.Li pusha>, E<.Li "
"popa>, E<.Li pushf>, and E<.Li popf> instructions default to 32-bit "
"size. This is so that the stack pointer is manipulated in the same way over "
"function calls, allowing access to function parameters at the same stack "
"offsets as in 32-bit mode.  E<.Li .code16gcc> also automatically adds "
"address size prefixes where necessary to use the 32-bit addressing modes "
"that gcc generates."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6472
msgid ""
"The code which E<.Li as> generates in 16-bit mode will not necessarily run "
"on a 16-bit pre-80386 processor.  To write code that runs on such a "
"processor, you must refrain from using E<.Em any> 32-bit constructs which "
"require E<.Li as> to output address or operand size prefixes."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6483
msgid ""
"Note that writing 16-bit code instructions by explicitly specifying a prefix "
"or an instruction mnemonic suffix within a 32-bit code section generates "
"different machine instructions than those generated for a 16-bit code "
"segment. In a 32-bit code section, the following code generates the machine "
"opcode bytes E<.Li 66 6a 04>, which pushes the value E<.Li 4> onto the "
"stack, decrementing E<.Li %esp> by 2."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6486
#, no-wrap
msgid "        pushw $4\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6492
msgid ""
"The same code in a 16-bit code section would generate the machine opcode "
"bytes E<.Li 6a 04> (i.e., without the operand size prefix), which is correct "
"since the processor default operand size is assumed to be 16 bits in a "
"16-bit code section."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6493
#, no-wrap
msgid "AT&T Syntax bugs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6498
msgid ""
"The UnixWare assembler, and probably other AT&T derived ix86 Unix "
"assemblers, generate floating point instructions with reversed source and "
"destination registers in certain cases. Unfortunately, gcc and possibly many "
"other programs use this reversed syntax, so we're stuck with it."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6500 /usr/src/contrib/binutils/gas/doc/as.7:6582
msgid "For example"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6503
#, no-wrap
msgid "        fsub %st,%st(3)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6515
msgid ""
"results in E<.Li %st(3)> being updated to E<.Li %st - %st(3)> rather than "
"the expected E<.Li %st(3) - %st>.  This happens with all the non-commutative "
"arithmetic floating point operations with two register operands where the "
"source register is E<.Li %st> and the destination register is E<.Li %st(i)>."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6516
#, no-wrap
msgid "Specifying CPU Architecture"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6524
msgid ""
"E<.Li as> may be told to assemble for a particular CPU (sub-)architecture "
"with the E<.Li .arch Va cpu_type> directive. This directive enables a "
"warning when gas detects an instruction that is not supported on the CPU "
"specified. The choices for E<.Va cpu_type> are:"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6528
#, no-wrap
msgid "i8086"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6528
#, no-wrap
msgid " i186"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6528
#, no-wrap
msgid " i286"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6528
#, no-wrap
msgid " i386"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6529
#, no-wrap
msgid "i486"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6529
#, no-wrap
msgid " i586"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6529
#, no-wrap
msgid " i686"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6529
#, no-wrap
msgid " pentium"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6530
#, no-wrap
msgid "pentiumpro"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6530
#, no-wrap
msgid " pentiumii"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6530
#, no-wrap
msgid " pentiumiii"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6530
#, no-wrap
msgid " pentium4"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6531
#, no-wrap
msgid "prescott"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6531
#, no-wrap
msgid " nocona"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6531
#, no-wrap
msgid " core"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6531
#, no-wrap
msgid " core2"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6532
#, no-wrap
msgid "amdfam10"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6533
#, no-wrap
msgid "k6"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6533
#, no-wrap
msgid " athlon"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6533
#, no-wrap
msgid " sledgehammer"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6533
#, no-wrap
msgid " k8"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6534
#, no-wrap
msgid "\\&.mmx"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6534
#, no-wrap
msgid " .sse"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6534
#, no-wrap
msgid " .sse2"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6534
#, no-wrap
msgid " .sse3"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6535
#, no-wrap
msgid "\\&.ssse3"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6535
#, no-wrap
msgid " .sse4.1"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6535
#, no-wrap
msgid " .sse4.2"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6535
#, no-wrap
msgid " .sse4"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6536
#, no-wrap
msgid "\\&.sse4a"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6536
#, no-wrap
msgid " .3dnow"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6536
#, no-wrap
msgid " .3dnowa"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6536
#, no-wrap
msgid " .padlock"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6537
#, no-wrap
msgid "\\&.pacifica"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6537
#, no-wrap
msgid " .svme"
msgstr ""

#. type: tbl table
#: /usr/src/contrib/binutils/gas/doc/as.7:6537
#, no-wrap
msgid " .abm"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6563
msgid ""
"Apart from the warning, there are only two other effects on E<.Li as> "
"operation; Firstly, if you specify a CPU other than E<.Li i486>, then shift "
"by one instructions such as E<.Li sarl $1, %eax> will automatically use a "
"two byte opcode sequence. The larger three byte opcode sequence is used on "
"the 486 (and when no architecture is specified) because it executes faster "
"on the 486. Note that you can explicitly request the two byte opcode by "
"writing E<.Li sarl %eax>.  Secondly, if you specify E<.Li i8086>, E<.Li "
"i186>, or E<.Li i286>, E<.Em and> E<.Li .code16> or E<.Li .code16gcc> then "
"byte offset conditional jumps will be promoted when necessary to a two "
"instruction sequence consisting of a conditional jump of the opposite sense "
"around an unconditional jump to the target."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6580
msgid ""
"Following the CPU architecture (but not a sub-architecture, which are those "
"starting with a dot), you may specify E<.Li jumps> or E<.Li nojumps> to "
"control automatic promotion of conditional jumps.  E<.Li jumps> is the "
"default, and enables jump promotion; All external jumps will be of the long "
"variety, and file-local jumps will be promoted as necessary. (see Section "
"E<.Dq i386-Jumps>)  E<.Li nojumps> leaves external conditional jumps as byte "
"offset jumps, and warns about file-local conditional jumps that E<.Li as> "
"promotes. Unconditional jumps are treated as for E<.Li jumps>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6585
#, no-wrap
msgid " .arch i8086,nojumps\n"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6587
#, no-wrap
msgid "Notes"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6611
msgid ""
"There is some trickery concerning the E<.Li mul> and E<.Li imul> "
"instructions that deserves mention. The 16-, 32-, 64- and 128-bit expanding "
"multiplies (base opcode E<.Li 0xf6>; extension 4 for E<.Li mul> and 5 for "
"E<.Li imul>)  can be output only in the one operand form. Thus, E<.Li imul "
"%ebx, %eax> does E<.Em not> select the expanding multiply; the expanding "
"multiply would clobber the E<.Li %edx> register, and this would confuse "
"E<.Li gcc> output. Use E<.Li imul %ebx> to get the 64-bit product in E<.Li "
"%edx:%eax>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6621
msgid ""
"We have added a two operand form of E<.Li imul> when the first operand is an "
"immediate mode expression and the second operand is a register. This is just "
"a shorthand, so that, multiplying E<.Li %eax> by 69, for example, can be "
"done with E<.Li imul $69, %eax> rather than E<.Li imul $69, %eax, %eax>."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:6622
#, no-wrap
msgid "IA-64 Dependent Features"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6625
#, no-wrap
msgid "-mconstant-gp"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6631
msgid ""
"This option instructs the assembler to mark the resulting object file as "
"using the \\(lqconstant GP\\(rq model. With this model, it is assumed that "
"the entire program uses a single global pointer (GP) value. Note that this "
"option does not in any fashion affect the machine code emitted by the "
"assembler. All it does is turn on the EF_IA_64_CONS_GP flag in the ELF file "
"header."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6632
#, no-wrap
msgid "-mauto-pic"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6642
msgid ""
"This option instructs the assembler to mark the resulting object file as "
"using the \\(lqconstant GP without function descriptor\\(rq data model. This "
"model is like the \\(lqconstant GP\\(rq model, except that it additionally "
"does away with function descriptors. What this means is that the address of "
"a function refers directly to the function's code entry-point. Normally, "
"such an address would refer to a function descriptor, which contains both "
"the code entry-point and the GP-value needed by the function. Note that this "
"option does not in any fashion affect the machine code emitted by the "
"assembler. All it does is turn on the EF_IA_64_NOFUNCDESC_CONS_GP flag in "
"the ELF file header."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6643
#, no-wrap
msgid "-milp32"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6644
#, no-wrap
msgid "-milp64"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6645
#, no-wrap
msgid "-mlp64"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6646
#, no-wrap
msgid "-mp64"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6650
msgid ""
"These options select the data model. The assembler defaults to E<.Li -mlp64> "
"(LP64 data model)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6651
#, no-wrap
msgid "-mle"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6652
#, no-wrap
msgid "-mbe"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6659
msgid ""
"These options select the byte order. The E<.Li -mle> option selects "
"little-endian byte order (default) and E<.Li -mbe> selects big-endian byte "
"order. Note that IA-64 machine code always uses little-endian byte order."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6660
#, no-wrap
msgid "-mtune=itanium1"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6661
#, no-wrap
msgid "-mtune=itanium2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6668
msgid ""
"Tune for a particular IA-64 CPU, E<.Va itanium1> or E<.Va itanium2>.  The "
"default is E<.Va itanium2>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6669
#, no-wrap
msgid "-munwind-check=warning"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6670
#, no-wrap
msgid "-munwind-check=error"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6678
msgid ""
"These options control what the assembler will do when performing consistency "
"checks on unwind directives.  E<.Li -munwind-check=warning> will make the "
"assembler issue a warning when an unwind directive check fails.  This is the "
"default.  E<.Li -munwind-check=error> will make the assembler issue an error "
"when an unwind directive check fails."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6679
#, no-wrap
msgid "-mhint.b=ok"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6680
#, no-wrap
msgid "-mhint.b=warning"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6681
#, no-wrap
msgid "-mhint.b=error"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6696
msgid ""
"These options control what the assembler will do when the E<.Li hint.b> "
"instruction is used.  E<.Li -mhint.b=ok> will make the assembler accept "
"E<.Li hint.b>.  E<.Li -mint.b=warning> will make the assembler issue a "
"warning when E<.Li hint.b> is used.  E<.Li -mhint.b=error> will make the "
"assembler treat E<.Li hint.b> as an error, which is the default."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6698
#, no-wrap
msgid "-xexplicit"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6700
msgid "These options turn on dependency violation checking."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6701
#, no-wrap
msgid "-xauto"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6704
msgid ""
"This option instructs the assembler to automatically insert stop bits where "
"necessary to remove dependency violations. This is the default mode."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6705
#, no-wrap
msgid "-xnone"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6707
msgid "This option turns off dependency violation checking."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6708
#, no-wrap
msgid "-xdebug"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6711
msgid ""
"This turns on debug output intended to help tracking down bugs in the "
"dependency violation checker."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6712
#, no-wrap
msgid "-xdebugn"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6714
msgid "This is a shortcut for -xnone -xdebug."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6715
#, no-wrap
msgid "-xdebugx"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6717
msgid "This is a shortcut for -xexplicit -xdebug."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6722
msgid ""
"The assembler syntax closely follows the IA-64 Assembly Language Reference "
"Guide."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6727
msgid "E<.Li //> is the line comment token."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6730
msgid "E<.Li>; can be used instead of a newline to separate statements."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6774
msgid ""
"The 128 integer registers are referred to as E<.Li r Va n>.  The 128 "
"floating-point registers are referred to as E<.Li f Va n>.  The 128 "
"application registers are referred to as E<.Li ar Va n>.  The 128 control "
"registers are referred to as E<.Li cr Va n>.  The 64 one-bit predicate "
"registers are referred to as E<.Li p Va n>.  The 8 branch registers are "
"referred to as E<.Li b Va n>.  In addition, the assembler defines a number "
"of aliases: E<.Li gp> ( E<.Li r1>), E<.Li sp> ( E<.Li r12>), E<.Li rp> ( "
"E<.Li b0>), E<.Li ret0> ( E<.Li r8>), E<.Li ret1> ( E<.Li r9>), E<.Li ret2> "
"( E<.Li r10>), E<.Li ret3> ( E<.Li r9>), E<.Li farg Va n> ( E<.Li f8+ Va "
"n>), and E<.Li fret Va n> ( E<.Li f8+ Va n>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6784
msgid ""
"For convenience, the assembler also defines aliases for all named "
"application and control registers. For example, E<.Li ar.bsp> refers to the "
"register backing store pointer ( E<.Li ar17>).  Similarly, E<.Li cr.eoi> "
"refers to the end-of-interrupt register ( E<.Li cr67>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6786
msgid "E<.Em IA-64 Processor-Status-Register (PSR) Bit Names>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6801
msgid ""
"The assembler defines bit masks for each of the bits in the IA-64 processor "
"status register. For example, E<.Li psr.ic> corresponds to a value of "
"0x2000. These masks are primarily intended for use with the E<.Li ssm> / "
"E<.Li sum> and E<.Li rsm> / E<.Li rum> instructions, but they can be used "
"anywhere else where an integer constant is expected."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6804
msgid "For detailed information on the IA-64 machine instruction set, see the"
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:6806
#, no-wrap
msgid "MIPS Dependent Features"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6815
msgid ""
"GNU E<.Li as> for mips architectures supports several different mips "
"processors, and MIPS ISA levels I through V, MIPS32, and MIPS64. For "
"information about the mips instruction set, see E<.Em MIPS RISC "
"Architecture>, by Kane and Heindrich (Prentice-Hall). For an overview of "
"mips assembly conventions, see \\(lqAppendix D: Assembly Language "
"Programming\\(rq in the same work."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:6816
#, no-wrap
msgid "Assembler options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6820
msgid "The mips configurations of GNU E<.Li as> support these special options:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6828
msgid ""
"This option sets the largest size of an object that can be referenced "
"implicitly with the E<.Li gp> register. It is only accepted for targets that "
"use ecoff format. The default value is 8."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6839
msgid ""
"Any mips configuration of E<.Li as> can select big-endian or little-endian "
"output at run time (unlike the other GNU development tools, which must be "
"configured for one or the other). Use E<.Li -EB> to select big-endian "
"output, and E<.Li -EL> for little-endian."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6840
#, no-wrap
msgid "-KPIC"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6844
msgid ""
"Generate SVR4-style PIC. This option tells the assembler to generate "
"SVR4-style position-independent macro expansions. It also tells the "
"assembler to mark the output file as PIC."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6845
#, no-wrap
msgid "-mvxworks-pic"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6848
msgid ""
"Generate VxWorks PIC. This option tells the assembler to generate "
"VxWorks-style position-independent macro expansions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6876
msgid ""
"Generate code for a particular MIPS Instruction Set Architecture level.  "
"E<.Li -mips1> corresponds to the r2000 and r3000 processors, E<.Li -mips2> "
"to the r6000 processor, E<.Li -mips3> to the r4000 processor, and E<.Li "
"-mips4> to the r8000 and r10000 processors.  E<.Li -mips5>, E<.Li -mips32>, "
"E<.Li -mips32r2>, E<.Li -mips64>, and E<.Li -mips64r2> correspond to generic "
"MIPS V, MIPS32, MIPS32 Release 2, MIPS64, and MIPS64 Release 2 ISA "
"processors, respectively. You can also switch instruction sets during the "
"assembly; see MIPS ISA, Directives to override the ISA level."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6886
msgid ""
"Some macros have different expansions for 32-bit and 64-bit registers. The "
"register sizes are normally inferred from the ISA and ABI, but these flags "
"force a certain group of registers to be treated as 32 bits wide at all "
"times.  E<.Li -mgp32> controls the size of general-purpose registers and "
"E<.Li -mfp32> controls the size of floating-point registers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6896
msgid ""
"The E<.Li .set gp=32> and E<.Li .set fp=32> directives allow the size of "
"registers to be changed for parts of an object.  The default value is "
"restored by E<.Li .set gp=default> and E<.Li .set fp=default>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6901
msgid ""
"On some MIPS variants there is a 32-bit mode flag; when this flag is set, "
"64-bit instructions generate a trap. Also, some 32-bit OSes only save the "
"32-bit registers on a context switch, so it is essential never to use the "
"64-bit registers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6902
#, no-wrap
msgid "-mgp64"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6903
#, no-wrap
msgid "-mfp64"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6909
msgid ""
"Assume that 64-bit registers are available. This is provided in the "
"interests of symmetry with E<.Li -mgp32> and E<.Li -mfp32>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6919
msgid ""
"The E<.Li .set gp=64> and E<.Li .set fp=64> directives allow the size of "
"registers to be changed for parts of an object.  The default value is "
"restored by E<.Li .set gp=default> and E<.Li .set fp=default>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6937
msgid ""
"Enables the SmartMIPS extensions to the MIPS32 instruction set, which "
"provides a number of new instructions which target smartcard and "
"cryptographic applications.  This is equivalent to putting E<.Li .set "
"smartmips> at the start of the assembly file.  E<.Li -mno-smartmips> turns "
"off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6978
#, no-wrap
msgid "-mfix-vr4120"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6979
#, no-wrap
msgid "-no-mfix-vr4120"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6983
msgid ""
"Insert nops to work around certain VR4120 errata. This option is intended to "
"be used on GCC-generated code: it is not designed to catch all problems in "
"hand-written assembler code."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6984
#, no-wrap
msgid "-mfix-vr4130"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6985
#, no-wrap
msgid "-no-mfix-vr4130"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:6991
msgid "Insert nops to work around the VR4130 E<.Li mflo> / E<.Li mfhi> errata."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6992
#, no-wrap
msgid "-m4010"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:6993
#, no-wrap
msgid "-no-m4010"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7007
msgid ""
"Generate code for the LSI r4010 chip. This tells the assembler to accept the "
"r4010 specific instructions ( E<.Li addciu>, E<.Li ffc>, etc.), and to not "
"schedule E<.Li nop> instructions around accesses to the E<.Li HI> and E<.Li "
"LO> registers.  E<.Li -no-m4010> turns off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7008
#, no-wrap
msgid "-m4650"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7009
#, no-wrap
msgid "-no-m4650"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7024
msgid ""
"Generate code for the MIPS r4650 chip. This tells the assembler to accept "
"the E<.Li mad> and E<.Li madu> instruction, and to not schedule E<.Li nop> "
"instructions around accesses to the E<.Li HI> and E<.Li LO> registers.  "
"E<.Li -no-m4650> turns off this option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7025
#, no-wrap
msgid "-m3900"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7026
#, no-wrap
msgid "-no-m3900"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7027
#, no-wrap
msgid "-m4100"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7028
#, no-wrap
msgid "-no-m4100"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7035
msgid ""
"For each option E<.Li -m Va nnnn>, generate code for the MIPS r E<.Va nnnn> "
"chip. This tells the assembler to accept instructions specific to that chip, "
"and to schedule for that chip's hazards."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7036
#, no-wrap
msgid "-march= Va cpu"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7044
msgid ""
"Generate code for a particular MIPS cpu. It is exactly equivalent to E<.Li "
"-m Va cpu>, except that there are more value of E<.Va cpu> understood. Valid "
"E<.Va cpu> value are:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7052
msgid ""
"E<.Qo> 2000, 3000, 3900, 4000, 4010, 4100, 4111, vr4120, vr4130, vr4181, "
"4300, 4400, 4600, 4650, 5000, rm5200, rm5230, rm5231, rm5261, rm5721, "
"vr5400, vr5500, 6000, rm7000, 8000, rm9000, 10000, 12000, 4kc, 4km, 4kp, "
"4ksc, 4kec, 4kem, 4kep, 4ksd, m4k, m4kp, 24kc, 24kf, 24kx, 24kec, 24kef, "
"24kex, 34kc, 34kf, 34kx, 74kc, 74kf, 74kx, 5kc, 5kf, 20kc, 25kf, sb1, sb1a "
"E<.Qc>"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7058
msgid ""
"Schedule and tune for a particular MIPS cpu. Valid E<.Va cpu> values are "
"identical to E<.Li -march= Va cpu>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7059
#, no-wrap
msgid "-mabi= Va abi"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7067
msgid ""
"Record which ABI the source code uses. The recognized arguments are: E<.Li "
"32>, E<.Li n32>, E<.Li o64>, E<.Li 64> and E<.Li eabi>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7068
#, no-wrap
msgid "-msym32"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7069
#, no-wrap
msgid "-mno-sym32"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7076
msgid ""
"Equivalent to adding E<.Li .set sym32> or E<.Li .set nosym32> to the "
"beginning of the assembler input.See Section E<.Dq MIPS symbol sizes>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7084
msgid ""
"This option is ignored. It is accepted for command-line compatibility with "
"other assemblers, which use it to turn off C style preprocessing. With GNU "
"E<.Li as>, there is no need for E<.Li -nocpp>, because the GNU assembler "
"itself never runs the C preprocessor."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7095
msgid ""
"The E<.Li --no-construct-floats> option disables the construction of double "
"width floating point constants by loading the two halves of the value into "
"the two single width floating point registers that make up the double width "
"register. This feature is useful if the processor support the FR bit in its "
"status register, and this bit is known (by the programmer) to be set. This "
"bit prevents the aliasing of the double width register by the single width "
"registers."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7099
msgid ""
"By default E<.Li --construct-floats> is selected, allowing construction of "
"these floating point constants."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7109
msgid ""
"E<.Li as> automatically macro expands certain division and multiplication "
"instructions to check for overflow and division by zero. This option causes "
"E<.Li as> to generate code to take a trap exception rather than a break "
"exception when an error is detected. The trap instructions are only "
"supported at Instruction Set Architecture level 2 and higher."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7114
msgid ""
"Generate code to take a break exception rather than a trap exception when an "
"error is detected. This is the default."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7120
msgid ""
"Control generation of E<.Li .pdr> sections. Off by default on IRIX, on "
"elsewhere."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7121
#, no-wrap
msgid "-mshared"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7122
#, no-wrap
msgid "-mno-shared"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7136
msgid ""
"When generating code using the Unix calling conventions (selected by E<.Li "
"-KPIC> or E<.Li -mcall_shared>), gas will normally generate code which can "
"go into a shared library. The E<.Li -mno-shared> option tells gas to "
"generate code which uses the calling convention, but can not go into a "
"shared library. The resulting code is slightly more efficient.  This option "
"only affects the handling of the E<.Li .cpload> and E<.Li .cpsetup> "
"pseudo-ops."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7138
#, no-wrap
msgid "MIPS ECOFF object code"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7152
msgid ""
"Assembling for a mips ecoff target supports some additional sections besides "
"the usual E<.Li .text>, E<.Li .data> and E<.Li .bss>.  The additional "
"sections are E<.Li .rdata>, used for read-only data, E<.Li .sdata>, used for "
"small data, and E<.Li .sbss>, used for small common objects."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7200
msgid ""
"When assembling for ecoff, the assembler uses the E<.Li $gp> ( E<.Li $28>)  "
"register to form the address of a \\(lqsmall object\\(rq. Any object in the "
"E<.Li .sdata> or E<.Li .sbss> sections is considered \\(lqsmall\\(rq in this "
"sense. For external objects, or for objects in the E<.Li .bss> section, you "
"can use the E<.Li gcc> E<.Li -G> option to control the size of objects "
"addressed via E<.Li $gp>; the default value is 8, meaning that a reference "
"to any object eight bytes or smaller uses E<.Li $gp>.  Passing E<.Li -G 0> "
"to E<.Li as> prevents it from using the E<.Li $gp> register on the basis of "
"object size (but the assembler uses E<.Li $gp> for objects in E<.Li .sdata> "
"or E<.Li sbss> in any case). The size of an object in the E<.Li .bss> "
"section is set by the E<.Li .comm> or E<.Li .lcomm> directive that defines "
"it. The size of an external object may be set with the E<.Li .extern> "
"directive. For example, E<.Li .extern sym,4> declares that the object at "
"E<.Li sym> is 4 bytes in length, whie leaving E<.Li sym> otherwise "
"undefined."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7207
msgid ""
"Using small ecoff objects requires linker support, and assumes that the "
"E<.Li $gp> register is correctly initialized (normally done automatically by "
"the startup code). mips ecoff assembly code must not modify the E<.Li $gp> "
"register."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7208
#, no-wrap
msgid "Directives for debugging information"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7231
msgid ""
"mips ecoff E<.Li as> supports several directives used for generating "
"debugging information which are not support by traditional mips "
"assemblers. These are E<.Li .def>, E<.Li .endef>, E<.Li .dim>, E<.Li .file>, "
"E<.Li .scl>, E<.Li .size>, E<.Li .tag>, E<.Li .type>, E<.Li .val>, E<.Li "
".stabd>, E<.Li .stabn>, and E<.Li .stabs>.  The debugging information "
"generated by the three E<.Li .stab> directives can only be read by gdb, not "
"by traditional mips debuggers (this enhancement is required to fully support "
"C++ debugging). These directives are primarily used by compilers, not "
"assembly language programmers!"
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7232
#, no-wrap
msgid "Directives to override the size of symbols"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7238
msgid ""
"The n64 ABI allows symbols to have any 64-bit value. Although this provides "
"a great deal of flexibility, it means that some macros have much longer "
"expansions than their 32-bit counterparts. For example, the non-PIC "
"expansion of E<.Li dla $4,sym> is usually:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7246
#, no-wrap
msgid ""
"lui     $4,%highest(sym)\n"
"lui     $1,%hi(sym)\n"
"daddiu  $4,$4,%higher(sym)\n"
"daddiu  $1,$1,%lo(sym)\n"
"dsll32  $4,$4,0\n"
"daddu   $4,$4,$1\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7249
msgid "whereas the 32-bit expansion is simply:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7253
#, no-wrap
msgid ""
"lui     $4,%hi(sym)\n"
"daddiu  $4,$4,%lo(sym)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7258
msgid ""
"n64 code is sometimes constructed in such a way that all symbolic constants "
"are known to have 32-bit values, and in such cases, it's preferable to use "
"the 32-bit expansion instead of the 64-bit expansion."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7267
msgid ""
"You can use the E<.Li .set sym32> directive to tell the assembler that, from "
"this point on, all expressions of the form E<.Li Va symbol> or E<.Li Va "
"symbol + Va offset> have 32-bit values. For example:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7273
#, no-wrap
msgid ""
"\\&.set sym32\n"
"dla     $4,sym\n"
"lw      $4,sym+16\n"
"sw      $4,sym+0x8000($4)\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7281
msgid ""
"will cause the assembler to treat E<.Li sym>, E<.Li sym+16> and E<.Li "
"sym+0x8000> as 32-bit values. The handling of non-symbolic addresses is not "
"affected."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7291
msgid ""
"The directive E<.Li .set nosym32> ends a E<.Li .set sym32> block and reverts "
"to the normal behavior. It is also possible to change the symbol size using "
"the command-line options E<.Op -msym32> and E<.Op -mno-sym32>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7294
msgid ""
"These options and directives are always accepted, but at present, they have "
"no effect for anything other than n64."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7295
#, no-wrap
msgid "Directives to override the ISA level"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7313
msgid ""
"GNU E<.Li as> supports an additional directive to change the mips "
"Instruction Set Architecture level on the fly: E<.Li .set mips Va n>.  E<.Va "
"n> should be a number from 0 to 5, or 32, 32r2, 64 or 64r2. The values other "
"than 0 make the assembler accept instructions for the corresponding isa "
"level, from that point on in the assembly.  E<.Li .set mips Va n> affects "
"not only which instructions are permitted, but also how certain macros are "
"expanded.  E<.Li .set mips0> restores the isa level to its original level: "
"either the level you selected with command line options, or the default for "
"your configuration. You can use this feature to permit specific mips3 "
"instructions while assembling in 32 bit mode. Use this directive with care!"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7323
msgid ""
"The E<.Li .set arch= Va cpu> directive provides even finer control. It "
"changes the effective CPU target and allows the assembler to use "
"instructions specific to a particular CPU.  All CPUs supported by the E<.Li "
"-march> command line option are also selectable by this directive. The "
"original value is restored by E<.Li .set arch=default>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7330
msgid ""
"The directive E<.Li .set mips16> puts the assembler into MIPS 16 mode, in "
"which it will assemble instructions for the MIPS 16 processor. Use E<.Li "
".set nomips16> to return to normal 32 bit mode."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7332
msgid "Traditional mips assemblers do not support this directive."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7333
#, no-wrap
msgid "Directives for extending MIPS 16 bit instructions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7346
msgid ""
"By default, MIPS 16 instructions are automatically extended to 32 bits when "
"necessary. The directive E<.Li .set noautoextend> will turn this off. When "
"E<.Li .set noautoextend> is in effect, any 32 bit instruction must be "
"explicitly extended with the E<.Li .e> modifier (e.g., E<.Li li.e "
"$4,1000>).  The directive E<.Li .set autoextend> may be used to once again "
"automatically extend instructions when necessary."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7349
msgid ""
"This directive is only meaningful when in MIPS 16 mode. Traditional mips "
"assemblers do not support this directive."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7350
#, no-wrap
msgid "Directive to mark data as an instruction"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7360
msgid ""
"The E<.Li .insn> directive tells E<.Li as> that the following data is "
"actually instructions. This makes a difference in MIPS 16 mode: when loading "
"the address of a label which precedes instructions, E<.Li as> automatically "
"adds 1 to the value, so that jumping to the loaded address will do the right "
"thing."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7361
#, no-wrap
msgid "Directives to save and restore options"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7374
msgid ""
"The directives E<.Li .set push> and E<.Li .set pop> may be used to save and "
"restore the current settings for all the options which are controlled by "
"E<.Li .set>.  The E<.Li .set push> directive saves the current settings on a "
"stack. The E<.Li .set pop> directive pops the stack and restores the "
"settings."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7378
msgid ""
"These directives can be useful inside an macro which must change an option "
"such as the ISA level or instruction reordering but does not want to change "
"the state of the code which invoked the macro."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7380 /usr/src/contrib/binutils/gas/doc/as.7:7427
msgid "Traditional mips assemblers do not support these directives."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7381
#, no-wrap
msgid "Directives to control generation of MIPS ASE instructions"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7388
msgid ""
"The directive E<.Li .set mips3d> makes the assembler accept instructions "
"from the MIPS-3D Application Specific Extension from that point on in the "
"assembly. The E<.Li .set nomips3d> directive prevents MIPS-3D instructions "
"from being accepted."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7395
msgid ""
"The directive E<.Li .set smartmips> makes the assembler accept instructions "
"from the SmartMIPS Application Specific Extension to the MIPS32 isa from "
"that point on in the assembly. The E<.Li .set nosmartmips> directive "
"prevents SmartMIPS instructions from being accepted."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7402
msgid ""
"The directive E<.Li .set mdmx> makes the assembler accept instructions from "
"the MDMX Application Specific Extension from that point on in the "
"assembly. The E<.Li .set nomdmx> directive prevents MDMX instructions from "
"being accepted."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7409
msgid ""
"The directive E<.Li .set dsp> makes the assembler accept instructions from "
"the DSP Release 1 Application Specific Extension from that point on in the "
"assembly. The E<.Li .set nodsp> directive prevents DSP Release 1 "
"instructions from being accepted."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7418
msgid ""
"The directive E<.Li .set dspr2> makes the assembler accept instructions from "
"the DSP Release 2 Application Specific Extension from that point on in the "
"assembly. This dirctive implies E<.Li .set dsp>.  The E<.Li .set nodspr2> "
"directive prevents DSP Release 2 instructions from being accepted."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7425
msgid ""
"The directive E<.Li .set mt> makes the assembler accept instructions from "
"the MT Application Specific Extension from that point on in the "
"assembly. The E<.Li .set nomt> directive prevents MT instructions from being "
"accepted."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:7428
#, no-wrap
msgid "PowerPC Dependent Features"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7434
msgid ""
"The PowerPC chip family includes several successive levels, using the same "
"core instruction set, but including a few additional instructions at each "
"level. There are exceptions to this however. For details on what "
"instructions each variant supports, please see the chip's architecture "
"reference manual."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7436
msgid "The following table lists all available PowerPC options."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7438
#, no-wrap
msgid "-mpwrx | -mpwr2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7440
msgid "Generate code for POWER/2 (RIOS2)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7441
#, no-wrap
msgid "-mpwr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7443
msgid "Generate code for POWER (RIOS1)"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7444
#, no-wrap
msgid "-m601"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7446
msgid "Generate code for PowerPC 601."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7447
#, no-wrap
msgid "-mppc, -mppc32, -m603, -m604"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7449
msgid "Generate code for PowerPC 603/604."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7450
#, no-wrap
msgid "-m403, -m405"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7452
msgid "Generate code for PowerPC 403/405."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7453
#, no-wrap
msgid "-m440"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7455
msgid "Generate code for PowerPC 440. BookE and some 405 instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7456
#, no-wrap
msgid "-m7400, -m7410, -m7450, -m7455"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7458
msgid "Generate code for PowerPC 7400/7410/7450/7455."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7459
#, no-wrap
msgid "-mppc64, -m620"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7461
msgid "Generate code for PowerPC 620/625/630."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7462
#, no-wrap
msgid "-me500, -me500x2"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7464
msgid "Generate code for Motorola e500 core complex."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7465
#, no-wrap
msgid "-mspe"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7467
msgid "Generate code for Motorola SPE instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7468
#, no-wrap
msgid "-mppc64bridge"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7470
msgid "Generate code for PowerPC 64, including bridge insns."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7471
#, no-wrap
msgid "-mbooke64"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7473
msgid "Generate code for 64-bit BookE."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7474
#, no-wrap
msgid "-mbooke, mbooke32"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7476
msgid "Generate code for 32-bit BookE."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7477
#, no-wrap
msgid "-me300"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7479
msgid "Generate code for PowerPC e300 family."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7480
#, no-wrap
msgid "-maltivec"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7482
msgid "Generate code for processors with AltiVec instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7483
#, no-wrap
msgid "-mpower4"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7485
msgid "Generate code for Power4 architecture."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7486
#, no-wrap
msgid "-mpower5"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7488
msgid "Generate code for Power5 architecture."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7489
#, no-wrap
msgid "-mpower6"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7491
msgid "Generate code for Power6 architecture."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7492
#, no-wrap
msgid "-mcell"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7494
msgid "Generate code for Cell Broadband Engine architecture."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7495
#, no-wrap
msgid "-mcom"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7497
msgid "Generate code Power/PowerPC common instructions."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7498
#, no-wrap
msgid "-many"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7500
msgid "Generate code for any architecture (PWR/PWRX/PPC)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7501
#, no-wrap
msgid "-mregnames"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7503
msgid "Allow symbolic names for registers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7504
#, no-wrap
msgid "-mno-regnames"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7506
msgid "Do not allow symbolic names for registers."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7507
#, no-wrap
msgid "-mrelocatable"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7509
msgid "Support for GCC's -mrelocatable option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7510
#, no-wrap
msgid "-mrelocatable-lib"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7512
msgid "Support for GCC's -mrelocatable-lib option."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7513
#, no-wrap
msgid "-memb"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7515
msgid "Set PPC_EMB bit in ELF flags."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7516
#, no-wrap
msgid "-mlittle, -mlittle-endian"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7518
msgid "Generate code for a little endian machine."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7519
#, no-wrap
msgid "-mbig, -mbig-endian"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7521
msgid "Generate code for a big endian machine."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7522
#, no-wrap
msgid "-msolaris"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7524
msgid "Generate code for Solaris."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7525
#, no-wrap
msgid "-mno-solaris"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7527
msgid "Do not generate code for Solaris."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7529
#, no-wrap
msgid "PowerPC Assembler Directives"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7532
msgid ""
"A number of assembler directives are available for PowerPC. The following "
"table is far from complete."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7534
#, no-wrap
msgid ".machine string"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7545
msgid ""
"This directive allows you to change the machine for which code is "
"generated.  E<.Li \"string\"> may be any of the -m cpu selection options "
"(without the -m) enclosed in double quotes, E<.Li \"push\">, or E<.Li "
"\"pop\">.  E<.Li .machine \"push\"> saves the currently selected cpu, which "
"may be restored with E<.Li .machine \"pop\">."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:7547
#, no-wrap
msgid "SPARC Dependent Features"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7553
msgid ""
"The SPARC chip family includes several successive levels, using the same "
"core instruction set, but including a few additional instructions at each "
"level.  There are exceptions to this however. For details on what "
"instructions each variant supports, please see the chip's architecture "
"reference manual."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7559
msgid ""
"By default, E<.Li as> assumes the core instruction set (SPARC v6), but "
"\\(lqbumps\\(rq the architecture level as needed: it switches to "
"successively higher architectures as it encounters instructions that only "
"exist in the higher levels."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7564
msgid ""
"If not configured for SPARC v9 ( E<.Li sparc64-*-*>)  GAS will not bump "
"passed sparclite by default, an option must be passed to enable the v9 "
"instructions."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7567
msgid ""
"GAS treats sparclite as being compatible with v8, unless an architecture is "
"explicitly requested. SPARC v9 is always incompatible with sparclite."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7578
msgid ""
"Use one of the E<.Li -A> options to select one of the SPARC architectures "
"explicitly. If you select an architecture explicitly, E<.Li as> reports a "
"fatal error if it encounters an instruction or feature requiring an "
"incompatible or higher level."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7583
msgid "E<.Li -Av8plus> and E<.Li -Av8plusa> select a 32 bit environment."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7589
msgid ""
"E<.Li -Av9> and E<.Li -Av9a> select a 64 bit environment and are not "
"available unless GAS is explicitly configured with 64 bit environment "
"support."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7604
msgid ""
"Warn whenever it is necessary to switch to another level. If an architecture "
"level is explicitly requested, GAS will not issue warnings until that level "
"is reached, and will then bump the level as required (except between "
"incompatible levels)."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7605
#, no-wrap
msgid "-32 | -64"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7609
msgid ""
"Select the word size, either 32 bits or 64 bits. These options are only "
"available with the ELF object file format, and require that the necessary "
"BFD support has been included."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7611
#, no-wrap
msgid "Enforcing aligned data"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7617
msgid ""
"SPARC GAS normally permits data to be misaligned. For example, it permits "
"the E<.Li .long> pseudo-op to be used on a byte boundary. However, the "
"native SunOS and Solaris assemblers issue an error when they see misaligned "
"data."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7622
msgid ""
"You can use the E<.Li --enforce-aligned-data> option to make SPARC GAS also "
"issue an error about misaligned data, just as the SunOS and Solaris "
"assemblers do."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7630
msgid ""
"The E<.Li --enforce-aligned-data> option is not the default because gcc "
"issues misaligned data pseudo-ops when it initializes certain packed data "
"structures (structures defined using the E<.Li packed> attribute). You may "
"have to assemble with GAS in order to initialize packed data structures in "
"your own code."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7633
msgid "The Sparc uses ieee floating-point numbers."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7634
#, no-wrap
msgid "Sparc Machine Directives"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7638
msgid ""
"The Sparc version of E<.Li as> supports the following additional machine "
"directives:"
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7640
#, no-wrap
msgid ".align"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7642
msgid "This must be followed by the desired alignment in bytes."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7643
#, no-wrap
msgid ".common"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7649
msgid ""
"This must be followed by a symbol name, a positive number, and E<.Li "
"\"bss\">.  This behaves somewhat like E<.Li .comm>, but the syntax is "
"different."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7650
#, no-wrap
msgid ".half"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7653
msgid "This is functionally identical to E<.Li .short>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7654
#, no-wrap
msgid ".nword"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7662
msgid ""
"On the Sparc, the E<.Li .nword> directive produces native word sized value, "
"ie. if assembling with -32 it is equivalent to E<.Li .word>, if assembling "
"with -64 it is equivalent to E<.Li .xword>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7663
#, no-wrap
msgid ".proc"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7666
msgid ""
"This directive is ignored. Any text following it on the same line is also "
"ignored."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7667
#, no-wrap
msgid ".register"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7677
msgid ""
"This directive declares use of a global application or system register. It "
"must be followed by a register name %g2, %g3, %g6 or %g7, comma and the "
"symbol name for that register. If symbol name is E<.Li #scratch>, it is a "
"scratch register, if it is E<.Li #ignore>, it just suppresses any errors "
"about using undeclared global register, but does not emit any information "
"about it into the object file. This can be useful e.g. if you save the "
"register before use and restore it after."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7678
#, no-wrap
msgid ".reserve"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7684
msgid ""
"This must be followed by a symbol name, a positive number, and E<.Li "
"\"bss\">.  This behaves somewhat like E<.Li .lcomm>, but the syntax is "
"different."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7685
#, no-wrap
msgid ".seg"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7696
msgid ""
"This must be followed by E<.Li \"text\">, E<.Li \"data\">, or E<.Li "
"\"data1\">.  It behaves like E<.Li .text>, E<.Li .data>, or E<.Li .data 1>."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7697
#, no-wrap
msgid ".skip"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7701
msgid "This is functionally identical to the E<.Li .space> directive."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7702
#, no-wrap
msgid ".word"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7707
msgid ""
"On the Sparc, the E<.Li .word> directive produces 32 bit values, instead of "
"the 16 bit values it produces on many other machines."
msgstr ""

#. type: It
#: /usr/src/contrib/binutils/gas/doc/as.7:7708
#, no-wrap
msgid ".xword"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7712
msgid ""
"On the Sparc V9 processor, the E<.Li .xword> directive produces 64 bit "
"values."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:7714
#, no-wrap
msgid "Reporting Bugs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7718
msgid "Your bug reports play an essential role in making E<.Xr as> reliable."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7725
msgid ""
"Reporting a bug may help you by bringing a solution to your problem, or it "
"may not. But in any case the principal function of a bug report is to help "
"the entire community by making the next version of E<.Xr as> work "
"better. Bug reports are your contribution to the maintenance of E<.Xr as>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7728
msgid ""
"In order for a bug report to serve its purpose, you must include the "
"information that enables us to fix the bug."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7729
#, no-wrap
msgid "Have You Found a Bug?"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7731
msgid "If you are not sure whether you have found a bug, here are some guidelines:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7737
msgid ""
"If the assembler gets a fatal signal, for any input whatever, that is a "
"E<.Xr as> bug. Reliable assemblers never crash."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7742
msgid "If E<.Xr as> produces an error message for valid input, that is a bug."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7749
msgid ""
"If E<.Xr as> does not produce an error message for invalid input, that is a "
"bug. However, you should note that your idea of \\(lqinvalid input\\(rq "
"might be our idea of \\(lqan extension\\(rq or \\(lqsupport for traditional "
"practice\\(rq."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7755
msgid ""
"If you are an experienced user of assemblers, your suggestions for "
"improvement of E<.Xr as> are welcome in any case."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:7757
#, no-wrap
msgid "How to Report Bugs"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7762
msgid ""
"A number of companies and individuals offer support for GNU products. If you "
"obtained E<.Xr as> from a support organization, we recommend you contact "
"that organization first."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7767
msgid ""
"You can find contact information for many support companies and individuals "
"in the file E<.Pa etc/SERVICE> in the GNU Emacs distribution."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7771
msgid ""
"The fundamental principle of reporting bugs usefully is this: E<.Sy report "
"all the facts>.  If you are not sure whether to state a fact or leave it "
"out, state it!"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7781
msgid ""
"Often people omit facts because they think they know what causes the problem "
"and assume that some details do not matter. Thus, you might assume that the "
"name of a symbol you use in an example does not matter. Well, probably it "
"does not, but one cannot be sure. Perhaps the bug is a stray memory "
"reference which happens to fetch from the location where that name is stored "
"in memory; perhaps, if the name were different, the contents of that "
"location would fool the assembler into doing the right thing despite the "
"bug. Play it safe and give a specific, complete example. That is the easiest "
"thing for you to do, and the most helpful."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7785
msgid ""
"Keep in mind that the purpose of a bug report is to enable us to fix the bug "
"if it is new to us. Therefore, always write your bug reports on the "
"assumption that the bug has not been reported previously."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7790
msgid ""
"Sometimes people give a few sketchy facts and ask, \\(lqDoes this ring a "
"bell?\\(rq This cannot help us fix a bug, so it is basically useless. We "
"respond by asking for enough details to enable us to investigate. You might "
"as well expedite matters by sending them to begin with."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7792
msgid "To enable us to fix the bug, you should include all these things:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7801
msgid ""
"The version of E<.Xr as>.  E<.Xr as> announces it if you start it with the "
"E<.Li --version> argument."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7805
msgid ""
"Without this, we will not know whether there is any point in looking for the "
"bug in the current version of E<.Xr as>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7810
msgid "Any patches you may have applied to the E<.Xr as> source."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7814
msgid ""
"The type of machine you are using, and the operating system name and version "
"number."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7821
msgid ""
"What compiler (and its version) was used to compile E<.Xr as> ---e.g. \\(lq "
"E<.Li gcc-2.7> \\(rq\\&."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7826
msgid ""
"The command arguments you gave the assembler to assemble your example and "
"observe the bug. To guarantee you will not omit something important, list "
"them all. A copy of the Makefile (or the output from make) is sufficient."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7829
msgid ""
"If we were to try to guess the arguments, we would probably guess wrong and "
"then we might not encounter the bug."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7845
msgid ""
"A complete input file that will reproduce the bug. If the bug is observed "
"when the assembler is invoked via a compiler, send the assembler source, not "
"the high level language source. Most compilers will produce the assembler "
"source when run with the E<.Li -S> option. If you are using E<.Li gcc>, use "
"the options E<.Li -v --save-temps>; this will save the assembler source in a "
"file with an extension of E<.Pa .s>, and also show you exactly how E<.Xr as> "
"is being run."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7849
msgid ""
"A description of what behavior you observe that you believe is incorrect.  "
"For example, \\(lqIt gets a fatal signal.\\(rq"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7855
msgid ""
"Of course, if the bug is that E<.Xr as> gets a fatal signal, then we will "
"certainly notice it. But if the bug is incorrect output, we might not notice "
"unless it is glaringly wrong. You might as well not give us a chance to make "
"a mistake."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7864
msgid ""
"Even if the problem you experience is a fatal signal, you should still say "
"so explicitly. Suppose something strange is going on, such as, your copy of "
"E<.Xr as> is out of sync, or you have encountered a bug in the C library on "
"your system.  (This has happened!) Your copy might crash and ours would "
"not. If you told us to expect a crash, then when ours fails to crash, we "
"would know that the bug was not happening for us. If you had not told us to "
"expect a crash, then we would not be able to draw any conclusion from our "
"observations."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7879
msgid ""
"If you wish to suggest changes to the E<.Xr as> source, send us context "
"diffs, as generated by E<.Li diff> with the E<.Li -u>, E<.Li -c>, or E<.Li "
"-p> option. Always send diffs from the old file to the new file. If you even "
"discuss something in the E<.Xr as> source, refer to it by context, not by "
"line number."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7882
msgid ""
"The line numbers in our development sources will not match those in your "
"sources.  Your line numbers would convey no useful information to us."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7885
msgid "Here are some things that are not necessary:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7889
msgid "A description of the envelope of the bug."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7893
msgid ""
"Often people who encounter a bug spend a lot of time investigating which "
"changes to the input file will make the bug go away and which changes will "
"not affect it."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7898
msgid ""
"This is often time consuming and not very useful, because the way we will "
"find the bug is by running a single example under the debugger with "
"breakpoints, not by pure deduction from a series of examples. We recommend "
"that you save your time for something else."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7904
msgid ""
"Of course, if you can find a simpler example to report E<.Em instead> of the "
"original one, that is a convenience for us. Errors in the output will be "
"easier to spot, running under the debugger will take less time, and so on."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7907
msgid ""
"However, simplification is not vital; if you do not want to do this, report "
"the bug anyway and send us the entire test case you used."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7910
msgid "A patch for the bug."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7915
msgid ""
"A patch for the bug does help us if it is a good one. But do not omit the "
"necessary information, such as the test case, on the assumption that a patch "
"is all we need. We might see problems with your patch and decide to fix the "
"problem another way, or we might not understand it at all."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7922
msgid ""
"Sometimes with a program as complicated as E<.Xr as> it is very hard to "
"construct an example that will make the program follow a certain path "
"through the code. If you do not send us the example, we will not be able to "
"construct one, so we will not be able to verify that the bug is fixed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7926
msgid ""
"And if we cannot understand what bug you are trying to fix, or why your "
"patch should be an improvement, we will not install it. A test case will "
"help us to understand."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7929
msgid "A guess about what the bug is or what it depends on."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7932
msgid ""
"Such guesses are usually wrong. Even we cannot guess right about such things "
"without first using the debugger to find the facts."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:7934
#, no-wrap
msgid "Acknowledgements"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7940
msgid ""
"If you have contributed to GAS and your name isn't listed here, it is not "
"meant as a slight. We just don't know about it. Send mail to the maintainer, "
"and we'll correct the situation. Currently the maintainer is Ken Raeburn "
"(email address E<.Li raeburn@cyGNUs.com>)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7942
msgid "Dean Elsner wrote the original GNU assembler for the VAX."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7949
msgid ""
"Jay Fenlason maintained GAS for a while, adding support for GDB-specific "
"debug information and the 68k series machines, most of the preprocessing "
"pass, and extensive changes in E<.Pa messages.c>, E<.Pa input-file.c>, E<.Pa "
"write.c>."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7961
msgid ""
"K. Richard Pixley maintained GAS for a while, adding various enhancements "
"and many bug fixes, including merging support for several processors, "
"breaking GAS up to handle multiple object file format back ends (including "
"heavy rewrite, testing, an integration of the coff and b.out back ends), "
"adding configuration including heavy testing and verification of cross "
"assemblers and file splits and renaming, converted GAS to strictly ANSI C "
"including full prototypes, added support for m680[34]0 and cpu32, did "
"considerable work on i960 including a COFF port (including considerable "
"amounts of reverse engineering), a SPARC opcode file rewrite, DECstation, "
"rs6000, and hp300hpux host ports, updated \\(lqknow\\(rq assertions and made "
"them work, much other reorganization, cleanup, and lint."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7964
msgid ""
"Ken Raeburn wrote the high-level BFD interface code to replace most of the "
"code in format-specific I/O modules."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7967
msgid ""
"The original VMS support was contributed by David L. Kashtan. Eric Youngdale "
"has done much work with it since."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7969
msgid "The Intel 80386 machine description was written by Eliot Dresselhaus."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7971
msgid "Minh Tran-Le at IntelliCorp contributed some AIX 386 support."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7974
msgid ""
"The Motorola 88k machine description was contributed by Devon Bowen of "
"Buffalo University and Torbjorn Granlund of the Swedish Institute of "
"Computer Science."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7981
msgid ""
"Keith Knowles at the Open Software Foundation wrote the original MIPS back "
"end ( E<.Pa tc-mips.c>, E<.Pa tc-mips.h>), and contributed Rose format "
"support (which hasn't been merged in yet). Ralph Campbell worked with the "
"MIPS code to support a.out format."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7986
msgid ""
"Support for the Zilog Z8k and Renesas H8/300 processors (tc-z8k, tc-h8300), "
"and IEEE 695 object file format (obj-ieee), was written by Steve Chamberlain "
"of CyGNUs Support. Steve also modified the COFF back end to use BFD for some "
"low-level operations, for use with the H8/300 and AMD 29k targets."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:7998
msgid ""
"John Gilmore built the AMD 29000 support, added E<.Li .include> support, and "
"simplified the configuration of which versions accept which directives.  He "
"updated the 68k machine description so that Motorola's opcodes always "
"produced fixed-size instructions (e.g., E<.Li jsr>), while synthetic "
"instructions remained shrinkable ( E<.Li jbsr>).  John fixed many bugs, "
"including true tested cross-compilation support, and one bug in relaxation "
"that took a week and required the proverbial one-bit fix."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8003
msgid ""
"Ian Lance Taylor of CyGNUs Support merged the Motorola and MIT syntax for "
"the 68k, completed support for some COFF targets (68k, i386 SVR3, and SCO "
"Unix), added support for MIPS ECOFF and ELF targets, wrote the initial "
"RS/6000 and PowerPC assembler, and made a few other minor patches."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8005
msgid "Steve Chamberlain made GAS able to generate listings."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8007
msgid "Hewlett-Packard contributed support for the HP9000/300."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8012
msgid ""
"Jeff Law wrote GAS and BFD support for the native HPPA object format (SOM)  "
"along with a fairly extensive HPPA testsuite (for both SOM and ELF object "
"formats). This work was supported by both the Center for Software Science at "
"the University of Utah and CyGNUs Support."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8018
msgid ""
"Support for ELF format files has been worked on by Mark Eichin of CyGNUs "
"Support (original, incomplete implementation for SPARC), Pete Hoogenboom and "
"Jeff Law at the University of Utah (HPPA mainly), Michael Meissner of the "
"Open Software Foundation (i386 mainly), and Ken Raeburn of CyGNUs Support "
"(sparc, and some initial 64-bit support)."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8020
msgid ""
"Linas Vepstas added GAS support for the ESA/390 \\(lqIBM 370\\(rq "
"architecture."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8023
msgid ""
"Richard Henderson rewrote the Alpha assembler. Klaus Kaempf wrote GAS and "
"BFD support for openVMS/Alpha."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8026
msgid ""
"Timothy Wall, Michael Hayes, and Greg Smart contributed to the various tic* "
"flavors."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8029
msgid ""
"David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from "
"Tensilica, Inc. added support for Xtensa processors."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8032
msgid ""
"Several engineers at CyGNUs Support have also provided many small bug fixes "
"and configuration enhancements."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8037
msgid ""
"Many others have contributed large or small bugfixes and enhancements. If "
"you have contributed significant work and are not mentioned on this list, "
"and want to be, let us know. Some of the history has been lost; we are not "
"intentionally leaving anyone out."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:8038
#, no-wrap
msgid "GNU Free Documentation License"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8042
#, no-wrap
msgid ""
"Copyright (C) 2000, 2003 Free Software Foundation, Inc. 51 Franklin "
"Street,\n"
"Fifth Floor, Boston, MA 02110-1301 USA\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8045
#, no-wrap
msgid ""
"Everyone is permitted to copy and distribute verbatim copies of this "
"license\n"
"document, but changing it is not allowed.\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8050
msgid "PREAMBLE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8057
msgid ""
"The purpose of this License is to make a manual, textbook, or other written "
"document \\(lqfree\\(rq in the sense of freedom: to assure everyone the "
"effective freedom to copy and redistribute it, with or without modifying it, "
"either commercially or noncommercially. Secondarily, this License preserves "
"for the author and publisher a way to get credit for their work, while not "
"being considered responsible for modifications made by others."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8061
msgid ""
"This License is a kind of \\(lqcopyleft\\(rq, which means that derivative "
"works of the document must themselves be free in the same sense. It "
"complements the GNU General Public License, which is a copyleft license "
"designed for free software."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8069
msgid ""
"We have designed this License in order to use it for manuals for free "
"software, because free software needs free documentation: a free program "
"should come with manuals providing the same freedoms that the software "
"does. But this License is not limited to software manuals; it can be used "
"for any textual work, regardless of subject matter or whether it is "
"published as a printed book. We recommend this License principally for works "
"whose purpose is instruction or reference."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8072
msgid "APPLICABILITY AND DEFINITIONS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8077
msgid ""
"This License applies to any manual or other work that contains a notice "
"placed by the copyright holder saying it can be distributed under the terms "
"of this License. The \\(lqDocument\\(rq, below, refers to any such manual or "
"work. Any member of the public is a licensee, and is addressed as "
"\\(lqyou.\\(rq"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8081
msgid ""
"A \\(lqModified Version\\(rq of the Document means any work containing the "
"Document or a portion of it, either copied verbatim, or with modifications "
"and/or translated into another language."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8090
msgid ""
"A \\(lqSecondary Section\\(rq is a named appendix or a front-matter section "
"of the Document that deals exclusively with the relationship of the "
"publishers or authors of the Document to the Document's overall subject (or "
"to related matters)  and contains nothing that could fall directly within "
"that overall subject.  (For example, if the Document is in part a textbook "
"of mathematics, a Secondary Section may not explain any mathematics.) The "
"relationship could be a matter of historical connection with the subject or "
"with related matters, or of legal, commercial, philosophical, ethical or "
"political position regarding them."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8094
msgid ""
"The \\(lqInvariant Sections\\(rq are certain Secondary Sections whose titles "
"are designated, as being those of Invariant Sections, in the notice that "
"says that the Document is released under this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8098
msgid ""
"The \\(lqCover Texts\\(rq are certain short passages of text that are "
"listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says "
"that the Document is released under this License."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8109
msgid ""
"A \\(lqTransparent\\(rq copy of the Document means a machine-readable copy, "
"represented in a format whose specification is available to the general "
"public, whose contents can be viewed and edited directly and "
"straightforwardly with generic text editors or (for images composed of "
"pixels) generic paint programs or (for drawings) some widely available "
"drawing editor, and that is suitable for input to text formatters or for "
"automatic translation to a variety of formats suitable for input to text "
"formatters. A copy made in an otherwise Transparent file format whose markup "
"has been designed to thwart or discourage subsequent modification by readers "
"is not Transparent. A copy that is not \\(lqTransparent\\(rq is called "
"\\(lqOpaque.\\(rq"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8117
msgid ""
"Examples of suitable formats for Transparent copies include plain ASCII "
"without markup, Texinfo input format, LaTeX input format, SGML or XML using "
"a publicly available DTD, and standard-conforming simple HTML designed for "
"human modification.  Opaque formats include PostScript, PDF, proprietary "
"formats that can be read and edited only by proprietary word processors, "
"SGML or XML for which the DTD and/or processing tools are not generally "
"available, and the machine-generated HTML produced by some word processors "
"for output purposes only."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8124
msgid ""
"The \\(lqTitle Page\\(rq means, for a printed book, the title page itself, "
"plus such following pages as are needed to hold, legibly, the material this "
"License requires to appear in the title page. For works in formats which do "
"not have any title page as such, \\(lqTitle Page\\(rq means the text near "
"the most prominent appearance of the work's title, preceding the beginning "
"of the body of the text."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8127
msgid "VERBATIM COPYING"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8136
msgid ""
"You may copy and distribute the Document in any medium, either commercially "
"or noncommercially, provided that this License, the copyright notices, and "
"the license notice saying this License applies to the Document are "
"reproduced in all copies, and that you add no other conditions whatsoever to "
"those of this License. You may not use technical measures to obstruct or "
"control the reading or further copying of the copies you make or "
"distribute. However, you may accept compensation in exchange for copies. If "
"you distribute a large enough number of copies you must also follow the "
"conditions in section 3."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8139
msgid ""
"You may also lend copies, under the same conditions stated above, and you "
"may publicly display copies."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8142
msgid "COPYING IN QUANTITY"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8153
msgid ""
"If you publish printed copies of the Document numbering more than 100, and "
"the Document's license notice requires Cover Texts, you must enclose the "
"copies in covers that carry, clearly and legibly, all these Cover Texts: "
"Front-Cover Texts on the front cover, and Back-Cover Texts on the back "
"cover. Both covers must also clearly and legibly identify you as the "
"publisher of these copies.  The front cover must present the full title with "
"all words of the title equally prominent and visible. You may add other "
"material on the covers in addition.  Copying with changes limited to the "
"covers, as long as they preserve the title of the Document and satisfy these "
"conditions, can be treated as verbatim copying in other respects."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8157
msgid ""
"If the required texts for either cover are too voluminous to fit legibly, "
"you should put the first ones listed (as many as fit reasonably) on the "
"actual cover, and continue the rest onto adjacent pages."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8169
msgid ""
"If you publish or distribute Opaque copies of the Document numbering more "
"than 100, you must either include a machine-readable Transparent copy along "
"with each Opaque copy, or state in or with each Opaque copy a "
"publicly-accessible computer-network location containing a complete "
"Transparent copy of the Document, free of added material, which the general "
"network-using public has access to download anonymously at no charge using "
"public-standard network protocols.  If you use the latter option, you must "
"take reasonably prudent steps, when you begin distribution of Opaque copies "
"in quantity, to ensure that this Transparent copy will remain thus "
"accessible at the stated location until at least one year after the last "
"time you distribute an Opaque copy (directly or through your agents or "
"retailers) of that edition to the public."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8173
msgid ""
"It is requested, but not required, that you contact the authors of the "
"Document well before redistributing any large number of copies, to give them "
"a chance to provide you with an updated version of the Document."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8176
msgid "MODIFICATIONS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8183
msgid ""
"You may copy and distribute a Modified Version of the Document under the "
"conditions of sections 2 and 3 above, provided that you release the Modified "
"Version under precisely this License, with the Modified Version filling the "
"role of the Document, thus licensing distribution and modification of the "
"Modified Version to whoever possesses a copy of it. In addition, you must do "
"these things in the Modified Version:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8220
msgid ""
"A. Use in the Title Page (and on the covers, if any) a title distinct from "
"that of the Document, and from those of previous versions (which should, if "
"there were any, be listed in the History section of the Document). You may "
"use the same title as a previous version if the original publisher of that "
"version gives permission.  B. List on the Title Page, as authors, one or "
"more persons or entities responsible for authorship of the modifications in "
"the Modified Version, together with at least five of the principal authors "
"of the Document (all of its principal authors, if it has less than five).  "
"C.  State on the Title page the name of the publisher of the Modified "
"Version, as the publisher.  D. Preserve all the copyright notices of the "
"Document.  E. Add an appropriate copyright notice for your modifications "
"adjacent to the other copyright notices.  F. Include, immediately after the "
"copyright notices, a license notice giving the public permission to use the "
"Modified Version under the terms of this License, in the form shown in the "
"Addendum below.  G. Preserve in that license notice the full lists of "
"Invariant Sections and required Cover Texts given in the Document's license "
"notice.  H. Include an unaltered copy of this License.  I. Preserve the "
"section entitled \\(lqHistory\\(rq, and its title, and add to it an item "
"stating at least the title, year, new authors, and publisher of the Modified "
"Version as given on the Title Page.  If there is no section entitled "
"\\(lqHistory\\(rq in the Document, create one stating the title, year, "
"authors, and publisher of the Document as given on its Title Page, then add "
"an item describing the Modified Version as stated in the previous sentence.  "
"J. Preserve the network location, if any, given in the Document for public "
"access to a Transparent copy of the Document, and likewise the network "
"locations given in the Document for previous versions it was based on. These "
"may be placed in the \\(lqHistory\\(rq section. You may omit a network "
"location for a work that was published at least four years before the "
"Document itself, or if the original publisher of the version it refers to "
"gives permission.  K. In any section entitled \\(lqAcknowledgements\\(rq or "
"\\(lqDedications\\(rq, preserve the section's title, and preserve in the "
"section all the substance and tone of each of the contributor "
"acknowledgements and/or dedications given therein.  L. Preserve all the "
"Invariant Sections of the Document, unaltered in their text and in their "
"titles. Section numbers or the equivalent are not considered part of the "
"section titles.  M. Delete any section entitled \\(lqEndorsements.\\(rq Such "
"a section may not be included in the Modified Version.  N. Do not retitle "
"any existing section as \\(lqEndorsements\\(rq or to conflict in title with "
"any Invariant Section."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8227
msgid ""
"If the Modified Version includes new front-matter sections or appendices "
"that qualify as Secondary Sections and contain no material copied from the "
"Document, you may at your option designate some or all of these sections as "
"invariant.  To do this, add their titles to the list of Invariant Sections "
"in the Modified Version's license notice. These titles must be distinct from "
"any other section titles."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8232
msgid ""
"You may add a section entitled \\(lqEndorsements\\(rq, provided it contains "
"nothing but endorsements of your Modified Version by various parties--for "
"example, statements of peer review or that the text has been approved by an "
"organization as the authoritative definition of a standard."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8241
msgid ""
"You may add a passage of up to five words as a Front-Cover Text, and a "
"passage of up to 25 words as a Back-Cover Text, to the end of the list of "
"Cover Texts in the Modified Version. Only one passage of Front-Cover Text "
"and one of Back-Cover Text may be added by (or through arrangements made by) "
"any one entity. If the Document already includes a cover text for the same "
"cover, previously added by you or by arrangement made by the same entity you "
"are acting on behalf of, you may not add another; but you may replace the "
"old one, on explicit permission from the previous publisher that added the "
"old one."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8245
msgid ""
"The author(s) and publisher(s) of the Document do not by this License give "
"permission to use their names for publicity for or to assert or imply "
"endorsement of any Modified Version."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8248
msgid "COMBINING DOCUMENTS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8254
msgid ""
"You may combine the Document with other documents released under this "
"License, under the terms defined in section 4 above for modified versions, "
"provided that you include in the combination all of the Invariant Sections "
"of all of the original documents, unmodified, and list them all as Invariant "
"Sections of your combined work in its license notice."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8263
msgid ""
"The combined work need only contain one copy of this License, and multiple "
"identical Invariant Sections may be replaced with a single copy. If there "
"are multiple Invariant Sections with the same name but different contents, "
"make the title of each such section unique by adding at the end of it, in "
"parentheses, the name of the original author or publisher of that section if "
"known, or else a unique number. Make the same adjustment to the section "
"titles in the list of Invariant Sections in the license notice of the "
"combined work."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8268
msgid ""
"In the combination, you must combine any sections entitled \\(lqHistory\\(rq "
"in the various original documents, forming one section entitled "
"\\(lqHistory\\(rq; likewise combine any sections entitled "
"\\(lqAcknowledgements\\(rq, and any sections entitled \\(lqDedications.\\(rq "
"You must delete all sections entitled \\(lqEndorsements.\\(rq"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8271
msgid "COLLECTIONS OF DOCUMENTS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8277
msgid ""
"You may make a collection consisting of the Document and other documents "
"released under this License, and replace the individual copies of this "
"License in the various documents with a single copy that is included in the "
"collection, provided that you follow the rules of this License for verbatim "
"copying of each of the documents in all other respects."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8282
msgid ""
"You may extract a single document from such a collection, and distribute it "
"individually under this License, provided you insert a copy of this License "
"into the extracted document, and follow this License in all other respects "
"regarding verbatim copying of that document."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8285
msgid "AGGREGATION WITH INDEPENDENT WORKS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8293
msgid ""
"A compilation of the Document or its derivatives with other separate and "
"independent documents or works, in or on a volume of a storage or "
"distribution medium, does not as a whole count as a Modified Version of the "
"Document, provided no compilation copyright is claimed for the "
"compilation. Such a compilation is called an \\(lqaggregate\\(rq, and this "
"License does not apply to the other self-contained works thus compiled with "
"the Document, on account of their being thus compiled, if they are not "
"themselves derivative works of the Document."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8299
msgid ""
"If the Cover Text requirement of section 3 is applicable to these copies of "
"the Document, then if the Document is less than one quarter of the entire "
"aggregate, the Document's Cover Texts may be placed on covers that surround "
"only the Document within the aggregate. Otherwise they must appear on covers "
"around the whole aggregate."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8302
msgid "TRANSLATION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8312
msgid ""
"Translation is considered a kind of modification, so you may distribute "
"translations of the Document under the terms of section 4. Replacing "
"Invariant Sections with translations requires special permission from their "
"copyright holders, but you may include translations of some or all Invariant "
"Sections in addition to the original versions of these Invariant "
"Sections. You may include a translation of this License provided that you "
"also include the original English version of this License. In case of a "
"disagreement between the translation and the original English version of "
"this License, the original English version will prevail."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8315
msgid "TERMINATION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8322
msgid ""
"You may not copy, modify, sublicense, or distribute the Document except as "
"expressly provided for under this License. Any other attempt to copy, "
"modify, sublicense or distribute the Document is void, and will "
"automatically terminate your rights under this License. However, parties who "
"have received copies, or rights, from you under this License will not have "
"their licenses terminated so long as such parties remain in full compliance."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8325
msgid "FUTURE REVISIONS OF THIS LICENSE"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8330
msgid ""
"The Free Software Foundation may publish new, revised versions of the GNU "
"Free Documentation License from time to time. Such new versions will be "
"similar in spirit to the present version, but may differ in detail to "
"address new problems or concerns. See http://www.gnu.org/copyleft/."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8338
msgid ""
"Each version of the License is given a distinguishing version number. If the "
"Document specifies that a particular numbered version of this License "
"\\(lqor any later version\\(rq applies to it, you have the option of "
"following the terms and conditions either of that specified version or of "
"any later version that has been published (not as a draft) by the Free "
"Software Foundation. If the Document does not specify a version number of "
"this License, you may choose any version ever published (not as a draft) by "
"the Free Software Foundation."
msgstr ""

#. type: Ss
#: /usr/src/contrib/binutils/gas/doc/as.7:8340
#, no-wrap
msgid "ADDENDUM: How to use this License for your documents"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8344
msgid ""
"To use this License in a document you have written, include a copy of the "
"License in the document and put the following copyright and license notices "
"just after the title page:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8355
#, no-wrap
msgid ""
"Copyright (C)  year  your name.\n"
"Permission is granted to copy, distribute and/or modify this document\n"
"under the terms of the GNU Free Documentation License, Version 1.1\n"
"or any later version published by the Free Software Foundation;\n"
"with the Invariant Sections being list their titles, with the\n"
"Front-Cover Texts being list, and with the Back-Cover Texts being list.\n"
"A copy of the license is included in the section entitled \"GNU\n"
"Free Documentation License.\"\n"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8363
msgid ""
"If you have no Invariant Sections, write \\(lqwith no Invariant "
"Sections\\(rq instead of saying which ones are invariant. If you have no "
"Front-Cover Texts, write \\(lqno Front-Cover Texts\\(rq instead of "
"\\(lqFront-Cover Texts being E<.Va list> \\(rq; likewise for Back-Cover "
"Texts."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/binutils/gas/doc/as.7:8367
msgid ""
"If your document contains nontrivial examples of program code, we recommend "
"releasing these examples in parallel under your choice of free software "
"license, such as the GNU General Public License, to permit their use in free "
"software."
msgstr ""

#. type: Sh
#: /usr/src/contrib/binutils/gas/doc/as.7:8368
#, no-wrap
msgid "AS Index"
msgstr ""
