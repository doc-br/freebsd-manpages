# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2019-05-18 14:32-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: TH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:2
#, no-wrap
msgid "RDMA_CM"
msgstr ""

#. type: TH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:2
#, no-wrap
msgid "2010-07-19"
msgstr ""

#. type: TH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:2
#, no-wrap
msgid "librdmacm"
msgstr ""

#. type: TH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:2
#, no-wrap
msgid "Librdmacm Programmer's Manual"
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:3
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:5
msgid "rdma_cm - RDMA communication manager."
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:5
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:7
msgid "B<#include E<lt>rdma/rdma_cma.hE<gt>>"
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:7
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:9
msgid "Used to establish communication over RDMA transports."
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:9
#, no-wrap
msgid "NOTES"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:16
msgid ""
"The RDMA CM is a communication manager used to setup reliable, connected and "
"unreliable datagram data transfers.  It provides an RDMA transport neutral "
"interface for establishing connections.  The API concepts are based on "
"sockets, but adapted for queue pair (QP) based semantics: communication must "
"be over a specific RDMA device, and data transfers are message based."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:22
msgid ""
"The RDMA CM can control both the QP and communication management (connection "
"setup / teardown) portions of an RDMA API, or only the communication "
"management piece.  It works in conjunction with the verbs API defined by the "
"libibverbs library.  The libibverbs library provides the underlying "
"interfaces needed to send and receive data."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:29
msgid ""
"The RDMA CM can operate asynchronously or synchronously.  The mode of "
"operation is controlled by the user through the use of the rdma_cm event "
"channel parameter in specific calls.  If an event channel is provided, an "
"rdma_cm identifier will report its event data (results of connecting, for "
"example), on that channel.  If a channel is not provided, then all rdma_cm "
"operations for the selected rdma_cm identifier will block until they "
"complete."
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:29
#, no-wrap
msgid "RDMA VERBS"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:34
msgid ""
"The rdma_cm supports the full range of verbs available through the "
"libibverbs library and interfaces.  However, it also provides wrapper "
"functions for some of the more commonly used verbs funcationality.  The full "
"set of abstracted verb calls are:"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:36
msgid "rdma_reg_msgs - register an array of buffers for sending and receiving"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:38
msgid "rdma_reg_read - registers a buffer for RDMA read operations"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:40
msgid "rdma_reg_write - registers a buffer for RDMA write operations"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:42
msgid "rdma_dereg_mr - deregisters a memory region"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:44
msgid "rdma_post_recv - post a buffer to receive a message"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:46
msgid "rdma_post_send - post a buffer to send a message"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:48
msgid "rdma_post_read - post an RDMA to read data into a buffer"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:50
msgid "rdma_post_write - post an RDMA to send data from a buffer"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:52
msgid "rdma_post_recvv - post a vector of buffers to receive a message"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:54
msgid "rdma_post_sendv - post a vector of buffers to send a message"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:56
msgid "rdma_post_readv - post a vector of buffers to receive an RDMA read"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:58
msgid "rdma_post_writev - post a vector of buffers to send an RDMA write"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:60
msgid "rdma_post_ud_send - post a buffer to send a message on a UD QP"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:62
msgid "rdma_get_send_comp - get completion status for a send or RDMA operation"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:64
msgid "rdma_get_recv_comp - get information about a completed receive"
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:64
#, no-wrap
msgid "CLIENT OPERATION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:74
msgid ""
"This section provides a general overview of the basic operation for the "
"active, or client, side of communication.  This flow assume asynchronous "
"operation with low level call details shown.  For synchronous operation, "
"calls to rdma_create_event_channel, rdma_get_cm_event, rdma_ack_cm_event, "
"and rdma_destroy_event_channel would be eliminated.  Abstracted calls, such "
"as rdma_create_ep encapsulate several of these calls under a single API.  "
"Users may also refer to the example applications for code samples.  A "
"general connection flow would be:"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:74
#, no-wrap
msgid "rdma_getaddrinfo"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:76
msgid "retrieve address information of the destination"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:76 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:124
#, no-wrap
msgid "rdma_create_event_channel"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:78 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:126
msgid "create channel to receive events"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:78 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:126
#, no-wrap
msgid "rdma_create_id"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:80 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:128
msgid "allocate an rdma_cm_id, this is conceptually similar to a socket"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:80
#, no-wrap
msgid "rdma_resolve_addr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:82
msgid "obtain a local RDMA device to reach the remote address"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:82 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:90 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:96 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:104 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:132 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:140 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:146
#, no-wrap
msgid "rdma_get_cm_event"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:84
msgid "wait for RDMA_CM_EVENT_ADDR_RESOLVED event"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:84 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:92 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:98 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:106 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:138 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:142 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:148
#, no-wrap
msgid "rdma_ack_cm_event"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:86 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:94 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:100 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:108 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:140 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:144 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:150
msgid "ack event"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:86 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:134
#, no-wrap
msgid "rdma_create_qp"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:88
msgid "allocate a QP for the communication"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:88
#, no-wrap
msgid "rdma_resolve_route"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:90
msgid "determine the route to the remote address"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:92
msgid "wait for RDMA_CM_EVENT_ROUTE_RESOLVED event"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:94
#, no-wrap
msgid "rdma_connect"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:96
msgid "connect to the remote server"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:98 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:142
msgid "wait for RDMA_CM_EVENT_ESTABLISHED event"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:102 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:146
msgid "Perform data transfers over connection"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:102 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:150
#, no-wrap
msgid "rdma_disconnect"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:104 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:152
msgid "tear-down connection"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:106 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:148
msgid "wait for RDMA_CM_EVENT_DISCONNECTED event"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:108 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:152
#, no-wrap
msgid "rdma_destroy_qp"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:110 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:154
msgid "destroy the QP"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:110 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:154 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:156
#, no-wrap
msgid "rdma_destroy_id"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:112
msgid "release the rdma_cm_id"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:112 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:158
#, no-wrap
msgid "rdma_destroy_event_channel"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:114 /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:160
msgid "release the event channel"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:118
msgid ""
"An almost identical process is used to setup unreliable datagram (UD)  "
"communication between nodes.  No actual connection is formed between QPs "
"however, so disconnection is not needed."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:121
msgid ""
"Although this example shows the client initiating the disconnect, either "
"side of a connection may initiate the disconnect."
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:121
#, no-wrap
msgid "SERVER OPERATION"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:124
msgid ""
"This section provides a general overview of the basic operation for the "
"passive, or server, side of communication.  A general connection flow would "
"be:"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:128
#, no-wrap
msgid "rdma_bind_addr"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:130
msgid "set the local port number to listen on"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:130
#, no-wrap
msgid "rdma_listen"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:132
msgid "begin listening for connection requests"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:134
msgid "wait for RDMA_CM_EVENT_CONNECT_REQUEST event with a new rdma_cm_id"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:136
msgid "allocate a QP for the communication on the new rdma_cm_id"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:136
#, no-wrap
msgid "rdma_accept"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:138
msgid "accept the connection request"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:156
msgid "release the connected rdma_cm_id"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:158
msgid "release the listening rdma_cm_id"
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:160
#, no-wrap
msgid "RETURN CODES"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:161
#, no-wrap
msgid "=  0"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:163
msgid "success"
msgstr ""

#. type: IP
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:163
#, no-wrap
msgid "= -1"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:165
msgid "error - see errno for more details"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:172
msgid ""
"Most librdmacm functions return 0 to indicate success, and a -1 return value "
"to indicate failure.  If a function operates asynchronously, a return value "
"of 0 means that the operation was successfully started.  The operation could "
"still complete in error; users should check the status of the related "
"event.  If the return value is -1, then errno will contain additional "
"information regarding the reason for the failure."
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:177
msgid ""
"Prior versions of the library would return -errno and not set errno for some "
"cases related to ENOMEM, ENODEV, ENODATA, EINVAL, and EADDRNOTAVAIL "
"codes. Applications that want to check these codes and have compatibility "
"with prior library versions must manually set errno to the negative of the "
"return code if it is E<lt> -1."
msgstr ""

#. type: SH
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:177
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Plain text
#: /usr/src/contrib/ofed/librdmacm/man/rdma_cm.7:230
msgid ""
"rdma_accept(3), rdma_ack_cm_event(3), rdma_bind_addr(3), rdma_connect(3), "
"rdma_create_ep(3), rdma_create_event_channel(3), rdma_create_id(3), "
"rdma_create_qp(3), rdma_dereg_mr(3), rdma_destroy_ep(3), "
"rdma_destroy_event_channel(3), rdma_destroy_id(3), rdma_destroy_qp(3), "
"rdma_disconnect(3), rdma_event_str(3), rdma_free_devices(3), "
"rdma_getaddrinfo(3), rdma_get_cm_event(3), rdma_get_devices(3), "
"rdma_get_dst_port(3), rdma_get_local_addr(3), rdma_get_peer_addr(3), "
"rdma_get_recv_comp(3), rdma_get_request(3), rdma_get_send_comp(3), "
"rdma_get_src_port(3), rdma_join_multicast(3), rdma_leave_multicast(3), "
"rdma_listen(3), rdma_migrate_id(3), rdma_notify(3), rdma_post_read(3)  "
"rdma_post_readv(3), rdma_post_recv(3), rdma_post_recvv(3), "
"rdma_post_send(3), rdma_post_sendv(3), rdma_post_ud_send(3), "
"rdma_post_write(3), rdma_post_writev(3), rdma_reg_msgs(3), rdma_reg_read(3), "
"rdma_reg_write(3), rdma_reject(3), rdma_resolve_addr(3), "
"rdma_resolve_route(3), rdma_set_option(3)  mckey(1), rdma_client(1), "
"rdma_server(1), rping(1), ucmatose(1), udaddy(1)"
msgstr ""
